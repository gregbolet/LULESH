1,2c1,2
< ; ModuleID = '/g/g15/bolet1/workspace/lulesh/lulesh.cc'
< source_filename = "/g/g15/bolet1/workspace/lulesh/lulesh.cc"
---
> ; ModuleID = '/g/g15/bolet1/workspace/lulesh-region-fix-correct/LULESH/lulesh.cc'
> source_filename = "/g/g15/bolet1/workspace/lulesh-region-fix-correct/LULESH/lulesh.cc"
7,63c7,12
< %class.Apollo = type { i32, i32, i32, i32, i8*, %"class.std::map", %"class.std::map.0", i64 }
< %"class.std::map" = type { %"class.std::_Rb_tree" }
< %"class.std::_Rb_tree" = type { %"struct.std::_Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, Apollo::Region *>, std::_Select1st<std::pair<const std::basic_string<char>, Apollo::Region *>>, std::less<std::basic_string<char>>>::_Rb_tree_impl" }
< %"struct.std::_Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, Apollo::Region *>, std::_Select1st<std::pair<const std::basic_string<char>, Apollo::Region *>>, std::less<std::basic_string<char>>>::_Rb_tree_impl" = type { %"struct.std::less", %"struct.std::_Rb_tree_node_base", i64 }
< %"struct.std::less" = type { i8 }
< %"struct.std::_Rb_tree_node_base" = type { i32, %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* }
< %"class.std::map.0" = type { %"class.std::_Rb_tree.1" }
< %"class.std::_Rb_tree.1" = type { %"struct.std::_Rb_tree<std::vector<float>, std::pair<const std::vector<float>, std::pair<int, double>>, std::_Select1st<std::pair<const std::vector<float>, std::pair<int, double>>>, std::less<std::vector<float>>>::_Rb_tree_impl" }
< %"struct.std::_Rb_tree<std::vector<float>, std::pair<const std::vector<float>, std::pair<int, double>>, std::_Select1st<std::pair<const std::vector<float>, std::pair<int, double>>>, std::less<std::vector<float>>>::_Rb_tree_impl" = type { %"struct.std::less.5", %"struct.std::_Rb_tree_node_base", i64 }
< %"struct.std::less.5" = type { i8 }
< %"class.Apollo::Region" = type { [64 x i8], i32, i32, %"struct.Apollo::CallbackDataPool"*, %"class.std::map.0", %"class.std::map.20", %"class.std::unique_ptr", %"class.std::unique_ptr.33", %"class.Apollo::PapiCounters"*, %"class.std::map.63", i32, %class.Apollo*, %"struct.Apollo::RegionContext"*, %"class.std::basic_ofstream", %"class.std::vector.68" }
< %"struct.Apollo::CallbackDataPool" = type { i32 (...)** }
< %"class.std::map.20" = type { %"class.std::_Rb_tree.21" }
< %"class.std::_Rb_tree.21" = type { %"struct.std::_Rb_tree<std::pair<std::vector<float>, int>, std::pair<const std::pair<std::vector<float>, int>, std::unique_ptr<Apollo::Region::Measure>>, std::_Select1st<std::pair<const std::pair<std::vector<float>, int>, std::unique_ptr<Apollo::Region::Measure>>>, std::less<std::pair<std::vector<float>, int>>>::_Rb_tree_impl" }
< %"struct.std::_Rb_tree<std::pair<std::vector<float>, int>, std::pair<const std::pair<std::vector<float>, int>, std::unique_ptr<Apollo::Region::Measure>>, std::_Select1st<std::pair<const std::pair<std::vector<float>, int>, std::unique_ptr<Apollo::Region::Measure>>>, std::less<std::pair<std::vector<float>, int>>>::_Rb_tree_impl" = type { %"struct.std::less.25", %"struct.std::_Rb_tree_node_base", i64 }
< %"struct.std::less.25" = type { i8 }
< %"class.std::unique_ptr" = type { %"class.std::tuple" }
< %"class.std::tuple" = type { %"struct.std::_Tuple_impl" }
< %"struct.std::_Tuple_impl" = type { %"struct.std::_Head_base.29" }
< %"struct.std::_Head_base.29" = type { %class.TimingModel* }
< %class.TimingModel = type { i32 (...)**, %"class.std::basic_string" }
< %"class.std::basic_string" = type { %"struct.std::basic_string<char>::_Alloc_hider" }
< %"struct.std::basic_string<char>::_Alloc_hider" = type { i8* }
< %"class.std::unique_ptr.33" = type { %"class.std::tuple.34" }
< %"class.std::tuple.34" = type { %"struct.std::_Tuple_impl.35" }
< %"struct.std::_Tuple_impl.35" = type { %"struct.std::_Head_base.40" }
< %"struct.std::_Head_base.40" = type { %class.PolicyModel* }
< %class.PolicyModel = type <{ i32 (...)**, i32, [4 x i8], %"class.std::basic_string", i8, [7 x i8] }>
< %"class.Apollo::PapiCounters" = type { %"class.Apollo::PerfCounter", i32, i32, %"class.std::vector.41", %"class.util::spinlock", %"class.std::vector.46", %"class.std::map.51", %"class.std::map.58", i32* }
< %"class.Apollo::PerfCounter" = type { i32 (...)** }
< %"class.std::vector.41" = type { %"struct.std::_Vector_base.42" }
< %"struct.std::_Vector_base.42" = type { %"struct.std::_Vector_base<std::basic_string<char>, std::allocator<std::basic_string<char>>>::_Vector_impl" }
< %"struct.std::_Vector_base<std::basic_string<char>, std::allocator<std::basic_string<char>>>::_Vector_impl" = type { %"class.std::basic_string"*, %"class.std::basic_string"*, %"class.std::basic_string"* }
< %"class.util::spinlock" = type { %"struct.std::atomic_flag" }
< %"struct.std::atomic_flag" = type { %"struct.std::__atomic_flag_base" }
< %"struct.std::__atomic_flag_base" = type { i8 }
< %"class.std::vector.46" = type { %"struct.std::_Vector_base.47" }
< %"struct.std::_Vector_base.47" = type { %"struct.std::_Vector_base<long long *, std::allocator<long long *>>::_Vector_impl" }
< %"struct.std::_Vector_base<long long *, std::allocator<long long *>>::_Vector_impl" = type { i64**, i64**, i64** }
< %"class.std::map.51" = type { %"class.std::_Rb_tree.52" }
< %"class.std::_Rb_tree.52" = type { %"struct.std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int>>, std::less<int>>::_Rb_tree_impl" }
< %"struct.std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int>>, std::less<int>>::_Rb_tree_impl" = type { %"struct.std::less.56", %"struct.std::_Rb_tree_node_base", i64 }
< %"struct.std::less.56" = type { i8 }
< %"class.std::map.58" = type { %"class.std::_Rb_tree.59" }
< %"class.std::_Rb_tree.59" = type { %"struct.std::_Rb_tree<int, std::pair<const int, long long *>, std::_Select1st<std::pair<const int, long long *>>, std::less<int>>::_Rb_tree_impl" }
< %"struct.std::_Rb_tree<int, std::pair<const int, long long *>, std::_Select1st<std::pair<const int, long long *>>, std::less<int>>::_Rb_tree_impl" = type { %"struct.std::less.56", %"struct.std::_Rb_tree_node_base", i64 }
< %"class.std::map.63" = type { %"class.std::_Rb_tree.64" }
< %"class.std::_Rb_tree.64" = type { %"struct.std::_Rb_tree<std::vector<float>, std::pair<const std::vector<float>, std::vector<float>>, std::_Select1st<std::pair<const std::vector<float>, std::vector<float>>>, std::less<std::vector<float>>>::_Rb_tree_impl" }
< %"struct.std::_Rb_tree<std::vector<float>, std::pair<const std::vector<float>, std::vector<float>>, std::_Select1st<std::pair<const std::vector<float>, std::vector<float>>>, std::less<std::vector<float>>>::_Rb_tree_impl" = type { %"struct.std::less.5", %"struct.std::_Rb_tree_node_base", i64 }
< %"struct.Apollo::RegionContext" = type { double, double, %"class.std::vector.15", i32, i64, i1 (i8*, i8*, double*)*, i8* }
< %"class.std::vector.15" = type { %"struct.std::_Vector_base.16" }
< %"struct.std::_Vector_base.16" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" }
< %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" = type { float*, float*, float* }
< %"class.std::basic_ofstream" = type { %"class.std::basic_ostream.base", %"class.std::basic_filebuf", %"class.std::basic_ios" }
< %"class.std::basic_ostream.base" = type { i32 (...)** }
< %"class.std::basic_filebuf" = type { %"class.std::basic_streambuf", %union.pthread_mutex_t, %"class.std::__basic_file", i32, %struct.__mbstate_t, %struct.__mbstate_t, %struct.__mbstate_t, i8*, i64, i8, i8, i8, i8, i8*, i8*, i8, %"class.std::codecvt"*, i8*, i64, i8*, i8* }
< %"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
---
> %struct.ident_t = type { i32, i32, i32, i32, i8* }
> %"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
> %"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
> %"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
> %"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
> %"struct.std::ios_base::_Words" = type { i8*, i64 }
67,76c16,17
< %union.pthread_mutex_t = type { %"struct.(anonymous union)::__pthread_mutex_s" }
< %"struct.(anonymous union)::__pthread_mutex_s" = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
< %struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
< %"class.std::__basic_file" = type <{ %struct._IO_FILE*, i8, [7 x i8] }>
< %struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
< %struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
< %struct.__mbstate_t = type { i32, %union.anon }
< %union.anon = type { i32 }
< %"class.std::codecvt" = type { %"class.std::__codecvt_abstract_base.base", %struct.__locale_struct* }
< %"class.std::__codecvt_abstract_base.base" = type { %"class.std::locale::facet.base" }
---
> %"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
> %"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
80,85d20
< %"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
< %"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
< %"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
< %"struct.std::ios_base::_Words" = type { i8*, i64 }
< %"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
< %"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
88,95c23,29
< %"class.std::vector.68" = type { %"struct.std::_Vector_base.69" }
< %"struct.std::_Vector_base.69" = type { %"struct.std::_Vector_base<Apollo::RegionContext *, std::allocator<Apollo::RegionContext *>>::_Vector_impl" }
< %"struct.std::_Vector_base<Apollo::RegionContext *, std::allocator<Apollo::RegionContext *>>::_Vector_impl" = type { %"struct.Apollo::RegionContext"**, %"struct.Apollo::RegionContext"**, %"struct.Apollo::RegionContext"** }
< %struct.ident_t = type { i32, i32, i32, i32, i8* }
< %class.Domain = type { %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector.10", %"class.std::vector.10", %"class.std::vector.10", i32, i32, i32*, i32*, i32**, %"class.std::vector.10", %"class.std::vector.10", %"class.std::vector.10", %"class.std::vector.10", %"class.std::vector.10", %"class.std::vector.10", %"class.std::vector.10", %"class.std::vector.10", double*, double*, double*, double*, double*, double*, double*, double*, double*, %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i32, double, double, double, double, double, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32*, i32*, i32, i32, i32, i32, i32, i32 }
< %"class.std::vector.10" = type { %"struct.std::_Vector_base.11" }
< %"struct.std::_Vector_base.11" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
< %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { i32*, i32*, i32* }
---
> %struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
> %struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
> %class.Domain = type { %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector.0", %"class.std::vector.0", %"class.std::vector.0", i32, i32, i32*, i32*, i32**, %"class.std::vector.0", %"class.std::vector.0", %"class.std::vector.0", %"class.std::vector.0", %"class.std::vector.0", %"class.std::vector.0", %"class.std::vector.0", %"class.std::vector.0", double*, double*, double*, double*, double*, double*, double*, double*, double*, %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i32, double, double, double, double, double, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32*, i32*, i32, i32, i32, i32, i32, i32 }
> %"class.std::vector.0" = type { %"struct.std::_Vector_base.1" }
> %"struct.std::_Vector_base.1" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
> %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
> %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }
98,101c32,33
< %"struct.std::_Vector_base<double, std::allocator<double>>::_Vector_impl" = type { double*, double*, double* }
< %"class.std::allocator.30" = type { i8 }
< %"struct.std::basic_string<char>::_Rep" = type { %"struct.std::basic_string<char>::_Rep_base" }
< %"struct.std::basic_string<char>::_Rep_base" = type { i64, i64, i32 }
---
> %"struct.std::_Vector_base<double, std::allocator<double>>::_Vector_impl" = type { %"struct.std::_Vector_base<double, std::allocator<double>>::_Vector_impl_data" }
> %"struct.std::_Vector_base<double, std::allocator<double>>::_Vector_impl_data" = type { double*, double*, double* }
110,113d41
< $_ZZN6Apollo8instanceEvE12the_instance = comdat any
< 
< $_ZGVZN6Apollo8instanceEvE12the_instance = comdat any
< 
116,124c44,46
< @apollo = dso_local local_unnamed_addr global %class.Apollo* null, align 8
< @_ZZ22CalcKinematicsForElemsR6DomaindiE12apolloRegion = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str = private unnamed_addr constant [23 x i8] c"CalcKinematicsForElems\00", align 1
< @.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
< @0 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
< @1 = private unnamed_addr constant %struct.ident_t { i32 0, i32 514, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @0, i32 0, i32 0) }, align 8
< @2 = private unnamed_addr constant %struct.ident_t { i32 0, i32 66, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @0, i32 0, i32 0) }, align 8
< @3 = private unnamed_addr constant %struct.ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @0, i32 0, i32 0) }, align 8
< @_ZNSs4_Rep20_S_empty_rep_storageE = external dso_local global [0 x i64], align 8
---
> @.str = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
> @0 = private unnamed_addr global %struct.ident_t { i32 0, i32 514, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0) }, align 8
> @1 = private unnamed_addr global %struct.ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0) }, align 8
126,171c48,67
< @.str.2 = private unnamed_addr constant [22 x i8] c"Running problem size \00", align 1
< @.str.3 = private unnamed_addr constant [32 x i8] c"^3 per domain until completion\0A\00", align 1
< @.str.4 = private unnamed_addr constant [17 x i8] c"Num processors: \00", align 1
< @.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
< @.str.6 = private unnamed_addr constant [14 x i8] c"Num threads: \00", align 1
< @.str.7 = private unnamed_addr constant [27 x i8] c"Total number of elements: \00", align 1
< @.str.8 = private unnamed_addr constant [4 x i8] c" \0A\0A\00", align 1
< @.str.9 = private unnamed_addr constant [39 x i8] c"To run other sizes, use -s <integer>.\0A\00", align 1
< @.str.10 = private unnamed_addr constant [56 x i8] c"To run a fixed number of iterations, use -i <integer>.\0A\00", align 1
< @.str.11 = private unnamed_addr constant [62 x i8] c"To run a more or less balanced region set, use -b <integer>.\0A\00", align 1
< @.str.12 = private unnamed_addr constant [60 x i8] c"To change the relative costs of regions, use -c <integer>.\0A\00", align 1
< @.str.13 = private unnamed_addr constant [31 x i8] c"To print out progress, use -p\0A\00", align 1
< @.str.14 = private unnamed_addr constant [43 x i8] c"To write an output file for VisIt, use -v\0A\00", align 1
< @.str.15 = private unnamed_addr constant [33 x i8] c"See help (-h) for more options\0A\0A\00", align 1
< @.str.16 = private unnamed_addr constant [9 x i8] c"cycle = \00", align 1
< @.str.17 = private unnamed_addr constant [3 x i8] c", \00", align 1
< @.str.18 = private unnamed_addr constant [8 x i8] c"time = \00", align 1
< @.str.19 = private unnamed_addr constant [4 x i8] c"dt=\00", align 1
< @_ZZN6Apollo8instanceEvE12the_instance = linkonce_odr dso_local global %class.Apollo zeroinitializer, comdat, align 8
< @_ZGVZN6Apollo8instanceEvE12the_instance = linkonce_odr dso_local global i64 0, comdat, align 8
< @_ZZL17CalcForceForNodesR6DomainE12apolloRegion = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str.20 = private unnamed_addr constant [18 x i8] c"CalcForceForNodes\00", align 1
< @_ZZL23CalcVolumeForceForElemsR6DomainE12apolloRegion = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str.22 = private unnamed_addr constant [24 x i8] c"CalcVolumeForceForElems\00", align 1
< @_ZZL23InitStressTermsForElemsR6DomainPdS1_S1_iE12apolloRegion = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str.24 = private unnamed_addr constant [24 x i8] c"InitStressTermsForElems\00", align 1
< @_ZZL23IntegrateStressForElemsR6DomainPdS1_S1_S1_iiE12apolloRegion = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str.26 = private unnamed_addr constant [25 x i8] c"IntegrateStressForElems1\00", align 1
< @_ZZL28CalcHourglassControlForElemsR6DomainPddE12apolloRegion = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str.28 = private unnamed_addr constant [36 x i8] c"CalcElemVolumeDerivative--hourglass\00", align 1
< @_ZZL28CalcFBHourglassForceForElemsR6DomainPdS1_S1_S1_S1_S1_S1_diiE12apolloRegion = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str.30 = private unnamed_addr constant [30 x i8] c"CalcFBHourglassForceForElems1\00", align 1
< @_ZZL24CalcAccelerationForNodesR6DomainiE12apolloRegion = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str.32 = private unnamed_addr constant [25 x i8] c"CalcAccelerationForNodes\00", align 1
< @_ZZL43ApplyAccelerationBoundaryConditionsForNodesR6DomainE12apolloRegion = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str.34 = private unnamed_addr constant [44 x i8] c"ApplyAccelerationBoundaryConditionsForNodes\00", align 1
< @_ZZL20CalcVelocityForNodesR6DomainddiE12apolloRegion = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str.36 = private unnamed_addr constant [21 x i8] c"CalcVelocityForNodes\00", align 1
< @_ZZL20CalcPositionForNodesR6DomaindiE12apolloRegion = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str.38 = private unnamed_addr constant [21 x i8] c"CalcPositionForNodes\00", align 1
< @_ZZL20CalcLagrangeElementsR6DomainE12apolloRegion = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str.40 = private unnamed_addr constant [21 x i8] c"CalcLagrangeElements\00", align 1
< @_ZZL31CalcMonotonicQGradientsForElemsR6DomainE12apolloRegion = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str.42 = private unnamed_addr constant [32 x i8] c"CalcMonotonicQGradientsForElems\00", align 1
< @_ZZL28CalcMonotonicQRegionForElemsR6DomainidE12apolloRegion = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str.44 = private unnamed_addr constant [29 x i8] c"CalcMonotonicQRegionForElems\00", align 1
---
> @.str.1 = private unnamed_addr constant [22 x i8] c"Running problem size \00", align 1
> @.str.2 = private unnamed_addr constant [32 x i8] c"^3 per domain until completion\0A\00", align 1
> @.str.3 = private unnamed_addr constant [17 x i8] c"Num processors: \00", align 1
> @.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
> @.str.5 = private unnamed_addr constant [14 x i8] c"Num threads: \00", align 1
> @.str.6 = private unnamed_addr constant [27 x i8] c"Total number of elements: \00", align 1
> @.str.7 = private unnamed_addr constant [4 x i8] c" \0A\0A\00", align 1
> @.str.8 = private unnamed_addr constant [39 x i8] c"To run other sizes, use -s <integer>.\0A\00", align 1
> @.str.9 = private unnamed_addr constant [56 x i8] c"To run a fixed number of iterations, use -i <integer>.\0A\00", align 1
> @.str.10 = private unnamed_addr constant [62 x i8] c"To run a more or less balanced region set, use -b <integer>.\0A\00", align 1
> @.str.11 = private unnamed_addr constant [60 x i8] c"To change the relative costs of regions, use -c <integer>.\0A\00", align 1
> @.str.12 = private unnamed_addr constant [31 x i8] c"To print out progress, use -p\0A\00", align 1
> @.str.13 = private unnamed_addr constant [43 x i8] c"To write an output file for VisIt, use -v\0A\00", align 1
> @.str.14 = private unnamed_addr constant [33 x i8] c"See help (-h) for more options\0A\0A\00", align 1
> @.str.15 = private unnamed_addr constant [9 x i8] c"cycle = \00", align 1
> @.str.16 = private unnamed_addr constant [3 x i8] c", \00", align 1
> @.str.17 = private unnamed_addr constant [8 x i8] c"time = \00", align 1
> @.str.18 = private unnamed_addr constant [4 x i8] c"dt=\00", align 1
> @2 = private unnamed_addr global %struct.ident_t { i32 0, i32 34, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0) }, align 8
> @3 = private unnamed_addr global %struct.ident_t { i32 0, i32 66, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0) }, align 8
173,202c69,70
< @.str.46 = private unnamed_addr constant [31 x i8] c"Error in switch at %s line %d\0A\00", align 1
< @.str.47 = private unnamed_addr constant [41 x i8] c"/g/g15/bolet1/workspace/lulesh/lulesh.cc\00", align 1
< @_ZZL31ApplyMaterialPropertiesForElemsR6DomainE12apolloRegion = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str.48 = private unnamed_addr constant [32 x i8] c"ApplyMaterialPropertiesForElems\00", align 1
< @_ZZL15EvalEOSForElemsR6DomainPdiPiiE12apolloRegion = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str.50 = private unnamed_addr constant [17 x i8] c"EvalEOSForElems1\00", align 1
< @_ZZL15EvalEOSForElemsR6DomainPdiPiiE12apolloRegion_0 = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str.52 = private unnamed_addr constant [17 x i8] c"EvalEOSForElems2\00", align 1
< @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str.54 = private unnamed_addr constant [20 x i8] c"CalcEnergyForElems1\00", align 1
< @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_0 = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str.56 = private unnamed_addr constant [20 x i8] c"CalcEnergyForElems2\00", align 1
< @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_1 = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str.58 = private unnamed_addr constant [20 x i8] c"CalcEnergyForElems3\00", align 1
< @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_2 = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str.60 = private unnamed_addr constant [20 x i8] c"CalcEnergyForElems4\00", align 1
< @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_3 = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str.62 = private unnamed_addr constant [20 x i8] c"CalcEnergyForElems5\00", align 1
< @_ZZL20CalcPressureForElemsPdS_S_S_S_S_dddiPiE12apolloRegion = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str.64 = private unnamed_addr constant [22 x i8] c"CalcPressureForElems1\00", align 1
< @_ZZL20CalcPressureForElemsPdS_S_S_S_S_dddiPiE12apolloRegion_0 = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str.66 = private unnamed_addr constant [22 x i8] c"CalcPressureForElems2\00", align 1
< @_ZZL22CalcSoundSpeedForElemsR6DomainPddS1_S1_S1_S1_diPiE12apolloRegion = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str.68 = private unnamed_addr constant [23 x i8] c"CalcSoundSpeedForElems\00", align 1
< @_ZZL21UpdateVolumesForElemsR6DomaindiE12apolloRegion = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str.70 = private unnamed_addr constant [22 x i8] c"UpdateVolumesForElems\00", align 1
< @_ZZL29CalcCourantConstraintForElemsR6DomainiPidRdE12apolloRegion = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str.72 = private unnamed_addr constant [30 x i8] c"CalcCourantConstraintForElems\00", align 1
< @_ZZL27CalcHydroConstraintForElemsR6DomainiPidRdE12apolloRegion = internal unnamed_addr global %"class.Apollo::Region"* null, align 8
< @.str.74 = private unnamed_addr constant [28 x i8] c"CalcHydroConstraintForElems\00", align 1
---
> @.str.32 = private unnamed_addr constant [31 x i8] c"Error in switch at %s line %d\0A\00", align 1
> @.str.33 = private unnamed_addr constant [67 x i8] c"/g/g15/bolet1/workspace/lulesh-region-fix-correct/LULESH/lulesh.cc\00", align 1
203a72,127
> @4 = private unnamed_addr constant [27 x i8] c"lulesh.cc.apollo.region.n1\00", align 1
> @.apollo.region.handle.1 = private unnamed_addr global i8* null, align 8
> @5 = private unnamed_addr constant [27 x i8] c"lulesh.cc.apollo.region.n2\00", align 1
> @.apollo.region.handle.2 = private unnamed_addr global i8* null, align 8
> @6 = private unnamed_addr constant [27 x i8] c"lulesh.cc.apollo.region.n3\00", align 1
> @.apollo.region.handle.3 = private unnamed_addr global i8* null, align 8
> @7 = private unnamed_addr constant [27 x i8] c"lulesh.cc.apollo.region.n4\00", align 1
> @.apollo.region.handle.4 = private unnamed_addr global i8* null, align 8
> @8 = private unnamed_addr constant [27 x i8] c"lulesh.cc.apollo.region.n5\00", align 1
> @.apollo.region.handle.5 = private unnamed_addr global i8* null, align 8
> @9 = private unnamed_addr constant [27 x i8] c"lulesh.cc.apollo.region.n6\00", align 1
> @.apollo.region.handle.6 = private unnamed_addr global i8* null, align 8
> @10 = private unnamed_addr constant [27 x i8] c"lulesh.cc.apollo.region.n7\00", align 1
> @.apollo.region.handle.7 = private unnamed_addr global i8* null, align 8
> @11 = private unnamed_addr constant [27 x i8] c"lulesh.cc.apollo.region.n8\00", align 1
> @.apollo.region.handle.8 = private unnamed_addr global i8* null, align 8
> @12 = private unnamed_addr constant [27 x i8] c"lulesh.cc.apollo.region.n9\00", align 1
> @.apollo.region.handle.9 = private unnamed_addr global i8* null, align 8
> @13 = private unnamed_addr constant [28 x i8] c"lulesh.cc.apollo.region.n10\00", align 1
> @.apollo.region.handle.10 = private unnamed_addr global i8* null, align 8
> @14 = private unnamed_addr constant [28 x i8] c"lulesh.cc.apollo.region.n11\00", align 1
> @.apollo.region.handle.11 = private unnamed_addr global i8* null, align 8
> @15 = private unnamed_addr constant [28 x i8] c"lulesh.cc.apollo.region.n12\00", align 1
> @.apollo.region.handle.12 = private unnamed_addr global i8* null, align 8
> @16 = private unnamed_addr constant [28 x i8] c"lulesh.cc.apollo.region.n13\00", align 1
> @.apollo.region.handle.13 = private unnamed_addr global i8* null, align 8
> @17 = private unnamed_addr constant [28 x i8] c"lulesh.cc.apollo.region.n14\00", align 1
> @.apollo.region.handle.14 = private unnamed_addr global i8* null, align 8
> @18 = private unnamed_addr constant [28 x i8] c"lulesh.cc.apollo.region.n15\00", align 1
> @.apollo.region.handle.15 = private unnamed_addr global i8* null, align 8
> @19 = private unnamed_addr constant [28 x i8] c"lulesh.cc.apollo.region.n16\00", align 1
> @.apollo.region.handle.16 = private unnamed_addr global i8* null, align 8
> @20 = private unnamed_addr constant [28 x i8] c"lulesh.cc.apollo.region.n17\00", align 1
> @.apollo.region.handle.17 = private unnamed_addr global i8* null, align 8
> @21 = private unnamed_addr constant [28 x i8] c"lulesh.cc.apollo.region.n18\00", align 1
> @.apollo.region.handle.18 = private unnamed_addr global i8* null, align 8
> @22 = private unnamed_addr constant [28 x i8] c"lulesh.cc.apollo.region.n19\00", align 1
> @.apollo.region.handle.19 = private unnamed_addr global i8* null, align 8
> @23 = private unnamed_addr constant [28 x i8] c"lulesh.cc.apollo.region.n20\00", align 1
> @.apollo.region.handle.20 = private unnamed_addr global i8* null, align 8
> @24 = private unnamed_addr constant [28 x i8] c"lulesh.cc.apollo.region.n21\00", align 1
> @.apollo.region.handle.21 = private unnamed_addr global i8* null, align 8
> @25 = private unnamed_addr constant [28 x i8] c"lulesh.cc.apollo.region.n22\00", align 1
> @.apollo.region.handle.22 = private unnamed_addr global i8* null, align 8
> @26 = private unnamed_addr constant [28 x i8] c"lulesh.cc.apollo.region.n23\00", align 1
> @.apollo.region.handle.23 = private unnamed_addr global i8* null, align 8
> @27 = private unnamed_addr constant [28 x i8] c"lulesh.cc.apollo.region.n24\00", align 1
> @.apollo.region.handle.24 = private unnamed_addr global i8* null, align 8
> @28 = private unnamed_addr constant [28 x i8] c"lulesh.cc.apollo.region.n25\00", align 1
> @.apollo.region.handle.25 = private unnamed_addr global i8* null, align 8
> @29 = private unnamed_addr constant [28 x i8] c"lulesh.cc.apollo.region.n26\00", align 1
> @.apollo.region.handle.26 = private unnamed_addr global i8* null, align 8
> @30 = private unnamed_addr constant [28 x i8] c"lulesh.cc.apollo.region.n27\00", align 1
> @.apollo.region.handle.27 = private unnamed_addr global i8* null, align 8
> @31 = private unnamed_addr constant [28 x i8] c"lulesh.cc.apollo.region.n28\00", align 1
> @.apollo.region.handle.28 = private unnamed_addr global i8* null, align 8
205c129
< declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull dereferenceable(1)) unnamed_addr #0
---
> declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #0
208c132
< declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* nonnull dereferenceable(1)) unnamed_addr #1
---
> declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1
213,349c137,284
< ; Function Attrs: norecurse nounwind readonly uwtable willreturn mustprogress
< define dso_local double @_Z14CalcElemVolumePKdS0_S0_(double* nocapture readonly %0, double* nocapture readonly %1, double* nocapture readonly %2) local_unnamed_addr #3 {
<   %4 = load double, double* %0, align 8, !tbaa !2
<   %5 = insertelement <2 x double*> poison, double* %0, i32 0
<   %6 = shufflevector <2 x double*> %5, <2 x double*> undef, <2 x i32> zeroinitializer
<   %7 = getelementptr double, <2 x double*> %6, <2 x i64> <i64 1, i64 3>
<   %8 = call <2 x double> @llvm.masked.gather.v2f64.v2p0f64(<2 x double*> %7, i32 8, <2 x i1> <i1 true, i1 true>, <2 x double> undef), !tbaa !2
<   %9 = getelementptr inbounds double, double* %0, i64 4
<   %10 = load double, double* %9, align 8, !tbaa !2
<   %11 = getelementptr double, <2 x double*> %6, <2 x i64> <i64 5, i64 2>
<   %12 = call <2 x double> @llvm.masked.gather.v2f64.v2p0f64(<2 x double*> %11, i32 8, <2 x i1> <i1 true, i1 true>, <2 x double> undef), !tbaa !2
<   %13 = getelementptr inbounds double, double* %0, i64 6
<   %14 = load double, double* %13, align 8, !tbaa !2
<   %15 = getelementptr inbounds double, double* %0, i64 7
<   %16 = load double, double* %15, align 8, !tbaa !2
<   %17 = load double, double* %1, align 8, !tbaa !2
<   %18 = insertelement <2 x double*> poison, double* %1, i32 0
<   %19 = shufflevector <2 x double*> %18, <2 x double*> undef, <2 x i32> zeroinitializer
<   %20 = getelementptr double, <2 x double*> %19, <2 x i64> <i64 1, i64 3>
<   %21 = call <2 x double> @llvm.masked.gather.v2f64.v2p0f64(<2 x double*> %20, i32 8, <2 x i1> <i1 true, i1 true>, <2 x double> undef), !tbaa !2
<   %22 = getelementptr inbounds double, double* %1, i64 4
<   %23 = load double, double* %22, align 8, !tbaa !2
<   %24 = getelementptr double, <2 x double*> %19, <2 x i64> <i64 5, i64 2>
<   %25 = call <2 x double> @llvm.masked.gather.v2f64.v2p0f64(<2 x double*> %24, i32 8, <2 x i1> <i1 true, i1 true>, <2 x double> undef), !tbaa !2
<   %26 = getelementptr inbounds double, double* %1, i64 6
<   %27 = load double, double* %26, align 8, !tbaa !2
<   %28 = getelementptr inbounds double, double* %1, i64 7
<   %29 = load double, double* %28, align 8, !tbaa !2
<   %30 = load double, double* %2, align 8, !tbaa !2
<   %31 = insertelement <2 x double*> poison, double* %2, i32 0
<   %32 = shufflevector <2 x double*> %31, <2 x double*> undef, <2 x i32> zeroinitializer
<   %33 = getelementptr double, <2 x double*> %32, <2 x i64> <i64 1, i64 3>
<   %34 = call <2 x double> @llvm.masked.gather.v2f64.v2p0f64(<2 x double*> %33, i32 8, <2 x i1> <i1 true, i1 true>, <2 x double> undef), !tbaa !2
<   %35 = getelementptr inbounds double, double* %2, i64 4
<   %36 = load double, double* %35, align 8, !tbaa !2
<   %37 = getelementptr inbounds double, double* %2, i64 5
<   %38 = load double, double* %37, align 8, !tbaa !2
<   %39 = getelementptr inbounds double, double* %2, i64 6
<   %40 = load double, double* %39, align 8, !tbaa !2
<   %41 = getelementptr double, <2 x double*> %32, <2 x i64> <i64 2, i64 7>
<   %42 = call <2 x double> @llvm.masked.gather.v2f64.v2p0f64(<2 x double*> %41, i32 8, <2 x i1> <i1 true, i1 true>, <2 x double> undef), !tbaa !2
<   %43 = fsub double %16, %4
<   %44 = fsub double %29, %17
<   %45 = extractelement <2 x double> %42, i32 1
<   %46 = fsub double %45, %30
<   %47 = insertelement <2 x double> poison, double %14, i32 0
<   %48 = shufflevector <2 x double> %47, <2 x double> undef, <2 x i32> zeroinitializer
<   %49 = fsub <2 x double> %48, %8
<   %50 = insertelement <2 x double> poison, double %27, i32 0
<   %51 = shufflevector <2 x double> %50, <2 x double> undef, <2 x i32> zeroinitializer
<   %52 = fsub <2 x double> %51, %21
<   %53 = insertelement <2 x double> poison, double %40, i32 0
<   %54 = shufflevector <2 x double> %53, <2 x double> undef, <2 x i32> zeroinitializer
<   %55 = fsub <2 x double> %54, %34
<   %56 = insertelement <2 x double> poison, double %4, i32 0
<   %57 = shufflevector <2 x double> %56, <2 x double> undef, <2 x i32> zeroinitializer
<   %58 = fsub <2 x double> %12, %57
<   %59 = insertelement <2 x double> poison, double %17, i32 0
<   %60 = shufflevector <2 x double> %59, <2 x double> undef, <2 x i32> zeroinitializer
<   %61 = fsub <2 x double> %25, %60
<   %62 = insertelement <2 x double> poison, double %38, i32 0
<   %63 = shufflevector <2 x double> %62, <2 x double> %42, <2 x i32> <i32 0, i32 2>
<   %64 = insertelement <2 x double> poison, double %30, i32 0
<   %65 = shufflevector <2 x double> %64, <2 x double> undef, <2 x i32> zeroinitializer
<   %66 = fsub <2 x double> %63, %65
<   %67 = fsub double %14, %10
<   %68 = fsub double %27, %23
<   %69 = fsub double %40, %36
<   %70 = extractelement <2 x double> %8, i32 1
<   %71 = fsub double %10, %70
<   %72 = extractelement <2 x double> %21, i32 1
<   %73 = fsub double %23, %72
<   %74 = extractelement <2 x double> %34, i32 1
<   %75 = fsub double %36, %74
<   %76 = extractelement <2 x double> %12, i32 0
<   %77 = fsub double %76, %16
<   %78 = extractelement <2 x double> %25, i32 0
<   %79 = fsub double %78, %29
<   %80 = fsub double %38, %45
<   %81 = insertelement <2 x double> poison, double %10, i32 0
<   %82 = shufflevector <2 x double> %81, <2 x double> %8, <2 x i32> <i32 0, i32 2>
<   %83 = fsub <2 x double> %8, %82
<   %84 = insertelement <2 x double> poison, double %23, i32 0
<   %85 = shufflevector <2 x double> %84, <2 x double> %21, <2 x i32> <i32 0, i32 2>
<   %86 = fsub <2 x double> %21, %85
<   %87 = insertelement <2 x double> poison, double %36, i32 0
<   %88 = shufflevector <2 x double> %87, <2 x double> %34, <2 x i32> <i32 0, i32 2>
<   %89 = fsub <2 x double> %34, %88
<   %90 = extractelement <2 x double> %12, i32 1
<   %91 = insertelement <2 x double> poison, double %90, i32 0
<   %92 = insertelement <2 x double> %91, double %16, i32 1
<   %93 = fsub <2 x double> %92, %12
<   %94 = extractelement <2 x double> %25, i32 1
<   %95 = insertelement <2 x double> poison, double %94, i32 0
<   %96 = insertelement <2 x double> %95, double %29, i32 1
<   %97 = fsub <2 x double> %96, %25
<   %98 = fsub <2 x double> %42, %63
<   %99 = fadd double %71, %77
<   %100 = fmul double %68, %46
<   %101 = fmul double %44, %69
<   %102 = fsub double %100, %101
<   %103 = fmul double %99, %102
<   %104 = fadd double %73, %79
<   %105 = fmul double %43, %69
<   %106 = fmul double %67, %46
<   %107 = fsub double %105, %106
<   %108 = fmul double %104, %107
<   %109 = fadd double %103, %108
<   %110 = fadd double %75, %80
<   %111 = fmul double %67, %44
<   %112 = fmul double %43, %68
<   %113 = fsub double %111, %112
<   %114 = fmul double %113, %110
<   %115 = fadd double %114, %109
<   %116 = fadd <2 x double> %83, %93
<   %117 = fmul <2 x double> %52, %66
<   %118 = fmul <2 x double> %61, %55
<   %119 = fsub <2 x double> %117, %118
<   %120 = fmul <2 x double> %116, %119
<   %121 = fadd <2 x double> %86, %97
<   %122 = fmul <2 x double> %58, %55
<   %123 = fmul <2 x double> %49, %66
<   %124 = fsub <2 x double> %122, %123
<   %125 = fmul <2 x double> %121, %124
<   %126 = fadd <2 x double> %120, %125
<   %127 = fadd <2 x double> %89, %98
<   %128 = fmul <2 x double> %49, %61
<   %129 = fmul <2 x double> %58, %52
<   %130 = fsub <2 x double> %128, %129
<   %131 = fmul <2 x double> %130, %127
<   %132 = fadd <2 x double> %131, %126
<   %133 = extractelement <2 x double> %132, i32 1
<   %134 = fadd double %133, %115
<   %135 = extractelement <2 x double> %132, i32 0
<   %136 = fadd double %135, %134
<   %137 = fmul double %136, 0x3FB5555555555555
<   ret double %137
---
> ; Function Attrs: norecurse nounwind readonly uwtable
> define dso_local double @_Z14CalcElemVolumePKdS0_S0_(double* nocapture readonly %x, double* nocapture readonly %y, double* nocapture readonly %z) local_unnamed_addr #3 {
> entry:
>   %0 = load double, double* %x, align 8, !tbaa !2
>   %arrayidx1 = getelementptr inbounds double, double* %x, i64 1
>   %1 = load double, double* %arrayidx1, align 8, !tbaa !2
>   %arrayidx2 = getelementptr inbounds double, double* %x, i64 2
>   %2 = load double, double* %arrayidx2, align 8, !tbaa !2
>   %arrayidx3 = getelementptr inbounds double, double* %x, i64 3
>   %3 = load double, double* %arrayidx3, align 8, !tbaa !2
>   %arrayidx4 = getelementptr inbounds double, double* %x, i64 4
>   %4 = load double, double* %arrayidx4, align 8, !tbaa !2
>   %arrayidx5 = getelementptr inbounds double, double* %x, i64 5
>   %5 = load double, double* %arrayidx5, align 8, !tbaa !2
>   %arrayidx6 = getelementptr inbounds double, double* %x, i64 6
>   %6 = load double, double* %arrayidx6, align 8, !tbaa !2
>   %arrayidx7 = getelementptr inbounds double, double* %x, i64 7
>   %7 = load double, double* %arrayidx7, align 8, !tbaa !2
>   %8 = load double, double* %y, align 8, !tbaa !2
>   %arrayidx9 = getelementptr inbounds double, double* %y, i64 1
>   %9 = load double, double* %arrayidx9, align 8, !tbaa !2
>   %arrayidx10 = getelementptr inbounds double, double* %y, i64 2
>   %10 = load double, double* %arrayidx10, align 8, !tbaa !2
>   %arrayidx11 = getelementptr inbounds double, double* %y, i64 3
>   %11 = load double, double* %arrayidx11, align 8, !tbaa !2
>   %arrayidx12 = getelementptr inbounds double, double* %y, i64 4
>   %12 = load double, double* %arrayidx12, align 8, !tbaa !2
>   %arrayidx13 = getelementptr inbounds double, double* %y, i64 5
>   %13 = load double, double* %arrayidx13, align 8, !tbaa !2
>   %arrayidx14 = getelementptr inbounds double, double* %y, i64 6
>   %14 = load double, double* %arrayidx14, align 8, !tbaa !2
>   %arrayidx15 = getelementptr inbounds double, double* %y, i64 7
>   %15 = load double, double* %arrayidx15, align 8, !tbaa !2
>   %16 = load double, double* %z, align 8, !tbaa !2
>   %arrayidx17 = getelementptr inbounds double, double* %z, i64 1
>   %17 = load double, double* %arrayidx17, align 8, !tbaa !2
>   %arrayidx18 = getelementptr inbounds double, double* %z, i64 2
>   %18 = load double, double* %arrayidx18, align 8, !tbaa !2
>   %arrayidx19 = getelementptr inbounds double, double* %z, i64 3
>   %19 = load double, double* %arrayidx19, align 8, !tbaa !2
>   %arrayidx20 = getelementptr inbounds double, double* %z, i64 4
>   %20 = load double, double* %arrayidx20, align 8, !tbaa !2
>   %arrayidx21 = getelementptr inbounds double, double* %z, i64 5
>   %21 = load double, double* %arrayidx21, align 8, !tbaa !2
>   %arrayidx22 = getelementptr inbounds double, double* %z, i64 6
>   %22 = load double, double* %arrayidx22, align 8, !tbaa !2
>   %arrayidx23 = getelementptr inbounds double, double* %z, i64 7
>   %23 = load double, double* %arrayidx23, align 8, !tbaa !2
>   %sub3.i = fsub double %7, %0
>   %sub4.i = fsub double %15, %8
>   %sub5.i = fsub double %23, %16
>   %24 = insertelement <2 x double> undef, double %6, i32 0
>   %25 = shufflevector <2 x double> %24, <2 x double> undef, <2 x i32> zeroinitializer
>   %26 = insertelement <2 x double> undef, double %1, i32 0
>   %27 = insertelement <2 x double> %26, double %3, i32 1
>   %28 = fsub <2 x double> %25, %27
>   %29 = insertelement <2 x double> undef, double %14, i32 0
>   %30 = shufflevector <2 x double> %29, <2 x double> undef, <2 x i32> zeroinitializer
>   %31 = insertelement <2 x double> undef, double %9, i32 0
>   %32 = insertelement <2 x double> %31, double %11, i32 1
>   %33 = fsub <2 x double> %30, %32
>   %34 = insertelement <2 x double> undef, double %22, i32 0
>   %35 = shufflevector <2 x double> %34, <2 x double> undef, <2 x i32> zeroinitializer
>   %36 = insertelement <2 x double> undef, double %17, i32 0
>   %37 = insertelement <2 x double> %36, double %19, i32 1
>   %38 = fsub <2 x double> %35, %37
>   %39 = insertelement <2 x double> undef, double %5, i32 0
>   %40 = insertelement <2 x double> %39, double %2, i32 1
>   %41 = insertelement <2 x double> undef, double %0, i32 0
>   %42 = shufflevector <2 x double> %41, <2 x double> undef, <2 x i32> zeroinitializer
>   %43 = fsub <2 x double> %40, %42
>   %44 = insertelement <2 x double> undef, double %13, i32 0
>   %45 = insertelement <2 x double> %44, double %10, i32 1
>   %46 = insertelement <2 x double> undef, double %8, i32 0
>   %47 = shufflevector <2 x double> %46, <2 x double> undef, <2 x i32> zeroinitializer
>   %48 = fsub <2 x double> %45, %47
>   %49 = insertelement <2 x double> undef, double %21, i32 0
>   %50 = insertelement <2 x double> %49, double %18, i32 1
>   %51 = insertelement <2 x double> undef, double %16, i32 0
>   %52 = shufflevector <2 x double> %51, <2 x double> undef, <2 x i32> zeroinitializer
>   %53 = fsub <2 x double> %50, %52
>   %sub15.i = fsub double %6, %4
>   %sub16.i = fsub double %14, %12
>   %sub17.i = fsub double %22, %20
>   %sub24.i = fsub double %4, %3
>   %sub25.i = fsub double %12, %11
>   %sub26.i = fsub double %20, %19
>   %sub27.i = fsub double %5, %7
>   %sub28.i = fsub double %13, %15
>   %sub29.i = fsub double %21, %23
>   %54 = insertelement <2 x double> undef, double %4, i32 0
>   %55 = insertelement <2 x double> %54, double %1, i32 1
>   %56 = fsub <2 x double> %27, %55
>   %57 = insertelement <2 x double> undef, double %12, i32 0
>   %58 = insertelement <2 x double> %57, double %9, i32 1
>   %59 = fsub <2 x double> %32, %58
>   %60 = insertelement <2 x double> undef, double %20, i32 0
>   %61 = insertelement <2 x double> %60, double %17, i32 1
>   %62 = fsub <2 x double> %37, %61
>   %63 = insertelement <2 x double> undef, double %2, i32 0
>   %64 = insertelement <2 x double> %63, double %7, i32 1
>   %65 = fsub <2 x double> %64, %40
>   %66 = insertelement <2 x double> undef, double %10, i32 0
>   %67 = insertelement <2 x double> %66, double %15, i32 1
>   %68 = fsub <2 x double> %67, %45
>   %69 = insertelement <2 x double> undef, double %18, i32 0
>   %70 = insertelement <2 x double> %69, double %23, i32 1
>   %71 = fsub <2 x double> %70, %50
>   %add51.i = fadd double %sub24.i, %sub27.i
>   %mul52.i = fmul double %sub16.i, %sub5.i
>   %mul53.i = fmul double %sub4.i, %sub17.i
>   %sub54.i = fsub double %mul52.i, %mul53.i
>   %mul55.i = fmul double %add51.i, %sub54.i
>   %add56.i = fadd double %sub25.i, %sub28.i
>   %mul57.i = fmul double %sub3.i, %sub17.i
>   %mul58.i = fmul double %sub15.i, %sub5.i
>   %sub59.i = fsub double %mul57.i, %mul58.i
>   %mul60.i = fmul double %add56.i, %sub59.i
>   %add61.i = fadd double %mul55.i, %mul60.i
>   %add62.i = fadd double %sub26.i, %sub29.i
>   %mul63.i = fmul double %sub15.i, %sub4.i
>   %mul64.i = fmul double %sub3.i, %sub16.i
>   %sub65.i = fsub double %mul63.i, %mul64.i
>   %mul66.i = fmul double %sub65.i, %add62.i
>   %add67.i = fadd double %mul66.i, %add61.i
>   %72 = fadd <2 x double> %56, %65
>   %73 = fmul <2 x double> %33, %53
>   %74 = fmul <2 x double> %48, %38
>   %75 = fsub <2 x double> %73, %74
>   %76 = fmul <2 x double> %72, %75
>   %77 = fadd <2 x double> %59, %68
>   %78 = fmul <2 x double> %43, %38
>   %79 = fmul <2 x double> %28, %53
>   %80 = fsub <2 x double> %78, %79
>   %81 = fmul <2 x double> %77, %80
>   %82 = fadd <2 x double> %76, %81
>   %83 = fadd <2 x double> %62, %71
>   %84 = fmul <2 x double> %28, %48
>   %85 = fmul <2 x double> %43, %33
>   %86 = fsub <2 x double> %84, %85
>   %87 = fmul <2 x double> %86, %83
>   %88 = fadd <2 x double> %87, %82
>   %89 = extractelement <2 x double> %88, i32 1
>   %add68.i = fadd double %89, %add67.i
>   %90 = extractelement <2 x double> %88, i32 0
>   %add86.i = fadd double %90, %add68.i
>   %mul87.i = fmul double %add86.i, 0x3FB5555555555555
>   ret double %mul87.i
352c287
< ; Function Attrs: argmemonly nofree nosync nounwind willreturn
---
> ; Function Attrs: argmemonly nounwind willreturn
355c290
< ; Function Attrs: argmemonly nofree nosync nounwind willreturn
---
> ; Function Attrs: argmemonly nounwind willreturn
358,440c293,315
< ; Function Attrs: uwtable
< define dso_local void @_Z22CalcKinematicsForElemsR6Domaindi(%class.Domain* nonnull align 8 dereferenceable(1312) %0, double %1, i32 %2) local_unnamed_addr #5 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %4 = alloca %"class.std::allocator.30", align 1
<   %5 = alloca %"class.std::allocator.30", align 1
<   %6 = alloca %"class.std::basic_string", align 8
<   %7 = alloca %"class.std::allocator.30", align 1
<   %8 = alloca %"class.std::vector.15", align 8
<   %9 = sitofp i32 %2 to float
<   %10 = tail call noalias nonnull i8* @_Znwm(i64 4) #26
<   %11 = bitcast i8* %10 to float*
<   store float %9, float* %11, align 4
<   %12 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZ22CalcKinematicsForElemsR6DomaindiE12apolloRegion, align 8, !tbaa !6
<   %13 = icmp eq %"class.Apollo::Region"* %12, null
<   br i1 %13, label %14, label %69
< 
< 14:                                               ; preds = %3
<   %15 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %16 unwind label %42
< 
< 16:                                               ; preds = %14
<   %17 = bitcast %"class.std::basic_string"* %6 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
<   %18 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %7, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %18) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %7)
<           to label %19 unwind label %44
< 
< 19:                                               ; preds = %16
<   %20 = bitcast i8* %15 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %20, i32 1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %6)
<           to label %21 unwind label %46
< 
< 21:                                               ; preds = %19
<   store i8* %15, i8** bitcast (%"class.Apollo::Region"** @_ZZ22CalcKinematicsForElemsR6DomaindiE12apolloRegion to i8**), align 8, !tbaa !6
<   %22 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %6, i64 0, i32 0, i32 0
<   %23 = load i8*, i8** %22, align 8, !tbaa !8
<   %24 = getelementptr inbounds i8, i8* %23, i64 -24
<   %25 = bitcast i8* %24 to %"struct.std::basic_string<char>::_Rep"*
<   %26 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %5, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %26) #10
<   %27 = icmp eq i8* %24, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %27, label %40, label %28, !prof !11
< 
< 28:                                               ; preds = %21
<   %29 = getelementptr inbounds i8, i8* %23, i64 -8
<   %30 = bitcast i8* %29 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %31, label %33
< 
< 31:                                               ; preds = %28
<   %32 = atomicrmw volatile add i32* %30, i32 -1 acq_rel
<   br label %36
< 
< 33:                                               ; preds = %28
<   %34 = load i32, i32* %30, align 4, !tbaa !12
<   %35 = add nsw i32 %34, -1
<   store i32 %35, i32* %30, align 4, !tbaa !12
<   br label %36
< 
< 36:                                               ; preds = %33, %31
<   %37 = phi i32 [ %32, %31 ], [ %34, %33 ]
<   %38 = icmp slt i32 %37, 1
<   br i1 %38, label %39, label %40
< 
< 39:                                               ; preds = %36
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %25, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %5) #10
<   br label %40
< 
< 40:                                               ; preds = %21, %36, %39
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %26) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %18) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
<   %41 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZ22CalcKinematicsForElemsR6DomaindiE12apolloRegion, align 8, !tbaa !6
<   br label %69
< 
< 42:                                               ; preds = %69, %93, %90, %14
<   %43 = landingpad { i8*, i32 }
<           cleanup
<   br label %108
< 
< 44:                                               ; preds = %16
<   %45 = landingpad { i8*, i32 }
<           cleanup
<   br label %67
---
> ; Function Attrs: nounwind uwtable
> define dso_local void @_Z22CalcKinematicsForElemsR6Domaindi(%class.Domain* nonnull align 8 dereferenceable(1312) %domain, double %deltaTime, i32 %numElem) local_unnamed_addr #5 {
> entry:
>   %0 = load i8*, i8** @.apollo.region.handle.11, align 8
>   %1 = icmp eq i8* %0, null
>   br i1 %1, label %2, label %4
> 
> 2:                                                ; preds = %entry
>   %3 = tail call i8* @__apollo_region_create(i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @14, i64 0, i64 0), i32 2) #7
>   store i8* %3, i8** @.apollo.region.handle.11, align 8
>   br label %4
> 
> 4:                                                ; preds = %entry, %2
>   %5 = phi i8* [ %0, %entry ], [ %3, %2 ]
>   tail call void @__apollo_region_begin(i8* %5) #7
>   %6 = uitofp i32 %numElem to float
>   tail call void @__apollo_region_set_feature(i8* %5, float %6) #7
>   %7 = tail call i32 @__apollo_region_get_policy(i8* %5) #7
>   %omp_global_thread_num = tail call i32 @__kmpc_global_thread_num(%struct.ident_t* nonnull @1)
>   switch i32 %7, label %.split [
>     i32 0, label %.split.sink.split
>     i32 1, label %.apollo.case.1
>   ]
442,540c317,318
< 46:                                               ; preds = %19
<   %47 = landingpad { i8*, i32 }
<           cleanup
<   %48 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %6, i64 0, i32 0, i32 0
<   %49 = load i8*, i8** %48, align 8, !tbaa !8
<   %50 = getelementptr inbounds i8, i8* %49, i64 -24
<   %51 = bitcast i8* %50 to %"struct.std::basic_string<char>::_Rep"*
<   %52 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %4, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %52) #10
<   %53 = icmp eq i8* %50, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %53, label %66, label %54, !prof !11
< 
< 54:                                               ; preds = %46
<   %55 = getelementptr inbounds i8, i8* %49, i64 -8
<   %56 = bitcast i8* %55 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %57, label %59
< 
< 57:                                               ; preds = %54
<   %58 = atomicrmw volatile add i32* %56, i32 -1 acq_rel
<   br label %62
< 
< 59:                                               ; preds = %54
<   %60 = load i32, i32* %56, align 4, !tbaa !12
<   %61 = add nsw i32 %60, -1
<   store i32 %61, i32* %56, align 4, !tbaa !12
<   br label %62
< 
< 62:                                               ; preds = %59, %57
<   %63 = phi i32 [ %58, %57 ], [ %60, %59 ]
<   %64 = icmp slt i32 %63, 1
<   br i1 %64, label %65, label %66
< 
< 65:                                               ; preds = %62
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %51, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %4) #10
<   br label %66
< 
< 66:                                               ; preds = %46, %62, %65
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %52) #10
<   br label %67
< 
< 67:                                               ; preds = %66, %44
<   %68 = phi { i8*, i32 } [ %47, %66 ], [ %45, %44 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %18) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
<   call void @_ZdlPv(i8* nonnull %15) #28
<   br label %108
< 
< 69:                                               ; preds = %40, %3
<   %70 = phi %"class.Apollo::Region"* [ %41, %40 ], [ %12, %3 ]
<   %71 = bitcast %"class.std::vector.15"* %8 to i8*
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %71, i8 0, i64 24, i1 false) #10
<   %72 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %73 unwind label %42
< 
< 73:                                               ; preds = %69
<   %74 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %8, i64 0, i32 0, i32 0, i32 0
<   %75 = bitcast %"class.std::vector.15"* %8 to i8**
<   store i8* %72, i8** %75, align 8, !tbaa !14
<   %76 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %8, i64 0, i32 0, i32 0, i32 1
<   %77 = bitcast float** %76 to i8**
<   %78 = getelementptr inbounds i8, i8* %72, i64 4
<   %79 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %8, i64 0, i32 0, i32 0, i32 2
<   %80 = bitcast float** %79 to i8**
<   store i8* %78, i8** %80, align 8, !tbaa !17
<   %81 = bitcast i8* %10 to i32*
<   %82 = bitcast i8* %72 to i32*
<   %83 = load i32, i32* %81, align 4
<   store i32 %83, i32* %82, align 4
<   store i8* %78, i8** %77, align 8, !tbaa !18
<   %84 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %70, %"class.std::vector.15"* nonnull %8)
<           to label %85 unwind label %102
< 
< 85:                                               ; preds = %73
<   %86 = load float*, float** %74, align 8, !tbaa !14
<   %87 = icmp eq float* %86, null
<   br i1 %87, label %90, label %88
< 
< 88:                                               ; preds = %85
<   %89 = bitcast float* %86 to i8*
<   call void @_ZdlPv(i8* nonnull %89) #10
<   br label %90
< 
< 90:                                               ; preds = %85, %88
<   %91 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZ22CalcKinematicsForElemsR6DomaindiE12apolloRegion, align 8, !tbaa !6
<   %92 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %91)
<           to label %93 unwind label %42
< 
< 93:                                               ; preds = %90
<   %94 = icmp eq i32 %92, 1
<   %95 = select i1 %94, i32 1, i32 36
<   %96 = icmp eq i32 %92, 0
<   %97 = select i1 %96, i32 36, i32 %95
<   call void @omp_set_num_threads(i32 %97) #10
<   %98 = zext i32 %2 to i64
<   %99 = bitcast double %1 to i64
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 3, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, %class.Domain*, i64)* @.omp_outlined. to void (i32*, i32*, ...)*), i64 %98, %class.Domain* nonnull %0, i64 %99)
<   %100 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZ22CalcKinematicsForElemsR6DomaindiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %100)
<           to label %101 unwind label %42
---
> .apollo.case.1:                                   ; preds = %4
>   br label %.split.sink.split
542,543c320,330
< 101:                                              ; preds = %93
<   call void @_ZdlPv(i8* nonnull %10) #10
---
> .split.sink.split:                                ; preds = %4, %.apollo.case.1
>   %.sink = phi i32 [ 1, %.apollo.case.1 ], [ 36, %4 ]
>   tail call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num, i32 %.sink) #7
>   br label %.split
> 
> .split:                                           ; preds = %.split.sink.split, %4
>   %numElem.casted.sroa.0.0.insert.ext = zext i32 %numElem to i64
>   %8 = bitcast double %deltaTime to i64
>   tail call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 3, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, %class.Domain*, i64)* @.omp_outlined. to void (i32*, i32*, ...)*), i64 %numElem.casted.sroa.0.0.insert.ext, %class.Domain* nonnull %domain, i64 %8)
>   %9 = load i8*, i8** @.apollo.region.handle.11, align 8
>   tail call void @__apollo_region_end(i8* %9) #7
545,561d331
< 
< 102:                                              ; preds = %73
<   %103 = landingpad { i8*, i32 }
<           cleanup
<   %104 = load float*, float** %74, align 8, !tbaa !14
<   %105 = icmp eq float* %104, null
<   br i1 %105, label %108, label %106
< 
< 106:                                              ; preds = %102
<   %107 = bitcast float* %104 to i8*
<   call void @_ZdlPv(i8* nonnull %107) #10
<   br label %108
< 
< 108:                                              ; preds = %106, %102, %67, %42
<   %109 = phi { i8*, i32 } [ %43, %42 ], [ %68, %67 ], [ %103, %102 ], [ %103, %106 ]
<   call void @_ZdlPv(i8* nonnull %10) #10
<   resume { i8*, i32 } %109
564,574c334,1197
< declare dso_local i32 @__gxx_personality_v0(...)
< 
< ; Function Attrs: nobuiltin nofree allocsize(0)
< declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #6
< 
< declare dso_local void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8), i8*, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1)) unnamed_addr #0
< 
< declare dso_local void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808), i32, i8*, i32, %"struct.Apollo::CallbackDataPool"*, %"class.std::basic_string"* nonnull align 8 dereferenceable(8)) unnamed_addr #0
< 
< ; Function Attrs: nobuiltin nounwind
< declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #7
---
> ; Function Attrs: norecurse nounwind uwtable
> define internal void @.omp_outlined.(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i64 %numElem, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %domain, i64 %deltaTime) #6 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
> entry:
>   %a.i = alloca double, align 8
>   %charLength.sroa.0.i = alloca i64, align 8
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %B = alloca [3 x [8 x double]], align 16
>   %x_local = alloca [8 x double], align 16
>   %y_local = alloca [8 x double], align 16
>   %z_local = alloca [8 x double], align 16
>   %xd_local = alloca [8 x double], align 16
>   %yd_local = alloca [8 x double], align 16
>   %zd_local = alloca [8 x double], align 16
>   %detJ = alloca double, align 8
>   %numElem.addr.sroa.0.0.extract.trunc = trunc i64 %numElem to i32
>   %sub4 = add nsw i32 %numElem.addr.sroa.0.0.extract.trunc, -1
>   %cmp = icmp sgt i32 %numElem.addr.sroa.0.0.extract.trunc, 0
>   br i1 %cmp, label %omp.precond.then, label %omp.precond.end
> 
> omp.precond.then:                                 ; preds = %entry
>   %0 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %1 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #7
>   store i32 %sub4, i32* %.omp.ub, align 4, !tbaa !6
>   %2 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %3 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   %4 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %4, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %5 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp6.not = icmp slt i32 %5, %numElem.addr.sroa.0.0.extract.trunc
>   %cond = select i1 %cmp6.not, i32 %5, i32 %sub4
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %6 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp7.not251 = icmp sgt i32 %6, %cond
>   br i1 %cmp7.not251, label %omp.loop.exit, label %invoke.cont29.lr.ph
> 
> invoke.cont29.lr.ph:                              ; preds = %omp.precond.then
>   %7 = bitcast [3 x [8 x double]]* %B to i8*
>   %8 = bitcast [8 x double]* %x_local to i8*
>   %9 = bitcast [8 x double]* %y_local to i8*
>   %10 = bitcast [8 x double]* %z_local to i8*
>   %11 = bitcast [8 x double]* %xd_local to i8*
>   %12 = bitcast [8 x double]* %yd_local to i8*
>   %13 = bitcast [8 x double]* %zd_local to i8*
>   %14 = bitcast double* %detJ to i8*
>   %_M_start.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 21, i32 0, i32 0, i32 0, i32 0
>   %arraydecay = getelementptr inbounds [8 x double], [8 x double]* %x_local, i64 0, i64 0
>   %arraydecay8 = getelementptr inbounds [8 x double], [8 x double]* %y_local, i64 0, i64 0
>   %arraydecay9 = getelementptr inbounds [8 x double], [8 x double]* %z_local, i64 0, i64 0
>   %domain.idx = getelementptr %class.Domain, %class.Domain* %domain, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
>   %domain.idx178 = getelementptr %class.Domain, %class.Domain* %domain, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
>   %domain.idx179 = getelementptr %class.Domain, %class.Domain* %domain, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
>   %15 = bitcast [8 x double]* %x_local to i64*
>   %arrayidx10.i186 = getelementptr inbounds [8 x double], [8 x double]* %x_local, i64 0, i64 1
>   %16 = bitcast double* %arrayidx10.i186 to i64*
>   %arrayidx12.i = getelementptr inbounds [8 x double], [8 x double]* %x_local, i64 0, i64 2
>   %17 = bitcast double* %arrayidx12.i to i64*
>   %arrayidx14.i187 = getelementptr inbounds [8 x double], [8 x double]* %x_local, i64 0, i64 3
>   %18 = bitcast double* %arrayidx14.i187 to i64*
>   %arrayidx16.i = getelementptr inbounds [8 x double], [8 x double]* %x_local, i64 0, i64 4
>   %19 = bitcast double* %arrayidx16.i to i64*
>   %arrayidx18.i = getelementptr inbounds [8 x double], [8 x double]* %x_local, i64 0, i64 5
>   %20 = bitcast double* %arrayidx18.i to i64*
>   %arrayidx20.i188 = getelementptr inbounds [8 x double], [8 x double]* %x_local, i64 0, i64 6
>   %21 = bitcast double* %arrayidx20.i188 to i64*
>   %arrayidx22.i = getelementptr inbounds [8 x double], [8 x double]* %x_local, i64 0, i64 7
>   %22 = bitcast double* %arrayidx22.i to i64*
>   %23 = bitcast [8 x double]* %y_local to i64*
>   %arrayidx26.i = getelementptr inbounds [8 x double], [8 x double]* %y_local, i64 0, i64 1
>   %24 = bitcast double* %arrayidx26.i to i64*
>   %arrayidx28.i = getelementptr inbounds [8 x double], [8 x double]* %y_local, i64 0, i64 2
>   %25 = bitcast double* %arrayidx28.i to i64*
>   %arrayidx30.i = getelementptr inbounds [8 x double], [8 x double]* %y_local, i64 0, i64 3
>   %26 = bitcast double* %arrayidx30.i to i64*
>   %arrayidx32.i189 = getelementptr inbounds [8 x double], [8 x double]* %y_local, i64 0, i64 4
>   %27 = bitcast double* %arrayidx32.i189 to i64*
>   %arrayidx34.i190 = getelementptr inbounds [8 x double], [8 x double]* %y_local, i64 0, i64 5
>   %28 = bitcast double* %arrayidx34.i190 to i64*
>   %arrayidx36.i = getelementptr inbounds [8 x double], [8 x double]* %y_local, i64 0, i64 6
>   %29 = bitcast double* %arrayidx36.i to i64*
>   %arrayidx38.i191 = getelementptr inbounds [8 x double], [8 x double]* %y_local, i64 0, i64 7
>   %30 = bitcast double* %arrayidx38.i191 to i64*
>   %31 = bitcast [8 x double]* %z_local to i64*
>   %arrayidx42.i = getelementptr inbounds [8 x double], [8 x double]* %z_local, i64 0, i64 1
>   %32 = bitcast double* %arrayidx42.i to i64*
>   %arrayidx44.i192 = getelementptr inbounds [8 x double], [8 x double]* %z_local, i64 0, i64 2
>   %33 = bitcast double* %arrayidx44.i192 to i64*
>   %arrayidx46.i193 = getelementptr inbounds [8 x double], [8 x double]* %z_local, i64 0, i64 3
>   %34 = bitcast double* %arrayidx46.i193 to i64*
>   %arrayidx48.i = getelementptr inbounds [8 x double], [8 x double]* %z_local, i64 0, i64 4
>   %35 = bitcast double* %arrayidx48.i to i64*
>   %arrayidx50.i = getelementptr inbounds [8 x double], [8 x double]* %z_local, i64 0, i64 5
>   %36 = bitcast double* %arrayidx50.i to i64*
>   %arrayidx52.i = getelementptr inbounds [8 x double], [8 x double]* %z_local, i64 0, i64 6
>   %37 = bitcast double* %arrayidx52.i to i64*
>   %arrayidx54.i194 = getelementptr inbounds [8 x double], [8 x double]* %z_local, i64 0, i64 7
>   %38 = bitcast double* %arrayidx54.i194 to i64*
>   %_M_start.i.i227 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 44, i32 0, i32 0, i32 0, i32 0
>   %_M_start.i.i236 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 45, i32 0, i32 0, i32 0, i32 0
>   %_M_start.i.i233 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 43, i32 0, i32 0, i32 0, i32 0
>   %_M_start.i.i230 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 46, i32 0, i32 0, i32 0, i32 0
>   %a.i.0.a.0..sroa_cast = bitcast double* %a.i to i8*
>   %charLength.sroa.0.i.0..sroa_cast = bitcast i64* %charLength.sroa.0.i to i8*
>   %charLength.sroa.0.i.0.charLength.sroa_cast = bitcast i64* %charLength.sroa.0.i to double*
>   %_M_start.i.i205 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 48, i32 0, i32 0, i32 0, i32 0
>   %_M_start.i.i202 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
>   %_M_start.i.i199 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
>   %_M_start.i.i196 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
>   %39 = bitcast i64 %deltaTime to double
>   %mul47 = fmul double %39, 5.000000e-01
>   %arraydecay76 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 0
>   %arraydecay79 = getelementptr inbounds [8 x double], [8 x double]* %xd_local, i64 0, i64 0
>   %arraydecay80 = getelementptr inbounds [8 x double], [8 x double]* %yd_local, i64 0, i64 0
>   %arraydecay81 = getelementptr inbounds [8 x double], [8 x double]* %zd_local, i64 0, i64 0
>   %arraydecay.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 0, i64 0
>   %arraydecay2.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 1, i64 0
>   %arraydecay4.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 2, i64 0
>   %arrayidx7.i = getelementptr inbounds [8 x double], [8 x double]* %xd_local, i64 0, i64 6
>   %arrayidx8.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 0, i64 1
>   %arrayidx9.i = getelementptr inbounds [8 x double], [8 x double]* %xd_local, i64 0, i64 1
>   %arrayidx10.i = getelementptr inbounds [8 x double], [8 x double]* %xd_local, i64 0, i64 7
>   %arrayidx13.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 0, i64 2
>   %arrayidx14.i = getelementptr inbounds [8 x double], [8 x double]* %xd_local, i64 0, i64 2
>   %arrayidx15.i = getelementptr inbounds [8 x double], [8 x double]* %xd_local, i64 0, i64 4
>   %arrayidx19.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 0, i64 3
>   %arrayidx20.i = getelementptr inbounds [8 x double], [8 x double]* %xd_local, i64 0, i64 3
>   %arrayidx21.i = getelementptr inbounds [8 x double], [8 x double]* %xd_local, i64 0, i64 5
>   %arrayidx29.i = getelementptr inbounds [8 x double], [8 x double]* %yd_local, i64 0, i64 6
>   %arrayidx32.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 1, i64 1
>   %arrayidx33.i = getelementptr inbounds [8 x double], [8 x double]* %yd_local, i64 0, i64 1
>   %arrayidx34.i = getelementptr inbounds [8 x double], [8 x double]* %yd_local, i64 0, i64 7
>   %arrayidx38.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 1, i64 2
>   %arrayidx39.i = getelementptr inbounds [8 x double], [8 x double]* %yd_local, i64 0, i64 2
>   %arrayidx40.i = getelementptr inbounds [8 x double], [8 x double]* %yd_local, i64 0, i64 4
>   %arrayidx44.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 1, i64 3
>   %arrayidx45.i = getelementptr inbounds [8 x double], [8 x double]* %yd_local, i64 0, i64 3
>   %arrayidx46.i = getelementptr inbounds [8 x double], [8 x double]* %yd_local, i64 0, i64 5
>   %arrayidx54.i = getelementptr inbounds [8 x double], [8 x double]* %zd_local, i64 0, i64 6
>   %arrayidx57.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 2, i64 1
>   %arrayidx58.i = getelementptr inbounds [8 x double], [8 x double]* %zd_local, i64 0, i64 1
>   %arrayidx59.i = getelementptr inbounds [8 x double], [8 x double]* %zd_local, i64 0, i64 7
>   %arrayidx63.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 2, i64 2
>   %arrayidx64.i = getelementptr inbounds [8 x double], [8 x double]* %zd_local, i64 0, i64 2
>   %arrayidx65.i = getelementptr inbounds [8 x double], [8 x double]* %zd_local, i64 0, i64 4
>   %arrayidx69.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 2, i64 3
>   %arrayidx70.i = getelementptr inbounds [8 x double], [8 x double]* %zd_local, i64 0, i64 3
>   %arrayidx71.i = getelementptr inbounds [8 x double], [8 x double]* %zd_local, i64 0, i64 5
>   %m_dxx.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 29
>   %m_dyy.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 30
>   %m_dzz.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 31
>   %40 = sext i32 %6 to i64
>   %41 = bitcast [8 x double]* %xd_local to i64*
>   %42 = bitcast [8 x double]* %yd_local to i64*
>   %43 = bitcast [8 x double]* %zd_local to i64*
>   %44 = bitcast double* %arrayidx9.i to i64*
>   %45 = bitcast double* %arrayidx33.i to i64*
>   %46 = bitcast double* %arrayidx58.i to i64*
>   %47 = bitcast double* %arrayidx14.i to i64*
>   %48 = bitcast double* %arrayidx39.i to i64*
>   %49 = bitcast double* %arrayidx64.i to i64*
>   %50 = bitcast double* %arrayidx20.i to i64*
>   %51 = bitcast double* %arrayidx45.i to i64*
>   %52 = bitcast double* %arrayidx70.i to i64*
>   %53 = bitcast double* %arrayidx15.i to i64*
>   %54 = bitcast double* %arrayidx40.i to i64*
>   %55 = bitcast double* %arrayidx65.i to i64*
>   %56 = bitcast double* %arrayidx21.i to i64*
>   %57 = bitcast double* %arrayidx46.i to i64*
>   %58 = bitcast double* %arrayidx71.i to i64*
>   %59 = bitcast double* %arrayidx7.i to i64*
>   %60 = bitcast double* %arrayidx29.i to i64*
>   %61 = bitcast double* %arrayidx54.i to i64*
>   %62 = bitcast double* %arrayidx10.i to i64*
>   %63 = bitcast double* %arrayidx34.i to i64*
>   %64 = bitcast double* %arrayidx59.i to i64*
>   %65 = insertelement <4 x double> undef, double %mul47, i32 0
>   %66 = shufflevector <4 x double> %65, <4 x double> undef, <4 x i32> zeroinitializer
>   %67 = insertelement <4 x double> undef, double %mul47, i32 0
>   %68 = shufflevector <4 x double> %67, <4 x double> undef, <4 x i32> zeroinitializer
>   %69 = insertelement <4 x double> undef, double %mul47, i32 0
>   %70 = shufflevector <4 x double> %69, <4 x double> undef, <4 x i32> zeroinitializer
>   %71 = insertelement <4 x double> undef, double %mul47, i32 0
>   %72 = shufflevector <4 x double> %71, <4 x double> undef, <4 x i32> zeroinitializer
>   %73 = insertelement <4 x double> undef, double %mul47, i32 0
>   %74 = shufflevector <4 x double> %73, <4 x double> undef, <4 x i32> zeroinitializer
>   %75 = insertelement <4 x double> undef, double %mul47, i32 0
>   %76 = shufflevector <4 x double> %75, <4 x double> undef, <4 x i32> zeroinitializer
>   %77 = bitcast [8 x double]* %xd_local to <4 x double>*
>   %78 = bitcast [8 x double]* %x_local to <4 x double>*
>   %79 = bitcast [8 x double]* %x_local to <4 x double>*
>   %80 = bitcast [8 x double]* %yd_local to <4 x double>*
>   %81 = bitcast [8 x double]* %y_local to <4 x double>*
>   %82 = bitcast [8 x double]* %y_local to <4 x double>*
>   %83 = bitcast [8 x double]* %zd_local to <4 x double>*
>   %84 = bitcast [8 x double]* %z_local to <4 x double>*
>   %85 = bitcast [8 x double]* %z_local to <4 x double>*
>   %86 = bitcast double* %arrayidx15.i to <4 x double>*
>   %87 = bitcast double* %arrayidx16.i to <4 x double>*
>   %88 = bitcast double* %arrayidx16.i to <4 x double>*
>   %89 = bitcast double* %arrayidx40.i to <4 x double>*
>   %90 = bitcast double* %arrayidx32.i189 to <4 x double>*
>   %91 = bitcast double* %arrayidx32.i189 to <4 x double>*
>   %92 = bitcast double* %arrayidx65.i to <4 x double>*
>   %93 = bitcast double* %arrayidx48.i to <4 x double>*
>   %94 = bitcast double* %arrayidx48.i to <4 x double>*
>   br label %invoke.cont29
> 
> invoke.cont29:                                    ; preds = %invoke.cont29, %invoke.cont29.lr.ph
>   %indvars.iv = phi i64 [ %indvars.iv.next, %invoke.cont29 ], [ %40, %invoke.cont29.lr.ph ]
>   %.omp.iv.0252 = phi i32 [ %add105, %invoke.cont29 ], [ %6, %invoke.cont29.lr.ph ]
>   call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %7) #7
>   call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #7
>   call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %9) #7
>   call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %10) #7
>   call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %11) #7
>   call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %12) #7
>   call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %13) #7
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #7
>   store double 0.000000e+00, double* %detJ, align 8, !tbaa !2
>   %mul.i = shl nsw i32 %.omp.iv.0252, 3
>   %conv.i = sext i32 %mul.i to i64
>   %95 = load i32*, i32** %_M_start.i.i, align 8, !tbaa !8
>   %add.ptr.i.i = getelementptr inbounds i32, i32* %95, i64 %conv.i
>   %domain.idx.val = load double*, double** %domain.idx, align 8, !tbaa !11
>   %domain.idx178.val = load double*, double** %domain.idx178, align 8, !tbaa !11
>   %domain.idx179.val = load double*, double** %domain.idx179, align 8, !tbaa !11
>   %96 = load i32, i32* %add.ptr.i.i, align 4, !tbaa !6
>   %arrayidx1.i = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 1
>   %97 = load i32, i32* %arrayidx1.i, align 4, !tbaa !6
>   %arrayidx2.i = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 2
>   %98 = load i32, i32* %arrayidx2.i, align 4, !tbaa !6
>   %arrayidx3.i = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 3
>   %99 = load i32, i32* %arrayidx3.i, align 4, !tbaa !6
>   %arrayidx4.i = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 4
>   %100 = load i32, i32* %arrayidx4.i, align 4, !tbaa !6
>   %arrayidx5.i = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 5
>   %101 = load i32, i32* %arrayidx5.i, align 4, !tbaa !6
>   %arrayidx6.i = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 6
>   %102 = load i32, i32* %arrayidx6.i, align 4, !tbaa !6
>   %arrayidx7.i185 = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 7
>   %103 = load i32, i32* %arrayidx7.i185, align 4, !tbaa !6
>   %conv.i.i = sext i32 %96 to i64
>   %add.ptr.i.i.i = getelementptr inbounds double, double* %domain.idx.val, i64 %conv.i.i
>   %104 = bitcast double* %add.ptr.i.i.i to i64*
>   %105 = load i64, i64* %104, align 8, !tbaa !2
>   store i64 %105, i64* %15, align 16, !tbaa !2
>   %conv.i196.i = sext i32 %97 to i64
>   %add.ptr.i.i198.i = getelementptr inbounds double, double* %domain.idx.val, i64 %conv.i196.i
>   %106 = bitcast double* %add.ptr.i.i198.i to i64*
>   %107 = load i64, i64* %106, align 8, !tbaa !2
>   store i64 %107, i64* %16, align 8, !tbaa !2
>   %conv.i193.i = sext i32 %98 to i64
>   %add.ptr.i.i195.i = getelementptr inbounds double, double* %domain.idx.val, i64 %conv.i193.i
>   %108 = bitcast double* %add.ptr.i.i195.i to i64*
>   %109 = load i64, i64* %108, align 8, !tbaa !2
>   store i64 %109, i64* %17, align 16, !tbaa !2
>   %conv.i190.i = sext i32 %99 to i64
>   %add.ptr.i.i192.i = getelementptr inbounds double, double* %domain.idx.val, i64 %conv.i190.i
>   %110 = bitcast double* %add.ptr.i.i192.i to i64*
>   %111 = load i64, i64* %110, align 8, !tbaa !2
>   store i64 %111, i64* %18, align 8, !tbaa !2
>   %conv.i187.i = sext i32 %100 to i64
>   %add.ptr.i.i189.i = getelementptr inbounds double, double* %domain.idx.val, i64 %conv.i187.i
>   %112 = bitcast double* %add.ptr.i.i189.i to i64*
>   %113 = load i64, i64* %112, align 8, !tbaa !2
>   store i64 %113, i64* %19, align 16, !tbaa !2
>   %conv.i184.i = sext i32 %101 to i64
>   %add.ptr.i.i186.i = getelementptr inbounds double, double* %domain.idx.val, i64 %conv.i184.i
>   %114 = bitcast double* %add.ptr.i.i186.i to i64*
>   %115 = load i64, i64* %114, align 8, !tbaa !2
>   store i64 %115, i64* %20, align 8, !tbaa !2
>   %conv.i181.i = sext i32 %102 to i64
>   %add.ptr.i.i183.i = getelementptr inbounds double, double* %domain.idx.val, i64 %conv.i181.i
>   %116 = bitcast double* %add.ptr.i.i183.i to i64*
>   %117 = load i64, i64* %116, align 8, !tbaa !2
>   store i64 %117, i64* %21, align 16, !tbaa !2
>   %conv.i178.i = sext i32 %103 to i64
>   %add.ptr.i.i180.i = getelementptr inbounds double, double* %domain.idx.val, i64 %conv.i178.i
>   %118 = bitcast double* %add.ptr.i.i180.i to i64*
>   %119 = load i64, i64* %118, align 8, !tbaa !2
>   store i64 %119, i64* %22, align 8, !tbaa !2
>   %add.ptr.i.i177.i = getelementptr inbounds double, double* %domain.idx178.val, i64 %conv.i.i
>   %120 = bitcast double* %add.ptr.i.i177.i to i64*
>   %121 = load i64, i64* %120, align 8, !tbaa !2
>   store i64 %121, i64* %23, align 16, !tbaa !2
>   %add.ptr.i.i174.i = getelementptr inbounds double, double* %domain.idx178.val, i64 %conv.i196.i
>   %122 = bitcast double* %add.ptr.i.i174.i to i64*
>   %123 = load i64, i64* %122, align 8, !tbaa !2
>   store i64 %123, i64* %24, align 8, !tbaa !2
>   %add.ptr.i.i171.i = getelementptr inbounds double, double* %domain.idx178.val, i64 %conv.i193.i
>   %124 = bitcast double* %add.ptr.i.i171.i to i64*
>   %125 = load i64, i64* %124, align 8, !tbaa !2
>   store i64 %125, i64* %25, align 16, !tbaa !2
>   %add.ptr.i.i168.i = getelementptr inbounds double, double* %domain.idx178.val, i64 %conv.i190.i
>   %126 = bitcast double* %add.ptr.i.i168.i to i64*
>   %127 = load i64, i64* %126, align 8, !tbaa !2
>   store i64 %127, i64* %26, align 8, !tbaa !2
>   %add.ptr.i.i165.i = getelementptr inbounds double, double* %domain.idx178.val, i64 %conv.i187.i
>   %128 = bitcast double* %add.ptr.i.i165.i to i64*
>   %129 = load i64, i64* %128, align 8, !tbaa !2
>   store i64 %129, i64* %27, align 16, !tbaa !2
>   %add.ptr.i.i162.i = getelementptr inbounds double, double* %domain.idx178.val, i64 %conv.i184.i
>   %130 = bitcast double* %add.ptr.i.i162.i to i64*
>   %131 = load i64, i64* %130, align 8, !tbaa !2
>   store i64 %131, i64* %28, align 8, !tbaa !2
>   %add.ptr.i.i159.i = getelementptr inbounds double, double* %domain.idx178.val, i64 %conv.i181.i
>   %132 = bitcast double* %add.ptr.i.i159.i to i64*
>   %133 = load i64, i64* %132, align 8, !tbaa !2
>   store i64 %133, i64* %29, align 16, !tbaa !2
>   %add.ptr.i.i156.i = getelementptr inbounds double, double* %domain.idx178.val, i64 %conv.i178.i
>   %134 = bitcast double* %add.ptr.i.i156.i to i64*
>   %135 = load i64, i64* %134, align 8, !tbaa !2
>   store i64 %135, i64* %30, align 8, !tbaa !2
>   %add.ptr.i.i153.i = getelementptr inbounds double, double* %domain.idx179.val, i64 %conv.i.i
>   %136 = bitcast double* %add.ptr.i.i153.i to i64*
>   %137 = load i64, i64* %136, align 8, !tbaa !2
>   store i64 %137, i64* %31, align 16, !tbaa !2
>   %add.ptr.i.i150.i = getelementptr inbounds double, double* %domain.idx179.val, i64 %conv.i196.i
>   %138 = bitcast double* %add.ptr.i.i150.i to i64*
>   %139 = load i64, i64* %138, align 8, !tbaa !2
>   store i64 %139, i64* %32, align 8, !tbaa !2
>   %add.ptr.i.i147.i = getelementptr inbounds double, double* %domain.idx179.val, i64 %conv.i193.i
>   %140 = bitcast double* %add.ptr.i.i147.i to i64*
>   %141 = load i64, i64* %140, align 8, !tbaa !2
>   store i64 %141, i64* %33, align 16, !tbaa !2
>   %add.ptr.i.i144.i = getelementptr inbounds double, double* %domain.idx179.val, i64 %conv.i190.i
>   %142 = bitcast double* %add.ptr.i.i144.i to i64*
>   %143 = load i64, i64* %142, align 8, !tbaa !2
>   store i64 %143, i64* %34, align 8, !tbaa !2
>   %add.ptr.i.i141.i = getelementptr inbounds double, double* %domain.idx179.val, i64 %conv.i187.i
>   %144 = bitcast double* %add.ptr.i.i141.i to i64*
>   %145 = load i64, i64* %144, align 8, !tbaa !2
>   store i64 %145, i64* %35, align 16, !tbaa !2
>   %add.ptr.i.i138.i = getelementptr inbounds double, double* %domain.idx179.val, i64 %conv.i184.i
>   %146 = bitcast double* %add.ptr.i.i138.i to i64*
>   %147 = load i64, i64* %146, align 8, !tbaa !2
>   store i64 %147, i64* %36, align 8, !tbaa !2
>   %add.ptr.i.i135.i = getelementptr inbounds double, double* %domain.idx179.val, i64 %conv.i181.i
>   %148 = bitcast double* %add.ptr.i.i135.i to i64*
>   %149 = load i64, i64* %148, align 8, !tbaa !2
>   store i64 %149, i64* %37, align 16, !tbaa !2
>   %add.ptr.i.i132.i = getelementptr inbounds double, double* %domain.idx179.val, i64 %conv.i178.i
>   %150 = bitcast double* %add.ptr.i.i132.i to i64*
>   %151 = load i64, i64* %150, align 8, !tbaa !2
>   store i64 %151, i64* %38, align 8, !tbaa !2
>   %call15 = call double @_Z14CalcElemVolumePKdS0_S0_(double* nonnull %arraydecay, double* nonnull %arraydecay8, double* nonnull %arraydecay9)
>   %152 = load double*, double** %_M_start.i.i227, align 8, !tbaa !11
>   %add.ptr.i.i228 = getelementptr inbounds double, double* %152, i64 %indvars.iv
>   %153 = load double, double* %add.ptr.i.i228, align 8, !tbaa !2
>   %div18 = fdiv double %call15, %153
>   %154 = load double*, double** %_M_start.i.i236, align 8, !tbaa !11
>   %add.ptr.i.i237 = getelementptr inbounds double, double* %154, i64 %indvars.iv
>   store double %div18, double* %add.ptr.i.i237, align 8, !tbaa !2
>   %155 = load double*, double** %_M_start.i.i233, align 8, !tbaa !11
>   %add.ptr.i.i234 = getelementptr inbounds double, double* %155, i64 %indvars.iv
>   %156 = load double, double* %add.ptr.i.i234, align 8, !tbaa !2
>   %sub23 = fsub double %div18, %156
>   %157 = load double*, double** %_M_start.i.i230, align 8, !tbaa !11
>   %add.ptr.i.i231 = getelementptr inbounds double, double* %157, i64 %indvars.iv
>   store double %sub23, double* %add.ptr.i.i231, align 8, !tbaa !2
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %a.i.0.a.0..sroa_cast)
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %charLength.sroa.0.i.0..sroa_cast)
>   store i64 0, i64* %charLength.sroa.0.i, align 8, !tbaa !2
>   %158 = load double, double* %arraydecay, align 16, !tbaa !2
>   %159 = load double, double* %arrayidx10.i186, align 8, !tbaa !2
>   %160 = load double, double* %arrayidx12.i, align 16, !tbaa !2
>   %161 = load double, double* %arrayidx14.i187, align 8, !tbaa !2
>   %162 = bitcast i64 %121 to double
>   %163 = bitcast i64 %123 to double
>   %164 = bitcast i64 %125 to double
>   %165 = bitcast i64 %127 to double
>   %166 = bitcast i64 %137 to double
>   %167 = bitcast i64 %139 to double
>   %168 = bitcast i64 %141 to double
>   %169 = bitcast i64 %143 to double
>   %sub.i.i = fsub double %160, %158
>   %sub1.i.i = fsub double %161, %159
>   %sub2.i.i = fsub double %sub.i.i, %sub1.i.i
>   %sub3.i.i = fsub double %164, %162
>   %sub4.i.i = fsub double %165, %163
>   %sub5.i.i = fsub double %sub3.i.i, %sub4.i.i
>   %sub6.i.i = fsub double %168, %166
>   %sub7.i.i = fsub double %169, %167
>   %sub8.i.i = fsub double %sub6.i.i, %sub7.i.i
>   %add.i.i = fadd double %sub.i.i, %sub1.i.i
>   %add13.i.i = fadd double %sub3.i.i, %sub4.i.i
>   %add16.i.i = fadd double %sub6.i.i, %sub7.i.i
>   %mul.i.i = fmul double %sub2.i.i, %sub2.i.i
>   %mul17.i.i = fmul double %sub5.i.i, %sub5.i.i
>   %add18.i.i = fadd double %mul.i.i, %mul17.i.i
>   %mul19.i.i = fmul double %sub8.i.i, %sub8.i.i
>   %add20.i.i = fadd double %add18.i.i, %mul19.i.i
>   %mul21.i.i = fmul double %add.i.i, %add.i.i
>   %mul22.i.i = fmul double %add13.i.i, %add13.i.i
>   %add23.i.i = fadd double %mul21.i.i, %mul22.i.i
>   %mul24.i.i = fmul double %add16.i.i, %add16.i.i
>   %add25.i.i = fadd double %add23.i.i, %mul24.i.i
>   %mul26.i.i = fmul double %add20.i.i, %add25.i.i
>   %mul27.i.i = fmul double %sub2.i.i, %add.i.i
>   %mul28.i.i = fmul double %sub5.i.i, %add13.i.i
>   %add29.i.i = fadd double %mul27.i.i, %mul28.i.i
>   %mul30.i.i = fmul double %sub8.i.i, %add16.i.i
>   %add31.i.i = fadd double %add29.i.i, %mul30.i.i
>   %mul37.i.i = fmul double %add31.i.i, %add31.i.i
>   %sub38.i.i = fsub double %mul26.i.i, %mul37.i.i
>   store double %sub38.i.i, double* %a.i, align 8, !tbaa !2
>   %cmp.i.i = fcmp olt double %sub38.i.i, 0.000000e+00
>   %__b.__a.i.i = select i1 %cmp.i.i, double* %charLength.sroa.0.i.0.charLength.sroa_cast, double* %a.i
>   %170 = bitcast double* %__b.__a.i.i to i64*
>   %171 = load i64, i64* %170, align 8, !tbaa !2
>   store i64 %171, i64* %charLength.sroa.0.i, align 8, !tbaa !2
>   %172 = load double, double* %arrayidx16.i, align 16, !tbaa !2
>   %173 = load double, double* %arrayidx18.i, align 8, !tbaa !2
>   %174 = load double, double* %arrayidx20.i188, align 16, !tbaa !2
>   %175 = load double, double* %arrayidx22.i, align 8, !tbaa !2
>   %176 = load double, double* %arrayidx32.i189, align 16, !tbaa !2
>   %177 = load double, double* %arrayidx34.i190, align 8, !tbaa !2
>   %178 = load double, double* %arrayidx36.i, align 16, !tbaa !2
>   %179 = load double, double* %arrayidx38.i191, align 8, !tbaa !2
>   %180 = bitcast i64 %145 to double
>   %181 = bitcast i64 %147 to double
>   %182 = bitcast i64 %149 to double
>   %183 = bitcast i64 %151 to double
>   %sub.i283.i = fsub double %174, %172
>   %sub1.i284.i = fsub double %175, %173
>   %sub2.i285.i = fsub double %sub.i283.i, %sub1.i284.i
>   %sub3.i286.i = fsub double %178, %176
>   %sub4.i287.i = fsub double %179, %177
>   %sub5.i288.i = fsub double %sub3.i286.i, %sub4.i287.i
>   %sub6.i289.i = fsub double %182, %180
>   %sub7.i290.i = fsub double %183, %181
>   %sub8.i291.i = fsub double %sub6.i289.i, %sub7.i290.i
>   %add.i292.i = fadd double %sub.i283.i, %sub1.i284.i
>   %add13.i293.i = fadd double %sub3.i286.i, %sub4.i287.i
>   %add16.i294.i = fadd double %sub6.i289.i, %sub7.i290.i
>   %mul.i295.i = fmul double %sub2.i285.i, %sub2.i285.i
>   %mul17.i296.i = fmul double %sub5.i288.i, %sub5.i288.i
>   %add18.i297.i = fadd double %mul.i295.i, %mul17.i296.i
>   %mul19.i298.i = fmul double %sub8.i291.i, %sub8.i291.i
>   %add20.i299.i = fadd double %add18.i297.i, %mul19.i298.i
>   %mul21.i300.i = fmul double %add.i292.i, %add.i292.i
>   %mul22.i301.i = fmul double %add13.i293.i, %add13.i293.i
>   %add23.i302.i = fadd double %mul21.i300.i, %mul22.i301.i
>   %mul24.i303.i = fmul double %add16.i294.i, %add16.i294.i
>   %add25.i304.i = fadd double %add23.i302.i, %mul24.i303.i
>   %mul26.i305.i = fmul double %add20.i299.i, %add25.i304.i
>   %mul27.i306.i = fmul double %sub2.i285.i, %add.i292.i
>   %mul28.i307.i = fmul double %sub5.i288.i, %add13.i293.i
>   %add29.i308.i = fadd double %mul27.i306.i, %mul28.i307.i
>   %mul30.i309.i = fmul double %sub8.i291.i, %add16.i294.i
>   %add31.i310.i = fadd double %add29.i308.i, %mul30.i309.i
>   %mul37.i311.i = fmul double %add31.i310.i, %add31.i310.i
>   %sub38.i312.i = fsub double %mul26.i305.i, %mul37.i311.i
>   store double %sub38.i312.i, double* %a.i, align 8, !tbaa !2
>   %184 = bitcast i64 %171 to double
>   %cmp.i281.i = fcmp olt double %sub38.i312.i, %184
>   %__b.__a.i282.i = select i1 %cmp.i281.i, double* %charLength.sroa.0.i.0.charLength.sroa_cast, double* %a.i
>   %185 = bitcast double* %__b.__a.i282.i to i64*
>   %186 = load i64, i64* %185, align 8, !tbaa !2
>   store i64 %186, i64* %charLength.sroa.0.i, align 8, !tbaa !2
>   %sub.i251.i = fsub double %173, %158
>   %sub1.i252.i = fsub double %172, %159
>   %sub2.i253.i = fsub double %sub.i251.i, %sub1.i252.i
>   %sub3.i254.i = fsub double %177, %162
>   %sub4.i255.i = fsub double %176, %163
>   %sub5.i256.i = fsub double %sub3.i254.i, %sub4.i255.i
>   %sub6.i257.i = fsub double %181, %166
>   %sub7.i258.i = fsub double %180, %167
>   %sub8.i259.i = fsub double %sub6.i257.i, %sub7.i258.i
>   %add.i260.i = fadd double %sub1.i252.i, %sub.i251.i
>   %add13.i261.i = fadd double %sub4.i255.i, %sub3.i254.i
>   %add16.i262.i = fadd double %sub7.i258.i, %sub6.i257.i
>   %mul.i263.i = fmul double %sub2.i253.i, %sub2.i253.i
>   %mul17.i264.i = fmul double %sub5.i256.i, %sub5.i256.i
>   %add18.i265.i = fadd double %mul.i263.i, %mul17.i264.i
>   %mul19.i266.i = fmul double %sub8.i259.i, %sub8.i259.i
>   %add20.i267.i = fadd double %add18.i265.i, %mul19.i266.i
>   %mul21.i268.i = fmul double %add.i260.i, %add.i260.i
>   %mul22.i269.i = fmul double %add13.i261.i, %add13.i261.i
>   %add23.i270.i = fadd double %mul21.i268.i, %mul22.i269.i
>   %mul24.i271.i = fmul double %add16.i262.i, %add16.i262.i
>   %add25.i272.i = fadd double %add23.i270.i, %mul24.i271.i
>   %mul26.i273.i = fmul double %add20.i267.i, %add25.i272.i
>   %mul27.i274.i = fmul double %sub2.i253.i, %add.i260.i
>   %mul28.i275.i = fmul double %sub5.i256.i, %add13.i261.i
>   %add29.i276.i = fadd double %mul27.i274.i, %mul28.i275.i
>   %mul30.i277.i = fmul double %sub8.i259.i, %add16.i262.i
>   %add31.i278.i = fadd double %add29.i276.i, %mul30.i277.i
>   %mul37.i279.i = fmul double %add31.i278.i, %add31.i278.i
>   %sub38.i280.i = fsub double %mul26.i273.i, %mul37.i279.i
>   store double %sub38.i280.i, double* %a.i, align 8, !tbaa !2
>   %187 = bitcast i64 %186 to double
>   %cmp.i249.i = fcmp olt double %sub38.i280.i, %187
>   %__b.__a.i250.i = select i1 %cmp.i249.i, double* %charLength.sroa.0.i.0.charLength.sroa_cast, double* %a.i
>   %188 = bitcast double* %__b.__a.i250.i to i64*
>   %189 = load i64, i64* %188, align 8, !tbaa !2
>   store i64 %189, i64* %charLength.sroa.0.i, align 8, !tbaa !2
>   %sub.i219.i = fsub double %174, %159
>   %sub1.i220.i = fsub double %173, %160
>   %sub2.i221.i = fsub double %sub.i219.i, %sub1.i220.i
>   %sub3.i222.i = fsub double %178, %163
>   %sub4.i223.i = fsub double %177, %164
>   %sub5.i224.i = fsub double %sub3.i222.i, %sub4.i223.i
>   %sub6.i225.i = fsub double %182, %167
>   %sub7.i226.i = fsub double %181, %168
>   %sub8.i227.i = fsub double %sub6.i225.i, %sub7.i226.i
>   %add.i228.i = fadd double %sub1.i220.i, %sub.i219.i
>   %add13.i229.i = fadd double %sub4.i223.i, %sub3.i222.i
>   %add16.i230.i = fadd double %sub7.i226.i, %sub6.i225.i
>   %mul.i231.i = fmul double %sub2.i221.i, %sub2.i221.i
>   %mul17.i232.i = fmul double %sub5.i224.i, %sub5.i224.i
>   %add18.i233.i = fadd double %mul.i231.i, %mul17.i232.i
>   %mul19.i234.i = fmul double %sub8.i227.i, %sub8.i227.i
>   %add20.i235.i = fadd double %add18.i233.i, %mul19.i234.i
>   %mul21.i236.i = fmul double %add.i228.i, %add.i228.i
>   %mul22.i237.i = fmul double %add13.i229.i, %add13.i229.i
>   %add23.i238.i = fadd double %mul21.i236.i, %mul22.i237.i
>   %mul24.i239.i = fmul double %add16.i230.i, %add16.i230.i
>   %add25.i240.i = fadd double %add23.i238.i, %mul24.i239.i
>   %mul26.i241.i = fmul double %add20.i235.i, %add25.i240.i
>   %mul27.i242.i = fmul double %sub2.i221.i, %add.i228.i
>   %mul28.i243.i = fmul double %sub5.i224.i, %add13.i229.i
>   %add29.i244.i = fadd double %mul27.i242.i, %mul28.i243.i
>   %mul30.i245.i = fmul double %sub8.i227.i, %add16.i230.i
>   %add31.i246.i = fadd double %add29.i244.i, %mul30.i245.i
>   %mul37.i247.i = fmul double %add31.i246.i, %add31.i246.i
>   %sub38.i248.i = fsub double %mul26.i241.i, %mul37.i247.i
>   store double %sub38.i248.i, double* %a.i, align 8, !tbaa !2
>   %190 = bitcast i64 %189 to double
>   %cmp.i217.i = fcmp olt double %sub38.i248.i, %190
>   %charLength.sroa.0.i.0.charLength.sroa_cast.val = load double, double* %charLength.sroa.0.i.0.charLength.sroa_cast, align 8
>   %191 = select i1 %cmp.i217.i, double %charLength.sroa.0.i.0.charLength.sroa_cast.val, double %sub38.i248.i
>   %sub.i187.i = fsub double %175, %160
>   %sub1.i188.i = fsub double %174, %161
>   %sub2.i189.i = fsub double %sub.i187.i, %sub1.i188.i
>   %sub3.i190.i = fsub double %179, %164
>   %sub4.i191.i = fsub double %178, %165
>   %sub5.i192.i = fsub double %sub3.i190.i, %sub4.i191.i
>   %sub6.i193.i = fsub double %183, %168
>   %sub7.i194.i = fsub double %182, %169
>   %sub8.i195.i = fsub double %sub6.i193.i, %sub7.i194.i
>   %add.i196.i = fadd double %sub1.i188.i, %sub.i187.i
>   %add13.i197.i = fadd double %sub4.i191.i, %sub3.i190.i
>   %add16.i198.i = fadd double %sub7.i194.i, %sub6.i193.i
>   %mul.i199.i = fmul double %sub2.i189.i, %sub2.i189.i
>   %mul17.i200.i = fmul double %sub5.i192.i, %sub5.i192.i
>   %add18.i201.i = fadd double %mul.i199.i, %mul17.i200.i
>   %mul19.i202.i = fmul double %sub8.i195.i, %sub8.i195.i
>   %add20.i203.i = fadd double %add18.i201.i, %mul19.i202.i
>   %mul21.i204.i = fmul double %add.i196.i, %add.i196.i
>   %mul22.i205.i = fmul double %add13.i197.i, %add13.i197.i
>   %add23.i206.i = fadd double %mul21.i204.i, %mul22.i205.i
>   %mul24.i207.i = fmul double %add16.i198.i, %add16.i198.i
>   %add25.i208.i = fadd double %add23.i206.i, %mul24.i207.i
>   %mul26.i209.i = fmul double %add20.i203.i, %add25.i208.i
>   %mul27.i210.i = fmul double %sub2.i189.i, %add.i196.i
>   %mul28.i211.i = fmul double %sub5.i192.i, %add13.i197.i
>   %add29.i212.i = fadd double %mul27.i210.i, %mul28.i211.i
>   %mul30.i213.i = fmul double %sub8.i195.i, %add16.i198.i
>   %add31.i214.i = fadd double %add29.i212.i, %mul30.i213.i
>   %mul37.i215.i = fmul double %add31.i214.i, %add31.i214.i
>   %sub38.i216.i = fsub double %mul26.i209.i, %mul37.i215.i
>   %cmp.i185.i = fcmp olt double %sub38.i216.i, %191
>   %192 = select i1 %cmp.i185.i, double %191, double %sub38.i216.i
>   %sub.i155.i = fsub double %172, %161
>   %sub1.i156.i = fsub double %175, %158
>   %sub2.i157.i = fsub double %sub.i155.i, %sub1.i156.i
>   %sub3.i158.i = fsub double %176, %165
>   %sub4.i159.i = fsub double %179, %162
>   %sub5.i160.i = fsub double %sub3.i158.i, %sub4.i159.i
>   %sub6.i161.i = fsub double %180, %169
>   %sub7.i162.i = fsub double %183, %166
>   %sub8.i163.i = fsub double %sub6.i161.i, %sub7.i162.i
>   %add.i164.i = fadd double %sub.i155.i, %sub1.i156.i
>   %add13.i165.i = fadd double %sub3.i158.i, %sub4.i159.i
>   %add16.i166.i = fadd double %sub6.i161.i, %sub7.i162.i
>   %mul.i167.i = fmul double %sub2.i157.i, %sub2.i157.i
>   %mul17.i168.i = fmul double %sub5.i160.i, %sub5.i160.i
>   %add18.i169.i = fadd double %mul.i167.i, %mul17.i168.i
>   %mul19.i170.i = fmul double %sub8.i163.i, %sub8.i163.i
>   %add20.i171.i = fadd double %add18.i169.i, %mul19.i170.i
>   %mul21.i172.i = fmul double %add.i164.i, %add.i164.i
>   %mul22.i173.i = fmul double %add13.i165.i, %add13.i165.i
>   %add23.i174.i = fadd double %mul21.i172.i, %mul22.i173.i
>   %mul24.i175.i = fmul double %add16.i166.i, %add16.i166.i
>   %add25.i176.i = fadd double %add23.i174.i, %mul24.i175.i
>   %mul26.i177.i = fmul double %add20.i171.i, %add25.i176.i
>   %mul27.i178.i = fmul double %sub2.i157.i, %add.i164.i
>   %mul28.i179.i = fmul double %sub5.i160.i, %add13.i165.i
>   %add29.i180.i = fadd double %mul27.i178.i, %mul28.i179.i
>   %mul30.i181.i = fmul double %sub8.i163.i, %add16.i166.i
>   %add31.i182.i = fadd double %add29.i180.i, %mul30.i181.i
>   %mul37.i183.i = fmul double %add31.i182.i, %add31.i182.i
>   %sub38.i184.i = fsub double %mul26.i177.i, %mul37.i183.i
>   %cmp.i153.i = fcmp olt double %sub38.i184.i, %192
>   %193 = select i1 %cmp.i153.i, double %192, double %sub38.i184.i
>   %mul.i224 = fmul double %call15, 4.000000e+00
>   %call.i.i = call double @sqrt(double %193) #7
>   %div.i225 = fdiv double %mul.i224, %call.i.i
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %charLength.sroa.0.i.0..sroa_cast)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %a.i.0.a.0..sroa_cast)
>   %194 = load double*, double** %_M_start.i.i205, align 8, !tbaa !11
>   %add.ptr.i.i206 = getelementptr inbounds double, double* %194, i64 %indvars.iv
>   store double %div.i225, double* %add.ptr.i.i206, align 8, !tbaa !2
>   %195 = load double*, double** %_M_start.i.i202, align 8, !tbaa !11
>   %196 = load double*, double** %_M_start.i.i199, align 8, !tbaa !11
>   %197 = load double*, double** %_M_start.i.i196, align 8, !tbaa !11
>   %198 = load i32, i32* %add.ptr.i.i, align 4, !tbaa !6
>   %conv.i201 = sext i32 %198 to i64
>   %add.ptr.i.i203 = getelementptr inbounds double, double* %195, i64 %conv.i201
>   %199 = bitcast double* %add.ptr.i.i203 to i64*
>   %200 = load i64, i64* %199, align 8, !tbaa !2
>   store i64 %200, i64* %41, align 16, !tbaa !2
>   %add.ptr.i.i200 = getelementptr inbounds double, double* %196, i64 %conv.i201
>   %201 = bitcast double* %add.ptr.i.i200 to i64*
>   %202 = load i64, i64* %201, align 8, !tbaa !2
>   store i64 %202, i64* %42, align 16, !tbaa !2
>   %add.ptr.i.i197 = getelementptr inbounds double, double* %197, i64 %conv.i201
>   %203 = bitcast double* %add.ptr.i.i197 to i64*
>   %204 = load i64, i64* %203, align 8, !tbaa !2
>   store i64 %204, i64* %43, align 16, !tbaa !2
>   %205 = load i32, i32* %arrayidx1.i, align 4, !tbaa !6
>   %conv.i201.1 = sext i32 %205 to i64
>   %add.ptr.i.i203.1 = getelementptr inbounds double, double* %195, i64 %conv.i201.1
>   %206 = bitcast double* %add.ptr.i.i203.1 to i64*
>   %207 = load i64, i64* %206, align 8, !tbaa !2
>   store i64 %207, i64* %44, align 8, !tbaa !2
>   %add.ptr.i.i200.1 = getelementptr inbounds double, double* %196, i64 %conv.i201.1
>   %208 = bitcast double* %add.ptr.i.i200.1 to i64*
>   %209 = load i64, i64* %208, align 8, !tbaa !2
>   store i64 %209, i64* %45, align 8, !tbaa !2
>   %add.ptr.i.i197.1 = getelementptr inbounds double, double* %197, i64 %conv.i201.1
>   %210 = bitcast double* %add.ptr.i.i197.1 to i64*
>   %211 = load i64, i64* %210, align 8, !tbaa !2
>   store i64 %211, i64* %46, align 8, !tbaa !2
>   %212 = load i32, i32* %arrayidx2.i, align 4, !tbaa !6
>   %conv.i201.2 = sext i32 %212 to i64
>   %add.ptr.i.i203.2 = getelementptr inbounds double, double* %195, i64 %conv.i201.2
>   %213 = bitcast double* %add.ptr.i.i203.2 to i64*
>   %214 = load i64, i64* %213, align 8, !tbaa !2
>   store i64 %214, i64* %47, align 16, !tbaa !2
>   %add.ptr.i.i200.2 = getelementptr inbounds double, double* %196, i64 %conv.i201.2
>   %215 = bitcast double* %add.ptr.i.i200.2 to i64*
>   %216 = load i64, i64* %215, align 8, !tbaa !2
>   store i64 %216, i64* %48, align 16, !tbaa !2
>   %add.ptr.i.i197.2 = getelementptr inbounds double, double* %197, i64 %conv.i201.2
>   %217 = bitcast double* %add.ptr.i.i197.2 to i64*
>   %218 = load i64, i64* %217, align 8, !tbaa !2
>   store i64 %218, i64* %49, align 16, !tbaa !2
>   %219 = load i32, i32* %arrayidx3.i, align 4, !tbaa !6
>   %conv.i201.3 = sext i32 %219 to i64
>   %add.ptr.i.i203.3 = getelementptr inbounds double, double* %195, i64 %conv.i201.3
>   %220 = bitcast double* %add.ptr.i.i203.3 to i64*
>   %221 = load i64, i64* %220, align 8, !tbaa !2
>   store i64 %221, i64* %50, align 8, !tbaa !2
>   %add.ptr.i.i200.3 = getelementptr inbounds double, double* %196, i64 %conv.i201.3
>   %222 = bitcast double* %add.ptr.i.i200.3 to i64*
>   %223 = load i64, i64* %222, align 8, !tbaa !2
>   store i64 %223, i64* %51, align 8, !tbaa !2
>   %add.ptr.i.i197.3 = getelementptr inbounds double, double* %197, i64 %conv.i201.3
>   %224 = bitcast double* %add.ptr.i.i197.3 to i64*
>   %225 = load i64, i64* %224, align 8, !tbaa !2
>   store i64 %225, i64* %52, align 8, !tbaa !2
>   %226 = load i32, i32* %arrayidx4.i, align 4, !tbaa !6
>   %conv.i201.4 = sext i32 %226 to i64
>   %add.ptr.i.i203.4 = getelementptr inbounds double, double* %195, i64 %conv.i201.4
>   %227 = bitcast double* %add.ptr.i.i203.4 to i64*
>   %228 = load i64, i64* %227, align 8, !tbaa !2
>   store i64 %228, i64* %53, align 16, !tbaa !2
>   %add.ptr.i.i200.4 = getelementptr inbounds double, double* %196, i64 %conv.i201.4
>   %229 = bitcast double* %add.ptr.i.i200.4 to i64*
>   %230 = load i64, i64* %229, align 8, !tbaa !2
>   store i64 %230, i64* %54, align 16, !tbaa !2
>   %add.ptr.i.i197.4 = getelementptr inbounds double, double* %197, i64 %conv.i201.4
>   %231 = bitcast double* %add.ptr.i.i197.4 to i64*
>   %232 = load i64, i64* %231, align 8, !tbaa !2
>   store i64 %232, i64* %55, align 16, !tbaa !2
>   %233 = load i32, i32* %arrayidx5.i, align 4, !tbaa !6
>   %conv.i201.5 = sext i32 %233 to i64
>   %add.ptr.i.i203.5 = getelementptr inbounds double, double* %195, i64 %conv.i201.5
>   %234 = bitcast double* %add.ptr.i.i203.5 to i64*
>   %235 = load i64, i64* %234, align 8, !tbaa !2
>   store i64 %235, i64* %56, align 8, !tbaa !2
>   %add.ptr.i.i200.5 = getelementptr inbounds double, double* %196, i64 %conv.i201.5
>   %236 = bitcast double* %add.ptr.i.i200.5 to i64*
>   %237 = load i64, i64* %236, align 8, !tbaa !2
>   store i64 %237, i64* %57, align 8, !tbaa !2
>   %add.ptr.i.i197.5 = getelementptr inbounds double, double* %197, i64 %conv.i201.5
>   %238 = bitcast double* %add.ptr.i.i197.5 to i64*
>   %239 = load i64, i64* %238, align 8, !tbaa !2
>   store i64 %239, i64* %58, align 8, !tbaa !2
>   %240 = load i32, i32* %arrayidx6.i, align 4, !tbaa !6
>   %conv.i201.6 = sext i32 %240 to i64
>   %add.ptr.i.i203.6 = getelementptr inbounds double, double* %195, i64 %conv.i201.6
>   %241 = bitcast double* %add.ptr.i.i203.6 to i64*
>   %242 = load i64, i64* %241, align 8, !tbaa !2
>   store i64 %242, i64* %59, align 16, !tbaa !2
>   %add.ptr.i.i200.6 = getelementptr inbounds double, double* %196, i64 %conv.i201.6
>   %243 = bitcast double* %add.ptr.i.i200.6 to i64*
>   %244 = load i64, i64* %243, align 8, !tbaa !2
>   store i64 %244, i64* %60, align 16, !tbaa !2
>   %add.ptr.i.i197.6 = getelementptr inbounds double, double* %197, i64 %conv.i201.6
>   %245 = bitcast double* %add.ptr.i.i197.6 to i64*
>   %246 = load i64, i64* %245, align 8, !tbaa !2
>   store i64 %246, i64* %61, align 16, !tbaa !2
>   %247 = load i32, i32* %arrayidx7.i185, align 4, !tbaa !6
>   %conv.i201.7 = sext i32 %247 to i64
>   %add.ptr.i.i203.7 = getelementptr inbounds double, double* %195, i64 %conv.i201.7
>   %248 = bitcast double* %add.ptr.i.i203.7 to i64*
>   %249 = load i64, i64* %248, align 8, !tbaa !2
>   store i64 %249, i64* %62, align 8, !tbaa !2
>   %add.ptr.i.i200.7 = getelementptr inbounds double, double* %196, i64 %conv.i201.7
>   %250 = bitcast double* %add.ptr.i.i200.7 to i64*
>   %251 = load i64, i64* %250, align 8, !tbaa !2
>   store i64 %251, i64* %63, align 8, !tbaa !2
>   %add.ptr.i.i197.7 = getelementptr inbounds double, double* %197, i64 %conv.i201.7
>   %252 = bitcast double* %add.ptr.i.i197.7 to i64*
>   %253 = load i64, i64* %252, align 8, !tbaa !2
>   store i64 %253, i64* %64, align 8, !tbaa !2
>   %254 = load <4 x double>, <4 x double>* %77, align 16, !tbaa !2
>   %255 = fmul <4 x double> %66, %254
>   %256 = load <4 x double>, <4 x double>* %78, align 16, !tbaa !2
>   %257 = fsub <4 x double> %256, %255
>   store <4 x double> %257, <4 x double>* %79, align 16, !tbaa !2
>   %258 = load <4 x double>, <4 x double>* %80, align 16, !tbaa !2
>   %259 = fmul <4 x double> %70, %258
>   %260 = load <4 x double>, <4 x double>* %81, align 16, !tbaa !2
>   %261 = fsub <4 x double> %260, %259
>   store <4 x double> %261, <4 x double>* %82, align 16, !tbaa !2
>   %262 = load <4 x double>, <4 x double>* %83, align 16, !tbaa !2
>   %263 = fmul <4 x double> %74, %262
>   %264 = load <4 x double>, <4 x double>* %84, align 16, !tbaa !2
>   %265 = fsub <4 x double> %264, %263
>   store <4 x double> %265, <4 x double>* %85, align 16, !tbaa !2
>   %266 = load <4 x double>, <4 x double>* %86, align 16, !tbaa !2
>   %267 = fmul <4 x double> %68, %266
>   %268 = load <4 x double>, <4 x double>* %87, align 16, !tbaa !2
>   %269 = fsub <4 x double> %268, %267
>   store <4 x double> %269, <4 x double>* %88, align 16, !tbaa !2
>   %270 = load <4 x double>, <4 x double>* %89, align 16, !tbaa !2
>   %271 = fmul <4 x double> %72, %270
>   %272 = load <4 x double>, <4 x double>* %90, align 16, !tbaa !2
>   %273 = fsub <4 x double> %272, %271
>   store <4 x double> %273, <4 x double>* %91, align 16, !tbaa !2
>   %274 = load <4 x double>, <4 x double>* %92, align 16, !tbaa !2
>   %275 = fmul <4 x double> %76, %274
>   %276 = load <4 x double>, <4 x double>* %93, align 16, !tbaa !2
>   %277 = fsub <4 x double> %276, %275
>   store <4 x double> %277, <4 x double>* %94, align 16, !tbaa !2
>   call fastcc void @_ZL32CalcElemShapeFunctionDerivativesPKdS0_S0_PA8_dPd(double* nonnull %arraydecay, double* nonnull %arraydecay8, double* nonnull %arraydecay9, [8 x double]* nonnull %arraydecay76, double* nonnull %detJ)
>   %278 = load double, double* %detJ, align 8, !tbaa !2
>   %div.i = fdiv double 1.000000e+00, %278
>   %279 = load double, double* %arraydecay.i, align 16, !tbaa !2
>   %280 = load double, double* %arraydecay79, align 16, !tbaa !2
>   %281 = extractelement <4 x double> %266, i32 2
>   %sub.i = fsub double %280, %281
>   %mul.i184 = fmul double %279, %sub.i
>   %282 = load double, double* %arrayidx8.i, align 8, !tbaa !2
>   %283 = load double, double* %arrayidx9.i, align 8, !tbaa !2
>   %284 = extractelement <4 x double> %266, i32 3
>   %sub11.i = fsub double %283, %284
>   %mul12.i = fmul double %282, %sub11.i
>   %add.i = fadd double %mul.i184, %mul12.i
>   %285 = load double, double* %arrayidx13.i, align 16, !tbaa !2
>   %286 = load double, double* %arrayidx14.i, align 16, !tbaa !2
>   %287 = extractelement <4 x double> %266, i32 0
>   %sub16.i = fsub double %286, %287
>   %mul17.i = fmul double %285, %sub16.i
>   %add18.i = fadd double %add.i, %mul17.i
>   %288 = load double, double* %arrayidx19.i, align 8, !tbaa !2
>   %shift = shufflevector <4 x double> %254, <4 x double> undef, <4 x i32> <i32 undef, i32 3, i32 undef, i32 undef>
>   %289 = fsub <4 x double> %shift, %266
>   %sub22.i = extractelement <4 x double> %289, i64 1
>   %mul23.i = fmul double %288, %sub22.i
>   %add24.i = fadd double %add18.i, %mul23.i
>   %mul25.i = fmul double %div.i, %add24.i
>   %290 = load double, double* %arraydecay2.i, align 16, !tbaa !2
>   %291 = load double, double* %arraydecay80, align 16, !tbaa !2
>   %292 = extractelement <4 x double> %270, i32 2
>   %sub30.i = fsub double %291, %292
>   %mul31.i = fmul double %290, %sub30.i
>   %293 = load double, double* %arrayidx32.i, align 8, !tbaa !2
>   %294 = load double, double* %arrayidx33.i, align 8, !tbaa !2
>   %295 = extractelement <4 x double> %270, i32 3
>   %sub35.i = fsub double %294, %295
>   %mul36.i = fmul double %293, %sub35.i
>   %add37.i = fadd double %mul31.i, %mul36.i
>   %296 = load double, double* %arrayidx38.i, align 16, !tbaa !2
>   %297 = load double, double* %arrayidx39.i, align 16, !tbaa !2
>   %298 = extractelement <4 x double> %270, i32 0
>   %sub41.i = fsub double %297, %298
>   %mul42.i = fmul double %296, %sub41.i
>   %add43.i = fadd double %add37.i, %mul42.i
>   %299 = load double, double* %arrayidx44.i, align 8, !tbaa !2
>   %300 = load double, double* %arrayidx45.i, align 8, !tbaa !2
>   %301 = extractelement <4 x double> %270, i32 1
>   %sub47.i = fsub double %300, %301
>   %mul48.i = fmul double %299, %sub47.i
>   %add49.i = fadd double %add43.i, %mul48.i
>   %mul50.i = fmul double %div.i, %add49.i
>   %302 = load double, double* %arraydecay4.i, align 16, !tbaa !2
>   %303 = load double, double* %arraydecay81, align 16, !tbaa !2
>   %304 = extractelement <4 x double> %274, i32 2
>   %sub55.i = fsub double %303, %304
>   %mul56.i = fmul double %302, %sub55.i
>   %305 = load double, double* %arrayidx57.i, align 8, !tbaa !2
>   %306 = load double, double* %arrayidx58.i, align 8, !tbaa !2
>   %307 = extractelement <4 x double> %274, i32 3
>   %sub60.i = fsub double %306, %307
>   %mul61.i = fmul double %305, %sub60.i
>   %add62.i = fadd double %mul56.i, %mul61.i
>   %308 = load double, double* %arrayidx63.i, align 16, !tbaa !2
>   %309 = load double, double* %arrayidx64.i, align 16, !tbaa !2
>   %310 = load double, double* %arrayidx65.i, align 16, !tbaa !2
>   %sub66.i = fsub double %309, %310
>   %mul67.i = fmul double %308, %sub66.i
>   %add68.i = fadd double %add62.i, %mul67.i
>   %311 = load double, double* %arrayidx69.i, align 8, !tbaa !2
>   %312 = load double, double* %arrayidx70.i, align 8, !tbaa !2
>   %313 = extractelement <4 x double> %274, i32 1
>   %sub72.i = fsub double %312, %313
>   %mul73.i = fmul double %311, %sub72.i
>   %add74.i = fadd double %add68.i, %mul73.i
>   %mul75.i = fmul double %div.i, %add74.i
>   %314 = load double*, double** %m_dxx.i, align 8, !tbaa !13
>   %arrayidx.i183 = getelementptr inbounds double, double* %314, i64 %indvars.iv
>   store double %mul25.i, double* %arrayidx.i183, align 8, !tbaa !2
>   %315 = load double*, double** %m_dyy.i, align 8, !tbaa !17
>   %arrayidx.i181 = getelementptr inbounds double, double* %315, i64 %indvars.iv
>   store double %mul50.i, double* %arrayidx.i181, align 8, !tbaa !2
>   %316 = load double*, double** %m_dzz.i, align 8, !tbaa !18
>   %arrayidx.i = getelementptr inbounds double, double* %316, i64 %indvars.iv
>   store double %mul75.i, double* %arrayidx.i, align 8, !tbaa !2
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #7
>   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %13) #7
>   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %12) #7
>   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %11) #7
>   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %10) #7
>   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #7
>   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #7
>   call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %7) #7
>   %indvars.iv.next = add nsw i64 %indvars.iv, 1
>   %add105 = add nsw i32 %.omp.iv.0252, 1
>   %317 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %318 = sext i32 %317 to i64
>   %cmp7.not.not = icmp slt i64 %indvars.iv, %318
>   br i1 %cmp7.not.not, label %invoke.cont29, label %omp.loop.exit
> 
> omp.loop.exit:                                    ; preds = %invoke.cont29, %omp.precond.then
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %4)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #7
>   br label %omp.precond.end
576c1199,1201
< declare dso_local %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808), %"class.std::vector.15"*) local_unnamed_addr #0
---
> omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
>   ret void
> }
578c1203,1204
< declare dso_local i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808)) local_unnamed_addr #0
---
> ; Function Attrs: nounwind
> declare dso_local void @__kmpc_for_static_init_4(%struct.ident_t*, i32, i32, i32*, i32*, i32*, i32*, i32, i32) local_unnamed_addr #7
580,1319c1206
< ; Function Attrs: norecurse nounwind uwtable
< define internal void @.omp_outlined.(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, i64 %2, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %3, i64 %4) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %6 = alloca i32, align 4
<   %7 = alloca i32, align 4
<   %8 = alloca i32, align 4
<   %9 = alloca i32, align 4
<   %10 = alloca [3 x [8 x double]], align 16
<   %11 = alloca [8 x double], align 16
<   %12 = alloca [8 x double], align 16
<   %13 = alloca [8 x double], align 16
<   %14 = alloca double, align 8
<   %15 = trunc i64 %2 to i32
<   %16 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZ22CalcKinematicsForElemsR6DomaindiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %16)
<           to label %17 unwind label %660
< 
< 17:                                               ; preds = %5
<   %18 = add nsw i32 %15, -1
<   %19 = icmp sgt i32 %15, 0
<   br i1 %19, label %20, label %656
< 
< 20:                                               ; preds = %17
<   %21 = bitcast i32* %6 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #10
<   store i32 0, i32* %6, align 4, !tbaa !12
<   %22 = bitcast i32* %7 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22) #10
<   store i32 %18, i32* %7, align 4, !tbaa !12
<   %23 = bitcast i32* %8 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %23) #10
<   store i32 1, i32* %8, align 4, !tbaa !12
<   %24 = bitcast i32* %9 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #10
<   store i32 0, i32* %9, align 4, !tbaa !12
<   %25 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %25, i32 34, i32* nonnull %9, i32* nonnull %6, i32* nonnull %7, i32* nonnull %8, i32 1, i32 1) #10
<   %26 = load i32, i32* %7, align 4, !tbaa !12
<   %27 = icmp slt i32 %26, %15
<   %28 = select i1 %27, i32 %26, i32 %18
<   store i32 %28, i32* %7, align 4, !tbaa !12
<   %29 = load i32, i32* %6, align 4, !tbaa !12
<   %30 = icmp sgt i32 %29, %28
<   br i1 %30, label %655, label %31
< 
< 31:                                               ; preds = %20
<   %32 = bitcast [3 x [8 x double]]* %10 to i8*
<   %33 = bitcast [8 x double]* %11 to i8*
<   %34 = bitcast [8 x double]* %12 to i8*
<   %35 = bitcast [8 x double]* %13 to i8*
<   %36 = bitcast double* %14 to i8*
<   %37 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 21, i32 0, i32 0, i32 0
<   %38 = getelementptr inbounds [8 x double], [8 x double]* %11, i64 0, i64 0
<   %39 = getelementptr inbounds [8 x double], [8 x double]* %12, i64 0, i64 0
<   %40 = getelementptr inbounds [8 x double], [8 x double]* %13, i64 0, i64 0
<   %41 = getelementptr %class.Domain, %class.Domain* %3, i64 0, i32 0, i32 0, i32 0, i32 0
<   %42 = getelementptr %class.Domain, %class.Domain* %3, i64 0, i32 1, i32 0, i32 0, i32 0
<   %43 = getelementptr %class.Domain, %class.Domain* %3, i64 0, i32 2, i32 0, i32 0, i32 0
<   %44 = getelementptr inbounds [8 x double], [8 x double]* %11, i64 0, i64 1
<   %45 = getelementptr inbounds [8 x double], [8 x double]* %11, i64 0, i64 2
<   %46 = getelementptr inbounds [8 x double], [8 x double]* %11, i64 0, i64 3
<   %47 = getelementptr inbounds [8 x double], [8 x double]* %11, i64 0, i64 4
<   %48 = getelementptr inbounds [8 x double], [8 x double]* %11, i64 0, i64 5
<   %49 = getelementptr inbounds [8 x double], [8 x double]* %11, i64 0, i64 6
<   %50 = getelementptr inbounds [8 x double], [8 x double]* %11, i64 0, i64 7
<   %51 = getelementptr inbounds [8 x double], [8 x double]* %12, i64 0, i64 1
<   %52 = getelementptr inbounds [8 x double], [8 x double]* %12, i64 0, i64 2
<   %53 = getelementptr inbounds [8 x double], [8 x double]* %12, i64 0, i64 3
<   %54 = getelementptr inbounds [8 x double], [8 x double]* %12, i64 0, i64 4
<   %55 = getelementptr inbounds [8 x double], [8 x double]* %12, i64 0, i64 5
<   %56 = getelementptr inbounds [8 x double], [8 x double]* %12, i64 0, i64 6
<   %57 = getelementptr inbounds [8 x double], [8 x double]* %12, i64 0, i64 7
<   %58 = getelementptr inbounds [8 x double], [8 x double]* %13, i64 0, i64 1
<   %59 = getelementptr inbounds [8 x double], [8 x double]* %13, i64 0, i64 2
<   %60 = getelementptr inbounds [8 x double], [8 x double]* %13, i64 0, i64 3
<   %61 = getelementptr inbounds [8 x double], [8 x double]* %13, i64 0, i64 4
<   %62 = getelementptr inbounds [8 x double], [8 x double]* %13, i64 0, i64 5
<   %63 = getelementptr inbounds [8 x double], [8 x double]* %13, i64 0, i64 6
<   %64 = getelementptr inbounds [8 x double], [8 x double]* %13, i64 0, i64 7
<   %65 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 44, i32 0, i32 0, i32 0
<   %66 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 45, i32 0, i32 0, i32 0
<   %67 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 43, i32 0, i32 0, i32 0
<   %68 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 46, i32 0, i32 0, i32 0
<   %69 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 48, i32 0, i32 0, i32 0
<   %70 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 3, i32 0, i32 0, i32 0
<   %71 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 4, i32 0, i32 0, i32 0
<   %72 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 5, i32 0, i32 0, i32 0
<   %73 = bitcast i64 %4 to double
<   %74 = fmul double %73, 5.000000e-01
<   %75 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %10, i64 0, i64 0
<   %76 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %10, i64 0, i64 0, i64 0
<   %77 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %10, i64 0, i64 1, i64 0
<   %78 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %10, i64 0, i64 2, i64 0
<   %79 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %10, i64 0, i64 0, i64 1
<   %80 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %10, i64 0, i64 0, i64 2
<   %81 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %10, i64 0, i64 0, i64 3
<   %82 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %10, i64 0, i64 1, i64 1
<   %83 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %10, i64 0, i64 1, i64 2
<   %84 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %10, i64 0, i64 1, i64 3
<   %85 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %10, i64 0, i64 2, i64 1
<   %86 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %10, i64 0, i64 2, i64 2
<   %87 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %10, i64 0, i64 2, i64 3
<   %88 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 29
<   %89 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 30
<   %90 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 31
<   %91 = sext i32 %29 to i64
<   %92 = insertelement <2 x double> poison, double %74, i32 0
<   %93 = shufflevector <2 x double> %92, <2 x double> undef, <2 x i32> zeroinitializer
<   %94 = insertelement <2 x double> poison, double %74, i32 0
<   %95 = shufflevector <2 x double> %94, <2 x double> undef, <2 x i32> zeroinitializer
<   %96 = insertelement <2 x double> poison, double %74, i32 0
<   %97 = shufflevector <2 x double> %96, <2 x double> undef, <2 x i32> zeroinitializer
<   %98 = insertelement <2 x double> poison, double %74, i32 0
<   %99 = shufflevector <2 x double> %98, <2 x double> undef, <2 x i32> zeroinitializer
<   %100 = insertelement <2 x double> poison, double %74, i32 0
<   %101 = shufflevector <2 x double> %100, <2 x double> undef, <2 x i32> zeroinitializer
<   %102 = insertelement <2 x double> poison, double %74, i32 0
<   %103 = shufflevector <2 x double> %102, <2 x double> undef, <2 x i32> zeroinitializer
<   %104 = insertelement <2 x double> poison, double %74, i32 0
<   %105 = shufflevector <2 x double> %104, <2 x double> undef, <2 x i32> zeroinitializer
<   %106 = insertelement <2 x double> poison, double %74, i32 0
<   %107 = shufflevector <2 x double> %106, <2 x double> undef, <2 x i32> zeroinitializer
<   %108 = insertelement <2 x double> poison, double %74, i32 0
<   %109 = shufflevector <2 x double> %108, <2 x double> undef, <2 x i32> zeroinitializer
<   %110 = insertelement <2 x double> poison, double %74, i32 0
<   %111 = shufflevector <2 x double> %110, <2 x double> undef, <2 x i32> zeroinitializer
<   %112 = insertelement <2 x double> poison, double %74, i32 0
<   %113 = shufflevector <2 x double> %112, <2 x double> undef, <2 x i32> zeroinitializer
<   %114 = insertelement <2 x double> poison, double %74, i32 0
<   %115 = shufflevector <2 x double> %114, <2 x double> undef, <2 x i32> zeroinitializer
<   %116 = bitcast [8 x double]* %11 to <2 x double>*
<   %117 = bitcast [8 x double]* %11 to <2 x double>*
<   %118 = bitcast [8 x double]* %12 to <2 x double>*
<   %119 = bitcast [8 x double]* %12 to <2 x double>*
<   %120 = bitcast [8 x double]* %13 to <2 x double>*
<   %121 = bitcast [8 x double]* %13 to <2 x double>*
<   %122 = bitcast double* %45 to <2 x double>*
<   %123 = bitcast double* %45 to <2 x double>*
<   %124 = bitcast double* %52 to <2 x double>*
<   %125 = bitcast double* %52 to <2 x double>*
<   %126 = bitcast double* %59 to <2 x double>*
<   %127 = bitcast double* %59 to <2 x double>*
<   %128 = bitcast double* %47 to <2 x double>*
<   %129 = bitcast double* %47 to <2 x double>*
<   %130 = bitcast double* %54 to <2 x double>*
<   %131 = bitcast double* %54 to <2 x double>*
<   %132 = bitcast double* %61 to <2 x double>*
<   %133 = bitcast double* %61 to <2 x double>*
<   %134 = bitcast double* %49 to <2 x double>*
<   %135 = bitcast double* %49 to <2 x double>*
<   %136 = bitcast double* %56 to <2 x double>*
<   %137 = bitcast double* %56 to <2 x double>*
<   %138 = bitcast double* %63 to <2 x double>*
<   %139 = bitcast double* %63 to <2 x double>*
<   br label %140
< 
< 140:                                              ; preds = %31, %140
<   %141 = phi i64 [ %91, %31 ], [ %650, %140 ]
<   %142 = phi i32 [ %29, %31 ], [ %651, %140 ]
<   call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %32) #10
<   call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %33) #10
<   call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %34) #10
<   call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %35) #10
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #10
<   store double 0.000000e+00, double* %14, align 8, !tbaa !2
<   %143 = shl nsw i32 %142, 3
<   %144 = sext i32 %143 to i64
<   %145 = load i32*, i32** %37, align 8, !tbaa !19
<   %146 = getelementptr inbounds i32, i32* %145, i64 %144
<   %147 = load double*, double** %41, align 8, !tbaa !22
<   %148 = load double*, double** %42, align 8, !tbaa !22
<   %149 = load double*, double** %43, align 8, !tbaa !22
<   %150 = load i32, i32* %146, align 4, !tbaa !12
<   %151 = getelementptr inbounds i32, i32* %146, i64 1
<   %152 = load i32, i32* %151, align 4, !tbaa !12
<   %153 = getelementptr inbounds i32, i32* %146, i64 2
<   %154 = load i32, i32* %153, align 4, !tbaa !12
<   %155 = getelementptr inbounds i32, i32* %146, i64 3
<   %156 = load i32, i32* %155, align 4, !tbaa !12
<   %157 = getelementptr inbounds i32, i32* %146, i64 4
<   %158 = load i32, i32* %157, align 4, !tbaa !12
<   %159 = getelementptr inbounds i32, i32* %146, i64 5
<   %160 = load i32, i32* %159, align 4, !tbaa !12
<   %161 = getelementptr inbounds i32, i32* %146, i64 6
<   %162 = load i32, i32* %161, align 4, !tbaa !12
<   %163 = getelementptr inbounds i32, i32* %146, i64 7
<   %164 = load i32, i32* %163, align 4, !tbaa !12
<   %165 = sext i32 %150 to i64
<   %166 = getelementptr inbounds double, double* %147, i64 %165
<   %167 = load double, double* %166, align 8, !tbaa !2
<   store double %167, double* %38, align 16, !tbaa !2
<   %168 = sext i32 %152 to i64
<   %169 = getelementptr inbounds double, double* %147, i64 %168
<   %170 = load double, double* %169, align 8, !tbaa !2
<   store double %170, double* %44, align 8, !tbaa !2
<   %171 = sext i32 %154 to i64
<   %172 = getelementptr inbounds double, double* %147, i64 %171
<   %173 = load double, double* %172, align 8, !tbaa !2
<   store double %173, double* %45, align 16, !tbaa !2
<   %174 = sext i32 %156 to i64
<   %175 = getelementptr inbounds double, double* %147, i64 %174
<   %176 = load double, double* %175, align 8, !tbaa !2
<   store double %176, double* %46, align 8, !tbaa !2
<   %177 = sext i32 %158 to i64
<   %178 = getelementptr inbounds double, double* %147, i64 %177
<   %179 = load double, double* %178, align 8, !tbaa !2
<   store double %179, double* %47, align 16, !tbaa !2
<   %180 = sext i32 %160 to i64
<   %181 = getelementptr inbounds double, double* %147, i64 %180
<   %182 = load double, double* %181, align 8, !tbaa !2
<   store double %182, double* %48, align 8, !tbaa !2
<   %183 = sext i32 %162 to i64
<   %184 = getelementptr inbounds double, double* %147, i64 %183
<   %185 = load double, double* %184, align 8, !tbaa !2
<   store double %185, double* %49, align 16, !tbaa !2
<   %186 = sext i32 %164 to i64
<   %187 = getelementptr inbounds double, double* %147, i64 %186
<   %188 = load double, double* %187, align 8, !tbaa !2
<   store double %188, double* %50, align 8, !tbaa !2
<   %189 = getelementptr inbounds double, double* %148, i64 %165
<   %190 = load double, double* %189, align 8, !tbaa !2
<   store double %190, double* %39, align 16, !tbaa !2
<   %191 = getelementptr inbounds double, double* %148, i64 %168
<   %192 = load double, double* %191, align 8, !tbaa !2
<   store double %192, double* %51, align 8, !tbaa !2
<   %193 = getelementptr inbounds double, double* %148, i64 %171
<   %194 = load double, double* %193, align 8, !tbaa !2
<   store double %194, double* %52, align 16, !tbaa !2
<   %195 = getelementptr inbounds double, double* %148, i64 %174
<   %196 = load double, double* %195, align 8, !tbaa !2
<   store double %196, double* %53, align 8, !tbaa !2
<   %197 = getelementptr inbounds double, double* %148, i64 %177
<   %198 = load double, double* %197, align 8, !tbaa !2
<   store double %198, double* %54, align 16, !tbaa !2
<   %199 = getelementptr inbounds double, double* %148, i64 %180
<   %200 = load double, double* %199, align 8, !tbaa !2
<   store double %200, double* %55, align 8, !tbaa !2
<   %201 = getelementptr inbounds double, double* %148, i64 %183
<   %202 = load double, double* %201, align 8, !tbaa !2
<   store double %202, double* %56, align 16, !tbaa !2
<   %203 = getelementptr inbounds double, double* %148, i64 %186
<   %204 = load double, double* %203, align 8, !tbaa !2
<   store double %204, double* %57, align 8, !tbaa !2
<   %205 = getelementptr inbounds double, double* %149, i64 %165
<   %206 = load double, double* %205, align 8, !tbaa !2
<   store double %206, double* %40, align 16, !tbaa !2
<   %207 = getelementptr inbounds double, double* %149, i64 %168
<   %208 = load double, double* %207, align 8, !tbaa !2
<   store double %208, double* %58, align 8, !tbaa !2
<   %209 = getelementptr inbounds double, double* %149, i64 %171
<   %210 = load double, double* %209, align 8, !tbaa !2
<   store double %210, double* %59, align 16, !tbaa !2
<   %211 = getelementptr inbounds double, double* %149, i64 %174
<   %212 = load double, double* %211, align 8, !tbaa !2
<   store double %212, double* %60, align 8, !tbaa !2
<   %213 = getelementptr inbounds double, double* %149, i64 %177
<   %214 = load double, double* %213, align 8, !tbaa !2
<   store double %214, double* %61, align 16, !tbaa !2
<   %215 = getelementptr inbounds double, double* %149, i64 %180
<   %216 = load double, double* %215, align 8, !tbaa !2
<   store double %216, double* %62, align 8, !tbaa !2
<   %217 = getelementptr inbounds double, double* %149, i64 %183
<   %218 = load double, double* %217, align 8, !tbaa !2
<   store double %218, double* %63, align 16, !tbaa !2
<   %219 = getelementptr inbounds double, double* %149, i64 %186
<   %220 = load double, double* %219, align 8, !tbaa !2
<   store double %220, double* %64, align 8, !tbaa !2
<   %221 = call double @_Z14CalcElemVolumePKdS0_S0_(double* nonnull %38, double* nonnull %39, double* nonnull %40)
<   %222 = load double*, double** %65, align 8, !tbaa !22
<   %223 = getelementptr inbounds double, double* %222, i64 %141
<   %224 = load double, double* %223, align 8, !tbaa !2
<   %225 = fdiv double %221, %224
<   %226 = load double*, double** %66, align 8, !tbaa !22
<   %227 = getelementptr inbounds double, double* %226, i64 %141
<   store double %225, double* %227, align 8, !tbaa !2
<   %228 = load double*, double** %67, align 8, !tbaa !22
<   %229 = getelementptr inbounds double, double* %228, i64 %141
<   %230 = load double, double* %229, align 8, !tbaa !2
<   %231 = fsub double %225, %230
<   %232 = load double*, double** %68, align 8, !tbaa !22
<   %233 = getelementptr inbounds double, double* %232, i64 %141
<   store double %231, double* %233, align 8, !tbaa !2
<   %234 = fsub double %173, %167
<   %235 = fsub double %176, %170
<   %236 = fsub double %234, %235
<   %237 = fsub double %194, %190
<   %238 = fsub double %196, %192
<   %239 = fsub double %237, %238
<   %240 = fsub double %210, %206
<   %241 = fsub double %212, %208
<   %242 = fsub double %240, %241
<   %243 = fadd double %234, %235
<   %244 = fadd double %237, %238
<   %245 = fadd double %240, %241
<   %246 = fmul double %243, %243
<   %247 = fmul double %244, %244
<   %248 = fadd double %246, %247
<   %249 = fmul double %245, %245
<   %250 = fadd double %248, %249
<   %251 = insertelement <2 x double> poison, double %236, i32 0
<   %252 = shufflevector <2 x double> %251, <2 x double> undef, <2 x i32> zeroinitializer
<   %253 = insertelement <2 x double> %251, double %243, i32 1
<   %254 = fmul <2 x double> %252, %253
<   %255 = insertelement <2 x double> poison, double %239, i32 0
<   %256 = shufflevector <2 x double> %255, <2 x double> undef, <2 x i32> zeroinitializer
<   %257 = insertelement <2 x double> %255, double %244, i32 1
<   %258 = fmul <2 x double> %256, %257
<   %259 = fadd <2 x double> %254, %258
<   %260 = insertelement <2 x double> poison, double %242, i32 0
<   %261 = shufflevector <2 x double> %260, <2 x double> undef, <2 x i32> zeroinitializer
<   %262 = insertelement <2 x double> %260, double %245, i32 1
<   %263 = fmul <2 x double> %261, %262
<   %264 = fadd <2 x double> %259, %263
<   %265 = insertelement <2 x double> %264, double %250, i32 0
<   %266 = fmul <2 x double> %264, %265
<   %267 = shufflevector <2 x double> %266, <2 x double> poison, <2 x i32> <i32 1, i32 undef>
<   %268 = fsub <2 x double> %266, %267
<   %269 = extractelement <2 x double> %268, i32 0
<   %270 = fcmp olt double %269, 0.000000e+00
<   %271 = select i1 %270, double 0.000000e+00, double %269
<   %272 = fsub double %185, %179
<   %273 = fsub double %188, %182
<   %274 = fsub double %272, %273
<   %275 = fsub double %202, %198
<   %276 = fsub double %204, %200
<   %277 = fsub double %275, %276
<   %278 = fsub double %218, %214
<   %279 = fsub double %220, %216
<   %280 = fsub double %278, %279
<   %281 = fadd double %272, %273
<   %282 = fadd double %275, %276
<   %283 = fadd double %278, %279
<   %284 = fmul double %281, %281
<   %285 = fmul double %282, %282
<   %286 = fadd double %284, %285
<   %287 = fmul double %283, %283
<   %288 = fadd double %286, %287
<   %289 = insertelement <2 x double> poison, double %274, i32 0
<   %290 = shufflevector <2 x double> %289, <2 x double> undef, <2 x i32> zeroinitializer
<   %291 = insertelement <2 x double> %289, double %281, i32 1
<   %292 = fmul <2 x double> %290, %291
<   %293 = insertelement <2 x double> poison, double %277, i32 0
<   %294 = shufflevector <2 x double> %293, <2 x double> undef, <2 x i32> zeroinitializer
<   %295 = insertelement <2 x double> %293, double %282, i32 1
<   %296 = fmul <2 x double> %294, %295
<   %297 = fadd <2 x double> %292, %296
<   %298 = insertelement <2 x double> poison, double %280, i32 0
<   %299 = shufflevector <2 x double> %298, <2 x double> undef, <2 x i32> zeroinitializer
<   %300 = insertelement <2 x double> %298, double %283, i32 1
<   %301 = fmul <2 x double> %299, %300
<   %302 = fadd <2 x double> %297, %301
<   %303 = insertelement <2 x double> %302, double %288, i32 0
<   %304 = fmul <2 x double> %302, %303
<   %305 = shufflevector <2 x double> %304, <2 x double> poison, <2 x i32> <i32 1, i32 undef>
<   %306 = fsub <2 x double> %304, %305
<   %307 = extractelement <2 x double> %306, i32 0
<   %308 = fcmp olt double %307, %271
<   %309 = select i1 %308, double %271, double %307
<   %310 = fsub double %182, %167
<   %311 = fsub double %179, %170
<   %312 = fsub double %310, %311
<   %313 = fsub double %200, %190
<   %314 = fsub double %198, %192
<   %315 = fsub double %313, %314
<   %316 = fsub double %216, %206
<   %317 = fsub double %214, %208
<   %318 = fsub double %316, %317
<   %319 = fadd double %311, %310
<   %320 = fadd double %314, %313
<   %321 = fadd double %317, %316
<   %322 = fmul double %319, %319
<   %323 = fmul double %320, %320
<   %324 = fadd double %322, %323
<   %325 = fmul double %321, %321
<   %326 = fadd double %324, %325
<   %327 = insertelement <2 x double> poison, double %312, i32 0
<   %328 = shufflevector <2 x double> %327, <2 x double> undef, <2 x i32> zeroinitializer
<   %329 = insertelement <2 x double> %327, double %319, i32 1
<   %330 = fmul <2 x double> %328, %329
<   %331 = insertelement <2 x double> poison, double %315, i32 0
<   %332 = shufflevector <2 x double> %331, <2 x double> undef, <2 x i32> zeroinitializer
<   %333 = insertelement <2 x double> %331, double %320, i32 1
<   %334 = fmul <2 x double> %332, %333
<   %335 = fadd <2 x double> %330, %334
<   %336 = insertelement <2 x double> poison, double %318, i32 0
<   %337 = shufflevector <2 x double> %336, <2 x double> undef, <2 x i32> zeroinitializer
<   %338 = insertelement <2 x double> %336, double %321, i32 1
<   %339 = fmul <2 x double> %337, %338
<   %340 = fadd <2 x double> %335, %339
<   %341 = insertelement <2 x double> %340, double %326, i32 0
<   %342 = fmul <2 x double> %340, %341
<   %343 = shufflevector <2 x double> %342, <2 x double> poison, <2 x i32> <i32 1, i32 undef>
<   %344 = fsub <2 x double> %342, %343
<   %345 = extractelement <2 x double> %344, i32 0
<   %346 = fcmp olt double %345, %309
<   %347 = select i1 %346, double %309, double %345
<   %348 = fsub double %185, %170
<   %349 = fsub double %182, %173
<   %350 = fsub double %348, %349
<   %351 = fsub double %202, %192
<   %352 = fsub double %200, %194
<   %353 = fsub double %351, %352
<   %354 = fsub double %218, %208
<   %355 = fsub double %216, %210
<   %356 = fsub double %354, %355
<   %357 = fadd double %349, %348
<   %358 = fadd double %352, %351
<   %359 = fadd double %355, %354
<   %360 = fmul double %357, %357
<   %361 = fmul double %358, %358
<   %362 = fadd double %360, %361
<   %363 = fmul double %359, %359
<   %364 = fadd double %362, %363
<   %365 = insertelement <2 x double> poison, double %350, i32 0
<   %366 = shufflevector <2 x double> %365, <2 x double> undef, <2 x i32> zeroinitializer
<   %367 = insertelement <2 x double> %365, double %357, i32 1
<   %368 = fmul <2 x double> %366, %367
<   %369 = insertelement <2 x double> poison, double %353, i32 0
<   %370 = shufflevector <2 x double> %369, <2 x double> undef, <2 x i32> zeroinitializer
<   %371 = insertelement <2 x double> %369, double %358, i32 1
<   %372 = fmul <2 x double> %370, %371
<   %373 = fadd <2 x double> %368, %372
<   %374 = insertelement <2 x double> poison, double %356, i32 0
<   %375 = shufflevector <2 x double> %374, <2 x double> undef, <2 x i32> zeroinitializer
<   %376 = insertelement <2 x double> %374, double %359, i32 1
<   %377 = fmul <2 x double> %375, %376
<   %378 = fadd <2 x double> %373, %377
<   %379 = insertelement <2 x double> %378, double %364, i32 0
<   %380 = fmul <2 x double> %378, %379
<   %381 = shufflevector <2 x double> %380, <2 x double> poison, <2 x i32> <i32 1, i32 undef>
<   %382 = fsub <2 x double> %380, %381
<   %383 = extractelement <2 x double> %382, i32 0
<   %384 = fcmp olt double %383, %347
<   %385 = select i1 %384, double %347, double %383
<   %386 = fsub double %188, %173
<   %387 = fsub double %185, %176
<   %388 = fsub double %386, %387
<   %389 = fsub double %204, %194
<   %390 = fsub double %202, %196
<   %391 = fsub double %389, %390
<   %392 = fsub double %220, %210
<   %393 = fsub double %218, %212
<   %394 = fsub double %392, %393
<   %395 = fadd double %387, %386
<   %396 = fadd double %390, %389
<   %397 = fadd double %393, %392
<   %398 = fmul double %395, %395
<   %399 = fmul double %396, %396
<   %400 = fadd double %398, %399
<   %401 = fmul double %397, %397
<   %402 = fadd double %400, %401
<   %403 = insertelement <2 x double> poison, double %388, i32 0
<   %404 = shufflevector <2 x double> %403, <2 x double> undef, <2 x i32> zeroinitializer
<   %405 = insertelement <2 x double> %403, double %395, i32 1
<   %406 = fmul <2 x double> %404, %405
<   %407 = insertelement <2 x double> poison, double %391, i32 0
<   %408 = shufflevector <2 x double> %407, <2 x double> undef, <2 x i32> zeroinitializer
<   %409 = insertelement <2 x double> %407, double %396, i32 1
<   %410 = fmul <2 x double> %408, %409
<   %411 = fadd <2 x double> %406, %410
<   %412 = insertelement <2 x double> poison, double %394, i32 0
<   %413 = shufflevector <2 x double> %412, <2 x double> undef, <2 x i32> zeroinitializer
<   %414 = insertelement <2 x double> %412, double %397, i32 1
<   %415 = fmul <2 x double> %413, %414
<   %416 = fadd <2 x double> %411, %415
<   %417 = insertelement <2 x double> %416, double %402, i32 0
<   %418 = fmul <2 x double> %416, %417
<   %419 = shufflevector <2 x double> %418, <2 x double> poison, <2 x i32> <i32 1, i32 undef>
<   %420 = fsub <2 x double> %418, %419
<   %421 = extractelement <2 x double> %420, i32 0
<   %422 = fcmp olt double %421, %385
<   %423 = select i1 %422, double %385, double %421
<   %424 = fsub double %179, %176
<   %425 = fsub double %188, %167
<   %426 = fsub double %424, %425
<   %427 = fsub double %198, %196
<   %428 = fsub double %204, %190
<   %429 = fsub double %427, %428
<   %430 = fsub double %214, %212
<   %431 = fsub double %220, %206
<   %432 = fsub double %430, %431
<   %433 = fadd double %424, %425
<   %434 = fadd double %427, %428
<   %435 = fadd double %430, %431
<   %436 = fmul double %433, %433
<   %437 = fmul double %434, %434
<   %438 = fadd double %436, %437
<   %439 = fmul double %435, %435
<   %440 = fadd double %438, %439
<   %441 = insertelement <2 x double> poison, double %426, i32 0
<   %442 = shufflevector <2 x double> %441, <2 x double> undef, <2 x i32> zeroinitializer
<   %443 = insertelement <2 x double> %441, double %433, i32 1
<   %444 = fmul <2 x double> %442, %443
<   %445 = insertelement <2 x double> poison, double %429, i32 0
<   %446 = shufflevector <2 x double> %445, <2 x double> undef, <2 x i32> zeroinitializer
<   %447 = insertelement <2 x double> %445, double %434, i32 1
<   %448 = fmul <2 x double> %446, %447
<   %449 = fadd <2 x double> %444, %448
<   %450 = insertelement <2 x double> poison, double %432, i32 0
<   %451 = shufflevector <2 x double> %450, <2 x double> undef, <2 x i32> zeroinitializer
<   %452 = insertelement <2 x double> %450, double %435, i32 1
<   %453 = fmul <2 x double> %451, %452
<   %454 = fadd <2 x double> %449, %453
<   %455 = insertelement <2 x double> %454, double %440, i32 0
<   %456 = fmul <2 x double> %454, %455
<   %457 = shufflevector <2 x double> %456, <2 x double> poison, <2 x i32> <i32 1, i32 undef>
<   %458 = fsub <2 x double> %456, %457
<   %459 = extractelement <2 x double> %458, i32 0
<   %460 = fcmp olt double %459, %423
<   %461 = select i1 %460, double %423, double %459
<   %462 = fmul double %221, 4.000000e+00
<   %463 = call double @sqrt(double %461) #10
<   %464 = fdiv double %462, %463
<   %465 = load double*, double** %69, align 8, !tbaa !22
<   %466 = getelementptr inbounds double, double* %465, i64 %141
<   store double %464, double* %466, align 8, !tbaa !2
<   %467 = load double*, double** %70, align 8, !tbaa !22
<   %468 = load double*, double** %71, align 8, !tbaa !22
<   %469 = load double*, double** %72, align 8, !tbaa !22
<   %470 = load i32, i32* %146, align 4, !tbaa !12
<   %471 = sext i32 %470 to i64
<   %472 = getelementptr inbounds double, double* %467, i64 %471
<   %473 = load double, double* %472, align 8, !tbaa !2
<   %474 = getelementptr inbounds double, double* %468, i64 %471
<   %475 = load double, double* %474, align 8, !tbaa !2
<   %476 = getelementptr inbounds double, double* %469, i64 %471
<   %477 = load double, double* %476, align 8, !tbaa !2
<   %478 = load i32, i32* %151, align 4, !tbaa !12
<   %479 = sext i32 %478 to i64
<   %480 = getelementptr inbounds double, double* %467, i64 %479
<   %481 = load double, double* %480, align 8, !tbaa !2
<   %482 = getelementptr inbounds double, double* %468, i64 %479
<   %483 = load double, double* %482, align 8, !tbaa !2
<   %484 = getelementptr inbounds double, double* %469, i64 %479
<   %485 = load double, double* %484, align 8, !tbaa !2
<   %486 = load i32, i32* %153, align 4, !tbaa !12
<   %487 = sext i32 %486 to i64
<   %488 = getelementptr inbounds double, double* %467, i64 %487
<   %489 = load double, double* %488, align 8, !tbaa !2
<   %490 = getelementptr inbounds double, double* %468, i64 %487
<   %491 = load double, double* %490, align 8, !tbaa !2
<   %492 = getelementptr inbounds double, double* %469, i64 %487
<   %493 = load double, double* %492, align 8, !tbaa !2
<   %494 = load i32, i32* %155, align 4, !tbaa !12
<   %495 = sext i32 %494 to i64
<   %496 = getelementptr inbounds double, double* %467, i64 %495
<   %497 = load double, double* %496, align 8, !tbaa !2
<   %498 = getelementptr inbounds double, double* %468, i64 %495
<   %499 = load double, double* %498, align 8, !tbaa !2
<   %500 = getelementptr inbounds double, double* %469, i64 %495
<   %501 = load double, double* %500, align 8, !tbaa !2
<   %502 = load i32, i32* %157, align 4, !tbaa !12
<   %503 = sext i32 %502 to i64
<   %504 = getelementptr inbounds double, double* %467, i64 %503
<   %505 = load double, double* %504, align 8, !tbaa !2
<   %506 = getelementptr inbounds double, double* %468, i64 %503
<   %507 = load double, double* %506, align 8, !tbaa !2
<   %508 = getelementptr inbounds double, double* %469, i64 %503
<   %509 = load double, double* %508, align 8, !tbaa !2
<   %510 = load i32, i32* %159, align 4, !tbaa !12
<   %511 = sext i32 %510 to i64
<   %512 = getelementptr inbounds double, double* %467, i64 %511
<   %513 = load double, double* %512, align 8, !tbaa !2
<   %514 = getelementptr inbounds double, double* %468, i64 %511
<   %515 = load double, double* %514, align 8, !tbaa !2
<   %516 = getelementptr inbounds double, double* %469, i64 %511
<   %517 = load double, double* %516, align 8, !tbaa !2
<   %518 = load i32, i32* %161, align 4, !tbaa !12
<   %519 = sext i32 %518 to i64
<   %520 = getelementptr inbounds double, double* %467, i64 %519
<   %521 = load double, double* %520, align 8, !tbaa !2
<   %522 = getelementptr inbounds double, double* %468, i64 %519
<   %523 = load double, double* %522, align 8, !tbaa !2
<   %524 = getelementptr inbounds double, double* %469, i64 %519
<   %525 = load double, double* %524, align 8, !tbaa !2
<   %526 = load i32, i32* %163, align 4, !tbaa !12
<   %527 = sext i32 %526 to i64
<   %528 = getelementptr inbounds double, double* %467, i64 %527
<   %529 = load double, double* %528, align 8, !tbaa !2
<   %530 = getelementptr inbounds double, double* %468, i64 %527
<   %531 = load double, double* %530, align 8, !tbaa !2
<   %532 = getelementptr inbounds double, double* %469, i64 %527
<   %533 = load double, double* %532, align 8, !tbaa !2
<   %534 = insertelement <2 x double> poison, double %473, i32 0
<   %535 = insertelement <2 x double> %534, double %481, i32 1
<   %536 = fmul <2 x double> %93, %535
<   %537 = load <2 x double>, <2 x double>* %116, align 16, !tbaa !2
<   %538 = fsub <2 x double> %537, %536
<   store <2 x double> %538, <2 x double>* %117, align 16, !tbaa !2
<   %539 = insertelement <2 x double> poison, double %475, i32 0
<   %540 = insertelement <2 x double> %539, double %483, i32 1
<   %541 = fmul <2 x double> %101, %540
<   %542 = load <2 x double>, <2 x double>* %118, align 16, !tbaa !2
<   %543 = fsub <2 x double> %542, %541
<   store <2 x double> %543, <2 x double>* %119, align 16, !tbaa !2
<   %544 = insertelement <2 x double> poison, double %477, i32 0
<   %545 = insertelement <2 x double> %544, double %485, i32 1
<   %546 = fmul <2 x double> %109, %545
<   %547 = load <2 x double>, <2 x double>* %120, align 16, !tbaa !2
<   %548 = fsub <2 x double> %547, %546
<   store <2 x double> %548, <2 x double>* %121, align 16, !tbaa !2
<   %549 = insertelement <2 x double> poison, double %489, i32 0
<   %550 = insertelement <2 x double> %549, double %497, i32 1
<   %551 = fmul <2 x double> %95, %550
<   %552 = load <2 x double>, <2 x double>* %122, align 16, !tbaa !2
<   %553 = fsub <2 x double> %552, %551
<   store <2 x double> %553, <2 x double>* %123, align 16, !tbaa !2
<   %554 = insertelement <2 x double> poison, double %491, i32 0
<   %555 = insertelement <2 x double> %554, double %499, i32 1
<   %556 = fmul <2 x double> %103, %555
<   %557 = load <2 x double>, <2 x double>* %124, align 16, !tbaa !2
<   %558 = fsub <2 x double> %557, %556
<   store <2 x double> %558, <2 x double>* %125, align 16, !tbaa !2
<   %559 = insertelement <2 x double> poison, double %493, i32 0
<   %560 = insertelement <2 x double> %559, double %501, i32 1
<   %561 = fmul <2 x double> %111, %560
<   %562 = load <2 x double>, <2 x double>* %126, align 16, !tbaa !2
<   %563 = fsub <2 x double> %562, %561
<   store <2 x double> %563, <2 x double>* %127, align 16, !tbaa !2
<   %564 = insertelement <2 x double> poison, double %505, i32 0
<   %565 = insertelement <2 x double> %564, double %513, i32 1
<   %566 = fmul <2 x double> %97, %565
<   %567 = load <2 x double>, <2 x double>* %128, align 16, !tbaa !2
<   %568 = fsub <2 x double> %567, %566
<   store <2 x double> %568, <2 x double>* %129, align 16, !tbaa !2
<   %569 = insertelement <2 x double> poison, double %507, i32 0
<   %570 = insertelement <2 x double> %569, double %515, i32 1
<   %571 = fmul <2 x double> %105, %570
<   %572 = load <2 x double>, <2 x double>* %130, align 16, !tbaa !2
<   %573 = fsub <2 x double> %572, %571
<   store <2 x double> %573, <2 x double>* %131, align 16, !tbaa !2
<   %574 = insertelement <2 x double> poison, double %509, i32 0
<   %575 = insertelement <2 x double> %574, double %517, i32 1
<   %576 = fmul <2 x double> %113, %575
<   %577 = load <2 x double>, <2 x double>* %132, align 16, !tbaa !2
<   %578 = fsub <2 x double> %577, %576
<   store <2 x double> %578, <2 x double>* %133, align 16, !tbaa !2
<   %579 = insertelement <2 x double> poison, double %521, i32 0
<   %580 = insertelement <2 x double> %579, double %529, i32 1
<   %581 = fmul <2 x double> %99, %580
<   %582 = load <2 x double>, <2 x double>* %134, align 16, !tbaa !2
<   %583 = fsub <2 x double> %582, %581
<   store <2 x double> %583, <2 x double>* %135, align 16, !tbaa !2
<   %584 = insertelement <2 x double> poison, double %523, i32 0
<   %585 = insertelement <2 x double> %584, double %531, i32 1
<   %586 = fmul <2 x double> %107, %585
<   %587 = load <2 x double>, <2 x double>* %136, align 16, !tbaa !2
<   %588 = fsub <2 x double> %587, %586
<   store <2 x double> %588, <2 x double>* %137, align 16, !tbaa !2
<   %589 = insertelement <2 x double> poison, double %525, i32 0
<   %590 = insertelement <2 x double> %589, double %533, i32 1
<   %591 = fmul <2 x double> %115, %590
<   %592 = load <2 x double>, <2 x double>* %138, align 16, !tbaa !2
<   %593 = fsub <2 x double> %592, %591
<   store <2 x double> %593, <2 x double>* %139, align 16, !tbaa !2
<   call fastcc void @_ZL32CalcElemShapeFunctionDerivativesPKdS0_S0_PA8_dPd(double* nonnull %38, double* nonnull %39, double* nonnull %40, [8 x double]* nonnull %75, double* nonnull %14)
<   %594 = load double, double* %14, align 8, !tbaa !2
<   %595 = fdiv double 1.000000e+00, %594
<   %596 = load double, double* %76, align 16, !tbaa !2
<   %597 = fsub double %473, %521
<   %598 = fmul double %596, %597
<   %599 = load double, double* %79, align 8, !tbaa !2
<   %600 = fsub double %481, %529
<   %601 = fmul double %599, %600
<   %602 = fadd double %598, %601
<   %603 = load double, double* %80, align 16, !tbaa !2
<   %604 = fsub double %489, %505
<   %605 = fmul double %603, %604
<   %606 = fadd double %602, %605
<   %607 = load double, double* %81, align 8, !tbaa !2
<   %608 = fsub double %497, %513
<   %609 = fmul double %607, %608
<   %610 = fadd double %606, %609
<   %611 = fmul double %595, %610
<   %612 = load double, double* %77, align 16, !tbaa !2
<   %613 = fsub double %475, %523
<   %614 = fmul double %612, %613
<   %615 = load double, double* %82, align 8, !tbaa !2
<   %616 = fsub double %483, %531
<   %617 = fmul double %615, %616
<   %618 = fadd double %614, %617
<   %619 = load double, double* %83, align 16, !tbaa !2
<   %620 = fsub double %491, %507
<   %621 = fmul double %619, %620
<   %622 = fadd double %618, %621
<   %623 = load double, double* %84, align 8, !tbaa !2
<   %624 = fsub double %499, %515
<   %625 = fmul double %623, %624
<   %626 = fadd double %622, %625
<   %627 = fmul double %595, %626
<   %628 = load double, double* %78, align 16, !tbaa !2
<   %629 = fsub double %477, %525
<   %630 = fmul double %628, %629
<   %631 = load double, double* %85, align 8, !tbaa !2
<   %632 = fsub double %485, %533
<   %633 = fmul double %631, %632
<   %634 = fadd double %630, %633
<   %635 = load double, double* %86, align 16, !tbaa !2
<   %636 = fsub double %493, %509
<   %637 = fmul double %635, %636
<   %638 = fadd double %634, %637
<   %639 = load double, double* %87, align 8, !tbaa !2
<   %640 = fsub double %501, %517
<   %641 = fmul double %639, %640
<   %642 = fadd double %638, %641
<   %643 = fmul double %595, %642
<   %644 = load double*, double** %88, align 8, !tbaa !25
<   %645 = getelementptr inbounds double, double* %644, i64 %141
<   store double %611, double* %645, align 8, !tbaa !2
<   %646 = load double*, double** %89, align 8, !tbaa !29
<   %647 = getelementptr inbounds double, double* %646, i64 %141
<   store double %627, double* %647, align 8, !tbaa !2
<   %648 = load double*, double** %90, align 8, !tbaa !30
<   %649 = getelementptr inbounds double, double* %648, i64 %141
<   store double %643, double* %649, align 8, !tbaa !2
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #10
<   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %35) #10
<   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %34) #10
<   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %33) #10
<   call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %32) #10
<   %650 = add nsw i64 %141, 1
<   %651 = add nsw i32 %142, 1
<   %652 = load i32, i32* %7, align 4, !tbaa !12
<   %653 = sext i32 %652 to i64
<   %654 = icmp slt i64 %141, %653
<   br i1 %654, label %140, label %655
< 
< 655:                                              ; preds = %140, %20
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %25)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %23) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #10
<   br label %656
< 
< 656:                                              ; preds = %655, %17
<   %657 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %657)
<   %658 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZ22CalcKinematicsForElemsR6DomaindiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %658)
<           to label %659 unwind label %660
---
> declare dso_local i32 @__gxx_personality_v0(...)
1321c1208,1424
< 659:                                              ; preds = %656
---
> ; Function Attrs: inlinehint nofree norecurse nounwind uwtable
> define internal fastcc void @_ZL32CalcElemShapeFunctionDerivativesPKdS0_S0_PA8_dPd(double* nocapture readonly %x, double* nocapture readonly %y, double* nocapture readonly %z, [8 x double]* %b, double* nocapture %volume) unnamed_addr #8 {
> entry:
>   %0 = load double, double* %x, align 8, !tbaa !2
>   %arrayidx1 = getelementptr inbounds double, double* %x, i64 1
>   %1 = load double, double* %arrayidx1, align 8, !tbaa !2
>   %arrayidx2 = getelementptr inbounds double, double* %x, i64 2
>   %2 = load double, double* %arrayidx2, align 8, !tbaa !2
>   %arrayidx3 = getelementptr inbounds double, double* %x, i64 3
>   %3 = load double, double* %arrayidx3, align 8, !tbaa !2
>   %arrayidx4 = getelementptr inbounds double, double* %x, i64 4
>   %4 = load double, double* %arrayidx4, align 8, !tbaa !2
>   %arrayidx5 = getelementptr inbounds double, double* %x, i64 5
>   %5 = load double, double* %arrayidx5, align 8, !tbaa !2
>   %arrayidx6 = getelementptr inbounds double, double* %x, i64 6
>   %6 = load double, double* %arrayidx6, align 8, !tbaa !2
>   %arrayidx7 = getelementptr inbounds double, double* %x, i64 7
>   %7 = load double, double* %arrayidx7, align 8, !tbaa !2
>   %8 = load double, double* %y, align 8, !tbaa !2
>   %arrayidx9 = getelementptr inbounds double, double* %y, i64 1
>   %9 = load double, double* %arrayidx9, align 8, !tbaa !2
>   %arrayidx10 = getelementptr inbounds double, double* %y, i64 2
>   %10 = load double, double* %arrayidx10, align 8, !tbaa !2
>   %arrayidx11 = getelementptr inbounds double, double* %y, i64 3
>   %11 = load double, double* %arrayidx11, align 8, !tbaa !2
>   %arrayidx12 = getelementptr inbounds double, double* %y, i64 4
>   %12 = load double, double* %arrayidx12, align 8, !tbaa !2
>   %arrayidx13 = getelementptr inbounds double, double* %y, i64 5
>   %13 = load double, double* %arrayidx13, align 8, !tbaa !2
>   %arrayidx14 = getelementptr inbounds double, double* %y, i64 6
>   %14 = load double, double* %arrayidx14, align 8, !tbaa !2
>   %arrayidx15 = getelementptr inbounds double, double* %y, i64 7
>   %15 = load double, double* %arrayidx15, align 8, !tbaa !2
>   %16 = load double, double* %z, align 8, !tbaa !2
>   %arrayidx17 = getelementptr inbounds double, double* %z, i64 1
>   %17 = load double, double* %arrayidx17, align 8, !tbaa !2
>   %arrayidx18 = getelementptr inbounds double, double* %z, i64 2
>   %18 = load double, double* %arrayidx18, align 8, !tbaa !2
>   %arrayidx19 = getelementptr inbounds double, double* %z, i64 3
>   %19 = load double, double* %arrayidx19, align 8, !tbaa !2
>   %arrayidx20 = getelementptr inbounds double, double* %z, i64 4
>   %20 = load double, double* %arrayidx20, align 8, !tbaa !2
>   %arrayidx21 = getelementptr inbounds double, double* %z, i64 5
>   %21 = load double, double* %arrayidx21, align 8, !tbaa !2
>   %arrayidx22 = getelementptr inbounds double, double* %z, i64 6
>   %22 = load double, double* %arrayidx22, align 8, !tbaa !2
>   %arrayidx23 = getelementptr inbounds double, double* %z, i64 7
>   %23 = load double, double* %arrayidx23, align 8, !tbaa !2
>   %sub = fsub double %6, %0
>   %sub24 = fsub double %5, %3
>   %add = fadd double %sub24, %sub
>   %sub25 = fsub double %7, %1
>   %sub26 = fsub double %add, %sub25
>   %sub27 = fsub double %4, %2
>   %sub28 = fsub double %sub26, %sub27
>   %mul = fmul double %sub28, 1.250000e-01
>   %sub31 = fsub double %sub, %sub24
>   %add33 = fadd double %sub31, %sub25
>   %sub35 = fsub double %add33, %sub27
>   %mul36 = fmul double %sub35, 1.250000e-01
>   %add41 = fadd double %add, %sub25
>   %add43 = fadd double %sub27, %add41
>   %mul44 = fmul double %add43, 1.250000e-01
>   %sub45 = fsub double %14, %8
>   %sub46 = fsub double %13, %11
>   %add47 = fadd double %sub46, %sub45
>   %sub48 = fsub double %15, %9
>   %sub49 = fsub double %add47, %sub48
>   %sub50 = fsub double %12, %10
>   %sub51 = fsub double %sub49, %sub50
>   %mul52 = fmul double %sub51, 1.250000e-01
>   %sub55 = fsub double %sub45, %sub46
>   %add57 = fadd double %sub55, %sub48
>   %sub59 = fsub double %add57, %sub50
>   %mul60 = fmul double %sub59, 1.250000e-01
>   %add65 = fadd double %add47, %sub48
>   %add67 = fadd double %sub50, %add65
>   %mul68 = fmul double %add67, 1.250000e-01
>   %sub69 = fsub double %22, %16
>   %sub70 = fsub double %21, %19
>   %add71 = fadd double %sub70, %sub69
>   %sub72 = fsub double %23, %17
>   %sub73 = fsub double %add71, %sub72
>   %sub74 = fsub double %20, %18
>   %sub75 = fsub double %sub73, %sub74
>   %mul76 = fmul double %sub75, 1.250000e-01
>   %sub79 = fsub double %sub69, %sub70
>   %add81 = fadd double %sub79, %sub72
>   %sub83 = fsub double %add81, %sub74
>   %mul84 = fmul double %sub83, 1.250000e-01
>   %add89 = fadd double %add71, %sub72
>   %add91 = fadd double %sub74, %add89
>   %mul92 = fmul double %add91, 1.250000e-01
>   %mul93 = fmul double %mul60, %mul92
>   %mul94 = fmul double %mul68, %mul84
>   %sub95 = fsub double %mul93, %mul94
>   %mul97 = fmul double %mul68, %mul76
>   %24 = fmul double %mul52, %mul92
>   %add98 = fsub double %mul97, %24
>   %mul99 = fmul double %mul52, %mul84
>   %mul100 = fmul double %mul60, %mul76
>   %sub101 = fsub double %mul99, %mul100
>   %mul104 = fmul double %mul44, %mul84
>   %25 = fmul double %mul36, %mul92
>   %add105 = fsub double %mul104, %25
>   %mul106 = fmul double %mul, %mul92
>   %mul107 = fmul double %mul44, %mul76
>   %sub108 = fsub double %mul106, %mul107
>   %mul111 = fmul double %mul36, %mul76
>   %26 = fmul double %mul, %mul84
>   %add112 = fsub double %mul111, %26
>   %mul113 = fmul double %mul36, %mul68
>   %mul114 = fmul double %mul44, %mul60
>   %sub115 = fsub double %mul113, %mul114
>   %mul118 = fmul double %mul44, %mul52
>   %27 = fmul double %mul, %mul68
>   %add119 = fsub double %mul118, %27
>   %mul120 = fmul double %mul, %mul60
>   %mul121 = fmul double %mul36, %mul52
>   %sub122 = fsub double %mul120, %mul121
>   %fneg123 = fneg double %sub95
>   %arrayidx127 = getelementptr inbounds [8 x double], [8 x double]* %b, i64 0, i64 0
>   %28 = insertelement <4 x double> undef, double %sub95, i32 0
>   %29 = insertelement <4 x double> %28, double %add98, i32 1
>   %30 = insertelement <4 x double> %29, double %fneg123, i32 2
>   %31 = insertelement <4 x double> %30, double %sub95, i32 3
>   %32 = insertelement <2 x double> undef, double %add98, i32 0
>   %33 = insertelement <2 x double> %32, double %sub95, i32 1
>   %shuffle = shufflevector <2 x double> %33, <2 x double> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 0>
>   %34 = fadd <4 x double> %31, %shuffle
>   %35 = fsub <4 x double> %31, %shuffle
>   %36 = shufflevector <4 x double> %34, <4 x double> %35, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
>   %37 = insertelement <4 x double> undef, double %sub101, i32 0
>   %38 = shufflevector <4 x double> %37, <4 x double> undef, <4 x i32> zeroinitializer
>   %39 = fsub <4 x double> %36, %38
>   %40 = extractelement <4 x double> %39, i32 2
>   store double %40, double* %arrayidx127, align 8, !tbaa !2
>   %arrayidx131 = getelementptr inbounds [8 x double], [8 x double]* %b, i64 0, i64 1
>   %41 = extractelement <4 x double> %39, i32 3
>   store double %41, double* %arrayidx131, align 8, !tbaa !2
>   %arrayidx135 = getelementptr inbounds [8 x double], [8 x double]* %b, i64 0, i64 2
>   %42 = extractelement <4 x double> %39, i32 0
>   store double %42, double* %arrayidx135, align 8, !tbaa !2
>   %arrayidx140 = getelementptr inbounds [8 x double], [8 x double]* %b, i64 0, i64 3
>   %43 = extractelement <4 x double> %39, i32 1
>   store double %43, double* %arrayidx140, align 8, !tbaa !2
>   %arrayidx145 = getelementptr inbounds [8 x double], [8 x double]* %b, i64 0, i64 4
>   %44 = fneg <4 x double> %39
>   %45 = bitcast double* %arrayidx145 to <4 x double>*
>   store <4 x double> %44, <4 x double>* %45, align 8, !tbaa !2
>   %fneg161 = fneg double %add105
>   %arrayidx165 = getelementptr inbounds [8 x double], [8 x double]* %b, i64 1, i64 0
>   %46 = insertelement <4 x double> undef, double %add105, i32 0
>   %47 = insertelement <4 x double> %46, double %sub108, i32 1
>   %48 = insertelement <4 x double> %47, double %fneg161, i32 2
>   %49 = insertelement <4 x double> %48, double %add105, i32 3
>   %50 = insertelement <2 x double> undef, double %sub108, i32 0
>   %51 = insertelement <2 x double> %50, double %add105, i32 1
>   %shuffle449 = shufflevector <2 x double> %51, <2 x double> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 0>
>   %52 = fadd <4 x double> %49, %shuffle449
>   %53 = fsub <4 x double> %49, %shuffle449
>   %54 = shufflevector <4 x double> %52, <4 x double> %53, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
>   %55 = insertelement <4 x double> undef, double %add112, i32 0
>   %56 = shufflevector <4 x double> %55, <4 x double> undef, <4 x i32> zeroinitializer
>   %57 = fsub <4 x double> %54, %56
>   %58 = extractelement <4 x double> %57, i32 2
>   store double %58, double* %arrayidx165, align 8, !tbaa !2
>   %arrayidx169 = getelementptr inbounds [8 x double], [8 x double]* %b, i64 1, i64 1
>   %59 = extractelement <4 x double> %57, i32 3
>   store double %59, double* %arrayidx169, align 8, !tbaa !2
>   %arrayidx173 = getelementptr inbounds [8 x double], [8 x double]* %b, i64 1, i64 2
>   %60 = extractelement <4 x double> %57, i32 0
>   store double %60, double* %arrayidx173, align 8, !tbaa !2
>   %arrayidx178 = getelementptr inbounds [8 x double], [8 x double]* %b, i64 1, i64 3
>   %61 = extractelement <4 x double> %57, i32 1
>   store double %61, double* %arrayidx178, align 8, !tbaa !2
>   %arrayidx183 = getelementptr inbounds [8 x double], [8 x double]* %b, i64 1, i64 4
>   %62 = fneg <4 x double> %57
>   %63 = bitcast double* %arrayidx183 to <4 x double>*
>   store <4 x double> %62, <4 x double>* %63, align 8, !tbaa !2
>   %fneg199 = fneg double %sub115
>   %arrayidx203 = getelementptr inbounds [8 x double], [8 x double]* %b, i64 2, i64 0
>   %64 = insertelement <4 x double> undef, double %sub115, i32 0
>   %65 = insertelement <4 x double> %64, double %add119, i32 1
>   %66 = insertelement <4 x double> %65, double %fneg199, i32 2
>   %67 = insertelement <4 x double> %66, double %sub115, i32 3
>   %68 = insertelement <2 x double> undef, double %add119, i32 0
>   %69 = insertelement <2 x double> %68, double %sub115, i32 1
>   %shuffle450 = shufflevector <2 x double> %69, <2 x double> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 0>
>   %70 = fadd <4 x double> %67, %shuffle450
>   %71 = fsub <4 x double> %67, %shuffle450
>   %72 = shufflevector <4 x double> %70, <4 x double> %71, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
>   %73 = insertelement <4 x double> undef, double %sub122, i32 0
>   %74 = shufflevector <4 x double> %73, <4 x double> undef, <4 x i32> zeroinitializer
>   %75 = fsub <4 x double> %72, %74
>   %76 = extractelement <4 x double> %75, i32 2
>   store double %76, double* %arrayidx203, align 8, !tbaa !2
>   %arrayidx207 = getelementptr inbounds [8 x double], [8 x double]* %b, i64 2, i64 1
>   %77 = extractelement <4 x double> %75, i32 3
>   store double %77, double* %arrayidx207, align 8, !tbaa !2
>   %arrayidx211 = getelementptr inbounds [8 x double], [8 x double]* %b, i64 2, i64 2
>   %78 = extractelement <4 x double> %75, i32 0
>   store double %78, double* %arrayidx211, align 8, !tbaa !2
>   %arrayidx216 = getelementptr inbounds [8 x double], [8 x double]* %b, i64 2, i64 3
>   %79 = extractelement <4 x double> %75, i32 1
>   store double %79, double* %arrayidx216, align 8, !tbaa !2
>   %arrayidx221 = getelementptr inbounds [8 x double], [8 x double]* %b, i64 2, i64 4
>   %80 = fneg <4 x double> %75
>   %81 = bitcast double* %arrayidx221 to <4 x double>*
>   store <4 x double> %80, <4 x double>* %81, align 8, !tbaa !2
>   %mul237 = fmul double %mul36, %add98
>   %mul238 = fmul double %mul60, %sub108
>   %add239 = fadd double %mul237, %mul238
>   %mul240 = fmul double %add119, %mul84
>   %add241 = fadd double %mul240, %add239
>   %mul242 = fmul double %add241, 8.000000e+00
>   store double %mul242, double* %volume, align 8, !tbaa !2
1323,1329d1425
< 
< 660:                                              ; preds = %656, %5
<   %661 = landingpad { i8*, i32 }
<           catch i8* null
<   %662 = extractvalue { i8*, i32 } %661, 0
<   call void @__clang_call_terminate(i8* %662) #29
<   unreachable
1332c1428,1429
< declare dso_local void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808)) local_unnamed_addr #0
---
> ; Function Attrs: nounwind
> declare void @__kmpc_for_static_fini(%struct.ident_t*, i32) local_unnamed_addr #7
1336,1337c1433,1434
<   %2 = tail call i8* @__cxa_begin_catch(i8* %0) #10
<   tail call void @_ZSt9terminatev() #29
---
>   %2 = tail call i8* @__cxa_begin_catch(i8* %0) #7
>   tail call void @_ZSt9terminatev() #23
1346,1576c1443
< declare dso_local void @__kmpc_for_static_init_4(%struct.ident_t*, i32, i32, i32*, i32*, i32*, i32*, i32, i32) local_unnamed_addr #10
< 
< ; Function Attrs: inlinehint nofree norecurse nounwind uwtable willreturn mustprogress
< define internal fastcc void @_ZL32CalcElemShapeFunctionDerivativesPKdS0_S0_PA8_dPd(double* nocapture readonly %0, double* nocapture readonly %1, double* nocapture readonly %2, [8 x double]* %3, double* nocapture %4) unnamed_addr #11 {
<   %6 = load double, double* %0, align 8, !tbaa !2
<   %7 = getelementptr inbounds double, double* %0, i64 1
<   %8 = load double, double* %7, align 8, !tbaa !2
<   %9 = getelementptr inbounds double, double* %0, i64 2
<   %10 = load double, double* %9, align 8, !tbaa !2
<   %11 = getelementptr inbounds double, double* %0, i64 3
<   %12 = load double, double* %11, align 8, !tbaa !2
<   %13 = getelementptr inbounds double, double* %0, i64 4
<   %14 = load double, double* %13, align 8, !tbaa !2
<   %15 = getelementptr inbounds double, double* %0, i64 5
<   %16 = load double, double* %15, align 8, !tbaa !2
<   %17 = getelementptr inbounds double, double* %0, i64 6
<   %18 = load double, double* %17, align 8, !tbaa !2
<   %19 = getelementptr inbounds double, double* %0, i64 7
<   %20 = load double, double* %19, align 8, !tbaa !2
<   %21 = load double, double* %1, align 8, !tbaa !2
<   %22 = getelementptr inbounds double, double* %1, i64 1
<   %23 = load double, double* %22, align 8, !tbaa !2
<   %24 = getelementptr inbounds double, double* %1, i64 2
<   %25 = load double, double* %24, align 8, !tbaa !2
<   %26 = getelementptr inbounds double, double* %1, i64 3
<   %27 = load double, double* %26, align 8, !tbaa !2
<   %28 = getelementptr inbounds double, double* %1, i64 4
<   %29 = load double, double* %28, align 8, !tbaa !2
<   %30 = getelementptr inbounds double, double* %1, i64 5
<   %31 = load double, double* %30, align 8, !tbaa !2
<   %32 = getelementptr inbounds double, double* %1, i64 6
<   %33 = load double, double* %32, align 8, !tbaa !2
<   %34 = getelementptr inbounds double, double* %1, i64 7
<   %35 = load double, double* %34, align 8, !tbaa !2
<   %36 = load double, double* %2, align 8, !tbaa !2
<   %37 = getelementptr inbounds double, double* %2, i64 1
<   %38 = load double, double* %37, align 8, !tbaa !2
<   %39 = getelementptr inbounds double, double* %2, i64 2
<   %40 = load double, double* %39, align 8, !tbaa !2
<   %41 = getelementptr inbounds double, double* %2, i64 3
<   %42 = load double, double* %41, align 8, !tbaa !2
<   %43 = getelementptr inbounds double, double* %2, i64 4
<   %44 = load double, double* %43, align 8, !tbaa !2
<   %45 = getelementptr inbounds double, double* %2, i64 5
<   %46 = load double, double* %45, align 8, !tbaa !2
<   %47 = getelementptr inbounds double, double* %2, i64 6
<   %48 = load double, double* %47, align 8, !tbaa !2
<   %49 = getelementptr inbounds double, double* %2, i64 7
<   %50 = load double, double* %49, align 8, !tbaa !2
<   %51 = fsub double %18, %6
<   %52 = fsub double %16, %12
<   %53 = fadd double %52, %51
<   %54 = fsub double %20, %8
<   %55 = fsub double %53, %54
<   %56 = fsub double %14, %10
<   %57 = fsub double %55, %56
<   %58 = fmul double %57, 1.250000e-01
<   %59 = fsub double %51, %52
<   %60 = fadd double %59, %54
<   %61 = fsub double %60, %56
<   %62 = fmul double %61, 1.250000e-01
<   %63 = fadd double %53, %54
<   %64 = fadd double %56, %63
<   %65 = fmul double %64, 1.250000e-01
<   %66 = fsub double %33, %21
<   %67 = fsub double %31, %27
<   %68 = fadd double %67, %66
<   %69 = fsub double %35, %23
<   %70 = fsub double %68, %69
<   %71 = fsub double %29, %25
<   %72 = fsub double %70, %71
<   %73 = fmul double %72, 1.250000e-01
<   %74 = fsub double %66, %67
<   %75 = fadd double %74, %69
<   %76 = fsub double %75, %71
<   %77 = fmul double %76, 1.250000e-01
<   %78 = fadd double %68, %69
<   %79 = fadd double %71, %78
<   %80 = fmul double %79, 1.250000e-01
<   %81 = fsub double %48, %36
<   %82 = fsub double %46, %42
<   %83 = fadd double %82, %81
<   %84 = fsub double %50, %38
<   %85 = fsub double %83, %84
<   %86 = fsub double %44, %40
<   %87 = fsub double %85, %86
<   %88 = fmul double %87, 1.250000e-01
<   %89 = fsub double %81, %82
<   %90 = fadd double %89, %84
<   %91 = fsub double %90, %86
<   %92 = fmul double %91, 1.250000e-01
<   %93 = fadd double %83, %84
<   %94 = fadd double %86, %93
<   %95 = fmul double %94, 1.250000e-01
<   %96 = fmul double %77, %95
<   %97 = fmul double %80, %92
<   %98 = fsub double %96, %97
<   %99 = fmul double %80, %88
<   %100 = fmul double %73, %95
<   %101 = fsub double %99, %100
<   %102 = fmul double %73, %92
<   %103 = fmul double %77, %88
<   %104 = fsub double %102, %103
<   %105 = fmul double %65, %92
<   %106 = fmul double %62, %95
<   %107 = fsub double %105, %106
<   %108 = fmul double %58, %95
<   %109 = fmul double %65, %88
<   %110 = fsub double %108, %109
<   %111 = fmul double %62, %88
<   %112 = fmul double %58, %92
<   %113 = fsub double %111, %112
<   %114 = fmul double %62, %80
<   %115 = fmul double %65, %77
<   %116 = fsub double %114, %115
<   %117 = fmul double %65, %73
<   %118 = fmul double %58, %80
<   %119 = fsub double %117, %118
<   %120 = fmul double %58, %77
<   %121 = fmul double %62, %73
<   %122 = fsub double %120, %121
<   %123 = fneg double %98
<   %124 = insertelement <2 x double> poison, double %123, i32 0
<   %125 = insertelement <2 x double> %124, double %98, i32 1
<   %126 = insertelement <2 x double> poison, double %101, i32 0
<   %127 = shufflevector <2 x double> %126, <2 x double> undef, <2 x i32> zeroinitializer
<   %128 = fsub <2 x double> %125, %127
<   %129 = insertelement <2 x double> poison, double %104, i32 0
<   %130 = shufflevector <2 x double> %129, <2 x double> undef, <2 x i32> zeroinitializer
<   %131 = fsub <2 x double> %128, %130
<   %132 = bitcast [8 x double]* %3 to <2 x double>*
<   store <2 x double> %131, <2 x double>* %132, align 8, !tbaa !2
<   %133 = getelementptr inbounds [8 x double], [8 x double]* %3, i64 0, i64 2
<   %134 = insertelement <2 x double> poison, double %98, i32 0
<   %135 = shufflevector <2 x double> %134, <2 x double> undef, <2 x i32> zeroinitializer
<   %136 = fadd <2 x double> %127, %135
<   %137 = fsub <2 x double> %127, %135
<   %138 = shufflevector <2 x double> %136, <2 x double> %137, <2 x i32> <i32 0, i32 3>
<   %139 = fsub <2 x double> %138, %130
<   %140 = extractelement <2 x double> %139, i32 0
<   store double %140, double* %133, align 8, !tbaa !2
<   %141 = getelementptr inbounds [8 x double], [8 x double]* %3, i64 0, i64 3
<   %142 = extractelement <2 x double> %139, i32 1
<   store double %142, double* %141, align 8, !tbaa !2
<   %143 = getelementptr inbounds [8 x double], [8 x double]* %3, i64 0, i64 4
<   %144 = fneg <2 x double> %139
<   %145 = bitcast double* %143 to <2 x double>*
<   store <2 x double> %144, <2 x double>* %145, align 8, !tbaa !2
<   %146 = getelementptr inbounds [8 x double], [8 x double]* %3, i64 0, i64 6
<   %147 = fneg <2 x double> %131
<   %148 = bitcast double* %146 to <2 x double>*
<   store <2 x double> %147, <2 x double>* %148, align 8, !tbaa !2
<   %149 = fneg double %107
<   %150 = getelementptr inbounds [8 x double], [8 x double]* %3, i64 1, i64 0
<   %151 = insertelement <2 x double> poison, double %149, i32 0
<   %152 = insertelement <2 x double> %151, double %107, i32 1
<   %153 = insertelement <2 x double> poison, double %110, i32 0
<   %154 = shufflevector <2 x double> %153, <2 x double> undef, <2 x i32> zeroinitializer
<   %155 = fsub <2 x double> %152, %154
<   %156 = insertelement <2 x double> poison, double %113, i32 0
<   %157 = shufflevector <2 x double> %156, <2 x double> undef, <2 x i32> zeroinitializer
<   %158 = fsub <2 x double> %155, %157
<   %159 = bitcast double* %150 to <2 x double>*
<   store <2 x double> %158, <2 x double>* %159, align 8, !tbaa !2
<   %160 = getelementptr inbounds [8 x double], [8 x double]* %3, i64 1, i64 2
<   %161 = insertelement <2 x double> poison, double %107, i32 0
<   %162 = shufflevector <2 x double> %161, <2 x double> undef, <2 x i32> zeroinitializer
<   %163 = fadd <2 x double> %154, %162
<   %164 = fsub <2 x double> %154, %162
<   %165 = shufflevector <2 x double> %163, <2 x double> %164, <2 x i32> <i32 0, i32 3>
<   %166 = fsub <2 x double> %165, %157
<   %167 = extractelement <2 x double> %166, i32 0
<   store double %167, double* %160, align 8, !tbaa !2
<   %168 = getelementptr inbounds [8 x double], [8 x double]* %3, i64 1, i64 3
<   %169 = extractelement <2 x double> %166, i32 1
<   store double %169, double* %168, align 8, !tbaa !2
<   %170 = getelementptr inbounds [8 x double], [8 x double]* %3, i64 1, i64 4
<   %171 = fneg <2 x double> %166
<   %172 = bitcast double* %170 to <2 x double>*
<   store <2 x double> %171, <2 x double>* %172, align 8, !tbaa !2
<   %173 = getelementptr inbounds [8 x double], [8 x double]* %3, i64 1, i64 6
<   %174 = fneg <2 x double> %158
<   %175 = bitcast double* %173 to <2 x double>*
<   store <2 x double> %174, <2 x double>* %175, align 8, !tbaa !2
<   %176 = fneg double %116
<   %177 = getelementptr inbounds [8 x double], [8 x double]* %3, i64 2, i64 0
<   %178 = insertelement <2 x double> poison, double %176, i32 0
<   %179 = insertelement <2 x double> %178, double %116, i32 1
<   %180 = insertelement <2 x double> poison, double %119, i32 0
<   %181 = shufflevector <2 x double> %180, <2 x double> undef, <2 x i32> zeroinitializer
<   %182 = fsub <2 x double> %179, %181
<   %183 = insertelement <2 x double> poison, double %122, i32 0
<   %184 = shufflevector <2 x double> %183, <2 x double> undef, <2 x i32> zeroinitializer
<   %185 = fsub <2 x double> %182, %184
<   %186 = bitcast double* %177 to <2 x double>*
<   store <2 x double> %185, <2 x double>* %186, align 8, !tbaa !2
<   %187 = getelementptr inbounds [8 x double], [8 x double]* %3, i64 2, i64 2
<   %188 = insertelement <2 x double> poison, double %116, i32 0
<   %189 = shufflevector <2 x double> %188, <2 x double> undef, <2 x i32> zeroinitializer
<   %190 = fadd <2 x double> %181, %189
<   %191 = fsub <2 x double> %181, %189
<   %192 = shufflevector <2 x double> %190, <2 x double> %191, <2 x i32> <i32 0, i32 3>
<   %193 = fsub <2 x double> %192, %184
<   %194 = extractelement <2 x double> %193, i32 0
<   store double %194, double* %187, align 8, !tbaa !2
<   %195 = getelementptr inbounds [8 x double], [8 x double]* %3, i64 2, i64 3
<   %196 = extractelement <2 x double> %193, i32 1
<   store double %196, double* %195, align 8, !tbaa !2
<   %197 = getelementptr inbounds [8 x double], [8 x double]* %3, i64 2, i64 4
<   %198 = fneg <2 x double> %193
<   %199 = bitcast double* %197 to <2 x double>*
<   store <2 x double> %198, <2 x double>* %199, align 8, !tbaa !2
<   %200 = getelementptr inbounds [8 x double], [8 x double]* %3, i64 2, i64 6
<   %201 = fneg <2 x double> %185
<   %202 = bitcast double* %200 to <2 x double>*
<   store <2 x double> %201, <2 x double>* %202, align 8, !tbaa !2
<   %203 = fmul double %62, %101
<   %204 = fmul double %77, %110
<   %205 = fadd double %203, %204
<   %206 = fmul double %119, %92
<   %207 = fadd double %206, %205
<   %208 = fmul double %207, 8.000000e+00
<   store double %208, double* %4, align 8, !tbaa !2
<   ret void
< }
< 
< ; Function Attrs: nounwind
< declare void @__kmpc_for_static_fini(%struct.ident_t*, i32) local_unnamed_addr #10
< 
< ; Function Attrs: convergent nounwind
< declare void @__kmpc_barrier(%struct.ident_t*, i32) local_unnamed_addr #12
---
> declare !callback !19 void @__kmpc_fork_call(%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) local_unnamed_addr #7
1578,1595c1445,1446
< declare dso_local void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808)) local_unnamed_addr #0
< 
< ; Function Attrs: nounwind
< declare !callback !31 void @__kmpc_fork_call(%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) local_unnamed_addr #10
< 
< declare dso_local void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808)) local_unnamed_addr #0
< 
< ; Function Attrs: nounwind
< declare dso_local void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1)) local_unnamed_addr #1
< 
< ; Function Attrs: nounwind
< declare extern_weak dso_local i32 @__pthread_key_create(i32*, void (i8*)*) #1
< 
< ; Function Attrs: nounwind
< declare dso_local void @omp_set_num_threads(i32) local_unnamed_addr #10
< 
< ; Function Attrs: nofree nounwind willreturn
< declare dso_local double @sqrt(double) local_unnamed_addr #13
---
> ; Function Attrs: nofree nounwind
> declare dso_local double @sqrt(double) local_unnamed_addr #10
1598,4501c1449,1541
< define dso_local i32 @main(i32 %0, i8** %1) local_unnamed_addr #14 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %3 = alloca %"class.std::allocator.30", align 1
<   %4 = alloca %"class.std::allocator.30", align 1
<   %5 = alloca double, align 8
<   %6 = alloca double, align 8
<   %7 = alloca %"class.std::basic_string", align 8
<   %8 = alloca %"class.std::allocator.30", align 1
<   %9 = alloca %"class.std::vector.15", align 8
<   %10 = alloca %"class.std::allocator.30", align 1
<   %11 = alloca %"class.std::allocator.30", align 1
<   %12 = alloca i32, align 4
<   %13 = alloca %"class.std::basic_string", align 8
<   %14 = alloca %"class.std::allocator.30", align 1
<   %15 = alloca %"class.std::vector.15", align 8
<   %16 = alloca %"class.std::allocator.30", align 1
<   %17 = alloca %"class.std::allocator.30", align 1
<   %18 = alloca %"class.std::basic_string", align 8
<   %19 = alloca %"class.std::allocator.30", align 1
<   %20 = alloca %"class.std::vector.15", align 8
<   %21 = alloca %"class.std::allocator.30", align 1
<   %22 = alloca %"class.std::allocator.30", align 1
<   %23 = alloca %"class.std::allocator.30", align 1
<   %24 = alloca %"class.std::allocator.30", align 1
<   %25 = alloca double*, align 8
<   %26 = alloca double*, align 8
<   %27 = alloca double*, align 8
<   %28 = alloca double*, align 8
<   %29 = alloca double*, align 8
<   %30 = alloca double*, align 8
<   %31 = alloca double*, align 8
<   %32 = alloca double, align 8
<   %33 = alloca i32, align 4
<   %34 = alloca i32, align 4
<   %35 = alloca i32, align 4
<   %36 = alloca double*, align 8
<   %37 = alloca double*, align 8
<   %38 = alloca double*, align 8
<   %39 = alloca [4 x [8 x double]], align 16
<   %40 = alloca %"class.std::basic_string", align 8
<   %41 = alloca %"class.std::allocator.30", align 1
<   %42 = alloca %"class.std::vector.15", align 8
<   %43 = alloca %"class.std::allocator.30", align 1
<   %44 = alloca %"class.std::allocator.30", align 1
<   %45 = alloca double*, align 8
<   %46 = alloca double*, align 8
<   %47 = alloca double*, align 8
<   %48 = alloca double*, align 8
<   %49 = alloca double*, align 8
<   %50 = alloca double*, align 8
<   %51 = alloca double*, align 8
<   %52 = alloca %"class.std::basic_string", align 8
<   %53 = alloca %"class.std::allocator.30", align 1
<   %54 = alloca %"class.std::vector.15", align 8
<   %55 = alloca %"class.std::allocator.30", align 1
<   %56 = alloca %"class.std::allocator.30", align 1
<   %57 = alloca %"class.std::allocator.30", align 1
<   %58 = alloca %"class.std::allocator.30", align 1
<   %59 = alloca double*, align 8
<   %60 = alloca double*, align 8
<   %61 = alloca double*, align 8
<   %62 = alloca double*, align 8
<   %63 = alloca i32, align 4
<   %64 = alloca i32, align 4
<   %65 = alloca i32, align 4
<   %66 = alloca double*, align 8
<   %67 = alloca double*, align 8
<   %68 = alloca double*, align 8
<   %69 = alloca [8 x double], align 16
<   %70 = alloca [8 x double], align 16
<   %71 = alloca [8 x double], align 16
<   %72 = alloca %"class.std::basic_string", align 8
<   %73 = alloca %"class.std::allocator.30", align 1
<   %74 = alloca %"class.std::vector.15", align 8
<   %75 = alloca %"class.std::allocator.30", align 1
<   %76 = alloca %"class.std::allocator.30", align 1
<   %77 = alloca double*, align 8
<   %78 = alloca double*, align 8
<   %79 = alloca double*, align 8
<   %80 = alloca %"class.std::basic_string", align 8
<   %81 = alloca %"class.std::allocator.30", align 1
<   %82 = alloca %"class.std::vector.15", align 8
<   %83 = alloca double*, align 8
<   %84 = alloca %"class.std::basic_string", align 8
<   %85 = alloca %"class.std::allocator.30", align 1
<   %86 = alloca %"class.std::vector.15", align 8
<   %87 = alloca %"class.std::basic_string", align 8
<   %88 = alloca %"class.std::allocator.30", align 1
<   %89 = alloca %"class.std::vector.15", align 8
<   %90 = alloca %"class.std::allocator.30", align 1
<   %91 = alloca %"class.std::allocator.30", align 1
<   %92 = alloca double, align 8
<   %93 = alloca %"class.std::basic_string", align 8
<   %94 = alloca %"class.std::allocator.30", align 1
<   %95 = alloca %"class.std::vector.15", align 8
<   %96 = alloca %struct.cmdLineOpts, align 16
<   %97 = alloca i32, align 4
<   %98 = alloca i32, align 4
<   %99 = alloca i32, align 4
<   %100 = alloca i32, align 4
<   %101 = alloca %struct.timeval, align 8
<   %102 = alloca %struct.timeval, align 8
<   %103 = bitcast %struct.cmdLineOpts* %96 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %103) #10
<   %104 = getelementptr inbounds %struct.cmdLineOpts, %struct.cmdLineOpts* %96, i64 0, i32 0
<   %105 = getelementptr inbounds %struct.cmdLineOpts, %struct.cmdLineOpts* %96, i64 0, i32 1
<   %106 = getelementptr inbounds %struct.cmdLineOpts, %struct.cmdLineOpts* %96, i64 0, i32 2
<   %107 = getelementptr inbounds %struct.cmdLineOpts, %struct.cmdLineOpts* %96, i64 0, i32 3
<   %108 = bitcast %struct.cmdLineOpts* %96 to <4 x i32>*
<   store <4 x i32> <i32 9999999, i32 30, i32 11, i32 1>, <4 x i32>* %108, align 16, !tbaa !12
<   %109 = getelementptr inbounds %struct.cmdLineOpts, %struct.cmdLineOpts* %96, i64 0, i32 4
<   %110 = getelementptr inbounds %struct.cmdLineOpts, %struct.cmdLineOpts* %96, i64 0, i32 5
<   %111 = getelementptr inbounds %struct.cmdLineOpts, %struct.cmdLineOpts* %96, i64 0, i32 6
<   %112 = getelementptr inbounds %struct.cmdLineOpts, %struct.cmdLineOpts* %96, i64 0, i32 8
<   store i32 1, i32* %112, align 16, !tbaa !33
<   %113 = getelementptr inbounds %struct.cmdLineOpts, %struct.cmdLineOpts* %96, i64 0, i32 7
<   %114 = bitcast i32* %109 to <4 x i32>*
<   store <4 x i32> <i32 0, i32 0, i32 0, i32 1>, <4 x i32>* %114, align 16, !tbaa !12
<   call void @_Z23ParseCommandLineOptionsiPPciP11cmdLineOpts(i32 %0, i8** %1, i32 0, %struct.cmdLineOpts* nonnull %96)
<   %115 = load i32, i32* %110, align 4, !tbaa !35
<   %116 = icmp eq i32 %115, 0
<   br i1 %116, label %117, label %143
< 
< 117:                                              ; preds = %2
<   %118 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0), i64 21)
<   %119 = load i32, i32* %105, align 4, !tbaa !36
<   %120 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull dereferenceable(8) @_ZSt4cout, i32 %119)
<   %121 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %120, i8* nonnull getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0), i64 31)
<   %122 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i64 0, i64 0), i64 16)
<   %123 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull dereferenceable(8) @_ZSt4cout, i32 1)
<   %124 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %123, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i64 1)
<   %125 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i64 0, i64 0), i64 13)
<   %126 = call i32 @omp_get_max_threads()
<   %127 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull dereferenceable(8) @_ZSt4cout, i32 %126)
<   %128 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %127, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i64 1)
<   %129 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i64 0, i64 0), i64 26)
<   %130 = load i32, i32* %105, align 4, !tbaa !36
<   %131 = sext i32 %130 to i64
<   %132 = mul nsw i64 %131, %131
<   %133 = mul nsw i64 %132, %131
<   %134 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo9_M_insertIlEERSoT_(%"class.std::basic_ostream"* nonnull dereferenceable(8) @_ZSt4cout, i64 %133)
<   %135 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %134, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i64 3)
<   %136 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([39 x i8], [39 x i8]* @.str.9, i64 0, i64 0), i64 38)
<   %137 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([56 x i8], [56 x i8]* @.str.10, i64 0, i64 0), i64 55)
<   %138 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([62 x i8], [62 x i8]* @.str.11, i64 0, i64 0), i64 61)
<   %139 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([60 x i8], [60 x i8]* @.str.12, i64 0, i64 0), i64 59)
<   %140 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.13, i64 0, i64 0), i64 30)
<   %141 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([43 x i8], [43 x i8]* @.str.14, i64 0, i64 0), i64 42)
<   %142 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([33 x i8], [33 x i8]* @.str.15, i64 0, i64 0), i64 32)
<   br label %143
< 
< 143:                                              ; preds = %117, %2
<   %144 = load atomic i8, i8* bitcast (i64* @_ZGVZN6Apollo8instanceEvE12the_instance to i8*) acquire, align 8
<   %145 = icmp eq i8 %144, 0
<   br i1 %145, label %146, label %155, !prof !37
< 
< 146:                                              ; preds = %143
<   %147 = call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN6Apollo8instanceEvE12the_instance) #10
<   %148 = icmp eq i32 %147, 0
<   br i1 %148, label %155, label %149
< 
< 149:                                              ; preds = %146
<   invoke void @_ZN6ApolloC1Ev(%class.Apollo* nonnull dereferenceable(128) @_ZZN6Apollo8instanceEvE12the_instance)
<           to label %150 unwind label %152
< 
< 150:                                              ; preds = %149
<   %151 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%class.Apollo*)* @_ZN6ApolloD1Ev to void (i8*)*), i8* bitcast (%class.Apollo* @_ZZN6Apollo8instanceEvE12the_instance to i8*), i8* nonnull @__dso_handle) #10
<   call void @__cxa_guard_release(i64* nonnull @_ZGVZN6Apollo8instanceEvE12the_instance) #10
<   br label %155
< 
< 152:                                              ; preds = %149
<   %153 = landingpad { i8*, i32 }
<           catch i8* null
<   %154 = extractvalue { i8*, i32 } %153, 0
<   call void @__cxa_guard_abort(i64* nonnull @_ZGVZN6Apollo8instanceEvE12the_instance) #10
<   call void @__clang_call_terminate(i8* %154) #29
<   unreachable
< 
< 155:                                              ; preds = %143, %146, %150
<   store %class.Apollo* @_ZZN6Apollo8instanceEvE12the_instance, %class.Apollo** @apollo, align 8, !tbaa !6
<   %156 = bitcast i32* %97 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %156) #10
<   %157 = bitcast i32* %98 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %157) #10
<   %158 = bitcast i32* %99 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %158) #10
<   %159 = bitcast i32* %100 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %159) #10
<   call void @_Z14InitMeshDecompiiPiS_S_S_(i32 1, i32 0, i32* nonnull %97, i32* nonnull %98, i32* nonnull %99, i32* nonnull %100)
<   %160 = call noalias nonnull dereferenceable(1312) i8* @_Znwm(i64 1312) #27
<   %161 = bitcast i8* %160 to %class.Domain*
<   %162 = load i32, i32* %97, align 4, !tbaa !12
<   %163 = load i32, i32* %98, align 4, !tbaa !12
<   %164 = load i32, i32* %99, align 4, !tbaa !12
<   %165 = load i32, i32* %105, align 4, !tbaa !36
<   %166 = load i32, i32* %100, align 4, !tbaa !12
<   %167 = load i32, i32* %106, align 8, !tbaa !38
<   %168 = load i32, i32* %112, align 16, !tbaa !33
<   %169 = load i32, i32* %113, align 4, !tbaa !39
<   invoke void @_ZN6DomainC1Eiiiiiiiii(%class.Domain* nonnull dereferenceable(1312) %161, i32 1, i32 %162, i32 %163, i32 %164, i32 %165, i32 %166, i32 %167, i32 %168, i32 %169)
<           to label %170 unwind label %1565
< 
< 170:                                              ; preds = %155
<   %171 = bitcast %struct.timeval* %101 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %171) #10
<   %172 = call i32 @gettimeofday(%struct.timeval* nonnull %101, %struct.timezone* null) #10
<   %173 = getelementptr inbounds i8, i8* %160, i64 1176
<   %174 = bitcast i8* %173 to double*
<   %175 = load double, double* %174, align 8, !tbaa !2
<   %176 = getelementptr inbounds i8, i8* %160, i64 1216
<   %177 = bitcast i8* %176 to double*
<   %178 = load double, double* %177, align 8, !tbaa !2
<   %179 = fcmp olt double %175, %178
<   br i1 %179, label %180, label %1571
< 
< 180:                                              ; preds = %170
<   %181 = getelementptr inbounds i8, i8* %160, i64 1160
<   %182 = bitcast i8* %181 to i32*
<   %183 = getelementptr inbounds i8, i8* %160, i64 1168
<   %184 = bitcast i8* %183 to double*
<   %185 = getelementptr inbounds i8, i8* %160, i64 1184
<   %186 = bitcast i8* %185 to double*
<   %187 = getelementptr inbounds i8, i8* %160, i64 1144
<   %188 = bitcast i8* %187 to double*
<   %189 = getelementptr inbounds i8, i8* %160, i64 1152
<   %190 = bitcast i8* %189 to double*
<   %191 = getelementptr inbounds i8, i8* %160, i64 1192
<   %192 = bitcast i8* %191 to double*
<   %193 = getelementptr inbounds i8, i8* %160, i64 1200
<   %194 = bitcast i8* %193 to double*
<   %195 = getelementptr inbounds i8, i8* %160, i64 1208
<   %196 = bitcast i8* %195 to double*
<   %197 = getelementptr inbounds i8, i8* %160, i64 1024
<   %198 = bitcast i8* %197 to double*
<   %199 = bitcast %"class.std::vector.15"* %89 to i8*
<   %200 = getelementptr inbounds i8, i8* %160, i64 1260
<   %201 = bitcast i8* %200 to i32*
<   %202 = bitcast %"class.std::basic_string"* %87 to i8*
<   %203 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %88, i64 0, i32 0
<   %204 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %87, i64 0, i32 0, i32 0
<   %205 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %22, i64 0, i32 0
<   %206 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %89, i64 0, i32 0, i32 0, i32 0
<   %207 = bitcast %"class.std::vector.15"* %89 to i8**
<   %208 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %89, i64 0, i32 0, i32 0, i32 1
<   %209 = bitcast float** %208 to i8**
<   %210 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %89, i64 0, i32 0, i32 0, i32 2
<   %211 = bitcast float** %210 to i8**
<   %212 = bitcast %"class.std::vector.15"* %86 to i8*
<   %213 = getelementptr inbounds i8, i8* %160, i64 1256
<   %214 = bitcast i8* %213 to i32*
<   %215 = getelementptr inbounds i8, i8* %160, i64 1032
<   %216 = bitcast i8* %215 to double*
<   %217 = bitcast double** %83 to i8*
<   %218 = bitcast double** %83 to i8**
<   %219 = bitcast double** %77 to i8*
<   %220 = bitcast double** %78 to i8*
<   %221 = bitcast double** %79 to i8*
<   %222 = bitcast %"class.std::vector.15"* %82 to i8*
<   %223 = bitcast double** %77 to i8**
<   %224 = bitcast double** %78 to i8**
<   %225 = bitcast double** %79 to i8**
<   %226 = bitcast %"class.std::basic_string"* %80 to i8*
<   %227 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %81, i64 0, i32 0
<   %228 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %80, i64 0, i32 0, i32 0
<   %229 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %76, i64 0, i32 0
<   %230 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %82, i64 0, i32 0, i32 0, i32 0
<   %231 = bitcast %"class.std::vector.15"* %82 to i8**
<   %232 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %82, i64 0, i32 0, i32 0, i32 1
<   %233 = bitcast float** %232 to i8**
<   %234 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %82, i64 0, i32 0, i32 0, i32 2
<   %235 = bitcast float** %234 to i8**
<   %236 = bitcast double** %59 to i8*
<   %237 = bitcast double** %60 to i8*
<   %238 = bitcast double** %61 to i8*
<   %239 = bitcast double** %62 to i8*
<   %240 = bitcast i32* %63 to i8*
<   %241 = bitcast i32* %64 to i8*
<   %242 = bitcast %"class.std::vector.15"* %74 to i8*
<   %243 = bitcast double** %59 to i8**
<   %244 = bitcast double** %60 to i8**
<   %245 = bitcast double** %61 to i8**
<   %246 = bitcast i32* %65 to i8*
<   %247 = bitcast double** %66 to i8*
<   %248 = bitcast double** %67 to i8*
<   %249 = bitcast double** %68 to i8*
<   %250 = bitcast [8 x double]* %69 to i8*
<   %251 = bitcast [8 x double]* %70 to i8*
<   %252 = bitcast [8 x double]* %71 to i8*
<   %253 = bitcast %"class.std::basic_string"* %72 to i8*
<   %254 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %73, i64 0, i32 0
<   %255 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %72, i64 0, i32 0, i32 0
<   %256 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %58, i64 0, i32 0
<   %257 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %74, i64 0, i32 0, i32 0, i32 0
<   %258 = bitcast %"class.std::vector.15"* %74 to i8**
<   %259 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %74, i64 0, i32 0, i32 0, i32 1
<   %260 = bitcast float** %259 to i8**
<   %261 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %74, i64 0, i32 0, i32 0, i32 2
<   %262 = bitcast float** %261 to i8**
<   %263 = bitcast double** %66 to i8**
<   %264 = bitcast double** %67 to i8**
<   %265 = bitcast double** %68 to i8**
<   %266 = bitcast %"class.std::basic_string"* %84 to i8*
<   %267 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %85, i64 0, i32 0
<   %268 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %84, i64 0, i32 0, i32 0
<   %269 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %56, i64 0, i32 0
<   %270 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %86, i64 0, i32 0, i32 0, i32 0
<   %271 = bitcast %"class.std::vector.15"* %86 to i8**
<   %272 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %86, i64 0, i32 0, i32 0, i32 1
<   %273 = bitcast float** %272 to i8**
<   %274 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %86, i64 0, i32 0, i32 0, i32 2
<   %275 = bitcast float** %274 to i8**
<   %276 = bitcast double** %45 to i8*
<   %277 = bitcast %"class.std::vector.15"* %54 to i8*
<   %278 = bitcast double** %46 to i8*
<   %279 = bitcast double** %46 to i8**
<   %280 = bitcast double** %47 to i8*
<   %281 = bitcast double** %47 to i8**
<   %282 = bitcast double** %48 to i8*
<   %283 = bitcast double** %48 to i8**
<   %284 = bitcast double** %49 to i8*
<   %285 = bitcast double** %49 to i8**
<   %286 = bitcast double** %50 to i8*
<   %287 = bitcast double** %50 to i8**
<   %288 = bitcast double** %51 to i8*
<   %289 = bitcast double** %51 to i8**
<   %290 = bitcast %"class.std::basic_string"* %52 to i8*
<   %291 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %53, i64 0, i32 0
<   %292 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %52, i64 0, i32 0, i32 0
<   %293 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %44, i64 0, i32 0
<   %294 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %54, i64 0, i32 0, i32 0, i32 0
<   %295 = bitcast %"class.std::vector.15"* %54 to i8**
<   %296 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %54, i64 0, i32 0, i32 0, i32 1
<   %297 = bitcast float** %296 to i8**
<   %298 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %54, i64 0, i32 0, i32 0, i32 2
<   %299 = bitcast float** %298 to i8**
<   %300 = bitcast double** %25 to i8*
<   %301 = bitcast double** %26 to i8*
<   %302 = bitcast double** %27 to i8*
<   %303 = bitcast double** %28 to i8*
<   %304 = bitcast double** %29 to i8*
<   %305 = bitcast double** %30 to i8*
<   %306 = bitcast double** %31 to i8*
<   %307 = bitcast double* %32 to i8*
<   %308 = bitcast i32* %33 to i8*
<   %309 = bitcast i32* %34 to i8*
<   %310 = bitcast %"class.std::vector.15"* %42 to i8*
<   %311 = bitcast i32* %35 to i8*
<   %312 = bitcast double** %36 to i8*
<   %313 = bitcast double** %37 to i8*
<   %314 = bitcast double** %38 to i8*
<   %315 = bitcast [4 x [8 x double]]* %39 to i8*
<   %316 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %39, i64 0, i64 0, i64 2
<   %317 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %39, i64 0, i64 0, i64 4
<   %318 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %39, i64 0, i64 0, i64 6
<   %319 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %39, i64 0, i64 1, i64 0
<   %320 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %39, i64 0, i64 1, i64 2
<   %321 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %39, i64 0, i64 1, i64 4
<   %322 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %39, i64 0, i64 1, i64 6
<   %323 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %39, i64 0, i64 2, i64 0
<   %324 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %39, i64 0, i64 2, i64 2
<   %325 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %39, i64 0, i64 2, i64 4
<   %326 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %39, i64 0, i64 2, i64 6
<   %327 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %39, i64 0, i64 3, i64 0
<   %328 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %39, i64 0, i64 3, i64 2
<   %329 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %39, i64 0, i64 3, i64 4
<   %330 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %39, i64 0, i64 3, i64 6
<   %331 = bitcast %"class.std::basic_string"* %40 to i8*
<   %332 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %41, i64 0, i32 0
<   %333 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %40, i64 0, i32 0, i32 0
<   %334 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %24, i64 0, i32 0
<   %335 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %42, i64 0, i32 0, i32 0, i32 0
<   %336 = bitcast %"class.std::vector.15"* %42 to i8**
<   %337 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %42, i64 0, i32 0, i32 0, i32 1
<   %338 = bitcast float** %337 to i8**
<   %339 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %42, i64 0, i32 0, i32 0, i32 2
<   %340 = bitcast float** %339 to i8**
<   %341 = bitcast double** %36 to i8**
<   %342 = bitcast double** %37 to i8**
<   %343 = bitcast double** %38 to i8**
<   %344 = bitcast %"class.std::vector.15"* %20 to i8*
<   %345 = bitcast %"class.std::basic_string"* %18 to i8*
<   %346 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %19, i64 0, i32 0
<   %347 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %18, i64 0, i32 0, i32 0
<   %348 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %17, i64 0, i32 0
<   %349 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %20, i64 0, i32 0, i32 0, i32 0
<   %350 = bitcast %"class.std::vector.15"* %20 to i8**
<   %351 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %20, i64 0, i32 0, i32 0, i32 1
<   %352 = bitcast float** %351 to i8**
<   %353 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %20, i64 0, i32 0, i32 0, i32 2
<   %354 = bitcast float** %353 to i8**
<   %355 = bitcast %"class.std::vector.15"* %15 to i8*
<   %356 = getelementptr inbounds i8, i8* %160, i64 1244
<   %357 = bitcast i8* %356 to i32*
<   %358 = bitcast i32* %12 to i8*
<   %359 = bitcast %"class.std::basic_string"* %13 to i8*
<   %360 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %14, i64 0, i32 0
<   %361 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %13, i64 0, i32 0, i32 0
<   %362 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %11, i64 0, i32 0
<   %363 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %15, i64 0, i32 0, i32 0, i32 0
<   %364 = bitcast %"class.std::vector.15"* %15 to i8**
<   %365 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %15, i64 0, i32 0, i32 0, i32 1
<   %366 = bitcast float** %365 to i8**
<   %367 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %15, i64 0, i32 0, i32 0, i32 2
<   %368 = bitcast float** %367 to i8**
<   %369 = bitcast double* %5 to i8*
<   %370 = bitcast double* %6 to i8*
<   %371 = bitcast %"class.std::vector.15"* %9 to i8*
<   %372 = bitcast %"class.std::basic_string"* %7 to i8*
<   %373 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %8, i64 0, i32 0
<   %374 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %7, i64 0, i32 0, i32 0
<   %375 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %4, i64 0, i32 0
<   %376 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %9, i64 0, i32 0, i32 0, i32 0
<   %377 = bitcast %"class.std::vector.15"* %9 to i8**
<   %378 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %9, i64 0, i32 0, i32 0, i32 1
<   %379 = bitcast float** %378 to i8**
<   %380 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %9, i64 0, i32 0, i32 0, i32 2
<   %381 = bitcast float** %380 to i8**
<   %382 = bitcast double* %92 to i8*
<   %383 = bitcast %"class.std::vector.15"* %95 to i8*
<   %384 = bitcast %"class.std::basic_string"* %93 to i8*
<   %385 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %94, i64 0, i32 0
<   %386 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %93, i64 0, i32 0, i32 0
<   %387 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %91, i64 0, i32 0
<   %388 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %95, i64 0, i32 0, i32 0, i32 0
<   %389 = bitcast %"class.std::vector.15"* %95 to i8**
<   %390 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %95, i64 0, i32 0, i32 0, i32 1
<   %391 = bitcast float** %390 to i8**
<   %392 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %95, i64 0, i32 0, i32 0, i32 2
<   %393 = bitcast float** %392 to i8**
<   %394 = getelementptr inbounds i8, i8* %160, i64 384
<   %395 = bitcast i8* %394 to i32*
<   %396 = getelementptr inbounds i8, i8* %160, i64 392
<   %397 = bitcast i8* %396 to i32**
<   %398 = getelementptr inbounds i8, i8* %160, i64 408
<   %399 = bitcast i8* %398 to i32***
<   %400 = getelementptr inbounds i8, i8* %160, i64 1088
<   %401 = bitcast i8* %400 to double*
<   %402 = getelementptr inbounds i8, i8* %160, i64 1128
<   %403 = bitcast i8* %402 to double*
<   %404 = bitcast [4 x [8 x double]]* %39 to <2 x double>*
<   %405 = bitcast double* %316 to <2 x double>*
<   %406 = bitcast double* %317 to <2 x double>*
<   %407 = bitcast double* %318 to <2 x double>*
<   %408 = bitcast double* %319 to <2 x double>*
<   %409 = bitcast double* %320 to <2 x double>*
<   %410 = bitcast double* %321 to <2 x double>*
<   %411 = bitcast double* %322 to <2 x double>*
<   %412 = bitcast double* %323 to <2 x double>*
<   %413 = bitcast double* %324 to <2 x double>*
<   %414 = bitcast double* %325 to <2 x double>*
<   %415 = bitcast double* %326 to <2 x double>*
<   %416 = bitcast double* %327 to <2 x double>*
<   %417 = bitcast double* %328 to <2 x double>*
<   %418 = bitcast double* %329 to <2 x double>*
<   %419 = bitcast double* %330 to <2 x double>*
<   %420 = bitcast i8* %187 to <2 x double>*
<   br label %421
< 
< 421:                                              ; preds = %180, %1567
<   %422 = phi double [ %178, %180 ], [ %1569, %1567 ]
<   %423 = phi double [ %175, %180 ], [ %1568, %1567 ]
<   %424 = load i32, i32* %182, align 4, !tbaa !12
<   %425 = load i32, i32* %104, align 16, !tbaa !40
<   %426 = icmp slt i32 %424, %425
<   br i1 %426, label %427, label %1571
< 
< 427:                                              ; preds = %421
<   %428 = fsub double %422, %423
<   %429 = load double, double* %184, align 8, !tbaa !2
<   %430 = fcmp ugt double %429, 0.000000e+00
<   %431 = icmp eq i32 %424, 0
<   %432 = or i1 %431, %430
<   %433 = load double, double* %186, align 8, !tbaa !2
<   br i1 %432, label %461, label %434
< 
< 434:                                              ; preds = %427
<   %435 = load double, double* %188, align 8, !tbaa !2
<   %436 = fcmp olt double %435, 1.000000e+20
<   %437 = fmul double %435, 5.000000e-01
<   %438 = select i1 %436, double %437, double 1.000000e+20
<   %439 = load double, double* %190, align 8, !tbaa !2
<   %440 = fcmp olt double %439, %438
<   br i1 %440, label %441, label %444
< 
< 441:                                              ; preds = %434
<   %442 = fmul double %439, 2.000000e+00
<   %443 = fdiv double %442, 3.000000e+00
<   br label %444
< 
< 444:                                              ; preds = %441, %434
<   %445 = phi double [ %443, %441 ], [ %438, %434 ]
<   %446 = fdiv double %445, %433
<   %447 = fcmp ult double %446, 1.000000e+00
<   br i1 %447, label %456, label %448
< 
< 448:                                              ; preds = %444
<   %449 = load double, double* %192, align 8, !tbaa !2
<   %450 = fcmp olt double %446, %449
<   br i1 %450, label %456, label %451
< 
< 451:                                              ; preds = %448
<   %452 = load double, double* %194, align 8, !tbaa !2
<   %453 = fcmp ogt double %446, %452
<   br i1 %453, label %454, label %456
< 
< 454:                                              ; preds = %451
<   %455 = fmul double %433, %452
<   br label %456
< 
< 456:                                              ; preds = %454, %451, %448, %444
<   %457 = phi double [ %455, %454 ], [ %445, %451 ], [ %445, %444 ], [ %433, %448 ]
<   %458 = load double, double* %196, align 8, !tbaa !2
<   %459 = fcmp ogt double %457, %458
<   %460 = select i1 %459, double %458, double %457
<   store double %460, double* %186, align 8, !tbaa !2
<   br label %461
< 
< 461:                                              ; preds = %427, %456
<   %462 = phi double [ %460, %456 ], [ %433, %427 ]
<   %463 = fcmp ogt double %428, %462
<   br i1 %463, label %464, label %471
< 
< 464:                                              ; preds = %461
<   %465 = fmul double %462, 4.000000e+00
<   %466 = fdiv double %465, 3.000000e+00
<   %467 = fcmp olt double %428, %466
<   br i1 %467, label %468, label %471
< 
< 468:                                              ; preds = %464
<   %469 = fmul double %462, 2.000000e+00
<   %470 = fdiv double %469, 3.000000e+00
<   br label %471
< 
< 471:                                              ; preds = %468, %464, %461
<   %472 = phi double [ %470, %468 ], [ %428, %464 ], [ %428, %461 ]
<   %473 = fcmp olt double %472, %462
<   br i1 %473, label %474, label %475
< 
< 474:                                              ; preds = %471
<   store double %472, double* %186, align 8, !tbaa !2
<   br label %475
< 
< 475:                                              ; preds = %471, %474
<   %476 = phi double [ %472, %474 ], [ %462, %471 ]
<   %477 = fadd double %423, %476
<   store double %477, double* %174, align 8, !tbaa !2
<   %478 = add nsw i32 %424, 1
<   store i32 %478, i32* %182, align 8, !tbaa !12
<   %479 = load double, double* %198, align 8, !tbaa !41
<   call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %199)
<   %480 = load i32, i32* %201, align 4, !tbaa !12
<   %481 = sitofp i32 %480 to float
<   %482 = call noalias nonnull i8* @_Znwm(i64 4) #26
<   %483 = bitcast i8* %482 to float*
<   store float %481, float* %483, align 4
<   %484 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL17CalcForceForNodesR6DomainE12apolloRegion, align 8, !tbaa !6
<   %485 = icmp eq %"class.Apollo::Region"* %484, null
<   br i1 %485, label %486, label %536
< 
< 486:                                              ; preds = %475
<   %487 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %488 unwind label %510
< 
< 488:                                              ; preds = %486
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %202) #10
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %203) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %87, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %88)
<           to label %489 unwind label %512
< 
< 489:                                              ; preds = %488
<   %490 = bitcast i8* %487 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %490, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.20, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %87)
<           to label %491 unwind label %514
< 
< 491:                                              ; preds = %489
<   store i8* %487, i8** bitcast (%"class.Apollo::Region"** @_ZZL17CalcForceForNodesR6DomainE12apolloRegion to i8**), align 8, !tbaa !6
<   %492 = load i8*, i8** %204, align 8, !tbaa !8
<   %493 = getelementptr inbounds i8, i8* %492, i64 -24
<   %494 = bitcast i8* %493 to %"struct.std::basic_string<char>::_Rep"*
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %205) #10
<   %495 = icmp eq i8* %493, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %495, label %508, label %496, !prof !11
< 
< 496:                                              ; preds = %491
<   %497 = getelementptr inbounds i8, i8* %492, i64 -8
<   %498 = bitcast i8* %497 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %499, label %501
< 
< 499:                                              ; preds = %496
<   %500 = atomicrmw volatile add i32* %498, i32 -1 acq_rel
<   br label %504
< 
< 501:                                              ; preds = %496
<   %502 = load i32, i32* %498, align 4, !tbaa !12
<   %503 = add nsw i32 %502, -1
<   store i32 %503, i32* %498, align 4, !tbaa !12
<   br label %504
< 
< 504:                                              ; preds = %501, %499
<   %505 = phi i32 [ %500, %499 ], [ %502, %501 ]
<   %506 = icmp slt i32 %505, 1
<   br i1 %506, label %507, label %508
< 
< 507:                                              ; preds = %504
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %494, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %22) #10
<   br label %508
< 
< 508:                                              ; preds = %507, %504, %491
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %205) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %203) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %202) #10
<   %509 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL17CalcForceForNodesR6DomainE12apolloRegion, align 8, !tbaa !6
<   br label %536
< 
< 510:                                              ; preds = %779, %659, %563, %553, %550, %536, %486
<   %511 = landingpad { i8*, i32 }
<           cleanup
<   br label %1143
< 
< 512:                                              ; preds = %488
<   %513 = landingpad { i8*, i32 }
<           cleanup
<   br label %534
< 
< 514:                                              ; preds = %489
<   %515 = landingpad { i8*, i32 }
<           cleanup
<   %516 = load i8*, i8** %204, align 8, !tbaa !8
<   %517 = getelementptr inbounds i8, i8* %516, i64 -24
<   %518 = bitcast i8* %517 to %"struct.std::basic_string<char>::_Rep"*
<   %519 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %21, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %519) #10
<   %520 = icmp eq i8* %517, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %520, label %533, label %521, !prof !11
< 
< 521:                                              ; preds = %514
<   %522 = getelementptr inbounds i8, i8* %516, i64 -8
<   %523 = bitcast i8* %522 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %524, label %526
< 
< 524:                                              ; preds = %521
<   %525 = atomicrmw volatile add i32* %523, i32 -1 acq_rel
<   br label %529
< 
< 526:                                              ; preds = %521
<   %527 = load i32, i32* %523, align 4, !tbaa !12
<   %528 = add nsw i32 %527, -1
<   store i32 %528, i32* %523, align 4, !tbaa !12
<   br label %529
< 
< 529:                                              ; preds = %526, %524
<   %530 = phi i32 [ %525, %524 ], [ %527, %526 ]
<   %531 = icmp slt i32 %530, 1
<   br i1 %531, label %532, label %533
< 
< 532:                                              ; preds = %529
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %518, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %21) #10
<   br label %533
< 
< 533:                                              ; preds = %532, %529, %514
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %519) #10
<   br label %534
< 
< 534:                                              ; preds = %533, %512
<   %535 = phi { i8*, i32 } [ %515, %533 ], [ %513, %512 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %203) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %202) #10
<   call void @_ZdlPv(i8* nonnull %487) #28
<   br label %1143
< 
< 536:                                              ; preds = %508, %475
<   %537 = phi %"class.Apollo::Region"* [ %509, %508 ], [ %484, %475 ]
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %199, i8 0, i64 24, i1 false) #10
<   %538 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %539 unwind label %510
< 
< 539:                                              ; preds = %536
<   store i8* %538, i8** %207, align 8, !tbaa !14
<   %540 = getelementptr inbounds i8, i8* %538, i64 4
<   store i8* %540, i8** %211, align 8, !tbaa !17
<   %541 = bitcast i8* %482 to i32*
<   %542 = bitcast i8* %538 to i32*
<   %543 = load i32, i32* %541, align 4
<   store i32 %543, i32* %542, align 4
<   store i8* %540, i8** %209, align 8, !tbaa !18
<   %544 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %537, %"class.std::vector.15"* nonnull %89)
<           to label %545 unwind label %1137
< 
< 545:                                              ; preds = %539
<   %546 = load float*, float** %206, align 8, !tbaa !14
<   %547 = icmp eq float* %546, null
<   br i1 %547, label %550, label %548
< 
< 548:                                              ; preds = %545
<   %549 = bitcast float* %546 to i8*
<   call void @_ZdlPv(i8* nonnull %549) #10
<   br label %550
< 
< 550:                                              ; preds = %548, %545
<   %551 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL17CalcForceForNodesR6DomainE12apolloRegion, align 8, !tbaa !6
<   %552 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %551)
<           to label %553 unwind label %510
< 
< 553:                                              ; preds = %550
<   %554 = icmp eq i32 %552, 1
<   %555 = select i1 %554, i32 1, i32 36
<   %556 = icmp eq i32 %552, 0
<   %557 = select i1 %556, i32 36, i32 %555
<   call void @omp_set_num_threads(i32 %557) #10
<   %558 = zext i32 %480 to i64
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 2, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, %class.Domain*)* @.omp_outlined..21 to void (i32*, i32*, ...)*), i64 %558, i8* nonnull %160)
<   %559 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL17CalcForceForNodesR6DomainE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %559)
<           to label %560 unwind label %510
< 
< 560:                                              ; preds = %553
<   call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %212)
<   %561 = load i32, i32* %214, align 8, !tbaa !12
<   %562 = icmp eq i32 %561, 0
<   br i1 %562, label %1145, label %563
< 
< 563:                                              ; preds = %560
<   %564 = load double, double* %216, align 8, !tbaa !42
<   %565 = sext i32 %561 to i64
<   %566 = shl nsw i64 %565, 3
<   %567 = call noalias i8* @malloc(i64 %566) #10
<   %568 = call noalias i8* @malloc(i64 %566) #10
<   %569 = call noalias i8* @malloc(i64 %566) #10
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %217) #10
<   %570 = call noalias i8* @malloc(i64 %566) #10
<   store i8* %570, i8** %218, align 8, !tbaa !6
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %219)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %220)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %221)
<   call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %222)
<   store i8* %567, i8** %223, align 8, !tbaa !6
<   store i8* %568, i8** %224, align 8, !tbaa !6
<   store i8* %569, i8** %225, align 8, !tbaa !6
<   %571 = sitofp i32 %561 to float
<   %572 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %573 unwind label %510
< 
< 573:                                              ; preds = %563
<   %574 = bitcast i8* %572 to float*
<   store float %571, float* %574, align 4
<   %575 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL23InitStressTermsForElemsR6DomainPdS1_S1_iE12apolloRegion, align 8, !tbaa !6
<   %576 = icmp eq %"class.Apollo::Region"* %575, null
<   br i1 %576, label %577, label %627
< 
< 577:                                              ; preds = %573
<   %578 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %579 unwind label %601
< 
< 579:                                              ; preds = %577
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %226) #10
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %227) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %80, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %81)
<           to label %580 unwind label %603
< 
< 580:                                              ; preds = %579
<   %581 = bitcast i8* %578 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %581, i32 1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.24, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %80)
<           to label %582 unwind label %605
< 
< 582:                                              ; preds = %580
<   store i8* %578, i8** bitcast (%"class.Apollo::Region"** @_ZZL23InitStressTermsForElemsR6DomainPdS1_S1_iE12apolloRegion to i8**), align 8, !tbaa !6
<   %583 = load i8*, i8** %228, align 8, !tbaa !8
<   %584 = getelementptr inbounds i8, i8* %583, i64 -24
<   %585 = bitcast i8* %584 to %"struct.std::basic_string<char>::_Rep"*
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %229) #10
<   %586 = icmp eq i8* %584, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %586, label %599, label %587, !prof !11
< 
< 587:                                              ; preds = %582
<   %588 = getelementptr inbounds i8, i8* %583, i64 -8
<   %589 = bitcast i8* %588 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %590, label %592
< 
< 590:                                              ; preds = %587
<   %591 = atomicrmw volatile add i32* %589, i32 -1 acq_rel
<   br label %595
< 
< 592:                                              ; preds = %587
<   %593 = load i32, i32* %589, align 4, !tbaa !12
<   %594 = add nsw i32 %593, -1
<   store i32 %594, i32* %589, align 4, !tbaa !12
<   br label %595
< 
< 595:                                              ; preds = %592, %590
<   %596 = phi i32 [ %591, %590 ], [ %593, %592 ]
<   %597 = icmp slt i32 %596, 1
<   br i1 %597, label %598, label %599
< 
< 598:                                              ; preds = %595
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %585, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %76) #10
<   br label %599
< 
< 599:                                              ; preds = %598, %595, %582
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %229) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %227) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %226) #10
<   %600 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL23InitStressTermsForElemsR6DomainPdS1_S1_iE12apolloRegion, align 8, !tbaa !6
<   br label %627
< 
< 601:                                              ; preds = %644, %641, %627, %577
<   %602 = landingpad { i8*, i32 }
<           cleanup
<   br label %657
< 
< 603:                                              ; preds = %579
<   %604 = landingpad { i8*, i32 }
<           cleanup
<   br label %625
< 
< 605:                                              ; preds = %580
<   %606 = landingpad { i8*, i32 }
<           cleanup
<   %607 = load i8*, i8** %228, align 8, !tbaa !8
<   %608 = getelementptr inbounds i8, i8* %607, i64 -24
<   %609 = bitcast i8* %608 to %"struct.std::basic_string<char>::_Rep"*
<   %610 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %75, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %610) #10
<   %611 = icmp eq i8* %608, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %611, label %624, label %612, !prof !11
< 
< 612:                                              ; preds = %605
<   %613 = getelementptr inbounds i8, i8* %607, i64 -8
<   %614 = bitcast i8* %613 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %615, label %617
< 
< 615:                                              ; preds = %612
<   %616 = atomicrmw volatile add i32* %614, i32 -1 acq_rel
<   br label %620
< 
< 617:                                              ; preds = %612
<   %618 = load i32, i32* %614, align 4, !tbaa !12
<   %619 = add nsw i32 %618, -1
<   store i32 %619, i32* %614, align 4, !tbaa !12
<   br label %620
< 
< 620:                                              ; preds = %617, %615
<   %621 = phi i32 [ %616, %615 ], [ %618, %617 ]
<   %622 = icmp slt i32 %621, 1
<   br i1 %622, label %623, label %624
< 
< 623:                                              ; preds = %620
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %609, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %75) #10
<   br label %624
< 
< 624:                                              ; preds = %623, %620, %605
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %610) #10
<   br label %625
< 
< 625:                                              ; preds = %624, %603
<   %626 = phi { i8*, i32 } [ %606, %624 ], [ %604, %603 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %227) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %226) #10
<   call void @_ZdlPv(i8* nonnull %578) #28
<   br label %657
< 
< 627:                                              ; preds = %599, %573
<   %628 = phi %"class.Apollo::Region"* [ %600, %599 ], [ %575, %573 ]
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %222, i8 0, i64 24, i1 false) #10
<   %629 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %630 unwind label %601
< 
< 630:                                              ; preds = %627
<   store i8* %629, i8** %231, align 8, !tbaa !14
<   %631 = getelementptr inbounds i8, i8* %629, i64 4
<   store i8* %631, i8** %235, align 8, !tbaa !17
<   %632 = bitcast i8* %572 to i32*
<   %633 = bitcast i8* %629 to i32*
<   %634 = load i32, i32* %632, align 4
<   store i32 %634, i32* %633, align 4
<   store i8* %631, i8** %233, align 8, !tbaa !18
<   %635 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %628, %"class.std::vector.15"* nonnull %82)
<           to label %636 unwind label %651
< 
< 636:                                              ; preds = %630
<   %637 = load float*, float** %230, align 8, !tbaa !14
<   %638 = icmp eq float* %637, null
<   br i1 %638, label %641, label %639
< 
< 639:                                              ; preds = %636
<   %640 = bitcast float* %637 to i8*
<   call void @_ZdlPv(i8* nonnull %640) #10
<   br label %641
< 
< 641:                                              ; preds = %639, %636
<   %642 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL23InitStressTermsForElemsR6DomainPdS1_S1_iE12apolloRegion, align 8, !tbaa !6
<   %643 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %642)
<           to label %644 unwind label %601
< 
< 644:                                              ; preds = %641
<   %645 = icmp eq i32 %643, 1
<   %646 = select i1 %645, i32 1, i32 36
<   %647 = icmp eq i32 %643, 0
<   %648 = select i1 %647, i32 36, i32 %646
<   call void @omp_set_num_threads(i32 %648) #10
<   %649 = zext i32 %561 to i64
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 5, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, double**, double**, double**, %class.Domain*)* @.omp_outlined..25 to void (i32*, i32*, ...)*), i64 %649, double** nonnull %77, double** nonnull %78, double** nonnull %79, i8* nonnull %160)
<   %650 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL23InitStressTermsForElemsR6DomainPdS1_S1_iE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %650)
<           to label %659 unwind label %601
< 
< 651:                                              ; preds = %630
<   %652 = landingpad { i8*, i32 }
<           cleanup
<   %653 = load float*, float** %230, align 8, !tbaa !14
<   %654 = icmp eq float* %653, null
<   br i1 %654, label %657, label %655
< 
< 655:                                              ; preds = %651
<   %656 = bitcast float* %653 to i8*
<   call void @_ZdlPv(i8* nonnull %656) #10
<   br label %657
< 
< 657:                                              ; preds = %655, %651, %625, %601
<   %658 = phi { i8*, i32 } [ %602, %601 ], [ %626, %625 ], [ %652, %651 ], [ %652, %655 ]
<   call void @_ZdlPv(i8* nonnull %572) #10
<   br label %1143
< 
< 659:                                              ; preds = %644
<   call void @_ZdlPv(i8* nonnull %572) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %219)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %220)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %221)
<   call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %222)
<   %660 = load double*, double** %83, align 8, !tbaa !6
<   %661 = load i32, i32* %201, align 4, !tbaa !12
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %236)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %237)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %238)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %239)
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %240)
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %241)
<   call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %242)
<   store i8* %567, i8** %243, align 8, !tbaa !6
<   store i8* %568, i8** %244, align 8, !tbaa !6
<   store i8* %569, i8** %245, align 8, !tbaa !6
<   store double* %660, double** %62, align 8, !tbaa !6
<   store i32 %561, i32* %63, align 4, !tbaa !12
<   store i32 %661, i32* %64, align 4, !tbaa !12
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %246) #10
<   %662 = call i32 @omp_get_max_threads()
<   store i32 %662, i32* %65, align 4, !tbaa !12
<   %663 = shl nsw i32 %561, 3
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %247) #10
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %248) #10
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %249) #10
<   call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %250) #10
<   call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %251) #10
<   call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %252) #10
<   %664 = invoke noalias nonnull i8* @_Znwm(i64 8) #26
<           to label %665 unwind label %510
< 
< 665:                                              ; preds = %659
<   %666 = sitofp i32 %661 to float
<   %667 = bitcast i8* %664 to float*
<   store float %571, float* %667, align 4
<   %668 = getelementptr inbounds i8, i8* %664, i64 4
<   %669 = bitcast i8* %668 to float*
<   store float %666, float* %669, align 4
<   %670 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL23IntegrateStressForElemsR6DomainPdS1_S1_S1_iiE12apolloRegion, align 8, !tbaa !6
<   %671 = icmp eq %"class.Apollo::Region"* %670, null
<   br i1 %671, label %672, label %722
< 
< 672:                                              ; preds = %665
<   %673 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %674 unwind label %696
< 
< 674:                                              ; preds = %672
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %253) #10
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %254) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %72, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %73)
<           to label %675 unwind label %698
< 
< 675:                                              ; preds = %674
<   %676 = bitcast i8* %673 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %676, i32 2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.26, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %72)
<           to label %677 unwind label %700
< 
< 677:                                              ; preds = %675
<   store i8* %673, i8** bitcast (%"class.Apollo::Region"** @_ZZL23IntegrateStressForElemsR6DomainPdS1_S1_S1_iiE12apolloRegion to i8**), align 8, !tbaa !6
<   %678 = load i8*, i8** %255, align 8, !tbaa !8
<   %679 = getelementptr inbounds i8, i8* %678, i64 -24
<   %680 = bitcast i8* %679 to %"struct.std::basic_string<char>::_Rep"*
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %256) #10
<   %681 = icmp eq i8* %679, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %681, label %694, label %682, !prof !11
< 
< 682:                                              ; preds = %677
<   %683 = getelementptr inbounds i8, i8* %678, i64 -8
<   %684 = bitcast i8* %683 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %685, label %687
< 
< 685:                                              ; preds = %682
<   %686 = atomicrmw volatile add i32* %684, i32 -1 acq_rel
<   br label %690
< 
< 687:                                              ; preds = %682
<   %688 = load i32, i32* %684, align 4, !tbaa !12
<   %689 = add nsw i32 %688, -1
<   store i32 %689, i32* %684, align 4, !tbaa !12
<   br label %690
< 
< 690:                                              ; preds = %687, %685
<   %691 = phi i32 [ %686, %685 ], [ %688, %687 ]
<   %692 = icmp slt i32 %691, 1
<   br i1 %692, label %693, label %694
< 
< 693:                                              ; preds = %690
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %680, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %58) #10
<   br label %694
< 
< 694:                                              ; preds = %693, %690, %677
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %256) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %254) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %253) #10
<   %695 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL23IntegrateStressForElemsR6DomainPdS1_S1_S1_iiE12apolloRegion, align 8, !tbaa !6
<   br label %722
< 
< 696:                                              ; preds = %757, %736, %722, %672
<   %697 = landingpad { i8*, i32 }
<           cleanup
<   br label %777
< 
< 698:                                              ; preds = %674
<   %699 = landingpad { i8*, i32 }
<           cleanup
<   br label %720
< 
< 700:                                              ; preds = %675
<   %701 = landingpad { i8*, i32 }
<           cleanup
<   %702 = load i8*, i8** %255, align 8, !tbaa !8
<   %703 = getelementptr inbounds i8, i8* %702, i64 -24
<   %704 = bitcast i8* %703 to %"struct.std::basic_string<char>::_Rep"*
<   %705 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %57, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %705) #10
<   %706 = icmp eq i8* %703, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %706, label %719, label %707, !prof !11
< 
< 707:                                              ; preds = %700
<   %708 = getelementptr inbounds i8, i8* %702, i64 -8
<   %709 = bitcast i8* %708 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %710, label %712
< 
< 710:                                              ; preds = %707
<   %711 = atomicrmw volatile add i32* %709, i32 -1 acq_rel
<   br label %715
< 
< 712:                                              ; preds = %707
<   %713 = load i32, i32* %709, align 4, !tbaa !12
<   %714 = add nsw i32 %713, -1
<   store i32 %714, i32* %709, align 4, !tbaa !12
<   br label %715
< 
< 715:                                              ; preds = %712, %710
<   %716 = phi i32 [ %711, %710 ], [ %713, %712 ]
<   %717 = icmp slt i32 %716, 1
<   br i1 %717, label %718, label %719
< 
< 718:                                              ; preds = %715
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %704, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %57) #10
<   br label %719
< 
< 719:                                              ; preds = %718, %715, %700
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %705) #10
<   br label %720
< 
< 720:                                              ; preds = %719, %698
<   %721 = phi { i8*, i32 } [ %701, %719 ], [ %699, %698 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %254) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %253) #10
<   call void @_ZdlPv(i8* nonnull %673) #28
<   br label %777
< 
< 722:                                              ; preds = %694, %665
<   %723 = phi %"class.Apollo::Region"* [ %695, %694 ], [ %670, %665 ]
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %242, i8 0, i64 24, i1 false) #10
<   %724 = invoke noalias nonnull i8* @_Znwm(i64 8) #26
<           to label %725 unwind label %696
< 
< 725:                                              ; preds = %722
<   store i8* %724, i8** %258, align 8, !tbaa !14
<   %726 = getelementptr inbounds i8, i8* %724, i64 8
<   store i8* %726, i8** %262, align 8, !tbaa !17
<   %727 = bitcast i8* %664 to i64*
<   %728 = bitcast i8* %724 to i64*
<   %729 = load i64, i64* %727, align 4
<   store i64 %729, i64* %728, align 4
<   store i8* %726, i8** %260, align 8, !tbaa !18
<   %730 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %723, %"class.std::vector.15"* nonnull %74)
<           to label %731 unwind label %751
< 
< 731:                                              ; preds = %725
<   %732 = load float*, float** %257, align 8, !tbaa !14
<   %733 = icmp eq float* %732, null
<   br i1 %733, label %736, label %734
< 
< 734:                                              ; preds = %731
<   %735 = bitcast float* %732 to i8*
<   call void @_ZdlPv(i8* nonnull %735) #10
<   br label %736
< 
< 736:                                              ; preds = %734, %731
<   %737 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL23IntegrateStressForElemsR6DomainPdS1_S1_S1_iiE12apolloRegion, align 8, !tbaa !6
<   %738 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %737)
<           to label %739 unwind label %696
< 
< 739:                                              ; preds = %736
<   %740 = icmp eq i32 %738, 1
<   %741 = select i1 %740, i32 1, i32 36
<   %742 = icmp eq i32 %738, 0
<   %743 = select i1 %742, i32 36, i32 %741
<   call void @omp_set_num_threads(i32 %743) #10
<   store i32 %743, i32* %65, align 4, !tbaa !12
<   %744 = icmp ugt i32 %743, 1
<   br i1 %744, label %745, label %757
< 
< 745:                                              ; preds = %739
<   %746 = sext i32 %663 to i64
<   %747 = shl nsw i64 %746, 3
<   %748 = call noalias i8* @malloc(i64 %747) #10
<   store i8* %748, i8** %263, align 8, !tbaa !6
<   %749 = call noalias i8* @malloc(i64 %747) #10
<   store i8* %749, i8** %264, align 8, !tbaa !6
<   %750 = call noalias i8* @malloc(i64 %747) #10
<   store i8* %750, i8** %265, align 8, !tbaa !6
<   br label %757
< 
< 751:                                              ; preds = %725
<   %752 = landingpad { i8*, i32 }
<           cleanup
<   %753 = load float*, float** %257, align 8, !tbaa !14
<   %754 = icmp eq float* %753, null
<   br i1 %754, label %777, label %755
< 
< 755:                                              ; preds = %751
<   %756 = bitcast float* %753 to i8*
<   call void @_ZdlPv(i8* nonnull %756) #10
<   br label %777
< 
< 757:                                              ; preds = %745, %739
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 14, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, %class.Domain*, double**, i32*, double**, double**, double**, double**, double**, double**, [8 x double]*, [8 x double]*, [8 x double]*, i32*)* @.omp_outlined..27 to void (i32*, i32*, ...)*), i32* nonnull %63, i8* nonnull %160, double** nonnull %62, i32* nonnull %65, double** nonnull %59, double** nonnull %60, double** nonnull %61, double** nonnull %66, double** nonnull %67, double** nonnull %68, [8 x double]* nonnull %69, [8 x double]* nonnull %70, [8 x double]* nonnull %71, i32* nonnull %64)
<   %758 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL23IntegrateStressForElemsR6DomainPdS1_S1_S1_iiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %758)
<           to label %759 unwind label %696
< 
< 759:                                              ; preds = %757
<   %760 = load i32, i32* %65, align 4, !tbaa !12
<   %761 = icmp sgt i32 %760, 1
<   br i1 %761, label %762, label %779
< 
< 762:                                              ; preds = %759
<   %763 = load double*, double** %68, align 8, !tbaa !6
<   %764 = icmp eq double* %763, null
<   br i1 %764, label %767, label %765
< 
< 765:                                              ; preds = %762
<   %766 = bitcast double* %763 to i8*
<   call void @free(i8* %766) #10
<   store double* null, double** %68, align 8, !tbaa !6
<   br label %767
< 
< 767:                                              ; preds = %765, %762
<   %768 = load double*, double** %67, align 8, !tbaa !6
<   %769 = icmp eq double* %768, null
<   br i1 %769, label %772, label %770
< 
< 770:                                              ; preds = %767
<   %771 = bitcast double* %768 to i8*
<   call void @free(i8* %771) #10
<   store double* null, double** %67, align 8, !tbaa !6
<   br label %772
< 
< 772:                                              ; preds = %770, %767
<   %773 = load double*, double** %66, align 8, !tbaa !6
<   %774 = icmp eq double* %773, null
<   br i1 %774, label %779, label %775
< 
< 775:                                              ; preds = %772
<   %776 = bitcast double* %773 to i8*
<   call void @free(i8* %776) #10
<   store double* null, double** %66, align 8, !tbaa !6
<   br label %779
< 
< 777:                                              ; preds = %755, %751, %720, %696
<   %778 = phi { i8*, i32 } [ %697, %696 ], [ %721, %720 ], [ %752, %751 ], [ %752, %755 ]
<   call void @_ZdlPv(i8* nonnull %664) #10
<   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %252) #10
<   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %251) #10
<   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %250) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %249) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %248) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %247) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %246) #10
<   br label %1143
< 
< 779:                                              ; preds = %775, %772, %759
<   call void @_ZdlPv(i8* nonnull %664) #10
<   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %252) #10
<   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %251) #10
<   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %250) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %249) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %248) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %247) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %246) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %236)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %237)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %238)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %239)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %240)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %241)
<   call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %242)
<   %780 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %781 unwind label %510
< 
< 781:                                              ; preds = %779
<   %782 = bitcast i8* %780 to float*
<   store float %571, float* %782, align 4
<   %783 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL23CalcVolumeForceForElemsR6DomainE12apolloRegion, align 8, !tbaa !6
<   %784 = icmp eq %"class.Apollo::Region"* %783, null
<   br i1 %784, label %785, label %835
< 
< 785:                                              ; preds = %781
<   %786 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %787 unwind label %809
< 
< 787:                                              ; preds = %785
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %266) #10
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %267) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %84, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %85)
<           to label %788 unwind label %811
< 
< 788:                                              ; preds = %787
<   %789 = bitcast i8* %786 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %789, i32 1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.22, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %84)
<           to label %790 unwind label %813
< 
< 790:                                              ; preds = %788
<   store i8* %786, i8** bitcast (%"class.Apollo::Region"** @_ZZL23CalcVolumeForceForElemsR6DomainE12apolloRegion to i8**), align 8, !tbaa !6
<   %791 = load i8*, i8** %268, align 8, !tbaa !8
<   %792 = getelementptr inbounds i8, i8* %791, i64 -24
<   %793 = bitcast i8* %792 to %"struct.std::basic_string<char>::_Rep"*
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %269) #10
<   %794 = icmp eq i8* %792, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %794, label %807, label %795, !prof !11
< 
< 795:                                              ; preds = %790
<   %796 = getelementptr inbounds i8, i8* %791, i64 -8
<   %797 = bitcast i8* %796 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %798, label %800
< 
< 798:                                              ; preds = %795
<   %799 = atomicrmw volatile add i32* %797, i32 -1 acq_rel
<   br label %803
< 
< 800:                                              ; preds = %795
<   %801 = load i32, i32* %797, align 4, !tbaa !12
<   %802 = add nsw i32 %801, -1
<   store i32 %802, i32* %797, align 4, !tbaa !12
<   br label %803
< 
< 803:                                              ; preds = %800, %798
<   %804 = phi i32 [ %799, %798 ], [ %801, %800 ]
<   %805 = icmp slt i32 %804, 1
<   br i1 %805, label %806, label %807
< 
< 806:                                              ; preds = %803
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %793, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %56) #10
<   br label %807
< 
< 807:                                              ; preds = %806, %803, %790
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %269) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %267) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %266) #10
<   %808 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL23CalcVolumeForceForElemsR6DomainE12apolloRegion, align 8, !tbaa !6
<   br label %835
< 
< 809:                                              ; preds = %858, %852, %849, %835, %785
<   %810 = landingpad { i8*, i32 }
<           cleanup
<   br label %1135
< 
< 811:                                              ; preds = %787
<   %812 = landingpad { i8*, i32 }
<           cleanup
<   br label %833
< 
< 813:                                              ; preds = %788
<   %814 = landingpad { i8*, i32 }
<           cleanup
<   %815 = load i8*, i8** %268, align 8, !tbaa !8
<   %816 = getelementptr inbounds i8, i8* %815, i64 -24
<   %817 = bitcast i8* %816 to %"struct.std::basic_string<char>::_Rep"*
<   %818 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %55, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %818) #10
<   %819 = icmp eq i8* %816, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %819, label %832, label %820, !prof !11
< 
< 820:                                              ; preds = %813
<   %821 = getelementptr inbounds i8, i8* %815, i64 -8
<   %822 = bitcast i8* %821 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %823, label %825
< 
< 823:                                              ; preds = %820
<   %824 = atomicrmw volatile add i32* %822, i32 -1 acq_rel
<   br label %828
< 
< 825:                                              ; preds = %820
<   %826 = load i32, i32* %822, align 4, !tbaa !12
<   %827 = add nsw i32 %826, -1
<   store i32 %827, i32* %822, align 4, !tbaa !12
<   br label %828
< 
< 828:                                              ; preds = %825, %823
<   %829 = phi i32 [ %824, %823 ], [ %826, %825 ]
<   %830 = icmp slt i32 %829, 1
<   br i1 %830, label %831, label %832
< 
< 831:                                              ; preds = %828
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %817, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %55) #10
<   br label %832
< 
< 832:                                              ; preds = %831, %828, %813
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %818) #10
<   br label %833
< 
< 833:                                              ; preds = %832, %811
<   %834 = phi { i8*, i32 } [ %814, %832 ], [ %812, %811 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %267) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %266) #10
<   call void @_ZdlPv(i8* nonnull %786) #28
<   br label %1135
< 
< 835:                                              ; preds = %807, %781
<   %836 = phi %"class.Apollo::Region"* [ %808, %807 ], [ %783, %781 ]
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %212, i8 0, i64 24, i1 false) #10
<   %837 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %838 unwind label %809
< 
< 838:                                              ; preds = %835
<   store i8* %837, i8** %271, align 8, !tbaa !14
<   %839 = getelementptr inbounds i8, i8* %837, i64 4
<   store i8* %839, i8** %275, align 8, !tbaa !17
<   %840 = bitcast i8* %780 to i32*
<   %841 = bitcast i8* %837 to i32*
<   %842 = load i32, i32* %840, align 4
<   store i32 %842, i32* %841, align 4
<   store i8* %839, i8** %273, align 8, !tbaa !18
<   %843 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %836, %"class.std::vector.15"* nonnull %86)
<           to label %844 unwind label %1129
< 
< 844:                                              ; preds = %838
<   %845 = load float*, float** %270, align 8, !tbaa !14
<   %846 = icmp eq float* %845, null
<   br i1 %846, label %849, label %847
< 
< 847:                                              ; preds = %844
<   %848 = bitcast float* %845 to i8*
<   call void @_ZdlPv(i8* nonnull %848) #10
<   br label %849
< 
< 849:                                              ; preds = %847, %844
<   %850 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL23CalcVolumeForceForElemsR6DomainE12apolloRegion, align 8, !tbaa !6
<   %851 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %850)
<           to label %852 unwind label %809
< 
< 852:                                              ; preds = %849
<   %853 = icmp eq i32 %851, 1
<   %854 = select i1 %853, i32 1, i32 36
<   %855 = icmp eq i32 %851, 0
<   %856 = select i1 %855, i32 36, i32 %854
<   call void @omp_set_num_threads(i32 %856) #10
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 2, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, double**)* @.omp_outlined..23 to void (i32*, i32*, ...)*), i64 %649, double** nonnull %83)
<   %857 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL23CalcVolumeForceForElemsR6DomainE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %857)
<           to label %858 unwind label %809
< 
< 858:                                              ; preds = %852
<   %859 = load double*, double** %83, align 8, !tbaa !6
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %276)
<   call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %277)
<   store double* %859, double** %45, align 8, !tbaa !6
<   %860 = load i32, i32* %214, align 8, !tbaa !12
<   %861 = shl nsw i32 %860, 3
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %278) #10
<   %862 = sext i32 %861 to i64
<   %863 = shl nsw i64 %862, 3
<   %864 = call noalias i8* @malloc(i64 %863) #10
<   store i8* %864, i8** %279, align 8, !tbaa !6
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %280) #10
<   %865 = call noalias i8* @malloc(i64 %863) #10
<   store i8* %865, i8** %281, align 8, !tbaa !6
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %282) #10
<   %866 = call noalias i8* @malloc(i64 %863) #10
<   store i8* %866, i8** %283, align 8, !tbaa !6
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %284) #10
<   %867 = call noalias i8* @malloc(i64 %863) #10
<   store i8* %867, i8** %285, align 8, !tbaa !6
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %286) #10
<   %868 = call noalias i8* @malloc(i64 %863) #10
<   store i8* %868, i8** %287, align 8, !tbaa !6
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %288) #10
<   %869 = call noalias i8* @malloc(i64 %863) #10
<   store i8* %869, i8** %289, align 8, !tbaa !6
<   %870 = sitofp i32 %860 to float
<   %871 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %872 unwind label %809
< 
< 872:                                              ; preds = %858
<   %873 = bitcast i8* %871 to float*
<   store float %870, float* %873, align 4
<   %874 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL28CalcHourglassControlForElemsR6DomainPddE12apolloRegion, align 8, !tbaa !6
<   %875 = icmp eq %"class.Apollo::Region"* %874, null
<   br i1 %875, label %876, label %926
< 
< 876:                                              ; preds = %872
<   %877 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %878 unwind label %900
< 
< 878:                                              ; preds = %876
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %290) #10
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %291) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %52, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %53)
<           to label %879 unwind label %902
< 
< 879:                                              ; preds = %878
<   %880 = bitcast i8* %877 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %880, i32 1, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.28, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %52)
<           to label %881 unwind label %904
< 
< 881:                                              ; preds = %879
<   store i8* %877, i8** bitcast (%"class.Apollo::Region"** @_ZZL28CalcHourglassControlForElemsR6DomainPddE12apolloRegion to i8**), align 8, !tbaa !6
<   %882 = load i8*, i8** %292, align 8, !tbaa !8
<   %883 = getelementptr inbounds i8, i8* %882, i64 -24
<   %884 = bitcast i8* %883 to %"struct.std::basic_string<char>::_Rep"*
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %293) #10
<   %885 = icmp eq i8* %883, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %885, label %898, label %886, !prof !11
< 
< 886:                                              ; preds = %881
<   %887 = getelementptr inbounds i8, i8* %882, i64 -8
<   %888 = bitcast i8* %887 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %889, label %891
< 
< 889:                                              ; preds = %886
<   %890 = atomicrmw volatile add i32* %888, i32 -1 acq_rel
<   br label %894
< 
< 891:                                              ; preds = %886
<   %892 = load i32, i32* %888, align 4, !tbaa !12
<   %893 = add nsw i32 %892, -1
<   store i32 %893, i32* %888, align 4, !tbaa !12
<   br label %894
< 
< 894:                                              ; preds = %891, %889
<   %895 = phi i32 [ %890, %889 ], [ %892, %891 ]
<   %896 = icmp slt i32 %895, 1
<   br i1 %896, label %897, label %898
< 
< 897:                                              ; preds = %894
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %884, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %44) #10
<   br label %898
< 
< 898:                                              ; preds = %897, %894, %881
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %293) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %291) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %290) #10
<   %899 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL28CalcHourglassControlForElemsR6DomainPddE12apolloRegion, align 8, !tbaa !6
<   br label %926
< 
< 900:                                              ; preds = %952, %943, %940, %926, %876
<   %901 = landingpad { i8*, i32 }
<           cleanup
<   br label %1112
< 
< 902:                                              ; preds = %878
<   %903 = landingpad { i8*, i32 }
<           cleanup
<   br label %924
< 
< 904:                                              ; preds = %879
<   %905 = landingpad { i8*, i32 }
<           cleanup
<   %906 = load i8*, i8** %292, align 8, !tbaa !8
<   %907 = getelementptr inbounds i8, i8* %906, i64 -24
<   %908 = bitcast i8* %907 to %"struct.std::basic_string<char>::_Rep"*
<   %909 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %43, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %909) #10
<   %910 = icmp eq i8* %907, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %910, label %923, label %911, !prof !11
< 
< 911:                                              ; preds = %904
<   %912 = getelementptr inbounds i8, i8* %906, i64 -8
<   %913 = bitcast i8* %912 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %914, label %916
< 
< 914:                                              ; preds = %911
<   %915 = atomicrmw volatile add i32* %913, i32 -1 acq_rel
<   br label %919
< 
< 916:                                              ; preds = %911
<   %917 = load i32, i32* %913, align 4, !tbaa !12
<   %918 = add nsw i32 %917, -1
<   store i32 %918, i32* %913, align 4, !tbaa !12
<   br label %919
< 
< 919:                                              ; preds = %916, %914
<   %920 = phi i32 [ %915, %914 ], [ %917, %916 ]
<   %921 = icmp slt i32 %920, 1
<   br i1 %921, label %922, label %923
< 
< 922:                                              ; preds = %919
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %908, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %43) #10
<   br label %923
< 
< 923:                                              ; preds = %922, %919, %904
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %909) #10
<   br label %924
< 
< 924:                                              ; preds = %923, %902
<   %925 = phi { i8*, i32 } [ %905, %923 ], [ %903, %902 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %291) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %290) #10
<   call void @_ZdlPv(i8* nonnull %877) #28
<   br label %1112
< 
< 926:                                              ; preds = %898, %872
<   %927 = phi %"class.Apollo::Region"* [ %899, %898 ], [ %874, %872 ]
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %277, i8 0, i64 24, i1 false) #10
<   %928 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %929 unwind label %900
< 
< 929:                                              ; preds = %926
<   store i8* %928, i8** %295, align 8, !tbaa !14
<   %930 = getelementptr inbounds i8, i8* %928, i64 4
<   store i8* %930, i8** %299, align 8, !tbaa !17
<   %931 = bitcast i8* %871 to i32*
<   %932 = bitcast i8* %928 to i32*
<   %933 = load i32, i32* %931, align 4
<   store i32 %933, i32* %932, align 4
<   store i8* %930, i8** %297, align 8, !tbaa !18
<   %934 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %927, %"class.std::vector.15"* nonnull %54)
<           to label %935 unwind label %1076
< 
< 935:                                              ; preds = %929
<   %936 = load float*, float** %294, align 8, !tbaa !14
<   %937 = icmp eq float* %936, null
<   br i1 %937, label %940, label %938
< 
< 938:                                              ; preds = %935
<   %939 = bitcast float* %936 to i8*
<   call void @_ZdlPv(i8* nonnull %939) #10
<   br label %940
< 
< 940:                                              ; preds = %938, %935
<   %941 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL28CalcHourglassControlForElemsR6DomainPddE12apolloRegion, align 8, !tbaa !6
<   %942 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %941)
<           to label %943 unwind label %900
< 
< 943:                                              ; preds = %940
<   %944 = icmp eq i32 %942, 1
<   %945 = select i1 %944, i32 1, i32 36
<   %946 = icmp eq i32 %942, 0
<   %947 = select i1 %946, i32 36, i32 %945
<   call void @omp_set_num_threads(i32 %947) #10
<   %948 = zext i32 %860 to i64
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 9, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, %class.Domain*, double**, double**, double**, double**, double**, double**, double**)* @.omp_outlined..29 to void (i32*, i32*, ...)*), i64 %948, i8* nonnull %160, double** nonnull %46, double** nonnull %47, double** nonnull %48, double** nonnull %49, double** nonnull %50, double** nonnull %51, double** nonnull %45)
<   %949 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL28CalcHourglassControlForElemsR6DomainPddE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %949)
<           to label %950 unwind label %900
< 
< 950:                                              ; preds = %943
<   %951 = fcmp ogt double %564, 0.000000e+00
<   br i1 %951, label %952, label %1082
< 
< 952:                                              ; preds = %950
<   %953 = load double*, double** %45, align 8, !tbaa !6
<   %954 = load double*, double** %49, align 8, !tbaa !6
<   %955 = load double*, double** %50, align 8, !tbaa !6
<   %956 = load double*, double** %51, align 8, !tbaa !6
<   %957 = load double*, double** %46, align 8, !tbaa !6
<   %958 = load double*, double** %47, align 8, !tbaa !6
<   %959 = load double*, double** %48, align 8, !tbaa !6
<   %960 = load i32, i32* %201, align 4, !tbaa !12
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %300)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %301)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %302)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %303)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %304)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %305)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %306)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %307)
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %308)
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %309)
<   call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %310)
<   store double* %953, double** %25, align 8, !tbaa !6
<   store double* %954, double** %26, align 8, !tbaa !6
<   store double* %955, double** %27, align 8, !tbaa !6
<   store double* %956, double** %28, align 8, !tbaa !6
<   store double* %957, double** %29, align 8, !tbaa !6
<   store double* %958, double** %30, align 8, !tbaa !6
<   store double* %959, double** %31, align 8, !tbaa !6
<   store double %564, double* %32, align 8, !tbaa !2
<   store i32 %860, i32* %33, align 4, !tbaa !12
<   store i32 %960, i32* %34, align 4, !tbaa !12
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %311) #10
<   %961 = call i32 @omp_get_max_threads()
<   store i32 %961, i32* %35, align 4, !tbaa !12
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %312) #10
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %313) #10
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %314) #10
<   call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %315) #10
<   store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %404, align 16, !tbaa !2
<   store <2 x double> <double -1.000000e+00, double -1.000000e+00>, <2 x double>* %405, align 16, !tbaa !2
<   store <2 x double> <double -1.000000e+00, double -1.000000e+00>, <2 x double>* %406, align 16, !tbaa !2
<   store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %407, align 16, !tbaa !2
<   store <2 x double> <double 1.000000e+00, double -1.000000e+00>, <2 x double>* %408, align 16, !tbaa !2
<   store <2 x double> <double -1.000000e+00, double 1.000000e+00>, <2 x double>* %409, align 16, !tbaa !2
<   store <2 x double> <double -1.000000e+00, double 1.000000e+00>, <2 x double>* %410, align 16, !tbaa !2
<   store <2 x double> <double 1.000000e+00, double -1.000000e+00>, <2 x double>* %411, align 16, !tbaa !2
<   store <2 x double> <double 1.000000e+00, double -1.000000e+00>, <2 x double>* %412, align 16, !tbaa !2
<   store <2 x double> <double 1.000000e+00, double -1.000000e+00>, <2 x double>* %413, align 16, !tbaa !2
<   store <2 x double> <double 1.000000e+00, double -1.000000e+00>, <2 x double>* %414, align 16, !tbaa !2
<   store <2 x double> <double 1.000000e+00, double -1.000000e+00>, <2 x double>* %415, align 16, !tbaa !2
<   store <2 x double> <double -1.000000e+00, double 1.000000e+00>, <2 x double>* %416, align 16, !tbaa !2
<   store <2 x double> <double -1.000000e+00, double 1.000000e+00>, <2 x double>* %417, align 16, !tbaa !2
<   store <2 x double> <double 1.000000e+00, double -1.000000e+00>, <2 x double>* %418, align 16, !tbaa !2
<   store <2 x double> <double 1.000000e+00, double -1.000000e+00>, <2 x double>* %419, align 16, !tbaa !2
<   %962 = invoke noalias nonnull i8* @_Znwm(i64 8) #26
<           to label %963 unwind label %900
< 
< 963:                                              ; preds = %952
<   %964 = sitofp i32 %960 to float
<   %965 = bitcast i8* %962 to float*
<   store float %870, float* %965, align 4
<   %966 = getelementptr inbounds i8, i8* %962, i64 4
<   %967 = bitcast i8* %966 to float*
<   store float %964, float* %967, align 4
<   %968 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL28CalcFBHourglassForceForElemsR6DomainPdS1_S1_S1_S1_S1_S1_diiE12apolloRegion, align 8, !tbaa !6
<   %969 = icmp eq %"class.Apollo::Region"* %968, null
<   br i1 %969, label %970, label %1020
< 
< 970:                                              ; preds = %963
<   %971 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %972 unwind label %994
< 
< 972:                                              ; preds = %970
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %331) #10
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %332) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %40, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %41)
<           to label %973 unwind label %996
< 
< 973:                                              ; preds = %972
<   %974 = bitcast i8* %971 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %974, i32 2, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.30, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %40)
<           to label %975 unwind label %998
< 
< 975:                                              ; preds = %973
<   store i8* %971, i8** bitcast (%"class.Apollo::Region"** @_ZZL28CalcFBHourglassForceForElemsR6DomainPdS1_S1_S1_S1_S1_S1_diiE12apolloRegion to i8**), align 8, !tbaa !6
<   %976 = load i8*, i8** %333, align 8, !tbaa !8
<   %977 = getelementptr inbounds i8, i8* %976, i64 -24
<   %978 = bitcast i8* %977 to %"struct.std::basic_string<char>::_Rep"*
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %334) #10
<   %979 = icmp eq i8* %977, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %979, label %992, label %980, !prof !11
< 
< 980:                                              ; preds = %975
<   %981 = getelementptr inbounds i8, i8* %976, i64 -8
<   %982 = bitcast i8* %981 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %983, label %985
< 
< 983:                                              ; preds = %980
<   %984 = atomicrmw volatile add i32* %982, i32 -1 acq_rel
<   br label %988
< 
< 985:                                              ; preds = %980
<   %986 = load i32, i32* %982, align 4, !tbaa !12
<   %987 = add nsw i32 %986, -1
<   store i32 %987, i32* %982, align 4, !tbaa !12
<   br label %988
< 
< 988:                                              ; preds = %985, %983
<   %989 = phi i32 [ %984, %983 ], [ %986, %985 ]
<   %990 = icmp slt i32 %989, 1
<   br i1 %990, label %991, label %992
< 
< 991:                                              ; preds = %988
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %978, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %24) #10
<   br label %992
< 
< 992:                                              ; preds = %991, %988, %975
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %334) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %332) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %331) #10
<   %993 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL28CalcFBHourglassForceForElemsR6DomainPdS1_S1_S1_S1_S1_S1_diiE12apolloRegion, align 8, !tbaa !6
<   br label %1020
< 
< 994:                                              ; preds = %1053, %1034, %1020, %970
<   %995 = landingpad { i8*, i32 }
<           cleanup
<   br label %1073
< 
< 996:                                              ; preds = %972
<   %997 = landingpad { i8*, i32 }
<           cleanup
<   br label %1018
< 
< 998:                                              ; preds = %973
<   %999 = landingpad { i8*, i32 }
<           cleanup
<   %1000 = load i8*, i8** %333, align 8, !tbaa !8
<   %1001 = getelementptr inbounds i8, i8* %1000, i64 -24
<   %1002 = bitcast i8* %1001 to %"struct.std::basic_string<char>::_Rep"*
<   %1003 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %23, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %1003) #10
<   %1004 = icmp eq i8* %1001, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %1004, label %1017, label %1005, !prof !11
< 
< 1005:                                             ; preds = %998
<   %1006 = getelementptr inbounds i8, i8* %1000, i64 -8
<   %1007 = bitcast i8* %1006 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %1008, label %1010
< 
< 1008:                                             ; preds = %1005
<   %1009 = atomicrmw volatile add i32* %1007, i32 -1 acq_rel
<   br label %1013
< 
< 1010:                                             ; preds = %1005
<   %1011 = load i32, i32* %1007, align 4, !tbaa !12
<   %1012 = add nsw i32 %1011, -1
<   store i32 %1012, i32* %1007, align 4, !tbaa !12
<   br label %1013
< 
< 1013:                                             ; preds = %1010, %1008
<   %1014 = phi i32 [ %1009, %1008 ], [ %1011, %1010 ]
<   %1015 = icmp slt i32 %1014, 1
<   br i1 %1015, label %1016, label %1017
< 
< 1016:                                             ; preds = %1013
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %1002, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %23) #10
<   br label %1017
< 
< 1017:                                             ; preds = %1016, %1013, %998
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %1003) #10
<   br label %1018
< 
< 1018:                                             ; preds = %1017, %996
<   %1019 = phi { i8*, i32 } [ %999, %1017 ], [ %997, %996 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %332) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %331) #10
<   call void @_ZdlPv(i8* nonnull %971) #28
<   br label %1073
< 
< 1020:                                             ; preds = %992, %963
<   %1021 = phi %"class.Apollo::Region"* [ %993, %992 ], [ %968, %963 ]
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %310, i8 0, i64 24, i1 false) #10
<   %1022 = invoke noalias nonnull i8* @_Znwm(i64 8) #26
<           to label %1023 unwind label %994
< 
< 1023:                                             ; preds = %1020
<   store i8* %1022, i8** %336, align 8, !tbaa !14
<   %1024 = getelementptr inbounds i8, i8* %1022, i64 8
<   store i8* %1024, i8** %340, align 8, !tbaa !17
<   %1025 = bitcast i8* %962 to i64*
<   %1026 = bitcast i8* %1022 to i64*
<   %1027 = load i64, i64* %1025, align 4
<   store i64 %1027, i64* %1026, align 4
<   store i8* %1024, i8** %338, align 8, !tbaa !18
<   %1028 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %1021, %"class.std::vector.15"* nonnull %42)
<           to label %1029 unwind label %1047
< 
< 1029:                                             ; preds = %1023
<   %1030 = load float*, float** %335, align 8, !tbaa !14
<   %1031 = icmp eq float* %1030, null
<   br i1 %1031, label %1034, label %1032
< 
< 1032:                                             ; preds = %1029
<   %1033 = bitcast float* %1030 to i8*
<   call void @_ZdlPv(i8* nonnull %1033) #10
<   br label %1034
< 
< 1034:                                             ; preds = %1032, %1029
<   %1035 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL28CalcFBHourglassForceForElemsR6DomainPdS1_S1_S1_S1_S1_S1_diiE12apolloRegion, align 8, !tbaa !6
<   %1036 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %1035)
<           to label %1037 unwind label %994
< 
< 1037:                                             ; preds = %1034
<   %1038 = icmp eq i32 %1036, 1
<   %1039 = select i1 %1038, i32 1, i32 36
<   %1040 = icmp eq i32 %1036, 0
<   %1041 = select i1 %1040, i32 36, i32 %1039
<   call void @omp_set_num_threads(i32 %1041) #10
<   store i32 %1041, i32* %35, align 4, !tbaa !12
<   %1042 = icmp ugt i32 %1041, 1
<   br i1 %1042, label %1043, label %1053
< 
< 1043:                                             ; preds = %1037
<   %1044 = call noalias i8* @malloc(i64 %863) #10
<   store i8* %1044, i8** %341, align 8, !tbaa !6
<   %1045 = call noalias i8* @malloc(i64 %863) #10
<   store i8* %1045, i8** %342, align 8, !tbaa !6
<   %1046 = call noalias i8* @malloc(i64 %863) #10
<   store i8* %1046, i8** %343, align 8, !tbaa !6
<   br label %1053
< 
< 1047:                                             ; preds = %1023
<   %1048 = landingpad { i8*, i32 }
<           cleanup
<   %1049 = load float*, float** %335, align 8, !tbaa !14
<   %1050 = icmp eq float* %1049, null
<   br i1 %1050, label %1073, label %1051
< 
< 1051:                                             ; preds = %1047
<   %1052 = bitcast float* %1049 to i8*
<   call void @_ZdlPv(i8* nonnull %1052) #10
<   br label %1073
< 
< 1053:                                             ; preds = %1043, %1037
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 16, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, double*, %class.Domain*, double**, double**, [4 x [8 x double]]*, double**, double**, double**, double**, double**, i32*, double**, double**, double**, i32*)* @.omp_outlined..31 to void (i32*, i32*, ...)*), i32* nonnull %33, double* nonnull %32, i8* nonnull %160, double** nonnull %25, double** nonnull %26, [4 x [8 x double]]* nonnull %39, double** nonnull %27, double** nonnull %28, double** nonnull %29, double** nonnull %30, double** nonnull %31, i32* nonnull %35, double** nonnull %36, double** nonnull %37, double** nonnull %38, i32* nonnull %34)
<   %1054 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL28CalcFBHourglassForceForElemsR6DomainPdS1_S1_S1_S1_S1_S1_diiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %1054)
<           to label %1055 unwind label %994
< 
< 1055:                                             ; preds = %1053
<   %1056 = load i32, i32* %35, align 4, !tbaa !12
<   %1057 = icmp sgt i32 %1056, 1
<   br i1 %1057, label %1058, label %1075
< 
< 1058:                                             ; preds = %1055
<   %1059 = load double*, double** %38, align 8, !tbaa !6
<   %1060 = icmp eq double* %1059, null
<   br i1 %1060, label %1063, label %1061
< 
< 1061:                                             ; preds = %1058
<   %1062 = bitcast double* %1059 to i8*
<   call void @free(i8* %1062) #10
<   store double* null, double** %38, align 8, !tbaa !6
<   br label %1063
< 
< 1063:                                             ; preds = %1061, %1058
<   %1064 = load double*, double** %37, align 8, !tbaa !6
<   %1065 = icmp eq double* %1064, null
<   br i1 %1065, label %1068, label %1066
< 
< 1066:                                             ; preds = %1063
<   %1067 = bitcast double* %1064 to i8*
<   call void @free(i8* %1067) #10
<   store double* null, double** %37, align 8, !tbaa !6
<   br label %1068
< 
< 1068:                                             ; preds = %1066, %1063
<   %1069 = load double*, double** %36, align 8, !tbaa !6
<   %1070 = icmp eq double* %1069, null
<   br i1 %1070, label %1075, label %1071
< 
< 1071:                                             ; preds = %1068
<   %1072 = bitcast double* %1069 to i8*
<   call void @free(i8* %1072) #10
<   store double* null, double** %36, align 8, !tbaa !6
<   br label %1075
< 
< 1073:                                             ; preds = %1051, %1047, %1018, %994
<   %1074 = phi { i8*, i32 } [ %995, %994 ], [ %1019, %1018 ], [ %1048, %1047 ], [ %1048, %1051 ]
<   call void @_ZdlPv(i8* nonnull %962) #10
<   call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %315) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %314) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %313) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %312) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %311) #10
<   br label %1112
< 
< 1075:                                             ; preds = %1071, %1068, %1055
<   call void @_ZdlPv(i8* nonnull %962) #10
<   call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %315) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %314) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %313) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %312) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %311) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %300)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %301)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %302)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %303)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %304)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %305)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %306)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %307)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %308)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %309)
<   call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %310)
<   br label %1082
< 
< 1076:                                             ; preds = %929
<   %1077 = landingpad { i8*, i32 }
<           cleanup
<   %1078 = load float*, float** %294, align 8, !tbaa !14
<   %1079 = icmp eq float* %1078, null
<   br i1 %1079, label %1112, label %1080
< 
< 1080:                                             ; preds = %1076
<   %1081 = bitcast float* %1078 to i8*
<   call void @_ZdlPv(i8* nonnull %1081) #10
<   br label %1112
< 
< 1082:                                             ; preds = %1075, %950
<   %1083 = load double*, double** %51, align 8, !tbaa !6
<   %1084 = icmp eq double* %1083, null
<   br i1 %1084, label %1087, label %1085
< 
< 1085:                                             ; preds = %1082
<   %1086 = bitcast double* %1083 to i8*
<   call void @free(i8* %1086) #10
<   store double* null, double** %51, align 8, !tbaa !6
<   br label %1087
< 
< 1087:                                             ; preds = %1085, %1082
<   %1088 = load double*, double** %50, align 8, !tbaa !6
<   %1089 = icmp eq double* %1088, null
<   br i1 %1089, label %1092, label %1090
< 
< 1090:                                             ; preds = %1087
<   %1091 = bitcast double* %1088 to i8*
<   call void @free(i8* %1091) #10
<   store double* null, double** %50, align 8, !tbaa !6
<   br label %1092
< 
< 1092:                                             ; preds = %1090, %1087
<   %1093 = load double*, double** %49, align 8, !tbaa !6
<   %1094 = icmp eq double* %1093, null
<   br i1 %1094, label %1097, label %1095
< 
< 1095:                                             ; preds = %1092
<   %1096 = bitcast double* %1093 to i8*
<   call void @free(i8* %1096) #10
<   store double* null, double** %49, align 8, !tbaa !6
<   br label %1097
< 
< 1097:                                             ; preds = %1095, %1092
<   %1098 = load double*, double** %48, align 8, !tbaa !6
<   %1099 = icmp eq double* %1098, null
<   br i1 %1099, label %1102, label %1100
< 
< 1100:                                             ; preds = %1097
<   %1101 = bitcast double* %1098 to i8*
<   call void @free(i8* %1101) #10
<   store double* null, double** %48, align 8, !tbaa !6
<   br label %1102
< 
< 1102:                                             ; preds = %1100, %1097
<   %1103 = load double*, double** %47, align 8, !tbaa !6
<   %1104 = icmp eq double* %1103, null
<   br i1 %1104, label %1107, label %1105
< 
< 1105:                                             ; preds = %1102
<   %1106 = bitcast double* %1103 to i8*
<   call void @free(i8* %1106) #10
<   store double* null, double** %47, align 8, !tbaa !6
<   br label %1107
< 
< 1107:                                             ; preds = %1105, %1102
<   %1108 = load double*, double** %46, align 8, !tbaa !6
<   %1109 = icmp eq double* %1108, null
<   br i1 %1109, label %1114, label %1110
< 
< 1110:                                             ; preds = %1107
<   %1111 = bitcast double* %1108 to i8*
<   call void @free(i8* %1111) #10
<   store double* null, double** %46, align 8, !tbaa !6
<   br label %1114
< 
< 1112:                                             ; preds = %1080, %1076, %1073, %924, %900
<   %1113 = phi { i8*, i32 } [ %925, %924 ], [ %901, %900 ], [ %1074, %1073 ], [ %1077, %1076 ], [ %1077, %1080 ]
<   call void @_ZdlPv(i8* nonnull %871) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %288) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %286) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %284) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %282) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %280) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %278) #10
<   br label %1135
< 
< 1114:                                             ; preds = %1110, %1107
<   call void @_ZdlPv(i8* nonnull %871) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %288) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %286) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %284) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %282) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %280) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %278) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %276)
<   call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %277)
<   %1115 = load double*, double** %83, align 8, !tbaa !6
<   %1116 = icmp eq double* %1115, null
<   br i1 %1116, label %1119, label %1117
< 
< 1117:                                             ; preds = %1114
<   %1118 = bitcast double* %1115 to i8*
<   call void @free(i8* %1118) #10
<   store double* null, double** %83, align 8, !tbaa !6
<   br label %1119
< 
< 1119:                                             ; preds = %1117, %1114
<   %1120 = icmp eq i8* %569, null
<   br i1 %1120, label %1122, label %1121
< 
< 1121:                                             ; preds = %1119
<   call void @free(i8* nonnull %569) #10
<   br label %1122
< 
< 1122:                                             ; preds = %1121, %1119
<   %1123 = icmp eq i8* %568, null
<   br i1 %1123, label %1125, label %1124
< 
< 1124:                                             ; preds = %1122
<   call void @free(i8* nonnull %568) #10
<   br label %1125
< 
< 1125:                                             ; preds = %1124, %1122
<   %1126 = icmp eq i8* %567, null
<   br i1 %1126, label %1128, label %1127
< 
< 1127:                                             ; preds = %1125
<   call void @free(i8* nonnull %567) #10
<   br label %1128
< 
< 1128:                                             ; preds = %1127, %1125
<   call void @_ZdlPv(i8* nonnull %780) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %217) #10
<   br label %1145
< 
< 1129:                                             ; preds = %838
<   %1130 = landingpad { i8*, i32 }
<           cleanup
<   %1131 = load float*, float** %270, align 8, !tbaa !14
<   %1132 = icmp eq float* %1131, null
<   br i1 %1132, label %1135, label %1133
< 
< 1133:                                             ; preds = %1129
<   %1134 = bitcast float* %1131 to i8*
<   call void @_ZdlPv(i8* nonnull %1134) #10
<   br label %1135
< 
< 1135:                                             ; preds = %1133, %1129, %1112, %833, %809
<   %1136 = phi { i8*, i32 } [ %834, %833 ], [ %810, %809 ], [ %1113, %1112 ], [ %1130, %1129 ], [ %1130, %1133 ]
<   call void @_ZdlPv(i8* nonnull %780) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %217) #10
<   br label %1143
< 
< 1137:                                             ; preds = %539
<   %1138 = landingpad { i8*, i32 }
<           cleanup
<   %1139 = load float*, float** %206, align 8, !tbaa !14
<   %1140 = icmp eq float* %1139, null
<   br i1 %1140, label %1143, label %1141
< 
< 1141:                                             ; preds = %1137
<   %1142 = bitcast float* %1139 to i8*
<   call void @_ZdlPv(i8* nonnull %1142) #10
<   br label %1143
< 
< 1143:                                             ; preds = %1141, %1137, %1135, %777, %657, %534, %510
<   %1144 = phi { i8*, i32 } [ %535, %534 ], [ %511, %510 ], [ %658, %657 ], [ %778, %777 ], [ %1136, %1135 ], [ %1138, %1137 ], [ %1138, %1141 ]
<   call void @_ZdlPv(i8* nonnull %482) #10
<   resume { i8*, i32 } %1144
< 
< 1145:                                             ; preds = %1128, %560
<   call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %212)
<   call void @_ZdlPv(i8* nonnull %482) #10
<   call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %199)
<   %1146 = load i32, i32* %201, align 4, !tbaa !12
<   call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %344)
<   %1147 = sitofp i32 %1146 to float
<   %1148 = call noalias nonnull i8* @_Znwm(i64 4) #26
<   %1149 = bitcast i8* %1148 to float*
<   store float %1147, float* %1149, align 4
<   %1150 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL24CalcAccelerationForNodesR6DomainiE12apolloRegion, align 8, !tbaa !6
<   %1151 = icmp eq %"class.Apollo::Region"* %1150, null
<   br i1 %1151, label %1152, label %1202
< 
< 1152:                                             ; preds = %1145
<   %1153 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %1154 unwind label %1176
< 
< 1154:                                             ; preds = %1152
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %345) #10
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %346) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %18, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %19)
<           to label %1155 unwind label %1178
< 
< 1155:                                             ; preds = %1154
<   %1156 = bitcast i8* %1153 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %1156, i32 1, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.32, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %18)
<           to label %1157 unwind label %1180
< 
< 1157:                                             ; preds = %1155
<   store i8* %1153, i8** bitcast (%"class.Apollo::Region"** @_ZZL24CalcAccelerationForNodesR6DomainiE12apolloRegion to i8**), align 8, !tbaa !6
<   %1158 = load i8*, i8** %347, align 8, !tbaa !8
<   %1159 = getelementptr inbounds i8, i8* %1158, i64 -24
<   %1160 = bitcast i8* %1159 to %"struct.std::basic_string<char>::_Rep"*
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %348) #10
<   %1161 = icmp eq i8* %1159, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %1161, label %1174, label %1162, !prof !11
< 
< 1162:                                             ; preds = %1157
<   %1163 = getelementptr inbounds i8, i8* %1158, i64 -8
<   %1164 = bitcast i8* %1163 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %1165, label %1167
< 
< 1165:                                             ; preds = %1162
<   %1166 = atomicrmw volatile add i32* %1164, i32 -1 acq_rel
<   br label %1170
< 
< 1167:                                             ; preds = %1162
<   %1168 = load i32, i32* %1164, align 4, !tbaa !12
<   %1169 = add nsw i32 %1168, -1
<   store i32 %1169, i32* %1164, align 4, !tbaa !12
<   br label %1170
< 
< 1170:                                             ; preds = %1167, %1165
<   %1171 = phi i32 [ %1166, %1165 ], [ %1168, %1167 ]
<   %1172 = icmp slt i32 %1171, 1
<   br i1 %1172, label %1173, label %1174
< 
< 1173:                                             ; preds = %1170
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %1160, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %17) #10
<   br label %1174
< 
< 1174:                                             ; preds = %1173, %1170, %1157
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %348) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %346) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %345) #10
<   %1175 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL24CalcAccelerationForNodesR6DomainiE12apolloRegion, align 8, !tbaa !6
<   br label %1202
< 
< 1176:                                             ; preds = %1219, %1216, %1202, %1152
<   %1177 = landingpad { i8*, i32 }
<           cleanup
<   br label %1232
< 
< 1178:                                             ; preds = %1154
<   %1179 = landingpad { i8*, i32 }
<           cleanup
<   br label %1200
< 
< 1180:                                             ; preds = %1155
<   %1181 = landingpad { i8*, i32 }
<           cleanup
<   %1182 = load i8*, i8** %347, align 8, !tbaa !8
<   %1183 = getelementptr inbounds i8, i8* %1182, i64 -24
<   %1184 = bitcast i8* %1183 to %"struct.std::basic_string<char>::_Rep"*
<   %1185 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %16, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %1185) #10
<   %1186 = icmp eq i8* %1183, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %1186, label %1199, label %1187, !prof !11
< 
< 1187:                                             ; preds = %1180
<   %1188 = getelementptr inbounds i8, i8* %1182, i64 -8
<   %1189 = bitcast i8* %1188 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %1190, label %1192
< 
< 1190:                                             ; preds = %1187
<   %1191 = atomicrmw volatile add i32* %1189, i32 -1 acq_rel
<   br label %1195
< 
< 1192:                                             ; preds = %1187
<   %1193 = load i32, i32* %1189, align 4, !tbaa !12
<   %1194 = add nsw i32 %1193, -1
<   store i32 %1194, i32* %1189, align 4, !tbaa !12
<   br label %1195
< 
< 1195:                                             ; preds = %1192, %1190
<   %1196 = phi i32 [ %1191, %1190 ], [ %1193, %1192 ]
<   %1197 = icmp slt i32 %1196, 1
<   br i1 %1197, label %1198, label %1199
< 
< 1198:                                             ; preds = %1195
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %1184, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %16) #10
<   br label %1199
< 
< 1199:                                             ; preds = %1198, %1195, %1180
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %1185) #10
<   br label %1200
< 
< 1200:                                             ; preds = %1199, %1178
<   %1201 = phi { i8*, i32 } [ %1181, %1199 ], [ %1179, %1178 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %346) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %345) #10
<   call void @_ZdlPv(i8* nonnull %1153) #28
<   br label %1232
< 
< 1202:                                             ; preds = %1174, %1145
<   %1203 = phi %"class.Apollo::Region"* [ %1175, %1174 ], [ %1150, %1145 ]
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %344, i8 0, i64 24, i1 false) #10
<   %1204 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %1205 unwind label %1176
< 
< 1205:                                             ; preds = %1202
<   store i8* %1204, i8** %350, align 8, !tbaa !14
<   %1206 = getelementptr inbounds i8, i8* %1204, i64 4
<   store i8* %1206, i8** %354, align 8, !tbaa !17
<   %1207 = bitcast i8* %1148 to i32*
<   %1208 = bitcast i8* %1204 to i32*
<   %1209 = load i32, i32* %1207, align 4
<   store i32 %1209, i32* %1208, align 4
<   store i8* %1206, i8** %352, align 8, !tbaa !18
<   %1210 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %1203, %"class.std::vector.15"* nonnull %20)
<           to label %1211 unwind label %1226
< 
< 1211:                                             ; preds = %1205
<   %1212 = load float*, float** %349, align 8, !tbaa !14
<   %1213 = icmp eq float* %1212, null
<   br i1 %1213, label %1216, label %1214
< 
< 1214:                                             ; preds = %1211
<   %1215 = bitcast float* %1212 to i8*
<   call void @_ZdlPv(i8* nonnull %1215) #10
<   br label %1216
< 
< 1216:                                             ; preds = %1214, %1211
<   %1217 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL24CalcAccelerationForNodesR6DomainiE12apolloRegion, align 8, !tbaa !6
<   %1218 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %1217)
<           to label %1219 unwind label %1176
< 
< 1219:                                             ; preds = %1216
<   %1220 = icmp eq i32 %1218, 1
<   %1221 = select i1 %1220, i32 1, i32 36
<   %1222 = icmp eq i32 %1218, 0
<   %1223 = select i1 %1222, i32 36, i32 %1221
<   call void @omp_set_num_threads(i32 %1223) #10
<   %1224 = zext i32 %1146 to i64
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 2, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, %class.Domain*)* @.omp_outlined..33 to void (i32*, i32*, ...)*), i64 %1224, i8* nonnull %160)
<   %1225 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL24CalcAccelerationForNodesR6DomainiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %1225)
<           to label %1234 unwind label %1176
< 
< 1226:                                             ; preds = %1205
<   %1227 = landingpad { i8*, i32 }
<           cleanup
<   %1228 = load float*, float** %349, align 8, !tbaa !14
<   %1229 = icmp eq float* %1228, null
<   br i1 %1229, label %1232, label %1230
< 
< 1230:                                             ; preds = %1226
<   %1231 = bitcast float* %1228 to i8*
<   call void @_ZdlPv(i8* nonnull %1231) #10
<   br label %1232
< 
< 1232:                                             ; preds = %1230, %1226, %1200, %1176
<   %1233 = phi { i8*, i32 } [ %1177, %1176 ], [ %1201, %1200 ], [ %1227, %1226 ], [ %1227, %1230 ]
<   call void @_ZdlPv(i8* nonnull %1148) #10
<   resume { i8*, i32 } %1233
< 
< 1234:                                             ; preds = %1219
<   call void @_ZdlPv(i8* nonnull %1148) #10
<   call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %344)
<   call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %355)
<   %1235 = load i32, i32* %357, align 4, !tbaa !12
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %358) #10
<   %1236 = add nsw i32 %1235, 1
<   %1237 = mul nsw i32 %1236, %1236
<   store i32 %1237, i32* %12, align 4, !tbaa !12
<   %1238 = sitofp i32 %1237 to float
<   %1239 = call noalias nonnull i8* @_Znwm(i64 4) #26
<   %1240 = bitcast i8* %1239 to float*
<   store float %1238, float* %1240, align 4
<   %1241 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL43ApplyAccelerationBoundaryConditionsForNodesR6DomainE12apolloRegion, align 8, !tbaa !6
<   %1242 = icmp eq %"class.Apollo::Region"* %1241, null
<   br i1 %1242, label %1243, label %1293
< 
< 1243:                                             ; preds = %1234
<   %1244 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %1245 unwind label %1267
< 
< 1245:                                             ; preds = %1243
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %359) #10
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %360) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %13, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %14)
<           to label %1246 unwind label %1269
< 
< 1246:                                             ; preds = %1245
<   %1247 = bitcast i8* %1244 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %1247, i32 1, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.34, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %13)
<           to label %1248 unwind label %1271
< 
< 1248:                                             ; preds = %1246
<   store i8* %1244, i8** bitcast (%"class.Apollo::Region"** @_ZZL43ApplyAccelerationBoundaryConditionsForNodesR6DomainE12apolloRegion to i8**), align 8, !tbaa !6
<   %1249 = load i8*, i8** %361, align 8, !tbaa !8
<   %1250 = getelementptr inbounds i8, i8* %1249, i64 -24
<   %1251 = bitcast i8* %1250 to %"struct.std::basic_string<char>::_Rep"*
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %362) #10
<   %1252 = icmp eq i8* %1250, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %1252, label %1265, label %1253, !prof !11
< 
< 1253:                                             ; preds = %1248
<   %1254 = getelementptr inbounds i8, i8* %1249, i64 -8
<   %1255 = bitcast i8* %1254 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %1256, label %1258
< 
< 1256:                                             ; preds = %1253
<   %1257 = atomicrmw volatile add i32* %1255, i32 -1 acq_rel
<   br label %1261
< 
< 1258:                                             ; preds = %1253
<   %1259 = load i32, i32* %1255, align 4, !tbaa !12
<   %1260 = add nsw i32 %1259, -1
<   store i32 %1260, i32* %1255, align 4, !tbaa !12
<   br label %1261
< 
< 1261:                                             ; preds = %1258, %1256
<   %1262 = phi i32 [ %1257, %1256 ], [ %1259, %1258 ]
<   %1263 = icmp slt i32 %1262, 1
<   br i1 %1263, label %1264, label %1265
< 
< 1264:                                             ; preds = %1261
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %1251, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %11) #10
<   br label %1265
< 
< 1265:                                             ; preds = %1264, %1261, %1248
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %362) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %360) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %359) #10
<   %1266 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL43ApplyAccelerationBoundaryConditionsForNodesR6DomainE12apolloRegion, align 8, !tbaa !6
<   br label %1293
< 
< 1267:                                             ; preds = %1310, %1307, %1293, %1243
<   %1268 = landingpad { i8*, i32 }
<           cleanup
<   br label %1322
< 
< 1269:                                             ; preds = %1245
<   %1270 = landingpad { i8*, i32 }
<           cleanup
<   br label %1291
< 
< 1271:                                             ; preds = %1246
<   %1272 = landingpad { i8*, i32 }
<           cleanup
<   %1273 = load i8*, i8** %361, align 8, !tbaa !8
<   %1274 = getelementptr inbounds i8, i8* %1273, i64 -24
<   %1275 = bitcast i8* %1274 to %"struct.std::basic_string<char>::_Rep"*
<   %1276 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %10, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %1276) #10
<   %1277 = icmp eq i8* %1274, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %1277, label %1290, label %1278, !prof !11
< 
< 1278:                                             ; preds = %1271
<   %1279 = getelementptr inbounds i8, i8* %1273, i64 -8
<   %1280 = bitcast i8* %1279 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %1281, label %1283
< 
< 1281:                                             ; preds = %1278
<   %1282 = atomicrmw volatile add i32* %1280, i32 -1 acq_rel
<   br label %1286
< 
< 1283:                                             ; preds = %1278
<   %1284 = load i32, i32* %1280, align 4, !tbaa !12
<   %1285 = add nsw i32 %1284, -1
<   store i32 %1285, i32* %1280, align 4, !tbaa !12
<   br label %1286
< 
< 1286:                                             ; preds = %1283, %1281
<   %1287 = phi i32 [ %1282, %1281 ], [ %1284, %1283 ]
<   %1288 = icmp slt i32 %1287, 1
<   br i1 %1288, label %1289, label %1290
< 
< 1289:                                             ; preds = %1286
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %1275, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %10) #10
<   br label %1290
< 
< 1290:                                             ; preds = %1289, %1286, %1271
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %1276) #10
<   br label %1291
< 
< 1291:                                             ; preds = %1290, %1269
<   %1292 = phi { i8*, i32 } [ %1272, %1290 ], [ %1270, %1269 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %360) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %359) #10
<   call void @_ZdlPv(i8* nonnull %1244) #28
<   br label %1322
< 
< 1293:                                             ; preds = %1265, %1234
<   %1294 = phi %"class.Apollo::Region"* [ %1266, %1265 ], [ %1241, %1234 ]
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %355, i8 0, i64 24, i1 false) #10
<   %1295 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %1296 unwind label %1267
< 
< 1296:                                             ; preds = %1293
<   store i8* %1295, i8** %364, align 8, !tbaa !14
<   %1297 = getelementptr inbounds i8, i8* %1295, i64 4
<   store i8* %1297, i8** %368, align 8, !tbaa !17
<   %1298 = bitcast i8* %1239 to i32*
<   %1299 = bitcast i8* %1295 to i32*
<   %1300 = load i32, i32* %1298, align 4
<   store i32 %1300, i32* %1299, align 4
<   store i8* %1297, i8** %366, align 8, !tbaa !18
<   %1301 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %1294, %"class.std::vector.15"* nonnull %15)
<           to label %1302 unwind label %1316
< 
< 1302:                                             ; preds = %1296
<   %1303 = load float*, float** %363, align 8, !tbaa !14
<   %1304 = icmp eq float* %1303, null
<   br i1 %1304, label %1307, label %1305
< 
< 1305:                                             ; preds = %1302
<   %1306 = bitcast float* %1303 to i8*
<   call void @_ZdlPv(i8* nonnull %1306) #10
<   br label %1307
< 
< 1307:                                             ; preds = %1305, %1302
<   %1308 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL43ApplyAccelerationBoundaryConditionsForNodesR6DomainE12apolloRegion, align 8, !tbaa !6
<   %1309 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %1308)
<           to label %1310 unwind label %1267
< 
< 1310:                                             ; preds = %1307
<   %1311 = icmp eq i32 %1309, 1
<   %1312 = select i1 %1311, i32 1, i32 36
<   %1313 = icmp eq i32 %1309, 0
<   %1314 = select i1 %1313, i32 36, i32 %1312
<   call void @omp_set_num_threads(i32 %1314) #10
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 2, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, %class.Domain*, i32*)* @.omp_outlined..35 to void (i32*, i32*, ...)*), i8* nonnull %160, i32* nonnull %12)
<   %1315 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL43ApplyAccelerationBoundaryConditionsForNodesR6DomainE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %1315)
<           to label %1324 unwind label %1267
< 
< 1316:                                             ; preds = %1296
<   %1317 = landingpad { i8*, i32 }
<           cleanup
<   %1318 = load float*, float** %363, align 8, !tbaa !14
<   %1319 = icmp eq float* %1318, null
<   br i1 %1319, label %1322, label %1320
< 
< 1320:                                             ; preds = %1316
<   %1321 = bitcast float* %1318 to i8*
<   call void @_ZdlPv(i8* nonnull %1321) #10
<   br label %1322
< 
< 1322:                                             ; preds = %1320, %1316, %1291, %1267
<   %1323 = phi { i8*, i32 } [ %1268, %1267 ], [ %1292, %1291 ], [ %1317, %1316 ], [ %1317, %1320 ]
<   call void @_ZdlPv(i8* nonnull %1239) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %358) #10
<   resume { i8*, i32 } %1323
< 
< 1324:                                             ; preds = %1310
<   call void @_ZdlPv(i8* nonnull %1239) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %358) #10
<   call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %355)
<   %1325 = load i32, i32* %201, align 4, !tbaa !12
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %369)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %370)
<   call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %371)
<   store double %476, double* %5, align 8, !tbaa !2
<   store double %479, double* %6, align 8, !tbaa !2
<   %1326 = sitofp i32 %1325 to float
<   %1327 = call noalias nonnull i8* @_Znwm(i64 4) #26
<   %1328 = bitcast i8* %1327 to float*
<   store float %1326, float* %1328, align 4
<   %1329 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcVelocityForNodesR6DomainddiE12apolloRegion, align 8, !tbaa !6
<   %1330 = icmp eq %"class.Apollo::Region"* %1329, null
<   br i1 %1330, label %1331, label %1381
< 
< 1331:                                             ; preds = %1324
<   %1332 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %1333 unwind label %1355
< 
< 1333:                                             ; preds = %1331
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %372) #10
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %373) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %7, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %8)
<           to label %1334 unwind label %1357
< 
< 1334:                                             ; preds = %1333
<   %1335 = bitcast i8* %1332 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %1335, i32 1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.36, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %7)
<           to label %1336 unwind label %1359
< 
< 1336:                                             ; preds = %1334
<   store i8* %1332, i8** bitcast (%"class.Apollo::Region"** @_ZZL20CalcVelocityForNodesR6DomainddiE12apolloRegion to i8**), align 8, !tbaa !6
<   %1337 = load i8*, i8** %374, align 8, !tbaa !8
<   %1338 = getelementptr inbounds i8, i8* %1337, i64 -24
<   %1339 = bitcast i8* %1338 to %"struct.std::basic_string<char>::_Rep"*
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %375) #10
<   %1340 = icmp eq i8* %1338, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %1340, label %1353, label %1341, !prof !11
< 
< 1341:                                             ; preds = %1336
<   %1342 = getelementptr inbounds i8, i8* %1337, i64 -8
<   %1343 = bitcast i8* %1342 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %1344, label %1346
< 
< 1344:                                             ; preds = %1341
<   %1345 = atomicrmw volatile add i32* %1343, i32 -1 acq_rel
<   br label %1349
< 
< 1346:                                             ; preds = %1341
<   %1347 = load i32, i32* %1343, align 4, !tbaa !12
<   %1348 = add nsw i32 %1347, -1
<   store i32 %1348, i32* %1343, align 4, !tbaa !12
<   br label %1349
< 
< 1349:                                             ; preds = %1346, %1344
<   %1350 = phi i32 [ %1345, %1344 ], [ %1347, %1346 ]
<   %1351 = icmp slt i32 %1350, 1
<   br i1 %1351, label %1352, label %1353
< 
< 1352:                                             ; preds = %1349
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %1339, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %4) #10
<   br label %1353
< 
< 1353:                                             ; preds = %1352, %1349, %1336
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %375) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %373) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %372) #10
<   %1354 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcVelocityForNodesR6DomainddiE12apolloRegion, align 8, !tbaa !6
<   br label %1381
< 
< 1355:                                             ; preds = %1398, %1395, %1381, %1331
<   %1356 = landingpad { i8*, i32 }
<           cleanup
<   br label %1411
< 
< 1357:                                             ; preds = %1333
<   %1358 = landingpad { i8*, i32 }
<           cleanup
<   br label %1379
< 
< 1359:                                             ; preds = %1334
<   %1360 = landingpad { i8*, i32 }
<           cleanup
<   %1361 = load i8*, i8** %374, align 8, !tbaa !8
<   %1362 = getelementptr inbounds i8, i8* %1361, i64 -24
<   %1363 = bitcast i8* %1362 to %"struct.std::basic_string<char>::_Rep"*
<   %1364 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %3, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %1364) #10
<   %1365 = icmp eq i8* %1362, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %1365, label %1378, label %1366, !prof !11
< 
< 1366:                                             ; preds = %1359
<   %1367 = getelementptr inbounds i8, i8* %1361, i64 -8
<   %1368 = bitcast i8* %1367 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %1369, label %1371
< 
< 1369:                                             ; preds = %1366
<   %1370 = atomicrmw volatile add i32* %1368, i32 -1 acq_rel
<   br label %1374
< 
< 1371:                                             ; preds = %1366
<   %1372 = load i32, i32* %1368, align 4, !tbaa !12
<   %1373 = add nsw i32 %1372, -1
<   store i32 %1373, i32* %1368, align 4, !tbaa !12
<   br label %1374
< 
< 1374:                                             ; preds = %1371, %1369
<   %1375 = phi i32 [ %1370, %1369 ], [ %1372, %1371 ]
<   %1376 = icmp slt i32 %1375, 1
<   br i1 %1376, label %1377, label %1378
< 
< 1377:                                             ; preds = %1374
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %1363, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %3) #10
<   br label %1378
< 
< 1378:                                             ; preds = %1377, %1374, %1359
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %1364) #10
<   br label %1379
< 
< 1379:                                             ; preds = %1378, %1357
<   %1380 = phi { i8*, i32 } [ %1360, %1378 ], [ %1358, %1357 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %373) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %372) #10
<   call void @_ZdlPv(i8* nonnull %1332) #28
<   br label %1411
< 
< 1381:                                             ; preds = %1353, %1324
<   %1382 = phi %"class.Apollo::Region"* [ %1354, %1353 ], [ %1329, %1324 ]
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %371, i8 0, i64 24, i1 false) #10
<   %1383 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %1384 unwind label %1355
< 
< 1384:                                             ; preds = %1381
<   store i8* %1383, i8** %377, align 8, !tbaa !14
<   %1385 = getelementptr inbounds i8, i8* %1383, i64 4
<   store i8* %1385, i8** %381, align 8, !tbaa !17
<   %1386 = bitcast i8* %1327 to i32*
<   %1387 = bitcast i8* %1383 to i32*
<   %1388 = load i32, i32* %1386, align 4
<   store i32 %1388, i32* %1387, align 4
<   store i8* %1385, i8** %379, align 8, !tbaa !18
<   %1389 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %1382, %"class.std::vector.15"* nonnull %9)
<           to label %1390 unwind label %1405
< 
< 1390:                                             ; preds = %1384
<   %1391 = load float*, float** %376, align 8, !tbaa !14
<   %1392 = icmp eq float* %1391, null
<   br i1 %1392, label %1395, label %1393
< 
< 1393:                                             ; preds = %1390
<   %1394 = bitcast float* %1391 to i8*
<   call void @_ZdlPv(i8* nonnull %1394) #10
<   br label %1395
< 
< 1395:                                             ; preds = %1393, %1390
<   %1396 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcVelocityForNodesR6DomainddiE12apolloRegion, align 8, !tbaa !6
<   %1397 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %1396)
<           to label %1398 unwind label %1355
< 
< 1398:                                             ; preds = %1395
<   %1399 = icmp eq i32 %1397, 1
<   %1400 = select i1 %1399, i32 1, i32 36
<   %1401 = icmp eq i32 %1397, 0
<   %1402 = select i1 %1401, i32 36, i32 %1400
<   call void @omp_set_num_threads(i32 %1402) #10
<   %1403 = zext i32 %1325 to i64
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 4, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, %class.Domain*, double*, double*)* @.omp_outlined..37 to void (i32*, i32*, ...)*), i64 %1403, i8* nonnull %160, double* nonnull %5, double* nonnull %6)
<   %1404 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcVelocityForNodesR6DomainddiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %1404)
<           to label %1413 unwind label %1355
< 
< 1405:                                             ; preds = %1384
<   %1406 = landingpad { i8*, i32 }
<           cleanup
<   %1407 = load float*, float** %376, align 8, !tbaa !14
<   %1408 = icmp eq float* %1407, null
<   br i1 %1408, label %1411, label %1409
< 
< 1409:                                             ; preds = %1405
<   %1410 = bitcast float* %1407 to i8*
<   call void @_ZdlPv(i8* nonnull %1410) #10
<   br label %1411
< 
< 1411:                                             ; preds = %1409, %1405, %1379, %1355
<   %1412 = phi { i8*, i32 } [ %1356, %1355 ], [ %1380, %1379 ], [ %1406, %1405 ], [ %1406, %1409 ]
<   call void @_ZdlPv(i8* nonnull %1327) #10
<   resume { i8*, i32 } %1412
< 
< 1413:                                             ; preds = %1398
<   call void @_ZdlPv(i8* nonnull %1327) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %369)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %370)
<   call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %371)
<   %1414 = load i32, i32* %201, align 4, !tbaa !12
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %382)
<   call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %383)
<   store double %476, double* %92, align 8, !tbaa !2
<   %1415 = sitofp i32 %1414 to float
<   %1416 = call noalias nonnull i8* @_Znwm(i64 4) #26
<   %1417 = bitcast i8* %1416 to float*
<   store float %1415, float* %1417, align 4
<   %1418 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcPositionForNodesR6DomaindiE12apolloRegion, align 8, !tbaa !6
<   %1419 = icmp eq %"class.Apollo::Region"* %1418, null
<   br i1 %1419, label %1420, label %1470
< 
< 1420:                                             ; preds = %1413
<   %1421 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %1422 unwind label %1444
< 
< 1422:                                             ; preds = %1420
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %384) #10
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %385) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %93, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %94)
<           to label %1423 unwind label %1446
< 
< 1423:                                             ; preds = %1422
<   %1424 = bitcast i8* %1421 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %1424, i32 1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.38, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %93)
<           to label %1425 unwind label %1448
< 
< 1425:                                             ; preds = %1423
<   store i8* %1421, i8** bitcast (%"class.Apollo::Region"** @_ZZL20CalcPositionForNodesR6DomaindiE12apolloRegion to i8**), align 8, !tbaa !6
<   %1426 = load i8*, i8** %386, align 8, !tbaa !8
<   %1427 = getelementptr inbounds i8, i8* %1426, i64 -24
<   %1428 = bitcast i8* %1427 to %"struct.std::basic_string<char>::_Rep"*
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %387) #10
<   %1429 = icmp eq i8* %1427, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %1429, label %1442, label %1430, !prof !11
< 
< 1430:                                             ; preds = %1425
<   %1431 = getelementptr inbounds i8, i8* %1426, i64 -8
<   %1432 = bitcast i8* %1431 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %1433, label %1435
< 
< 1433:                                             ; preds = %1430
<   %1434 = atomicrmw volatile add i32* %1432, i32 -1 acq_rel
<   br label %1438
< 
< 1435:                                             ; preds = %1430
<   %1436 = load i32, i32* %1432, align 4, !tbaa !12
<   %1437 = add nsw i32 %1436, -1
<   store i32 %1437, i32* %1432, align 4, !tbaa !12
<   br label %1438
< 
< 1438:                                             ; preds = %1435, %1433
<   %1439 = phi i32 [ %1434, %1433 ], [ %1436, %1435 ]
<   %1440 = icmp slt i32 %1439, 1
<   br i1 %1440, label %1441, label %1442
< 
< 1441:                                             ; preds = %1438
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %1428, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %91) #10
<   br label %1442
< 
< 1442:                                             ; preds = %1441, %1438, %1425
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %387) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %385) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %384) #10
<   %1443 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcPositionForNodesR6DomaindiE12apolloRegion, align 8, !tbaa !6
<   br label %1470
< 
< 1444:                                             ; preds = %1487, %1484, %1470, %1420
<   %1445 = landingpad { i8*, i32 }
<           cleanup
<   br label %1500
< 
< 1446:                                             ; preds = %1422
<   %1447 = landingpad { i8*, i32 }
<           cleanup
<   br label %1468
< 
< 1448:                                             ; preds = %1423
<   %1449 = landingpad { i8*, i32 }
<           cleanup
<   %1450 = load i8*, i8** %386, align 8, !tbaa !8
<   %1451 = getelementptr inbounds i8, i8* %1450, i64 -24
<   %1452 = bitcast i8* %1451 to %"struct.std::basic_string<char>::_Rep"*
<   %1453 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %90, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %1453) #10
<   %1454 = icmp eq i8* %1451, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %1454, label %1467, label %1455, !prof !11
< 
< 1455:                                             ; preds = %1448
<   %1456 = getelementptr inbounds i8, i8* %1450, i64 -8
<   %1457 = bitcast i8* %1456 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %1458, label %1460
< 
< 1458:                                             ; preds = %1455
<   %1459 = atomicrmw volatile add i32* %1457, i32 -1 acq_rel
<   br label %1463
< 
< 1460:                                             ; preds = %1455
<   %1461 = load i32, i32* %1457, align 4, !tbaa !12
<   %1462 = add nsw i32 %1461, -1
<   store i32 %1462, i32* %1457, align 4, !tbaa !12
<   br label %1463
< 
< 1463:                                             ; preds = %1460, %1458
<   %1464 = phi i32 [ %1459, %1458 ], [ %1461, %1460 ]
<   %1465 = icmp slt i32 %1464, 1
<   br i1 %1465, label %1466, label %1467
< 
< 1466:                                             ; preds = %1463
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %1452, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %90) #10
<   br label %1467
< 
< 1467:                                             ; preds = %1466, %1463, %1448
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %1453) #10
<   br label %1468
< 
< 1468:                                             ; preds = %1467, %1446
<   %1469 = phi { i8*, i32 } [ %1449, %1467 ], [ %1447, %1446 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %385) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %384) #10
<   call void @_ZdlPv(i8* nonnull %1421) #28
<   br label %1500
< 
< 1470:                                             ; preds = %1442, %1413
<   %1471 = phi %"class.Apollo::Region"* [ %1443, %1442 ], [ %1418, %1413 ]
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %383, i8 0, i64 24, i1 false) #10
<   %1472 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %1473 unwind label %1444
< 
< 1473:                                             ; preds = %1470
<   store i8* %1472, i8** %389, align 8, !tbaa !14
<   %1474 = getelementptr inbounds i8, i8* %1472, i64 4
<   store i8* %1474, i8** %393, align 8, !tbaa !17
<   %1475 = bitcast i8* %1416 to i32*
<   %1476 = bitcast i8* %1472 to i32*
<   %1477 = load i32, i32* %1475, align 4
<   store i32 %1477, i32* %1476, align 4
<   store i8* %1474, i8** %391, align 8, !tbaa !18
<   %1478 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %1471, %"class.std::vector.15"* nonnull %95)
<           to label %1479 unwind label %1494
< 
< 1479:                                             ; preds = %1473
<   %1480 = load float*, float** %388, align 8, !tbaa !14
<   %1481 = icmp eq float* %1480, null
<   br i1 %1481, label %1484, label %1482
< 
< 1482:                                             ; preds = %1479
<   %1483 = bitcast float* %1480 to i8*
<   call void @_ZdlPv(i8* nonnull %1483) #10
<   br label %1484
< 
< 1484:                                             ; preds = %1482, %1479
<   %1485 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcPositionForNodesR6DomaindiE12apolloRegion, align 8, !tbaa !6
<   %1486 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %1485)
<           to label %1487 unwind label %1444
< 
< 1487:                                             ; preds = %1484
<   %1488 = icmp eq i32 %1486, 1
<   %1489 = select i1 %1488, i32 1, i32 36
<   %1490 = icmp eq i32 %1486, 0
<   %1491 = select i1 %1490, i32 36, i32 %1489
<   call void @omp_set_num_threads(i32 %1491) #10
<   %1492 = zext i32 %1414 to i64
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 3, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, %class.Domain*, double*)* @.omp_outlined..39 to void (i32*, i32*, ...)*), i64 %1492, i8* nonnull %160, double* nonnull %92)
<   %1493 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcPositionForNodesR6DomaindiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %1493)
<           to label %1502 unwind label %1444
< 
< 1494:                                             ; preds = %1473
<   %1495 = landingpad { i8*, i32 }
<           cleanup
<   %1496 = load float*, float** %388, align 8, !tbaa !14
<   %1497 = icmp eq float* %1496, null
<   br i1 %1497, label %1500, label %1498
< 
< 1498:                                             ; preds = %1494
<   %1499 = bitcast float* %1496 to i8*
<   call void @_ZdlPv(i8* nonnull %1499) #10
<   br label %1500
< 
< 1500:                                             ; preds = %1498, %1494, %1468, %1444
<   %1501 = phi { i8*, i32 } [ %1445, %1444 ], [ %1469, %1468 ], [ %1495, %1494 ], [ %1495, %1498 ]
<   call void @_ZdlPv(i8* nonnull %1416) #10
<   resume { i8*, i32 } %1501
< 
< 1502:                                             ; preds = %1487
<   call void @_ZdlPv(i8* nonnull %1416) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %382)
<   call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %383)
<   %1503 = load i32, i32* %214, align 8, !tbaa !12
<   call fastcc void @_ZL16LagrangeElementsR6Domaini(%class.Domain* nonnull align 8 dereferenceable(1312) %161, i32 %1503)
<   store <2 x double> <double 1.000000e+20, double 1.000000e+20>, <2 x double>* %420, align 8, !tbaa !2
<   %1504 = load i32, i32* %395, align 8, !tbaa !12
<   %1505 = icmp sgt i32 %1504, 0
<   br i1 %1505, label %1506, label %1526
< 
< 1506:                                             ; preds = %1502, %1506
<   %1507 = phi i64 [ %1522, %1506 ], [ 0, %1502 ]
<   %1508 = load i32*, i32** %397, align 8, !tbaa !43
<   %1509 = getelementptr inbounds i32, i32* %1508, i64 %1507
<   %1510 = load i32, i32* %1509, align 4, !tbaa !12
<   %1511 = load i32**, i32*** %399, align 8, !tbaa !44
<   %1512 = getelementptr inbounds i32*, i32** %1511, i64 %1507
<   %1513 = load i32*, i32** %1512, align 8, !tbaa !6
<   %1514 = load double, double* %401, align 8, !tbaa !45
<   call fastcc void @_ZL29CalcCourantConstraintForElemsR6DomainiPidRd(%class.Domain* nonnull align 8 dereferenceable(1312) %161, i32 %1510, i32* %1513, double %1514, double* nonnull align 8 dereferenceable(8) %188)
<   %1515 = load i32*, i32** %397, align 8, !tbaa !43
<   %1516 = getelementptr inbounds i32, i32* %1515, i64 %1507
<   %1517 = load i32, i32* %1516, align 4, !tbaa !12
<   %1518 = load i32**, i32*** %399, align 8, !tbaa !44
<   %1519 = getelementptr inbounds i32*, i32** %1518, i64 %1507
<   %1520 = load i32*, i32** %1519, align 8, !tbaa !6
<   %1521 = load double, double* %403, align 8, !tbaa !46
<   call fastcc void @_ZL27CalcHydroConstraintForElemsR6DomainiPidRd(%class.Domain* nonnull align 8 dereferenceable(1312) %161, i32 %1517, i32* %1520, double %1521, double* nonnull align 8 dereferenceable(8) %190)
<   %1522 = add nuw nsw i64 %1507, 1
<   %1523 = load i32, i32* %395, align 8, !tbaa !12
<   %1524 = sext i32 %1523 to i64
<   %1525 = icmp slt i64 %1522, %1524
<   br i1 %1525, label %1506, label %1526, !llvm.loop !47
< 
< 1526:                                             ; preds = %1506, %1502
<   %1527 = load i32, i32* %109, align 16, !tbaa !49
<   %1528 = icmp ne i32 %1527, 0
<   %1529 = load i32, i32* %110, align 4
<   %1530 = icmp eq i32 %1529, 0
<   %1531 = and i1 %1528, %1530
<   br i1 %1531, label %1532, label %1567
< 
< 1532:                                             ; preds = %1526
<   %1533 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.16, i64 0, i64 0), i64 8)
<   %1534 = load i32, i32* %182, align 4, !tbaa !12
<   %1535 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull dereferenceable(8) @_ZSt4cout, i32 %1534)
<   %1536 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %1535, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i64 0, i64 0), i64 2)
<   %1537 = bitcast %"class.std::basic_ostream"* %1535 to i8**
<   %1538 = load i8*, i8** %1537, align 8, !tbaa !50
<   %1539 = getelementptr i8, i8* %1538, i64 -24
<   %1540 = bitcast i8* %1539 to i64*
<   %1541 = load i64, i64* %1540, align 8
<   %1542 = getelementptr inbounds %"class.std::basic_ostream", %"class.std::basic_ostream"* %1535, i64 0, i32 1, i32 0, i32 2
<   %1543 = bitcast i64* %1542 to i8*
<   %1544 = getelementptr inbounds i8, i8* %1543, i64 %1541
<   %1545 = bitcast i8* %1544 to i32*
<   %1546 = load i32, i32* %1545, align 4, !tbaa !52
<   %1547 = and i32 %1546, -261
<   %1548 = or i32 %1547, 256
<   store i32 %1548, i32* %1545, align 4, !tbaa !52
<   %1549 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %1535, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.18, i64 0, i64 0), i64 7)
<   %1550 = load double, double* %174, align 8, !tbaa !2
<   %1551 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* nonnull dereferenceable(8) %1535, double %1550)
<   %1552 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %1551, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i64 0, i64 0), i64 2)
<   %1553 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %1551, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.19, i64 0, i64 0), i64 3)
<   %1554 = load double, double* %186, align 8, !tbaa !2
<   %1555 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* nonnull dereferenceable(8) %1551, double %1554)
<   %1556 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %1555, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i64 1)
<   %1557 = load i8*, i8** bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8**), align 8, !tbaa !50
<   %1558 = getelementptr i8, i8* %1557, i64 -24
<   %1559 = bitcast i8* %1558 to i64*
<   %1560 = load i64, i64* %1559, align 8
<   %1561 = getelementptr inbounds i8, i8* bitcast (i64* getelementptr inbounds (%"class.std::basic_ostream", %"class.std::basic_ostream"* @_ZSt4cout, i64 0, i32 1, i32 0, i32 2) to i8*), i64 %1560
<   %1562 = bitcast i8* %1561 to i32*
<   %1563 = load i32, i32* %1562, align 4, !tbaa !52
<   %1564 = and i32 %1563, -261
<   store i32 %1564, i32* %1562, align 4, !tbaa !52
<   br label %1567
---
> define dso_local i32 @main(i32 %argc, i8** %argv) local_unnamed_addr #11 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
> entry:
>   %opts = alloca %struct.cmdLineOpts, align 4
>   %col = alloca i32, align 4
>   %row = alloca i32, align 4
>   %plane = alloca i32, align 4
>   %side = alloca i32, align 4
>   %start = alloca %struct.timeval, align 8
>   %end = alloca %struct.timeval, align 8
>   %0 = bitcast %struct.cmdLineOpts* %opts to i8*
>   call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %0) #7
>   %its = getelementptr inbounds %struct.cmdLineOpts, %struct.cmdLineOpts* %opts, i64 0, i32 0
>   %nx = getelementptr inbounds %struct.cmdLineOpts, %struct.cmdLineOpts* %opts, i64 0, i32 1
>   %numReg = getelementptr inbounds %struct.cmdLineOpts, %struct.cmdLineOpts* %opts, i64 0, i32 2
>   %numFiles = getelementptr inbounds %struct.cmdLineOpts, %struct.cmdLineOpts* %opts, i64 0, i32 3
>   %showProg = getelementptr inbounds %struct.cmdLineOpts, %struct.cmdLineOpts* %opts, i64 0, i32 4
>   %quiet = getelementptr inbounds %struct.cmdLineOpts, %struct.cmdLineOpts* %opts, i64 0, i32 5
>   %viz = getelementptr inbounds %struct.cmdLineOpts, %struct.cmdLineOpts* %opts, i64 0, i32 6
>   %balance = getelementptr inbounds %struct.cmdLineOpts, %struct.cmdLineOpts* %opts, i64 0, i32 8
>   store i32 1, i32* %balance, align 4, !tbaa !21
>   %cost = getelementptr inbounds %struct.cmdLineOpts, %struct.cmdLineOpts* %opts, i64 0, i32 7
>   %1 = bitcast %struct.cmdLineOpts* %opts to <8 x i32>*
>   store <8 x i32> <i32 9999999, i32 30, i32 11, i32 1, i32 0, i32 0, i32 0, i32 1>, <8 x i32>* %1, align 4, !tbaa !6
>   call void @_Z23ParseCommandLineOptionsiPPciP11cmdLineOpts(i32 %argc, i8** %argv, i32 0, %struct.cmdLineOpts* nonnull %opts)
>   %2 = load i32, i32* %quiet, align 4, !tbaa !23
>   %cmp2 = icmp eq i32 %2, 0
>   br i1 %cmp2, label %if.then, label %if.end
> 
> if.then:                                          ; preds = %entry
>   %call1.i = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i64 21)
>   %3 = load i32, i32* %nx, align 4, !tbaa !24
>   %call4 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i32 %3)
>   %call1.i115 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %call4, i8* nonnull getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i64 0, i64 0), i64 31)
>   %call1.i117 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i64 16)
>   %call7 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i32 1)
>   %call1.i119 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %call7, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0), i64 1)
>   %call1.i121 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i64 0, i64 0), i64 13)
>   %call10 = call i32 @omp_get_max_threads()
>   %call11 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i32 %call10)
>   %call1.i123 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %call11, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0), i64 1)
>   %call1.i125 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0), i64 26)
>   %4 = load i32, i32* %nx, align 4, !tbaa !24
>   %conv15 = sext i32 %4 to i64
>   %mul18 = mul nsw i64 %conv15, %conv15
>   %mul21 = mul nsw i64 %mul18, %conv15
>   %call.i = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo9_M_insertIlEERSoT_(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %mul21)
>   %call1.i127 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %call.i, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0), i64 3)
>   %call1.i129 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([39 x i8], [39 x i8]* @.str.8, i64 0, i64 0), i64 38)
>   %call1.i131 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([56 x i8], [56 x i8]* @.str.9, i64 0, i64 0), i64 55)
>   %call1.i133 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([62 x i8], [62 x i8]* @.str.10, i64 0, i64 0), i64 61)
>   %call1.i135 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([60 x i8], [60 x i8]* @.str.11, i64 0, i64 0), i64 59)
>   %call1.i137 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.12, i64 0, i64 0), i64 30)
>   %call1.i139 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([43 x i8], [43 x i8]* @.str.13, i64 0, i64 0), i64 42)
>   %call1.i141 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([33 x i8], [33 x i8]* @.str.14, i64 0, i64 0), i64 32)
>   br label %if.end
> 
> if.end:                                           ; preds = %if.then, %entry
>   %5 = bitcast i32* %col to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #7
>   %6 = bitcast i32* %row to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #7
>   %7 = bitcast i32* %plane to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #7
>   %8 = bitcast i32* %side to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #7
>   call void @_Z14InitMeshDecompiiPiS_S_S_(i32 1, i32 0, i32* nonnull %col, i32* nonnull %row, i32* nonnull %plane, i32* nonnull %side)
>   %call31 = call noalias nonnull dereferenceable(1312) i8* @_Znwm(i64 1312) #24
>   %9 = bitcast i8* %call31 to %class.Domain*
>   %10 = load i32, i32* %col, align 4, !tbaa !6
>   %11 = load i32, i32* %row, align 4, !tbaa !6
>   %12 = load i32, i32* %plane, align 4, !tbaa !6
>   %13 = load i32, i32* %nx, align 4, !tbaa !24
>   %14 = load i32, i32* %side, align 4, !tbaa !6
>   %15 = load i32, i32* %numReg, align 4, !tbaa !25
>   %16 = load i32, i32* %balance, align 4, !tbaa !21
>   %17 = load i32, i32* %cost, align 4, !tbaa !26
>   invoke void @_ZN6DomainC1Eiiiiiiiii(%class.Domain* nonnull %9, i32 1, i32 %10, i32 %11, i32 %12, i32 %13, i32 %14, i32 %15, i32 %16, i32 %17)
>           to label %invoke.cont unwind label %lpad
> 
> invoke.cont:                                      ; preds = %if.end
>   %18 = bitcast %struct.timeval* %start to i8*
>   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #7
>   %call36 = call i32 @gettimeofday(%struct.timeval* nonnull %start, %struct.timezone* null) #7
>   %m_cycle.i = getelementptr inbounds i8, i8* %call31, i64 1160
>   %19 = bitcast i8* %m_cycle.i to i32*
>   %m_time.i = getelementptr inbounds i8, i8* %call31, i64 1176
>   %20 = bitcast i8* %m_time.i to double*
>   %21 = load double, double* %20, align 8, !tbaa !2
>   %m_stoptime.i = getelementptr inbounds i8, i8* %call31, i64 1216
>   %22 = bitcast i8* %m_stoptime.i to double*
>   %23 = load double, double* %22, align 8, !tbaa !2
>   %cmp39170 = fcmp olt double %21, %23
>   br i1 %cmp39170, label %land.rhs.lr.ph, label %while.end
4503,4566c1543,1758
< 1565:                                             ; preds = %155
<   %1566 = landingpad { i8*, i32 }
<           cleanup
<   call void @_ZdlPv(i8* nonnull %160) #28
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %159) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %158) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %157) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %156) #10
<   call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %103) #10
<   resume { i8*, i32 } %1566
< 
< 1567:                                             ; preds = %1532, %1526
<   %1568 = load double, double* %174, align 8, !tbaa !2
<   %1569 = load double, double* %177, align 8, !tbaa !2
<   %1570 = fcmp olt double %1568, %1569
<   br i1 %1570, label %421, label %1571, !llvm.loop !54
< 
< 1571:                                             ; preds = %421, %1567, %170
<   %1572 = bitcast %struct.timeval* %102 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1572) #10
<   %1573 = call i32 @gettimeofday(%struct.timeval* nonnull %102, %struct.timezone* null) #10
<   %1574 = getelementptr inbounds %struct.timeval, %struct.timeval* %102, i64 0, i32 0
<   %1575 = load i64, i64* %1574, align 8, !tbaa !55
<   %1576 = getelementptr inbounds %struct.timeval, %struct.timeval* %101, i64 0, i32 0
<   %1577 = load i64, i64* %1576, align 8, !tbaa !55
<   %1578 = sub nsw i64 %1575, %1577
<   %1579 = sitofp i64 %1578 to double
<   %1580 = getelementptr inbounds %struct.timeval, %struct.timeval* %102, i64 0, i32 1
<   %1581 = load i64, i64* %1580, align 8, !tbaa !58
<   %1582 = getelementptr inbounds %struct.timeval, %struct.timeval* %101, i64 0, i32 1
<   %1583 = load i64, i64* %1582, align 8, !tbaa !58
<   %1584 = sub nsw i64 %1581, %1583
<   %1585 = sitofp i64 %1584 to double
<   %1586 = fdiv double %1585, 1.000000e+06
<   %1587 = fadd double %1586, %1579
<   %1588 = load i32, i32* %111, align 8, !tbaa !59
<   %1589 = icmp eq i32 %1588, 0
<   br i1 %1589, label %1592, label %1590
< 
< 1590:                                             ; preds = %1571
<   %1591 = load i32, i32* %107, align 4, !tbaa !60
<   call void @_Z11DumpToVisitR6Domainiii(%class.Domain* nonnull align 8 dereferenceable(1312) %161, i32 %1591, i32 0, i32 1)
<   br label %1592
< 
< 1592:                                             ; preds = %1571, %1590
<   %1593 = load i32, i32* %110, align 4, !tbaa !35
<   %1594 = icmp eq i32 %1593, 0
<   br i1 %1594, label %1595, label %1597
< 
< 1595:                                             ; preds = %1592
<   %1596 = load i32, i32* %105, align 4, !tbaa !36
<   call void @_Z25VerifyAndWriteFinalOutputdR6Domainii(double %1587, %class.Domain* nonnull align 8 dereferenceable(1312) %161, i32 %1596, i32 1)
<   br label %1597
< 
< 1597:                                             ; preds = %1592, %1595
<   call void @_ZN6DomainD1Ev(%class.Domain* nonnull dereferenceable(1312) %161) #10
<   call void @_ZdlPv(i8* nonnull %160) #28
<   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1572) #10
<   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %171) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %159) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %158) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %157) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %156) #10
<   call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %103) #10
---
> land.rhs.lr.ph:                                   ; preds = %invoke.cont
>   %m_dtfixed.i.i = getelementptr inbounds i8, i8* %call31, i64 1168
>   %24 = bitcast i8* %m_dtfixed.i.i to double*
>   %m_deltatime.i105.i = getelementptr inbounds i8, i8* %call31, i64 1184
>   %25 = bitcast i8* %m_deltatime.i105.i to double*
>   %m_dtcourant.i104.i = getelementptr inbounds i8, i8* %call31, i64 1144
>   %26 = bitcast i8* %m_dtcourant.i104.i to double*
>   %m_dthydro.i103.i = getelementptr inbounds i8, i8* %call31, i64 1152
>   %27 = bitcast i8* %m_dthydro.i103.i to double*
>   %m_deltatimemultlb.i.i = getelementptr inbounds i8, i8* %call31, i64 1192
>   %28 = bitcast i8* %m_deltatimemultlb.i.i to double*
>   %m_deltatimemultub.i102.i = getelementptr inbounds i8, i8* %call31, i64 1200
>   %29 = bitcast i8* %m_deltatimemultub.i102.i to double*
>   %m_dtmax.i101.i = getelementptr inbounds i8, i8* %call31, i64 1208
>   %30 = bitcast i8* %m_dtmax.i101.i to double*
>   br label %land.rhs
> 
> land.rhs:                                         ; preds = %land.rhs.lr.ph, %if.end64
>   %31 = phi double [ %23, %land.rhs.lr.ph ], [ %58, %if.end64 ]
>   %32 = phi double [ %21, %land.rhs.lr.ph ], [ %57, %if.end64 ]
>   %33 = load i32, i32* %19, align 4, !tbaa !6
>   %34 = load i32, i32* %its, align 4, !tbaa !27
>   %cmp42 = icmp slt i32 %33, %34
>   br i1 %cmp42, label %while.body, label %while.end
> 
> while.body:                                       ; preds = %land.rhs
>   %sub.i = fsub double %31, %32
>   %35 = load double, double* %24, align 8, !tbaa !2
>   %cmp.i = fcmp ugt double %35, 0.000000e+00
>   %cmp4.not.i = icmp eq i32 %33, 0
>   %or.cond169 = or i1 %cmp4.not.i, %cmp.i
>   %.pre = load double, double* %25, align 8, !tbaa !2
>   br i1 %or.cond169, label %if.end36.i, label %if.then.i
> 
> if.then.i:                                        ; preds = %while.body
>   %36 = load double, double* %26, align 8, !tbaa !2
>   %cmp7.i = fcmp olt double %36, 1.000000e+20
>   %div.i = fmul double %36, 5.000000e-01
>   %gnewdt.0.i = select i1 %cmp7.i, double %div.i, double 1.000000e+20
>   %37 = load double, double* %27, align 8, !tbaa !2
>   %cmp11.i = fcmp olt double %37, %gnewdt.0.i
>   br i1 %cmp11.i, label %if.then12.i, label %if.end15.i
> 
> if.then12.i:                                      ; preds = %if.then.i
>   %mul.i = fmul double %37, 2.000000e+00
>   %div14.i = fdiv double %mul.i, 3.000000e+00
>   br label %if.end15.i
> 
> if.end15.i:                                       ; preds = %if.then12.i, %if.then.i
>   %gnewdt.1.i = phi double [ %div14.i, %if.then12.i ], [ %gnewdt.0.i, %if.then.i ]
>   %div16.i = fdiv double %gnewdt.1.i, %.pre
>   %cmp17.i = fcmp ult double %div16.i, 1.000000e+00
>   br i1 %cmp17.i, label %if.end29.i, label %if.then18.i
> 
> if.then18.i:                                      ; preds = %if.end15.i
>   %38 = load double, double* %28, align 8, !tbaa !2
>   %cmp20.i = fcmp olt double %div16.i, %38
>   br i1 %cmp20.i, label %if.end29.i, label %if.else.i
> 
> if.else.i:                                        ; preds = %if.then18.i
>   %39 = load double, double* %29, align 8, !tbaa !2
>   %cmp23.i = fcmp ogt double %div16.i, %39
>   br i1 %cmp23.i, label %if.then24.i, label %if.end29.i
> 
> if.then24.i:                                      ; preds = %if.else.i
>   %mul26.i = fmul double %.pre, %39
>   br label %if.end29.i
> 
> if.end29.i:                                       ; preds = %if.then24.i, %if.else.i, %if.then18.i, %if.end15.i
>   %newdt.0.i = phi double [ %mul26.i, %if.then24.i ], [ %gnewdt.1.i, %if.else.i ], [ %gnewdt.1.i, %if.end15.i ], [ %.pre, %if.then18.i ]
>   %40 = load double, double* %30, align 8, !tbaa !2
>   %cmp31.i = fcmp ogt double %newdt.0.i, %40
>   %newdt.1.i = select i1 %cmp31.i, double %40, double %newdt.0.i
>   store double %newdt.1.i, double* %25, align 8, !tbaa !2
>   br label %if.end36.i
> 
> if.end36.i:                                       ; preds = %while.body, %if.end29.i
>   %41 = phi double [ %newdt.1.i, %if.end29.i ], [ %.pre, %while.body ]
>   %cmp38.i = fcmp ogt double %sub.i, %41
>   br i1 %cmp38.i, label %land.lhs.true39.i, label %if.end48.i
> 
> land.lhs.true39.i:                                ; preds = %if.end36.i
>   %mul41.i = fmul double %41, 4.000000e+00
>   %div42.i = fdiv double %mul41.i, 3.000000e+00
>   %cmp43.i = fcmp olt double %sub.i, %div42.i
>   br i1 %cmp43.i, label %if.then44.i, label %if.end48.i
> 
> if.then44.i:                                      ; preds = %land.lhs.true39.i
>   %mul46.i = fmul double %41, 2.000000e+00
>   %div47.i = fdiv double %mul46.i, 3.000000e+00
>   br label %if.end48.i
> 
> if.end48.i:                                       ; preds = %if.then44.i, %land.lhs.true39.i, %if.end36.i
>   %targetdt.0.i = phi double [ %div47.i, %if.then44.i ], [ %sub.i, %land.lhs.true39.i ], [ %sub.i, %if.end36.i ]
>   %cmp50.i = fcmp olt double %targetdt.0.i, %41
>   br i1 %cmp50.i, label %if.then51.i, label %_ZL13TimeIncrementR6Domain.exit
> 
> if.then51.i:                                      ; preds = %if.end48.i
>   store double %targetdt.0.i, double* %25, align 8, !tbaa !2
>   br label %_ZL13TimeIncrementR6Domain.exit
> 
> _ZL13TimeIncrementR6Domain.exit:                  ; preds = %if.end48.i, %if.then51.i
>   %42 = phi double [ %targetdt.0.i, %if.then51.i ], [ %41, %if.end48.i ]
>   %add.i = fadd double %32, %42
>   store double %add.i, double* %20, align 8, !tbaa !2
>   %inc.i = add nsw i32 %33, 1
>   store i32 %inc.i, i32* %19, align 8, !tbaa !6
>   call fastcc void @_ZL16LagrangeLeapFrogR6Domain(%class.Domain* nonnull align 8 dereferenceable(1312) %9)
>   %43 = load i32, i32* %showProg, align 4, !tbaa !28
>   %cmp44.not = icmp ne i32 %43, 0
>   %44 = load i32, i32* %quiet, align 4
>   %cmp47 = icmp eq i32 %44, 0
>   %or.cond = and i1 %cmp44.not, %cmp47
>   br i1 %or.cond, label %if.then50, label %if.end64
> 
> if.then50:                                        ; preds = %_ZL13TimeIncrementR6Domain.exit
>   %call1.i143 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.15, i64 0, i64 0), i64 8)
>   %45 = load i32, i32* %19, align 4, !tbaa !6
>   %call53 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i32 %45)
>   %call1.i147 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %call53, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i64 0, i64 0), i64 2)
>   %46 = bitcast %"class.std::basic_ostream"* %call53 to i8**
>   %vtable.i = load i8*, i8** %46, align 8, !tbaa !29
>   %vbase.offset.ptr.i = getelementptr i8, i8* %vtable.i, i64 -24
>   %47 = bitcast i8* %vbase.offset.ptr.i to i64*
>   %vbase.offset.i = load i64, i64* %47, align 8
>   %add.ptr.i = getelementptr inbounds %"class.std::basic_ostream", %"class.std::basic_ostream"* %call53, i64 0, i32 1, i32 0, i32 2
>   %48 = bitcast i64* %add.ptr.i to i8*
>   %_M_flags.i = getelementptr inbounds i8, i8* %48, i64 %vbase.offset.i
>   %49 = bitcast i8* %_M_flags.i to i32*
>   %50 = load i32, i32* %49, align 4, !tbaa !31
>   %and.i.i = and i32 %50, -261
>   %or.i = or i32 %and.i.i, 256
>   store i32 %or.i, i32* %49, align 4, !tbaa !31
>   %call1.i154 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %call53, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), i64 7)
>   %51 = load double, double* %20, align 8, !tbaa !2
>   %call.i157 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* nonnull %call53, double %51)
>   %call1.i159 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %call.i157, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i64 0, i64 0), i64 2)
>   %call1.i162 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %call.i157, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i64 0, i64 0), i64 3)
>   %52 = load double, double* %25, align 8, !tbaa !2
>   %call.i164 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* nonnull %call.i157, double %52)
>   %call1.i166 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %call.i164, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0), i64 1)
>   %vtable = load i8*, i8** bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8**), align 8, !tbaa !29
>   %vbase.offset.ptr = getelementptr i8, i8* %vtable, i64 -24
>   %53 = bitcast i8* %vbase.offset.ptr to i64*
>   %vbase.offset = load i64, i64* %53, align 8
>   %_M_flags.i168 = getelementptr inbounds i8, i8* bitcast (i64* getelementptr inbounds (%"class.std::basic_ostream", %"class.std::basic_ostream"* @_ZSt4cout, i64 0, i32 1, i32 0, i32 2) to i8*), i64 %vbase.offset
>   %54 = bitcast i8* %_M_flags.i168 to i32*
>   %55 = load i32, i32* %54, align 4, !tbaa !31
>   %and.i.i.i = and i32 %55, -261
>   store i32 %and.i.i.i, i32* %54, align 4, !tbaa !31
>   br label %if.end64
> 
> lpad:                                             ; preds = %if.end
>   %56 = landingpad { i8*, i32 }
>           cleanup
>   call void @_ZdlPv(i8* nonnull %call31) #25
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #7
>   call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %0) #7
>   resume { i8*, i32 } %56
> 
> if.end64:                                         ; preds = %_ZL13TimeIncrementR6Domain.exit, %if.then50
>   %57 = load double, double* %20, align 8, !tbaa !2
>   %58 = load double, double* %22, align 8, !tbaa !2
>   %cmp39 = fcmp olt double %57, %58
>   br i1 %cmp39, label %land.rhs, label %while.end
> 
> while.end:                                        ; preds = %land.rhs, %if.end64, %invoke.cont
>   %59 = bitcast %struct.timeval* %end to i8*
>   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %59) #7
>   %call65 = call i32 @gettimeofday(%struct.timeval* nonnull %end, %struct.timezone* null) #7
>   %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %end, i64 0, i32 0
>   %60 = load i64, i64* %tv_sec, align 8, !tbaa !33
>   %tv_sec66 = getelementptr inbounds %struct.timeval, %struct.timeval* %start, i64 0, i32 0
>   %61 = load i64, i64* %tv_sec66, align 8, !tbaa !33
>   %sub = sub nsw i64 %60, %61
>   %conv67 = sitofp i64 %sub to double
>   %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %end, i64 0, i32 1
>   %62 = load i64, i64* %tv_usec, align 8, !tbaa !36
>   %tv_usec68 = getelementptr inbounds %struct.timeval, %struct.timeval* %start, i64 0, i32 1
>   %63 = load i64, i64* %tv_usec68, align 8, !tbaa !36
>   %sub69 = sub nsw i64 %62, %63
>   %conv70 = sitofp i64 %sub69 to double
>   %div71 = fdiv double %conv70, 1.000000e+06
>   %add72 = fadd double %div71, %conv67
>   %64 = load i32, i32* %viz, align 4, !tbaa !37
>   %tobool.not = icmp eq i32 %64, 0
>   br i1 %tobool.not, label %land.lhs.true78, label %if.then74
> 
> if.then74:                                        ; preds = %while.end
>   %65 = load i32, i32* %numFiles, align 4, !tbaa !38
>   call void @_Z11DumpToVisitR6Domainiii(%class.Domain* nonnull align 8 dereferenceable(1312) %9, i32 %65, i32 0, i32 1)
>   br label %land.lhs.true78
> 
> land.lhs.true78:                                  ; preds = %if.then74, %while.end
>   %66 = load i32, i32* %quiet, align 4, !tbaa !23
>   %cmp80 = icmp eq i32 %66, 0
>   br i1 %cmp80, label %if.then81, label %delete.notnull
> 
> if.then81:                                        ; preds = %land.lhs.true78
>   %67 = load i32, i32* %nx, align 4, !tbaa !24
>   call void @_Z25VerifyAndWriteFinalOutputdR6Domainii(double %add72, %class.Domain* nonnull align 8 dereferenceable(1312) %9, i32 %67, i32 1)
>   br label %delete.notnull
> 
> delete.notnull:                                   ; preds = %land.lhs.true78, %if.then81
>   call void @_ZN6DomainD1Ev(%class.Domain* nonnull %9) #7
>   call void @_ZdlPv(i8* nonnull %call31) #25
>   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %59) #7
>   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #7
>   call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %0) #7
4572c1764
< declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull dereferenceable(8), i32) local_unnamed_addr #0
---
> declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"*, i32) local_unnamed_addr #0
4575c1767
< declare dso_local i32 @omp_get_max_threads() local_unnamed_addr #10
---
> declare dso_local i32 @omp_get_max_threads() local_unnamed_addr #7
4579,4589c1771,1772
< declare dso_local void @_ZN6DomainC1Eiiiiiiiii(%class.Domain* nonnull dereferenceable(1312), i32, i32, i32, i32, i32, i32, i32, i32, i32) unnamed_addr #0
< 
< ; Function Attrs: nofree nounwind
< declare dso_local noundef i32 @gettimeofday(%struct.timeval* nocapture noundef, %struct.timezone* nocapture noundef) local_unnamed_addr #15
< 
< declare dso_local void @_Z11DumpToVisitR6Domainiii(%class.Domain* nonnull align 8 dereferenceable(1312), i32, i32, i32) local_unnamed_addr #0
< 
< declare dso_local void @_Z25VerifyAndWriteFinalOutputdR6Domainii(double, %class.Domain* nonnull align 8 dereferenceable(1312), i32, i32) local_unnamed_addr #0
< 
< ; Function Attrs: nounwind
< declare dso_local void @_ZN6DomainD1Ev(%class.Domain* nonnull dereferenceable(1312)) unnamed_addr #1
---
> ; Function Attrs: nobuiltin nofree allocsize(0)
> declare dso_local noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #12
4591c1774
< declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8), i8*, i64) local_unnamed_addr #0
---
> declare dso_local void @_ZN6DomainC1Eiiiiiiiii(%class.Domain*, i32, i32, i32, i32, i32, i32, i32, i32, i32) unnamed_addr #0
4593c1776,1777
< declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo9_M_insertIlEERSoT_(%"class.std::basic_ostream"* nonnull dereferenceable(8), i64) local_unnamed_addr #0
---
> ; Function Attrs: nobuiltin nounwind
> declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #13
4596c1780
< declare dso_local i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #2
---
> declare dso_local i32 @gettimeofday(%struct.timeval* nocapture, %struct.timezone* nocapture) local_unnamed_addr #10
4598c1782,1910
< declare dso_local void @_ZN6ApolloC1Ev(%class.Apollo* nonnull dereferenceable(128)) unnamed_addr #0
---
> ; Function Attrs: inlinehint norecurse uwtable
> define internal fastcc void @_ZL16LagrangeLeapFrogR6Domain(%class.Domain* nonnull align 8 dereferenceable(1312) %domain) unnamed_addr #14 {
> entry:
>   %omp_global_thread_num.i36.i = tail call i32 @__kmpc_global_thread_num(%struct.ident_t* nonnull @1) #7
>   %regElemlist.addr.i33.i = alloca i32*, align 8
>   %threads.i34.i = alloca i32, align 4
>   %courant_elem_per_thread.i.i = alloca i32*, align 8
>   %dtcourant_per_thread.i.i = alloca double*, align 8
>   %regElemlist.addr.i.i = alloca i32*, align 8
>   %threads.i.i = alloca i32, align 4
>   %hydro_elem_per_thread.i.i = alloca i32*, align 8
>   %dthydro_per_thread.i.i = alloca double*, align 8
>   %vnewc.addr.i93.i.i.i = alloca double*, align 8
>   %enewc.addr.i.i.i.i = alloca double*, align 8
>   %pnewc.addr.i.i.i.i = alloca double*, align 8
>   %pbvc.addr.i94.i.i.i = alloca double*, align 8
>   %bvc.addr.i95.i.i.i = alloca double*, align 8
>   %len.addr.i.i.i.i = alloca i32, align 4
>   %regElemList.addr.i96.i.i.i = alloca i32*, align 8
>   %p_new.addr.i.i.i.i = alloca double*, align 8
>   %e_new.addr.i.i.i.i = alloca double*, align 8
>   %q_new.addr.i.i.i.i = alloca double*, align 8
>   %bvc.addr.i.i.i.i = alloca double*, align 8
>   %pbvc.addr.i.i.i.i = alloca double*, align 8
>   %p_old.addr.i.i.i.i = alloca double*, align 8
>   %e_old.addr.i.i.i.i = alloca double*, align 8
>   %q_old.addr.i.i.i.i = alloca double*, align 8
>   %compHalfStep.addr.i.i.i.i = alloca double*, align 8
>   %vnewc.addr.i.i.i.i = alloca double*, align 8
>   %work.addr.i.i.i.i = alloca double*, align 8
>   %delvc.addr.i.i.i.i = alloca double*, align 8
>   %qq_old.addr.i.i.i.i = alloca double*, align 8
>   %ql_old.addr.i.i.i.i = alloca double*, align 8
>   %regElemList.addr.i.i.i.i = alloca i32*, align 8
>   %pHalfStep.i.i.i.i = alloca double*, align 8
>   %vnewc.addr.i.i.i = alloca double*, align 8
>   %numElemReg.addr.i.i.i = alloca i32, align 4
>   %regElemList.addr.i.i.i = alloca i32*, align 8
>   %eosvmax.i.i.i = alloca double, align 8
>   %eosvmin.i.i.i = alloca double, align 8
>   %e_old.i.i.i = alloca double*, align 8
>   %delvc.i.i.i = alloca double*, align 8
>   %p_old.i.i.i = alloca double*, align 8
>   %q_old.i.i.i = alloca double*, align 8
>   %compression.i.i.i = alloca double*, align 8
>   %compHalfStep.i.i.i = alloca double*, align 8
>   %qq_old.i.i.i = alloca double*, align 8
>   %ql_old.i.i.i = alloca double*, align 8
>   %work.i.i.i = alloca double*, align 8
>   %p_new.i.i.i = alloca double*, align 8
>   %e_new.i.i.i = alloca double*, align 8
>   %q_new.i.i.i = alloca double*, align 8
>   %numElem.i.i = alloca i32, align 4
>   %eosvmin.i.i = alloca double, align 8
>   %eosvmax.i.i = alloca double, align 8
>   %vnewc.i.i = alloca double*, align 8
>   %r.addr.i.i.i.i = alloca i32, align 4
>   %dt.addr.i30.i = alloca double, align 8
>   %u_cut.addr.i.i = alloca double, align 8
>   %numNodeBC.i.i = alloca i32, align 4
>   %determ.addr.i.i.i.i.i = alloca double*, align 8
>   %x8n.addr.i.i.i.i.i = alloca double*, align 8
>   %y8n.addr.i.i.i.i.i = alloca double*, align 8
>   %z8n.addr.i.i.i.i.i = alloca double*, align 8
>   %dvdx.addr.i.i.i.i.i = alloca double*, align 8
>   %dvdy.addr.i.i.i.i.i = alloca double*, align 8
>   %dvdz.addr.i.i.i.i.i = alloca double*, align 8
>   %hourg.addr.i.i.i.i.i = alloca double, align 8
>   %numElem.addr.i.i.i.i.i = alloca i32, align 4
>   %numNode.addr.i.i.i.i.i = alloca i32, align 4
>   %numthreads.i.i.i.i.i = alloca i32, align 4
>   %numElem8.i.i.i.i.i = alloca i32, align 4
>   %fx_elem.i.i.i.i.i = alloca double*, align 8
>   %fy_elem.i.i.i.i.i = alloca double*, align 8
>   %fz_elem.i.i.i.i.i = alloca double*, align 8
>   %gamma.i.i.i.i.i = alloca [4 x [8 x double]], align 16
>   %determ.addr.i42.i.i.i = alloca double*, align 8
>   %dvdx.i.i.i.i = alloca double*, align 8
>   %dvdy.i.i.i.i = alloca double*, align 8
>   %dvdz.i.i.i.i = alloca double*, align 8
>   %x8n.i.i.i.i = alloca double*, align 8
>   %y8n.i.i.i.i = alloca double*, align 8
>   %z8n.i.i.i.i = alloca double*, align 8
>   %sigxx.addr.i34.i.i.i = alloca double*, align 8
>   %sigyy.addr.i35.i.i.i = alloca double*, align 8
>   %sigzz.addr.i36.i.i.i = alloca double*, align 8
>   %determ.addr.i.i.i.i = alloca double*, align 8
>   %numElem.addr.i.i.i.i = alloca i32, align 4
>   %numNode.addr.i.i.i.i = alloca i32, align 4
>   %numElem8.i.i.i.i = alloca i32, align 4
>   %fx_elem.i.i.i.i = alloca double*, align 8
>   %fy_elem.i.i.i.i = alloca double*, align 8
>   %fz_elem.i.i.i.i = alloca double*, align 8
>   %fx_local.i.i.i.i = alloca [8 x double], align 16
>   %fy_local.i.i.i.i = alloca [8 x double], align 16
>   %fz_local.i.i.i.i = alloca [8 x double], align 16
>   %numthreads.i.i.i.i = alloca i32, align 4
>   %sigxx.addr.i.i.i.i = alloca double*, align 8
>   %sigyy.addr.i.i.i.i = alloca double*, align 8
>   %sigzz.addr.i.i.i.i = alloca double*, align 8
>   %determ.i.i.i = alloca double*, align 8
>   %dt.addr.i.i = alloca double, align 8
>   %m_deltatime.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 75
>   %0 = bitcast double* %m_deltatime.i.i to i64*
>   %1 = load i64, i64* %0, align 8, !tbaa !2
>   %m_u_cut.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 55
>   %2 = bitcast double* %m_u_cut.i.i to i64*
>   %3 = load i64, i64* %2, align 8, !tbaa !39
>   %m_numNode.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 89
>   %4 = load i32, i32* %m_numNode.i.i.i, align 4, !tbaa !6
>   %5 = load i8*, i8** @.apollo.region.handle.17, align 8
>   %6 = icmp eq i8* %5, null
>   br i1 %6, label %7, label %9
> 
> 7:                                                ; preds = %entry
>   %8 = tail call i8* @__apollo_region_create(i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @20, i64 0, i64 0), i32 2)
>   store i8* %8, i8** @.apollo.region.handle.17, align 8
>   br label %9
> 
> 9:                                                ; preds = %7, %entry
>   %10 = phi i8* [ %5, %entry ], [ %8, %7 ]
>   tail call void @__apollo_region_begin(i8* %10)
>   %11 = uitofp i32 %4 to float
>   tail call void @__apollo_region_set_feature(i8* %10, float %11)
>   %12 = tail call i32 @__apollo_region_get_policy(i8* %10)
>   switch i32 %12, label %.split.i.i [
>     i32 0, label %.split.i.i.sink.split
>     i32 1, label %.apollo.case.1.i18.i
>   ]
4600,4601c1912,1913
< ; Function Attrs: nounwind
< declare dso_local void @_ZN6ApolloD1Ev(%class.Apollo* nonnull dereferenceable(128)) unnamed_addr #1
---
> .apollo.case.1.i18.i:                             ; preds = %9
>   br label %.split.i.i.sink.split
4603,4604c1915,1973
< ; Function Attrs: nofree nounwind
< declare dso_local void @__cxa_guard_abort(i64*) local_unnamed_addr #2
---
> .split.i.i.sink.split:                            ; preds = %9, %.apollo.case.1.i18.i
>   %.sink = phi i32 [ 1, %.apollo.case.1.i18.i ], [ 36, %9 ]
>   tail call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num.i36.i, i32 %.sink)
>   br label %.split.i.i
> 
> .split.i.i:                                       ; preds = %.split.i.i.sink.split, %9
>   %numNode.casted.sroa.0.0.insert.ext.i19.i = zext i32 %4 to i64
>   tail call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 2, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, %class.Domain*)* @.omp_outlined..19 to void (i32*, i32*, ...)*), i64 %numNode.casted.sroa.0.0.insert.ext.i19.i, %class.Domain* nonnull %domain)
>   %13 = load i8*, i8** @.apollo.region.handle.17, align 8
>   tail call void @__apollo_region_end(i8* %13)
>   %m_numElem.i.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 88
>   %14 = load i32, i32* %m_numElem.i.i.i.i, align 8, !tbaa !6
>   %cmp.not.i.i.i = icmp eq i32 %14, 0
>   br i1 %cmp.not.i.i.i, label %_ZL17CalcForceForNodesR6Domain.exit.i, label %if.then.i.i.i
> 
> if.then.i.i.i:                                    ; preds = %.split.i.i
>   %m_hgcoef.i.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 56
>   %15 = load double, double* %m_hgcoef.i.i.i.i, align 8, !tbaa !40
>   %conv.i.i.i = sext i32 %14 to i64
>   %mul.i.i.i.i = shl nsw i64 %conv.i.i.i, 3
>   %call.i.i.i.i = tail call noalias i8* @malloc(i64 %mul.i.i.i.i) #7
>   %call.i29.i.i.i = tail call noalias i8* @malloc(i64 %mul.i.i.i.i) #7
>   %call.i31.i.i.i = tail call noalias i8* @malloc(i64 %mul.i.i.i.i) #7
>   %16 = bitcast double** %determ.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #7
>   %call.i33.i.i.i = tail call noalias i8* @malloc(i64 %mul.i.i.i.i) #7
>   %17 = bitcast double** %determ.i.i.i to i8**
>   store i8* %call.i33.i.i.i, i8** %17, align 8, !tbaa !41
>   %18 = bitcast double** %sigxx.addr.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
>   %19 = bitcast double** %sigyy.addr.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19)
>   %20 = bitcast double** %sigzz.addr.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20)
>   %21 = bitcast double** %sigxx.addr.i.i.i.i to i8**
>   store i8* %call.i.i.i.i, i8** %21, align 8, !tbaa !41
>   %22 = bitcast double** %sigyy.addr.i.i.i.i to i8**
>   store i8* %call.i29.i.i.i, i8** %22, align 8, !tbaa !41
>   %23 = bitcast double** %sigzz.addr.i.i.i.i to i8**
>   store i8* %call.i31.i.i.i, i8** %23, align 8, !tbaa !41
>   %24 = load i8*, i8** @.apollo.region.handle.1, align 8
>   %25 = icmp eq i8* %24, null
>   br i1 %25, label %26, label %28
> 
> 26:                                               ; preds = %if.then.i.i.i
>   %27 = tail call i8* @__apollo_region_create(i32 1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @4, i64 0, i64 0), i32 2) #7
>   store i8* %27, i8** @.apollo.region.handle.1, align 8
>   br label %28
> 
> 28:                                               ; preds = %26, %if.then.i.i.i
>   %29 = phi i8* [ %24, %if.then.i.i.i ], [ %27, %26 ]
>   tail call void @__apollo_region_begin(i8* %29) #7
>   %30 = uitofp i32 %14 to float
>   tail call void @__apollo_region_set_feature(i8* %29, float %30) #7
>   %31 = tail call i32 @__apollo_region_get_policy(i8* %29) #7
>   switch i32 %31, label %_ZL23InitStressTermsForElemsR6DomainPdS1_S1_i.exit.i.i.i [
>     i32 0, label %_ZL23InitStressTermsForElemsR6DomainPdS1_S1_i.exit.i.i.i.sink.split
>     i32 1, label %.apollo.case.1.i.i.i.i
>   ]
4606,4607c1975,1976
< ; Function Attrs: nofree nounwind
< declare dso_local void @__cxa_guard_release(i64*) local_unnamed_addr #2
---
> .apollo.case.1.i.i.i.i:                           ; preds = %28
>   br label %_ZL23InitStressTermsForElemsR6DomainPdS1_S1_i.exit.i.i.i.sink.split
4609,4811c1978,2053
< ; Function Attrs: inlinehint norecurse uwtable
< define internal fastcc void @_ZL16LagrangeElementsR6Domaini(%class.Domain* nonnull align 8 dereferenceable(1312) %0, i32 %1) unnamed_addr #16 personality i32 (...)* @__gxx_personality_v0 {
<   %3 = alloca %"class.std::allocator.30", align 1
<   %4 = alloca %"class.std::allocator.30", align 1
<   %5 = alloca %"class.std::basic_string", align 8
<   %6 = alloca %"class.std::allocator.30", align 1
<   %7 = alloca %"class.std::vector.15", align 8
<   %8 = alloca %"class.std::allocator.30", align 1
<   %9 = alloca %"class.std::allocator.30", align 1
<   %10 = alloca %"class.std::allocator.30", align 1
<   %11 = alloca %"class.std::allocator.30", align 1
<   %12 = alloca double*, align 8
<   %13 = alloca double*, align 8
<   %14 = alloca double*, align 8
<   %15 = alloca double*, align 8
<   %16 = alloca double*, align 8
<   %17 = alloca i32, align 4
<   %18 = alloca i32*, align 8
<   %19 = alloca %"class.std::basic_string", align 8
<   %20 = alloca %"class.std::allocator.30", align 1
<   %21 = alloca %"class.std::vector.15", align 8
<   %22 = alloca %"class.std::allocator.30", align 1
<   %23 = alloca %"class.std::allocator.30", align 1
<   %24 = alloca %"class.std::allocator.30", align 1
<   %25 = alloca %"class.std::allocator.30", align 1
<   %26 = alloca %"class.std::allocator.30", align 1
<   %27 = alloca %"class.std::allocator.30", align 1
<   %28 = alloca %"class.std::allocator.30", align 1
<   %29 = alloca %"class.std::allocator.30", align 1
<   %30 = alloca %"class.std::allocator.30", align 1
<   %31 = alloca %"class.std::allocator.30", align 1
<   %32 = alloca %"class.std::allocator.30", align 1
<   %33 = alloca %"class.std::allocator.30", align 1
<   %34 = alloca double*, align 8
<   %35 = alloca double*, align 8
<   %36 = alloca double*, align 8
<   %37 = alloca double*, align 8
<   %38 = alloca double*, align 8
<   %39 = alloca double*, align 8
<   %40 = alloca double*, align 8
<   %41 = alloca double*, align 8
<   %42 = alloca double*, align 8
<   %43 = alloca double*, align 8
<   %44 = alloca double*, align 8
<   %45 = alloca double*, align 8
<   %46 = alloca double*, align 8
<   %47 = alloca double*, align 8
<   %48 = alloca i32*, align 8
<   %49 = alloca double*, align 8
<   %50 = alloca %"class.std::basic_string", align 8
<   %51 = alloca %"class.std::allocator.30", align 1
<   %52 = alloca %"class.std::vector.15", align 8
<   %53 = alloca %"class.std::basic_string", align 8
<   %54 = alloca %"class.std::allocator.30", align 1
<   %55 = alloca %"class.std::vector.15", align 8
<   %56 = alloca %"class.std::basic_string", align 8
<   %57 = alloca %"class.std::allocator.30", align 1
<   %58 = alloca %"class.std::vector.15", align 8
<   %59 = alloca %"class.std::basic_string", align 8
<   %60 = alloca %"class.std::allocator.30", align 1
<   %61 = alloca %"class.std::vector.15", align 8
<   %62 = alloca %"class.std::basic_string", align 8
<   %63 = alloca %"class.std::allocator.30", align 1
<   %64 = alloca %"class.std::vector.15", align 8
<   %65 = alloca %"class.std::allocator.30", align 1
<   %66 = alloca %"class.std::allocator.30", align 1
<   %67 = alloca double*, align 8
<   %68 = alloca i32, align 4
<   %69 = alloca i32*, align 8
<   %70 = alloca double, align 8
<   %71 = alloca double, align 8
<   %72 = alloca double*, align 8
<   %73 = alloca double*, align 8
<   %74 = alloca double*, align 8
<   %75 = alloca double*, align 8
<   %76 = alloca double*, align 8
<   %77 = alloca double*, align 8
<   %78 = alloca double*, align 8
<   %79 = alloca double*, align 8
<   %80 = alloca double*, align 8
<   %81 = alloca double*, align 8
<   %82 = alloca double*, align 8
<   %83 = alloca double*, align 8
<   %84 = alloca %"class.std::basic_string", align 8
<   %85 = alloca %"class.std::allocator.30", align 1
<   %86 = alloca %"class.std::vector.15", align 8
<   %87 = alloca %"class.std::basic_string", align 8
<   %88 = alloca %"class.std::allocator.30", align 1
<   %89 = alloca %"class.std::vector.15", align 8
<   %90 = alloca i32, align 4
<   %91 = alloca double, align 8
<   %92 = alloca double, align 8
<   %93 = alloca double*, align 8
<   %94 = alloca %"class.std::basic_string", align 8
<   %95 = alloca %"class.std::allocator.30", align 1
<   %96 = alloca %"class.std::vector.15", align 8
<   %97 = alloca %"class.std::allocator.30", align 1
<   %98 = alloca %"class.std::allocator.30", align 1
<   %99 = alloca %"class.std::basic_string", align 8
<   %100 = alloca %"class.std::allocator.30", align 1
<   %101 = alloca %"class.std::vector.15", align 8
<   %102 = alloca %"class.std::allocator.30", align 1
<   %103 = alloca %"class.std::allocator.30", align 1
<   %104 = alloca i32, align 4
<   %105 = alloca %"class.std::basic_string", align 8
<   %106 = alloca %"class.std::allocator.30", align 1
<   %107 = alloca %"class.std::vector.15", align 8
<   %108 = alloca %"class.std::allocator.30", align 1
<   %109 = alloca %"class.std::allocator.30", align 1
<   %110 = alloca %"class.std::basic_string", align 8
<   %111 = alloca %"class.std::allocator.30", align 1
<   %112 = alloca %"class.std::vector.15", align 8
<   %113 = bitcast %"class.std::vector.15"* %112 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %113)
<   %114 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 88
<   %115 = load i32, i32* %114, align 8, !tbaa !12
<   %116 = icmp sgt i32 %115, 0
<   br i1 %116, label %117, label %245
< 
< 117:                                              ; preds = %2
<   %118 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 75
<   %119 = load double, double* %118, align 8, !tbaa !2
<   %120 = zext i32 %115 to i64
<   %121 = shl nuw nsw i64 %120, 3
<   %122 = tail call noalias i8* @malloc(i64 %121) #10
<   %123 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 29
<   %124 = bitcast double** %123 to i8**
<   store i8* %122, i8** %124, align 8, !tbaa !25
<   %125 = tail call noalias i8* @malloc(i64 %121) #10
<   %126 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 30
<   %127 = bitcast double** %126 to i8**
<   store i8* %125, i8** %127, align 8, !tbaa !29
<   %128 = tail call noalias i8* @malloc(i64 %121) #10
<   %129 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 31
<   %130 = bitcast double** %129 to i8**
<   store i8* %128, i8** %130, align 8, !tbaa !30
<   tail call void @_Z22CalcKinematicsForElemsR6Domaindi(%class.Domain* nonnull align 8 dereferenceable(1312) %0, double %119, i32 %115)
<   %131 = sitofp i32 %115 to float
<   %132 = tail call noalias nonnull i8* @_Znwm(i64 4) #26
<   %133 = bitcast i8* %132 to float*
<   store float %131, float* %133, align 4
<   %134 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcLagrangeElementsR6DomainE12apolloRegion, align 8, !tbaa !6
<   %135 = icmp eq %"class.Apollo::Region"* %134, null
<   br i1 %135, label %136, label %191
< 
< 136:                                              ; preds = %117
<   %137 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %138 unwind label %164
< 
< 138:                                              ; preds = %136
<   %139 = bitcast %"class.std::basic_string"* %110 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %139) #10
<   %140 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %111, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %140) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %110, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %111)
<           to label %141 unwind label %166
< 
< 141:                                              ; preds = %138
<   %142 = bitcast i8* %137 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %142, i32 1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.40, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %110)
<           to label %143 unwind label %168
< 
< 143:                                              ; preds = %141
<   store i8* %137, i8** bitcast (%"class.Apollo::Region"** @_ZZL20CalcLagrangeElementsR6DomainE12apolloRegion to i8**), align 8, !tbaa !6
<   %144 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %110, i64 0, i32 0, i32 0
<   %145 = load i8*, i8** %144, align 8, !tbaa !8
<   %146 = getelementptr inbounds i8, i8* %145, i64 -24
<   %147 = bitcast i8* %146 to %"struct.std::basic_string<char>::_Rep"*
<   %148 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %109, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %148) #10
<   %149 = icmp eq i8* %146, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %149, label %162, label %150, !prof !11
< 
< 150:                                              ; preds = %143
<   %151 = getelementptr inbounds i8, i8* %145, i64 -8
<   %152 = bitcast i8* %151 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %153, label %155
< 
< 153:                                              ; preds = %150
<   %154 = atomicrmw volatile add i32* %152, i32 -1 acq_rel
<   br label %158
< 
< 155:                                              ; preds = %150
<   %156 = load i32, i32* %152, align 4, !tbaa !12
<   %157 = add nsw i32 %156, -1
<   store i32 %157, i32* %152, align 4, !tbaa !12
<   br label %158
< 
< 158:                                              ; preds = %155, %153
<   %159 = phi i32 [ %154, %153 ], [ %156, %155 ]
<   %160 = icmp slt i32 %159, 1
<   br i1 %160, label %161, label %162
< 
< 161:                                              ; preds = %158
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %147, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %109) #10
<   br label %162
< 
< 162:                                              ; preds = %161, %158, %143
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %148) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %140) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %139) #10
<   %163 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcLagrangeElementsR6DomainE12apolloRegion, align 8, !tbaa !6
<   br label %191
---
> _ZL23InitStressTermsForElemsR6DomainPdS1_S1_i.exit.i.i.i.sink.split: ; preds = %28, %.apollo.case.1.i.i.i.i
>   %.sink41 = phi i32 [ 1, %.apollo.case.1.i.i.i.i ], [ 36, %28 ]
>   tail call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num.i36.i, i32 %.sink41) #7
>   br label %_ZL23InitStressTermsForElemsR6DomainPdS1_S1_i.exit.i.i.i
> 
> _ZL23InitStressTermsForElemsR6DomainPdS1_S1_i.exit.i.i.i: ; preds = %_ZL23InitStressTermsForElemsR6DomainPdS1_S1_i.exit.i.i.i.sink.split, %28
>   %numElem.casted.sroa.0.0.insert.ext.i.i.i.i = zext i32 %14 to i64
>   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 5, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, double**, double**, double**, %class.Domain*)* @.omp_outlined..21 to void (i32*, i32*, ...)*), i64 %numElem.casted.sroa.0.0.insert.ext.i.i.i.i, double** nonnull %sigxx.addr.i.i.i.i, double** nonnull %sigyy.addr.i.i.i.i, double** nonnull %sigzz.addr.i.i.i.i, %class.Domain* nonnull %domain) #7
>   %32 = load i8*, i8** @.apollo.region.handle.1, align 8
>   call void @__apollo_region_end(i8* %32) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20)
>   %33 = bitcast double** %determ.i.i.i to i64*
>   %34 = load i64, i64* %33, align 8, !tbaa !41
>   %35 = load i32, i32* %m_numNode.i.i.i, align 4, !tbaa !6
>   %36 = bitcast double** %sigxx.addr.i34.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36)
>   %37 = bitcast double** %sigyy.addr.i35.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
>   %38 = bitcast double** %sigzz.addr.i36.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38)
>   %39 = bitcast double** %determ.addr.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39)
>   %40 = bitcast i32* %numElem.addr.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %40)
>   %41 = bitcast i32* %numNode.addr.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %41)
>   %42 = bitcast double** %sigxx.addr.i34.i.i.i to i8**
>   store i8* %call.i.i.i.i, i8** %42, align 8, !tbaa !41
>   %43 = bitcast double** %sigyy.addr.i35.i.i.i to i8**
>   store i8* %call.i29.i.i.i, i8** %43, align 8, !tbaa !41
>   %44 = bitcast double** %sigzz.addr.i36.i.i.i to i8**
>   store i8* %call.i31.i.i.i, i8** %44, align 8, !tbaa !41
>   %45 = bitcast double** %determ.addr.i.i.i.i to i64*
>   store i64 %34, i64* %45, align 8, !tbaa !41
>   store i32 %14, i32* %numElem.addr.i.i.i.i, align 4, !tbaa !6
>   store i32 %35, i32* %numNode.addr.i.i.i.i, align 4, !tbaa !6
>   %46 = bitcast i32* %numElem8.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %46) #7
>   %mul.i37.i.i.i = shl nsw i32 %14, 3
>   store i32 %mul.i37.i.i.i, i32* %numElem8.i.i.i.i, align 4, !tbaa !6
>   %47 = bitcast double** %fx_elem.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #7
>   %48 = bitcast double** %fy_elem.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %48) #7
>   %49 = bitcast double** %fz_elem.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %49) #7
>   %50 = bitcast [8 x double]* %fx_local.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %50) #7
>   %51 = bitcast [8 x double]* %fy_local.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %51) #7
>   %52 = bitcast [8 x double]* %fz_local.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %52) #7
>   %53 = bitcast i32* %numthreads.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %53) #7
>   %54 = load i8*, i8** @.apollo.region.handle.18, align 8
>   %55 = icmp eq i8* %54, null
>   br i1 %55, label %56, label %58
> 
> 56:                                               ; preds = %_ZL23InitStressTermsForElemsR6DomainPdS1_S1_i.exit.i.i.i
>   %57 = call i8* @__apollo_region_create(i32 2, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @21, i64 0, i64 0), i32 2)
>   store i8* %57, i8** @.apollo.region.handle.18, align 8
>   br label %58
> 
> 58:                                               ; preds = %56, %_ZL23InitStressTermsForElemsR6DomainPdS1_S1_i.exit.i.i.i
>   %59 = phi i8* [ %54, %_ZL23InitStressTermsForElemsR6DomainPdS1_S1_i.exit.i.i.i ], [ %57, %56 ]
>   call void @__apollo_region_begin(i8* %59)
>   %60 = uitofp i32 %35 to float
>   call void @__apollo_region_set_feature(i8* %59, float %60)
>   call void @__apollo_region_set_feature(i8* %59, float %30)
>   %61 = call i32 @__apollo_region_get_policy(i8* %59)
>   switch i32 %61, label %.split.i.i.i.i [
>     i32 0, label %.split.i.i.i.i.sink.split
>     i32 1, label %.apollo.case.1.i40.i.i.i
>   ]
4813,4816c2055,2056
< 164:                                              ; preds = %214, %211, %191, %136
<   %165 = landingpad { i8*, i32 }
<           cleanup
<   br label %243
---
> .apollo.case.1.i40.i.i.i:                         ; preds = %58
>   br label %.split.i.i.i.i.sink.split
4818,4821c2058,2126
< 166:                                              ; preds = %138
<   %167 = landingpad { i8*, i32 }
<           cleanup
<   br label %189
---
> .split.i.i.i.i.sink.split:                        ; preds = %58, %.apollo.case.1.i40.i.i.i
>   %.sink42 = phi i32 [ 1, %.apollo.case.1.i40.i.i.i ], [ 36, %58 ]
>   call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num.i36.i, i32 %.sink42)
>   br label %.split.i.i.i.i
> 
> .split.i.i.i.i:                                   ; preds = %.split.i.i.i.i.sink.split, %58
>   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 15, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, double**, i32*, double**, double**, i32*, %class.Domain*, double**, double**, double**, double**, [8 x double]*, [8 x double]*, [8 x double]*, i32*)* @.omp_outlined..22 to void (i32*, i32*, ...)*), i32* nonnull %numthreads.i.i.i.i, double** nonnull %fx_elem.i.i.i.i, i32* nonnull %numElem8.i.i.i.i, double** nonnull %fy_elem.i.i.i.i, double** nonnull %fz_elem.i.i.i.i, i32* nonnull %numElem.addr.i.i.i.i, %class.Domain* nonnull %domain, double** nonnull %determ.addr.i.i.i.i, double** nonnull %sigxx.addr.i34.i.i.i, double** nonnull %sigyy.addr.i35.i.i.i, double** nonnull %sigzz.addr.i36.i.i.i, [8 x double]* nonnull %fx_local.i.i.i.i, [8 x double]* nonnull %fy_local.i.i.i.i, [8 x double]* nonnull %fz_local.i.i.i.i, i32* nonnull %numNode.addr.i.i.i.i)
>   %62 = load i8*, i8** @.apollo.region.handle.18, align 8
>   call void @__apollo_region_end(i8* %62)
>   %63 = load i32, i32* %numthreads.i.i.i.i, align 4, !tbaa !6
>   %cmp.i.i.i.i = icmp sgt i32 %63, 1
>   br i1 %cmp.i.i.i.i, label %if.then.i41.i.i.i, label %_ZL23IntegrateStressForElemsR6DomainPdS1_S1_S1_ii.exit.i.i.i
> 
> if.then.i41.i.i.i:                                ; preds = %.split.i.i.i.i
>   %64 = load double*, double** %fz_elem.i.i.i.i, align 8, !tbaa !41
>   %cmp.not.i.i.i.i.i = icmp eq double* %64, null
>   br i1 %cmp.not.i.i.i.i.i, label %_Z7ReleaseIdEvPPT_.exit.i.i.i.i, label %if.then.i.i.i.i.i
> 
> if.then.i.i.i.i.i:                                ; preds = %if.then.i41.i.i.i
>   %65 = bitcast double* %64 to i8*
>   call void @free(i8* %65) #7
>   store double* null, double** %fz_elem.i.i.i.i, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit.i.i.i.i
> 
> _Z7ReleaseIdEvPPT_.exit.i.i.i.i:                  ; preds = %if.then.i.i.i.i.i, %if.then.i41.i.i.i
>   %66 = load double*, double** %fy_elem.i.i.i.i, align 8, !tbaa !41
>   %cmp.not.i2.i.i.i.i = icmp eq double* %66, null
>   br i1 %cmp.not.i2.i.i.i.i, label %_Z7ReleaseIdEvPPT_.exit4.i.i.i.i, label %if.then.i3.i.i.i.i
> 
> if.then.i3.i.i.i.i:                               ; preds = %_Z7ReleaseIdEvPPT_.exit.i.i.i.i
>   %67 = bitcast double* %66 to i8*
>   call void @free(i8* %67) #7
>   store double* null, double** %fy_elem.i.i.i.i, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit4.i.i.i.i
> 
> _Z7ReleaseIdEvPPT_.exit4.i.i.i.i:                 ; preds = %if.then.i3.i.i.i.i, %_Z7ReleaseIdEvPPT_.exit.i.i.i.i
>   %68 = load double*, double** %fx_elem.i.i.i.i, align 8, !tbaa !41
>   %cmp.not.i5.i.i.i.i = icmp eq double* %68, null
>   br i1 %cmp.not.i5.i.i.i.i, label %_ZL23IntegrateStressForElemsR6DomainPdS1_S1_S1_ii.exit.i.i.i, label %if.then.i6.i.i.i.i
> 
> if.then.i6.i.i.i.i:                               ; preds = %_Z7ReleaseIdEvPPT_.exit4.i.i.i.i
>   %69 = bitcast double* %68 to i8*
>   call void @free(i8* %69) #7
>   store double* null, double** %fx_elem.i.i.i.i, align 8, !tbaa !41
>   br label %_ZL23IntegrateStressForElemsR6DomainPdS1_S1_S1_ii.exit.i.i.i
> 
> _ZL23IntegrateStressForElemsR6DomainPdS1_S1_S1_ii.exit.i.i.i: ; preds = %if.then.i6.i.i.i.i, %_Z7ReleaseIdEvPPT_.exit4.i.i.i.i, %.split.i.i.i.i
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %53) #7
>   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %52) #7
>   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %51) #7
>   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %50) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %46) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %40)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %41)
>   %70 = load i8*, i8** @.apollo.region.handle.6, align 8
>   %71 = icmp eq i8* %70, null
>   br i1 %71, label %72, label %74
> 
> 72:                                               ; preds = %_ZL23IntegrateStressForElemsR6DomainPdS1_S1_S1_ii.exit.i.i.i
>   %73 = call i8* @__apollo_region_create(i32 1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @9, i64 0, i64 0), i32 2)
>   store i8* %73, i8** @.apollo.region.handle.6, align 8
>   br label %74
4823,4956c2128,2136
< 168:                                              ; preds = %141
<   %169 = landingpad { i8*, i32 }
<           cleanup
<   %170 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %110, i64 0, i32 0, i32 0
<   %171 = load i8*, i8** %170, align 8, !tbaa !8
<   %172 = getelementptr inbounds i8, i8* %171, i64 -24
<   %173 = bitcast i8* %172 to %"struct.std::basic_string<char>::_Rep"*
<   %174 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %108, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %174) #10
<   %175 = icmp eq i8* %172, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %175, label %188, label %176, !prof !11
< 
< 176:                                              ; preds = %168
<   %177 = getelementptr inbounds i8, i8* %171, i64 -8
<   %178 = bitcast i8* %177 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %179, label %181
< 
< 179:                                              ; preds = %176
<   %180 = atomicrmw volatile add i32* %178, i32 -1 acq_rel
<   br label %184
< 
< 181:                                              ; preds = %176
<   %182 = load i32, i32* %178, align 4, !tbaa !12
<   %183 = add nsw i32 %182, -1
<   store i32 %183, i32* %178, align 4, !tbaa !12
<   br label %184
< 
< 184:                                              ; preds = %181, %179
<   %185 = phi i32 [ %180, %179 ], [ %182, %181 ]
<   %186 = icmp slt i32 %185, 1
<   br i1 %186, label %187, label %188
< 
< 187:                                              ; preds = %184
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %173, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %108) #10
<   br label %188
< 
< 188:                                              ; preds = %187, %184, %168
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %174) #10
<   br label %189
< 
< 189:                                              ; preds = %188, %166
<   %190 = phi { i8*, i32 } [ %169, %188 ], [ %167, %166 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %140) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %139) #10
<   call void @_ZdlPv(i8* nonnull %137) #28
<   br label %243
< 
< 191:                                              ; preds = %162, %117
<   %192 = phi %"class.Apollo::Region"* [ %163, %162 ], [ %134, %117 ]
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %113, i8 0, i64 24, i1 false) #10
<   %193 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %194 unwind label %164
< 
< 194:                                              ; preds = %191
<   %195 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %112, i64 0, i32 0, i32 0, i32 0
<   %196 = bitcast %"class.std::vector.15"* %112 to i8**
<   store i8* %193, i8** %196, align 8, !tbaa !14
<   %197 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %112, i64 0, i32 0, i32 0, i32 1
<   %198 = bitcast float** %197 to i8**
<   %199 = getelementptr inbounds i8, i8* %193, i64 4
<   %200 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %112, i64 0, i32 0, i32 0, i32 2
<   %201 = bitcast float** %200 to i8**
<   store i8* %199, i8** %201, align 8, !tbaa !17
<   %202 = bitcast i8* %132 to i32*
<   %203 = bitcast i8* %193 to i32*
<   %204 = load i32, i32* %202, align 4
<   store i32 %204, i32* %203, align 4
<   store i8* %199, i8** %198, align 8, !tbaa !18
<   %205 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %192, %"class.std::vector.15"* nonnull %112)
<           to label %206 unwind label %237
< 
< 206:                                              ; preds = %194
<   %207 = load float*, float** %195, align 8, !tbaa !14
<   %208 = icmp eq float* %207, null
<   br i1 %208, label %211, label %209
< 
< 209:                                              ; preds = %206
<   %210 = bitcast float* %207 to i8*
<   call void @_ZdlPv(i8* nonnull %210) #10
<   br label %211
< 
< 211:                                              ; preds = %209, %206
<   %212 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcLagrangeElementsR6DomainE12apolloRegion, align 8, !tbaa !6
<   %213 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %212)
<           to label %214 unwind label %164
< 
< 214:                                              ; preds = %211
<   %215 = icmp eq i32 %213, 1
<   %216 = select i1 %215, i32 1, i32 36
<   %217 = icmp eq i32 %213, 0
<   %218 = select i1 %217, i32 36, i32 %216
<   call void @omp_set_num_threads(i32 %218) #10
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 2, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, %class.Domain*)* @.omp_outlined..41 to void (i32*, i32*, ...)*), i64 %120, %class.Domain* nonnull %0)
<   %219 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcLagrangeElementsR6DomainE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %219)
<           to label %220 unwind label %164
< 
< 220:                                              ; preds = %214
<   %221 = load double*, double** %129, align 8, !tbaa !6
<   %222 = icmp eq double* %221, null
<   br i1 %222, label %225, label %223
< 
< 223:                                              ; preds = %220
<   %224 = bitcast double* %221 to i8*
<   call void @free(i8* %224) #10
<   store double* null, double** %129, align 8, !tbaa !6
<   br label %225
< 
< 225:                                              ; preds = %223, %220
<   %226 = load double*, double** %126, align 8, !tbaa !6
<   %227 = icmp eq double* %226, null
<   br i1 %227, label %230, label %228
< 
< 228:                                              ; preds = %225
<   %229 = bitcast double* %226 to i8*
<   call void @free(i8* %229) #10
<   store double* null, double** %126, align 8, !tbaa !6
<   br label %230
< 
< 230:                                              ; preds = %228, %225
<   %231 = load double*, double** %123, align 8, !tbaa !6
<   %232 = icmp eq double* %231, null
<   br i1 %232, label %235, label %233
< 
< 233:                                              ; preds = %230
<   %234 = bitcast double* %231 to i8*
<   call void @free(i8* %234) #10
<   store double* null, double** %123, align 8, !tbaa !6
<   br label %235
< 
< 235:                                              ; preds = %233, %230
<   call void @_ZdlPv(i8* nonnull %132) #10
<   %236 = load i32, i32* %114, align 8, !tbaa !12
<   br label %245
---
> 74:                                               ; preds = %72, %_ZL23IntegrateStressForElemsR6DomainPdS1_S1_S1_ii.exit.i.i.i
>   %75 = phi i8* [ %70, %_ZL23IntegrateStressForElemsR6DomainPdS1_S1_S1_ii.exit.i.i.i ], [ %73, %72 ]
>   call void @__apollo_region_begin(i8* %75)
>   call void @__apollo_region_set_feature(i8* %75, float %30)
>   %76 = call i32 @__apollo_region_get_policy(i8* %75)
>   switch i32 %76, label %.split.i.i.i [
>     i32 0, label %.split.i.i.i.sink.split
>     i32 1, label %.apollo.case.1.i.i.i
>   ]
4958,5089c2138,2139
< 237:                                              ; preds = %194
<   %238 = landingpad { i8*, i32 }
<           cleanup
<   %239 = load float*, float** %195, align 8, !tbaa !14
<   %240 = icmp eq float* %239, null
<   br i1 %240, label %243, label %241
< 
< 241:                                              ; preds = %237
<   %242 = bitcast float* %239 to i8*
<   call void @_ZdlPv(i8* nonnull %242) #10
<   br label %243
< 
< 243:                                              ; preds = %241, %237, %189, %164
<   %244 = phi { i8*, i32 } [ %165, %164 ], [ %190, %189 ], [ %238, %237 ], [ %238, %241 ]
<   call void @_ZdlPv(i8* nonnull %132) #10
<   resume { i8*, i32 } %244
< 
< 245:                                              ; preds = %2, %235
<   %246 = phi i32 [ %115, %2 ], [ %236, %235 ]
<   call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %113)
<   %247 = icmp eq i32 %246, 0
<   br i1 %247, label %531, label %248
< 
< 248:                                              ; preds = %245
<   %249 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 85
<   %250 = load i32, i32* %249, align 4, !tbaa !12
<   %251 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 86
<   %252 = load i32, i32* %251, align 8, !tbaa !12
<   %253 = mul i32 %252, %250
<   %254 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 87
<   %255 = load i32, i32* %254, align 4, !tbaa !12
<   %256 = add i32 %252, %250
<   %257 = mul i32 %255, %256
<   %258 = add i32 %257, %253
<   %259 = shl i32 %258, 1
<   %260 = add i32 %259, %246
<   %261 = sext i32 %246 to i64
<   %262 = shl nsw i64 %261, 3
<   %263 = call noalias i8* @malloc(i64 %262) #10
<   %264 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 35
<   %265 = bitcast double** %264 to i8**
<   store i8* %263, i8** %265, align 8, !tbaa !61
<   %266 = call noalias i8* @malloc(i64 %262) #10
<   %267 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 36
<   %268 = bitcast double** %267 to i8**
<   store i8* %266, i8** %268, align 8, !tbaa !62
<   %269 = call noalias i8* @malloc(i64 %262) #10
<   %270 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 37
<   %271 = bitcast double** %270 to i8**
<   store i8* %269, i8** %271, align 8, !tbaa !63
<   %272 = sext i32 %260 to i64
<   %273 = shl nsw i64 %272, 3
<   %274 = call noalias i8* @malloc(i64 %273) #10
<   %275 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 32
<   %276 = bitcast double** %275 to i8**
<   store i8* %274, i8** %276, align 8, !tbaa !64
<   %277 = call noalias i8* @malloc(i64 %273) #10
<   %278 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 33
<   %279 = bitcast double** %278 to i8**
<   store i8* %277, i8** %279, align 8, !tbaa !65
<   %280 = call noalias i8* @malloc(i64 %273) #10
<   %281 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 34
<   %282 = bitcast double** %281 to i8**
<   store i8* %280, i8** %282, align 8, !tbaa !66
<   %283 = bitcast %"class.std::vector.15"* %101 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %283)
<   %284 = sitofp i32 %246 to float
<   %285 = call noalias nonnull i8* @_Znwm(i64 4) #26
<   %286 = bitcast i8* %285 to float*
<   store float %284, float* %286, align 4
<   %287 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL31CalcMonotonicQGradientsForElemsR6DomainE12apolloRegion, align 8, !tbaa !6
<   %288 = icmp eq %"class.Apollo::Region"* %287, null
<   br i1 %288, label %289, label %344
< 
< 289:                                              ; preds = %248
<   %290 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %291 unwind label %317
< 
< 291:                                              ; preds = %289
<   %292 = bitcast %"class.std::basic_string"* %99 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %292) #10
<   %293 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %100, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %293) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %99, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %100)
<           to label %294 unwind label %319
< 
< 294:                                              ; preds = %291
<   %295 = bitcast i8* %290 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %295, i32 1, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.42, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %99)
<           to label %296 unwind label %321
< 
< 296:                                              ; preds = %294
<   store i8* %290, i8** bitcast (%"class.Apollo::Region"** @_ZZL31CalcMonotonicQGradientsForElemsR6DomainE12apolloRegion to i8**), align 8, !tbaa !6
<   %297 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %99, i64 0, i32 0, i32 0
<   %298 = load i8*, i8** %297, align 8, !tbaa !8
<   %299 = getelementptr inbounds i8, i8* %298, i64 -24
<   %300 = bitcast i8* %299 to %"struct.std::basic_string<char>::_Rep"*
<   %301 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %98, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %301) #10
<   %302 = icmp eq i8* %299, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %302, label %315, label %303, !prof !11
< 
< 303:                                              ; preds = %296
<   %304 = getelementptr inbounds i8, i8* %298, i64 -8
<   %305 = bitcast i8* %304 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %306, label %308
< 
< 306:                                              ; preds = %303
<   %307 = atomicrmw volatile add i32* %305, i32 -1 acq_rel
<   br label %311
< 
< 308:                                              ; preds = %303
<   %309 = load i32, i32* %305, align 4, !tbaa !12
<   %310 = add nsw i32 %309, -1
<   store i32 %310, i32* %305, align 4, !tbaa !12
<   br label %311
< 
< 311:                                              ; preds = %308, %306
<   %312 = phi i32 [ %307, %306 ], [ %309, %308 ]
<   %313 = icmp slt i32 %312, 1
<   br i1 %313, label %314, label %315
< 
< 314:                                              ; preds = %311
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %300, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %98) #10
<   br label %315
< 
< 315:                                              ; preds = %314, %311, %296
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %301) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %293) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %292) #10
<   %316 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL31CalcMonotonicQGradientsForElemsR6DomainE12apolloRegion, align 8, !tbaa !6
<   br label %344
---
> .apollo.case.1.i.i.i:                             ; preds = %74
>   br label %.split.i.i.i.sink.split
5091,5094c2141,2197
< 317:                                              ; preds = %367, %364, %344, %289
<   %318 = landingpad { i8*, i32 }
<           cleanup
<   br label %380
---
> .split.i.i.i.sink.split:                          ; preds = %74, %.apollo.case.1.i.i.i
>   %.sink43 = phi i32 [ 1, %.apollo.case.1.i.i.i ], [ 36, %74 ]
>   call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num.i36.i, i32 %.sink43)
>   br label %.split.i.i.i
> 
> .split.i.i.i:                                     ; preds = %.split.i.i.i.sink.split, %74
>   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 2, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, double**)* @.omp_outlined..20 to void (i32*, i32*, ...)*), i64 %numElem.casted.sroa.0.0.insert.ext.i.i.i.i, double** nonnull %determ.i.i.i)
>   %77 = load i8*, i8** @.apollo.region.handle.6, align 8
>   call void @__apollo_region_end(i8* %77)
>   %78 = load i64, i64* %33, align 8, !tbaa !41
>   %79 = bitcast double** %determ.addr.i42.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %79)
>   %80 = bitcast double** %determ.addr.i42.i.i.i to i64*
>   store i64 %78, i64* %80, align 8, !tbaa !41
>   %81 = load i32, i32* %m_numElem.i.i.i.i, align 8, !tbaa !6
>   %mul.i43.i.i.i = shl nsw i32 %81, 3
>   %82 = bitcast double** %dvdx.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %82) #7
>   %conv.i.i.i.i = sext i32 %mul.i43.i.i.i to i64
>   %mul.i.i.i.i.i = shl nsw i64 %conv.i.i.i.i, 3
>   %call.i.i.i.i.i = call noalias i8* @malloc(i64 %mul.i.i.i.i.i) #7
>   %83 = bitcast double** %dvdx.i.i.i.i to i8**
>   store i8* %call.i.i.i.i.i, i8** %83, align 8, !tbaa !41
>   %84 = bitcast double** %dvdy.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %84) #7
>   %call.i28.i.i.i.i = call noalias i8* @malloc(i64 %mul.i.i.i.i.i) #7
>   %85 = bitcast double** %dvdy.i.i.i.i to i8**
>   store i8* %call.i28.i.i.i.i, i8** %85, align 8, !tbaa !41
>   %86 = bitcast double** %dvdz.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %86) #7
>   %call.i30.i.i.i.i = call noalias i8* @malloc(i64 %mul.i.i.i.i.i) #7
>   %87 = bitcast double** %dvdz.i.i.i.i to i8**
>   store i8* %call.i30.i.i.i.i, i8** %87, align 8, !tbaa !41
>   %88 = bitcast double** %x8n.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %88) #7
>   %call.i32.i.i.i.i = call noalias i8* @malloc(i64 %mul.i.i.i.i.i) #7
>   %89 = bitcast double** %x8n.i.i.i.i to i8**
>   store i8* %call.i32.i.i.i.i, i8** %89, align 8, !tbaa !41
>   %90 = bitcast double** %y8n.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %90) #7
>   %call.i34.i.i.i.i = call noalias i8* @malloc(i64 %mul.i.i.i.i.i) #7
>   %91 = bitcast double** %y8n.i.i.i.i to i8**
>   store i8* %call.i34.i.i.i.i, i8** %91, align 8, !tbaa !41
>   %92 = bitcast double** %z8n.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %92) #7
>   %call.i36.i.i.i.i = call noalias i8* @malloc(i64 %mul.i.i.i.i.i) #7
>   %93 = bitcast double** %z8n.i.i.i.i to i8**
>   store i8* %call.i36.i.i.i.i, i8** %93, align 8, !tbaa !41
>   %numElem.casted.sroa.0.0.insert.ext.i44.i.i.i = zext i32 %81 to i64
>   %94 = load i8*, i8** @.apollo.region.handle.10, align 8
>   %95 = icmp eq i8* %94, null
>   br i1 %95, label %96, label %98
> 
> 96:                                               ; preds = %.split.i.i.i
>   %97 = call i8* @__apollo_region_create(i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @13, i64 0, i64 0), i32 2)
>   store i8* %97, i8** @.apollo.region.handle.10, align 8
>   br label %98
5096,5099c2199,2208
< 319:                                              ; preds = %291
<   %320 = landingpad { i8*, i32 }
<           cleanup
<   br label %342
---
> 98:                                               ; preds = %96, %.split.i.i.i
>   %99 = phi i8* [ %94, %.split.i.i.i ], [ %97, %96 ]
>   call void @__apollo_region_begin(i8* %99)
>   %100 = uitofp i32 %81 to float
>   call void @__apollo_region_set_feature(i8* %99, float %100)
>   %101 = call i32 @__apollo_region_get_policy(i8* %99)
>   switch i32 %101, label %.split.i48.i.i.i [
>     i32 0, label %.split.i48.i.i.i.sink.split
>     i32 1, label %.apollo.case.1.i46.i.i.i
>   ]
5101,5197c2210,2211
< 321:                                              ; preds = %294
<   %322 = landingpad { i8*, i32 }
<           cleanup
<   %323 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %99, i64 0, i32 0, i32 0
<   %324 = load i8*, i8** %323, align 8, !tbaa !8
<   %325 = getelementptr inbounds i8, i8* %324, i64 -24
<   %326 = bitcast i8* %325 to %"struct.std::basic_string<char>::_Rep"*
<   %327 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %97, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %327) #10
<   %328 = icmp eq i8* %325, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %328, label %341, label %329, !prof !11
< 
< 329:                                              ; preds = %321
<   %330 = getelementptr inbounds i8, i8* %324, i64 -8
<   %331 = bitcast i8* %330 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %332, label %334
< 
< 332:                                              ; preds = %329
<   %333 = atomicrmw volatile add i32* %331, i32 -1 acq_rel
<   br label %337
< 
< 334:                                              ; preds = %329
<   %335 = load i32, i32* %331, align 4, !tbaa !12
<   %336 = add nsw i32 %335, -1
<   store i32 %336, i32* %331, align 4, !tbaa !12
<   br label %337
< 
< 337:                                              ; preds = %334, %332
<   %338 = phi i32 [ %333, %332 ], [ %335, %334 ]
<   %339 = icmp slt i32 %338, 1
<   br i1 %339, label %340, label %341
< 
< 340:                                              ; preds = %337
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %326, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %97) #10
<   br label %341
< 
< 341:                                              ; preds = %340, %337, %321
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %327) #10
<   br label %342
< 
< 342:                                              ; preds = %341, %319
<   %343 = phi { i8*, i32 } [ %322, %341 ], [ %320, %319 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %293) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %292) #10
<   call void @_ZdlPv(i8* nonnull %290) #28
<   br label %380
< 
< 344:                                              ; preds = %315, %248
<   %345 = phi %"class.Apollo::Region"* [ %316, %315 ], [ %287, %248 ]
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %283, i8 0, i64 24, i1 false) #10
<   %346 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %347 unwind label %317
< 
< 347:                                              ; preds = %344
<   %348 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %101, i64 0, i32 0, i32 0, i32 0
<   %349 = bitcast %"class.std::vector.15"* %101 to i8**
<   store i8* %346, i8** %349, align 8, !tbaa !14
<   %350 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %101, i64 0, i32 0, i32 0, i32 1
<   %351 = bitcast float** %350 to i8**
<   %352 = getelementptr inbounds i8, i8* %346, i64 4
<   %353 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %101, i64 0, i32 0, i32 0, i32 2
<   %354 = bitcast float** %353 to i8**
<   store i8* %352, i8** %354, align 8, !tbaa !17
<   %355 = bitcast i8* %285 to i32*
<   %356 = bitcast i8* %346 to i32*
<   %357 = load i32, i32* %355, align 4
<   store i32 %357, i32* %356, align 4
<   store i8* %352, i8** %351, align 8, !tbaa !18
<   %358 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %345, %"class.std::vector.15"* nonnull %101)
<           to label %359 unwind label %374
< 
< 359:                                              ; preds = %347
<   %360 = load float*, float** %348, align 8, !tbaa !14
<   %361 = icmp eq float* %360, null
<   br i1 %361, label %364, label %362
< 
< 362:                                              ; preds = %359
<   %363 = bitcast float* %360 to i8*
<   call void @_ZdlPv(i8* nonnull %363) #10
<   br label %364
< 
< 364:                                              ; preds = %362, %359
<   %365 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL31CalcMonotonicQGradientsForElemsR6DomainE12apolloRegion, align 8, !tbaa !6
<   %366 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %365)
<           to label %367 unwind label %317
< 
< 367:                                              ; preds = %364
<   %368 = icmp eq i32 %366, 1
<   %369 = select i1 %368, i32 1, i32 36
<   %370 = icmp eq i32 %366, 0
<   %371 = select i1 %370, i32 36, i32 %369
<   call void @omp_set_num_threads(i32 %371) #10
<   %372 = zext i32 %246 to i64
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 2, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, %class.Domain*)* @.omp_outlined..43 to void (i32*, i32*, ...)*), i64 %372, %class.Domain* nonnull %0)
<   %373 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL31CalcMonotonicQGradientsForElemsR6DomainE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %373)
<           to label %382 unwind label %317
---
> .apollo.case.1.i46.i.i.i:                         ; preds = %98
>   br label %.split.i48.i.i.i.sink.split
5199,5333c2213,2320
< 374:                                              ; preds = %347
<   %375 = landingpad { i8*, i32 }
<           cleanup
<   %376 = load float*, float** %348, align 8, !tbaa !14
<   %377 = icmp eq float* %376, null
<   br i1 %377, label %380, label %378
< 
< 378:                                              ; preds = %374
<   %379 = bitcast float* %376 to i8*
<   call void @_ZdlPv(i8* nonnull %379) #10
<   br label %380
< 
< 380:                                              ; preds = %378, %374, %342, %317
<   %381 = phi { i8*, i32 } [ %318, %317 ], [ %343, %342 ], [ %375, %374 ], [ %375, %378 ]
<   call void @_ZdlPv(i8* nonnull %285) #10
<   resume { i8*, i32 } %381
< 
< 382:                                              ; preds = %367
<   call void @_ZdlPv(i8* nonnull %285) #10
<   call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %283)
<   %383 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 16
<   %384 = load i32, i32* %383, align 8, !tbaa !12
<   %385 = icmp sgt i32 %384, 0
<   br i1 %385, label %386, label %515
< 
< 386:                                              ; preds = %382
<   %387 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 18
<   %388 = bitcast i32* %104 to i8*
<   %389 = bitcast %"class.std::vector.15"* %107 to i8*
<   %390 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 60
<   %391 = bitcast double* %390 to i64*
<   %392 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 59
<   %393 = bitcast double* %392 to i64*
<   %394 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 61
<   %395 = bitcast double* %394 to i64*
<   %396 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 62
<   %397 = bitcast double* %396 to i64*
<   %398 = bitcast %"class.std::basic_string"* %105 to i8*
<   %399 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %106, i64 0, i32 0
<   %400 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %105, i64 0, i32 0, i32 0
<   %401 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %102, i64 0, i32 0
<   %402 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %107, i64 0, i32 0, i32 0, i32 0
<   %403 = bitcast %"class.std::vector.15"* %107 to i8**
<   %404 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %107, i64 0, i32 0, i32 0, i32 1
<   %405 = bitcast float** %404 to i8**
<   %406 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %107, i64 0, i32 0, i32 0, i32 2
<   %407 = bitcast float** %406 to i8**
<   br label %408
< 
< 408:                                              ; preds = %510, %386
<   %409 = phi i32 [ %384, %386 ], [ %511, %510 ]
<   %410 = phi i64 [ 0, %386 ], [ %512, %510 ]
<   %411 = load i32*, i32** %387, align 8, !tbaa !43
<   %412 = getelementptr inbounds i32, i32* %411, i64 %410
<   %413 = load i32, i32* %412, align 4, !tbaa !12
<   %414 = icmp sgt i32 %413, 0
<   br i1 %414, label %415, label %510
< 
< 415:                                              ; preds = %408
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %388)
<   call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %389)
<   %416 = trunc i64 %410 to i32
<   store i32 %416, i32* %104, align 4, !tbaa !12
<   %417 = load i64, i64* %391, align 8, !tbaa !67
<   %418 = load i64, i64* %393, align 8, !tbaa !68
<   %419 = load i64, i64* %395, align 8, !tbaa !69
<   %420 = load i64, i64* %397, align 8, !tbaa !70
<   %421 = load i32, i32* %412, align 4, !tbaa !12
<   %422 = sitofp i32 %421 to float
<   %423 = call noalias nonnull i8* @_Znwm(i64 4) #26
<   %424 = bitcast i8* %423 to float*
<   store float %422, float* %424, align 4
<   %425 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL28CalcMonotonicQRegionForElemsR6DomainidE12apolloRegion, align 8, !tbaa !6
<   %426 = icmp eq %"class.Apollo::Region"* %425, null
<   br i1 %426, label %427, label %477
< 
< 427:                                              ; preds = %415
<   %428 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %429 unwind label %451
< 
< 429:                                              ; preds = %427
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %398) #10
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %399) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %105, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %106)
<           to label %430 unwind label %453
< 
< 430:                                              ; preds = %429
<   %431 = bitcast i8* %428 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %431, i32 1, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.44, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %105)
<           to label %432 unwind label %455
< 
< 432:                                              ; preds = %430
<   store i8* %428, i8** bitcast (%"class.Apollo::Region"** @_ZZL28CalcMonotonicQRegionForElemsR6DomainidE12apolloRegion to i8**), align 8, !tbaa !6
<   %433 = load i8*, i8** %400, align 8, !tbaa !8
<   %434 = getelementptr inbounds i8, i8* %433, i64 -24
<   %435 = bitcast i8* %434 to %"struct.std::basic_string<char>::_Rep"*
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %401) #10
<   %436 = icmp eq i8* %434, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %436, label %449, label %437, !prof !11
< 
< 437:                                              ; preds = %432
<   %438 = getelementptr inbounds i8, i8* %433, i64 -8
<   %439 = bitcast i8* %438 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %440, label %442
< 
< 440:                                              ; preds = %437
<   %441 = atomicrmw volatile add i32* %439, i32 -1 acq_rel
<   br label %445
< 
< 442:                                              ; preds = %437
<   %443 = load i32, i32* %439, align 4, !tbaa !12
<   %444 = add nsw i32 %443, -1
<   store i32 %444, i32* %439, align 4, !tbaa !12
<   br label %445
< 
< 445:                                              ; preds = %442, %440
<   %446 = phi i32 [ %441, %440 ], [ %443, %442 ]
<   %447 = icmp slt i32 %446, 1
<   br i1 %447, label %448, label %449
< 
< 448:                                              ; preds = %445
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %435, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %102) #10
<   br label %449
< 
< 449:                                              ; preds = %448, %445, %432
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %401) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %399) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %398) #10
<   %450 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL28CalcMonotonicQRegionForElemsR6DomainidE12apolloRegion, align 8, !tbaa !6
<   br label %477
< 
< 451:                                              ; preds = %494, %491, %477, %427
<   %452 = landingpad { i8*, i32 }
<           cleanup
<   br label %506
---
> .split.i48.i.i.i.sink.split:                      ; preds = %98, %.apollo.case.1.i46.i.i.i
>   %.sink44 = phi i32 [ 1, %.apollo.case.1.i46.i.i.i ], [ 36, %98 ]
>   call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num.i36.i, i32 %.sink44)
>   br label %.split.i48.i.i.i
> 
> .split.i48.i.i.i:                                 ; preds = %.split.i48.i.i.i.sink.split, %98
>   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 9, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, %class.Domain*, double**, double**, double**, double**, double**, double**, double**)* @.omp_outlined..23 to void (i32*, i32*, ...)*), i64 %numElem.casted.sroa.0.0.insert.ext.i44.i.i.i, %class.Domain* nonnull %domain, double** nonnull %dvdx.i.i.i.i, double** nonnull %dvdy.i.i.i.i, double** nonnull %dvdz.i.i.i.i, double** nonnull %x8n.i.i.i.i, double** nonnull %y8n.i.i.i.i, double** nonnull %z8n.i.i.i.i, double** nonnull %determ.addr.i42.i.i.i)
>   %102 = load i8*, i8** @.apollo.region.handle.10, align 8
>   call void @__apollo_region_end(i8* %102)
>   %cmp.i47.i.i.i = fcmp ogt double %15, 0.000000e+00
>   br i1 %cmp.i47.i.i.i, label %if.then.i49.i.i.i, label %if.end.i.i.i.i
> 
> if.then.i49.i.i.i:                                ; preds = %.split.i48.i.i.i
>   %103 = load i64, i64* %80, align 8, !tbaa !41
>   %104 = bitcast double** %x8n.i.i.i.i to i64*
>   %105 = load i64, i64* %104, align 8, !tbaa !41
>   %106 = bitcast double** %y8n.i.i.i.i to i64*
>   %107 = load i64, i64* %106, align 8, !tbaa !41
>   %108 = bitcast double** %z8n.i.i.i.i to i64*
>   %109 = load i64, i64* %108, align 8, !tbaa !41
>   %110 = bitcast double** %dvdx.i.i.i.i to i64*
>   %111 = load i64, i64* %110, align 8, !tbaa !41
>   %112 = bitcast double** %dvdy.i.i.i.i to i64*
>   %113 = load i64, i64* %112, align 8, !tbaa !41
>   %114 = bitcast double** %dvdz.i.i.i.i to i64*
>   %115 = load i64, i64* %114, align 8, !tbaa !41
>   %116 = load i32, i32* %m_numNode.i.i.i, align 4, !tbaa !6
>   %117 = bitcast double** %determ.addr.i.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %117)
>   %118 = bitcast double** %x8n.addr.i.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %118)
>   %119 = bitcast double** %y8n.addr.i.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %119)
>   %120 = bitcast double** %z8n.addr.i.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %120)
>   %121 = bitcast double** %dvdx.addr.i.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %121)
>   %122 = bitcast double** %dvdy.addr.i.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %122)
>   %123 = bitcast double** %dvdz.addr.i.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %123)
>   %124 = bitcast double* %hourg.addr.i.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %124)
>   %125 = bitcast i32* %numElem.addr.i.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %125)
>   %126 = bitcast i32* %numNode.addr.i.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %126)
>   %127 = bitcast double** %determ.addr.i.i.i.i.i to i64*
>   store i64 %103, i64* %127, align 8, !tbaa !41
>   %128 = bitcast double** %x8n.addr.i.i.i.i.i to i64*
>   store i64 %105, i64* %128, align 8, !tbaa !41
>   %129 = bitcast double** %y8n.addr.i.i.i.i.i to i64*
>   store i64 %107, i64* %129, align 8, !tbaa !41
>   %130 = bitcast double** %z8n.addr.i.i.i.i.i to i64*
>   store i64 %109, i64* %130, align 8, !tbaa !41
>   %131 = bitcast double** %dvdx.addr.i.i.i.i.i to i64*
>   store i64 %111, i64* %131, align 8, !tbaa !41
>   %132 = bitcast double** %dvdy.addr.i.i.i.i.i to i64*
>   store i64 %113, i64* %132, align 8, !tbaa !41
>   %133 = bitcast double** %dvdz.addr.i.i.i.i.i to i64*
>   store i64 %115, i64* %133, align 8, !tbaa !41
>   store double %15, double* %hourg.addr.i.i.i.i.i, align 8, !tbaa !2
>   store i32 %81, i32* %numElem.addr.i.i.i.i.i, align 4, !tbaa !6
>   store i32 %116, i32* %numNode.addr.i.i.i.i.i, align 4, !tbaa !6
>   %134 = bitcast i32* %numthreads.i.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %134) #7
>   %135 = bitcast i32* %numElem8.i.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %135) #7
>   store i32 %mul.i43.i.i.i, i32* %numElem8.i.i.i.i.i, align 4, !tbaa !6
>   %136 = bitcast double** %fx_elem.i.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %136) #7
>   %137 = bitcast double** %fy_elem.i.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %137) #7
>   %138 = bitcast double** %fz_elem.i.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %138) #7
>   %139 = bitcast [4 x [8 x double]]* %gamma.i.i.i.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %139) #7
>   %140 = bitcast [4 x [8 x double]]* %gamma.i.i.i.i.i to <4 x double>*
>   store <4 x double> <double 1.000000e+00, double 1.000000e+00, double -1.000000e+00, double -1.000000e+00>, <4 x double>* %140, align 16, !tbaa !2
>   %arrayidx9.i.i.i.i.i = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma.i.i.i.i.i, i64 0, i64 0, i64 4
>   %141 = bitcast double* %arrayidx9.i.i.i.i.i to <4 x double>*
>   store <4 x double> <double -1.000000e+00, double -1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double>* %141, align 16, !tbaa !2
>   %arrayidx17.i.i.i.i.i = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma.i.i.i.i.i, i64 0, i64 1, i64 0
>   %142 = bitcast double* %arrayidx17.i.i.i.i.i to <4 x double>*
>   store <4 x double> <double 1.000000e+00, double -1.000000e+00, double -1.000000e+00, double 1.000000e+00>, <4 x double>* %142, align 16, !tbaa !2
>   %arrayidx25.i.i.i.i.i = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma.i.i.i.i.i, i64 0, i64 1, i64 4
>   %143 = bitcast double* %arrayidx25.i.i.i.i.i to <4 x double>*
>   store <4 x double> <double -1.000000e+00, double 1.000000e+00, double 1.000000e+00, double -1.000000e+00>, <4 x double>* %143, align 16, !tbaa !2
>   %arrayidx33.i.i.i.i.i = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma.i.i.i.i.i, i64 0, i64 2, i64 0
>   %144 = bitcast double* %arrayidx33.i.i.i.i.i to <4 x double>*
>   store <4 x double> <double 1.000000e+00, double -1.000000e+00, double 1.000000e+00, double -1.000000e+00>, <4 x double>* %144, align 16, !tbaa !2
>   %arrayidx41.i.i.i.i.i = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma.i.i.i.i.i, i64 0, i64 2, i64 4
>   %145 = bitcast double* %arrayidx41.i.i.i.i.i to <4 x double>*
>   store <4 x double> <double 1.000000e+00, double -1.000000e+00, double 1.000000e+00, double -1.000000e+00>, <4 x double>* %145, align 16, !tbaa !2
>   %arrayidx49.i.i.i.i.i = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma.i.i.i.i.i, i64 0, i64 3, i64 0
>   %146 = bitcast double* %arrayidx49.i.i.i.i.i to <4 x double>*
>   store <4 x double> <double -1.000000e+00, double 1.000000e+00, double -1.000000e+00, double 1.000000e+00>, <4 x double>* %146, align 16, !tbaa !2
>   %arrayidx57.i.i.i.i.i = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma.i.i.i.i.i, i64 0, i64 3, i64 4
>   %147 = bitcast double* %arrayidx57.i.i.i.i.i to <4 x double>*
>   store <4 x double> <double 1.000000e+00, double -1.000000e+00, double 1.000000e+00, double -1.000000e+00>, <4 x double>* %147, align 16, !tbaa !2
>   %148 = load i8*, i8** @.apollo.region.handle.8, align 8
>   %149 = icmp eq i8* %148, null
>   br i1 %149, label %150, label %152
> 
> 150:                                              ; preds = %if.then.i49.i.i.i
>   %151 = call i8* @__apollo_region_create(i32 2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @11, i64 0, i64 0), i32 2)
>   store i8* %151, i8** @.apollo.region.handle.8, align 8
>   br label %152
5335,5338c2322,2332
< 453:                                              ; preds = %429
<   %454 = landingpad { i8*, i32 }
<           cleanup
<   br label %475
---
> 152:                                              ; preds = %150, %if.then.i49.i.i.i
>   %153 = phi i8* [ %148, %if.then.i49.i.i.i ], [ %151, %150 ]
>   call void @__apollo_region_begin(i8* %153)
>   %154 = uitofp i32 %116 to float
>   call void @__apollo_region_set_feature(i8* %153, float %154)
>   call void @__apollo_region_set_feature(i8* %153, float %100)
>   %155 = call i32 @__apollo_region_get_policy(i8* %153)
>   switch i32 %155, label %.split.i.i.i.i.i [
>     i32 0, label %.split.i.i.i.i.i.sink.split
>     i32 1, label %.apollo.case.1.i.i.i.i.i
>   ]
5340,5428c2334,2335
< 455:                                              ; preds = %430
<   %456 = landingpad { i8*, i32 }
<           cleanup
<   %457 = load i8*, i8** %400, align 8, !tbaa !8
<   %458 = getelementptr inbounds i8, i8* %457, i64 -24
<   %459 = bitcast i8* %458 to %"struct.std::basic_string<char>::_Rep"*
<   %460 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %103, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %460) #10
<   %461 = icmp eq i8* %458, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %461, label %474, label %462, !prof !11
< 
< 462:                                              ; preds = %455
<   %463 = getelementptr inbounds i8, i8* %457, i64 -8
<   %464 = bitcast i8* %463 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %465, label %467
< 
< 465:                                              ; preds = %462
<   %466 = atomicrmw volatile add i32* %464, i32 -1 acq_rel
<   br label %470
< 
< 467:                                              ; preds = %462
<   %468 = load i32, i32* %464, align 4, !tbaa !12
<   %469 = add nsw i32 %468, -1
<   store i32 %469, i32* %464, align 4, !tbaa !12
<   br label %470
< 
< 470:                                              ; preds = %467, %465
<   %471 = phi i32 [ %466, %465 ], [ %468, %467 ]
<   %472 = icmp slt i32 %471, 1
<   br i1 %472, label %473, label %474
< 
< 473:                                              ; preds = %470
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %459, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %103) #10
<   br label %474
< 
< 474:                                              ; preds = %473, %470, %455
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %460) #10
<   br label %475
< 
< 475:                                              ; preds = %474, %453
<   %476 = phi { i8*, i32 } [ %456, %474 ], [ %454, %453 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %399) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %398) #10
<   call void @_ZdlPv(i8* nonnull %428) #28
<   br label %506
< 
< 477:                                              ; preds = %449, %415
<   %478 = phi %"class.Apollo::Region"* [ %450, %449 ], [ %425, %415 ]
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %389, i8 0, i64 24, i1 false) #10
<   %479 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %480 unwind label %451
< 
< 480:                                              ; preds = %477
<   store i8* %479, i8** %403, align 8, !tbaa !14
<   %481 = getelementptr inbounds i8, i8* %479, i64 4
<   store i8* %481, i8** %407, align 8, !tbaa !17
<   %482 = bitcast i8* %423 to i32*
<   %483 = bitcast i8* %479 to i32*
<   %484 = load i32, i32* %482, align 4
<   store i32 %484, i32* %483, align 4
<   store i8* %481, i8** %405, align 8, !tbaa !18
<   %485 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %478, %"class.std::vector.15"* nonnull %107)
<           to label %486 unwind label %500
< 
< 486:                                              ; preds = %480
<   %487 = load float*, float** %402, align 8, !tbaa !14
<   %488 = icmp eq float* %487, null
<   br i1 %488, label %491, label %489
< 
< 489:                                              ; preds = %486
<   %490 = bitcast float* %487 to i8*
<   call void @_ZdlPv(i8* nonnull %490) #10
<   br label %491
< 
< 491:                                              ; preds = %489, %486
<   %492 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL28CalcMonotonicQRegionForElemsR6DomainidE12apolloRegion, align 8, !tbaa !6
<   %493 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %492)
<           to label %494 unwind label %451
< 
< 494:                                              ; preds = %491
<   %495 = icmp eq i32 %493, 1
<   %496 = select i1 %495, i32 1, i32 36
<   %497 = icmp eq i32 %493, 0
<   %498 = select i1 %497, i32 36, i32 %496
<   call void @omp_set_num_threads(i32 %498) #10
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 7, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, %class.Domain*, i64, i64, i64, i64, i64)* @.omp_outlined..45 to void (i32*, i32*, ...)*), i32* nonnull %104, %class.Domain* nonnull %0, i64 4068233174594694770, i64 %417, i64 %418, i64 %419, i64 %420)
<   %499 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL28CalcMonotonicQRegionForElemsR6DomainidE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %499)
<           to label %508 unwind label %451
---
> .apollo.case.1.i.i.i.i.i:                         ; preds = %152
>   br label %.split.i.i.i.i.i.sink.split
5430,5483c2337,2534
< 500:                                              ; preds = %480
<   %501 = landingpad { i8*, i32 }
<           cleanup
<   %502 = load float*, float** %402, align 8, !tbaa !14
<   %503 = icmp eq float* %502, null
<   br i1 %503, label %506, label %504
< 
< 504:                                              ; preds = %500
<   %505 = bitcast float* %502 to i8*
<   call void @_ZdlPv(i8* nonnull %505) #10
<   br label %506
< 
< 506:                                              ; preds = %504, %500, %475, %451
<   %507 = phi { i8*, i32 } [ %452, %451 ], [ %476, %475 ], [ %501, %500 ], [ %501, %504 ]
<   call void @_ZdlPv(i8* nonnull %423) #10
<   resume { i8*, i32 } %507
< 
< 508:                                              ; preds = %494
<   call void @_ZdlPv(i8* nonnull %423) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %388)
<   call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %389)
<   %509 = load i32, i32* %383, align 8, !tbaa !12
<   br label %510
< 
< 510:                                              ; preds = %508, %408
<   %511 = phi i32 [ %409, %408 ], [ %509, %508 ]
<   %512 = add nuw nsw i64 %410, 1
<   %513 = sext i32 %511 to i64
<   %514 = icmp slt i64 %512, %513
<   br i1 %514, label %408, label %515, !llvm.loop !71
< 
< 515:                                              ; preds = %510, %382
<   call void @_ZN6Domain19DeallocateGradientsEv(%class.Domain* nonnull dereferenceable(1312) %0)
<   %516 = icmp sgt i32 %246, 0
<   br i1 %516, label %517, label %531
< 
< 517:                                              ; preds = %515
<   %518 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 40, i32 0, i32 0, i32 0
<   %519 = load double*, double** %518, align 8, !tbaa !22
<   %520 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 58
<   %521 = load double, double* %520, align 8, !tbaa !72
<   br label %524
< 
< 522:                                              ; preds = %524
<   %523 = icmp eq i64 %529, %372
<   br i1 %523, label %531, label %524, !llvm.loop !73
< 
< 524:                                              ; preds = %522, %517
<   %525 = phi i64 [ 0, %517 ], [ %529, %522 ]
<   %526 = getelementptr inbounds double, double* %519, i64 %525
<   %527 = load double, double* %526, align 8, !tbaa !2
<   %528 = fcmp ogt double %527, %521
<   %529 = add nuw nsw i64 %525, 1
<   br i1 %528, label %530, label %522
---
> .split.i.i.i.i.i.sink.split:                      ; preds = %152, %.apollo.case.1.i.i.i.i.i
>   %.sink45 = phi i32 [ 1, %.apollo.case.1.i.i.i.i.i ], [ 36, %152 ]
>   call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num.i36.i, i32 %.sink45)
>   br label %.split.i.i.i.i.i
> 
> .split.i.i.i.i.i:                                 ; preds = %.split.i.i.i.i.i.sink.split, %152
>   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 17, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, double**, i32*, double**, double**, i32*, double*, %class.Domain*, double**, double**, [4 x [8 x double]]*, double**, double**, double**, double**, double**, i32*)* @.omp_outlined..24 to void (i32*, i32*, ...)*), i32* nonnull %numthreads.i.i.i.i.i, double** nonnull %fx_elem.i.i.i.i.i, i32* nonnull %numElem8.i.i.i.i.i, double** nonnull %fy_elem.i.i.i.i.i, double** nonnull %fz_elem.i.i.i.i.i, i32* nonnull %numElem.addr.i.i.i.i.i, double* nonnull %hourg.addr.i.i.i.i.i, %class.Domain* nonnull %domain, double** nonnull %determ.addr.i.i.i.i.i, double** nonnull %x8n.addr.i.i.i.i.i, [4 x [8 x double]]* nonnull %gamma.i.i.i.i.i, double** nonnull %y8n.addr.i.i.i.i.i, double** nonnull %z8n.addr.i.i.i.i.i, double** nonnull %dvdx.addr.i.i.i.i.i, double** nonnull %dvdy.addr.i.i.i.i.i, double** nonnull %dvdz.addr.i.i.i.i.i, i32* nonnull %numNode.addr.i.i.i.i.i)
>   %156 = load i8*, i8** @.apollo.region.handle.8, align 8
>   call void @__apollo_region_end(i8* %156)
>   %157 = load i32, i32* %numthreads.i.i.i.i.i, align 4, !tbaa !6
>   %cmp.i.i.i.i.i = icmp sgt i32 %157, 1
>   br i1 %cmp.i.i.i.i.i, label %if.then.i41.i.i.i.i, label %_ZL28CalcFBHourglassForceForElemsR6DomainPdS1_S1_S1_S1_S1_S1_dii.exit.i.i.i.i
> 
> if.then.i41.i.i.i.i:                              ; preds = %.split.i.i.i.i.i
>   %158 = load double*, double** %fz_elem.i.i.i.i.i, align 8, !tbaa !41
>   %cmp.not.i.i.i.i.i.i = icmp eq double* %158, null
>   br i1 %cmp.not.i.i.i.i.i.i, label %_Z7ReleaseIdEvPPT_.exit.i.i.i.i.i, label %if.then.i.i.i.i.i.i
> 
> if.then.i.i.i.i.i.i:                              ; preds = %if.then.i41.i.i.i.i
>   %159 = bitcast double* %158 to i8*
>   call void @free(i8* %159) #7
>   store double* null, double** %fz_elem.i.i.i.i.i, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit.i.i.i.i.i
> 
> _Z7ReleaseIdEvPPT_.exit.i.i.i.i.i:                ; preds = %if.then.i.i.i.i.i.i, %if.then.i41.i.i.i.i
>   %160 = load double*, double** %fy_elem.i.i.i.i.i, align 8, !tbaa !41
>   %cmp.not.i65.i.i.i.i.i = icmp eq double* %160, null
>   br i1 %cmp.not.i65.i.i.i.i.i, label %_Z7ReleaseIdEvPPT_.exit67.i.i.i.i.i, label %if.then.i66.i.i.i.i.i
> 
> if.then.i66.i.i.i.i.i:                            ; preds = %_Z7ReleaseIdEvPPT_.exit.i.i.i.i.i
>   %161 = bitcast double* %160 to i8*
>   call void @free(i8* %161) #7
>   store double* null, double** %fy_elem.i.i.i.i.i, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit67.i.i.i.i.i
> 
> _Z7ReleaseIdEvPPT_.exit67.i.i.i.i.i:              ; preds = %if.then.i66.i.i.i.i.i, %_Z7ReleaseIdEvPPT_.exit.i.i.i.i.i
>   %162 = load double*, double** %fx_elem.i.i.i.i.i, align 8, !tbaa !41
>   %cmp.not.i68.i.i.i.i.i = icmp eq double* %162, null
>   br i1 %cmp.not.i68.i.i.i.i.i, label %_ZL28CalcFBHourglassForceForElemsR6DomainPdS1_S1_S1_S1_S1_S1_dii.exit.i.i.i.i, label %if.then.i69.i.i.i.i.i
> 
> if.then.i69.i.i.i.i.i:                            ; preds = %_Z7ReleaseIdEvPPT_.exit67.i.i.i.i.i
>   %163 = bitcast double* %162 to i8*
>   call void @free(i8* %163) #7
>   store double* null, double** %fx_elem.i.i.i.i.i, align 8, !tbaa !41
>   br label %_ZL28CalcFBHourglassForceForElemsR6DomainPdS1_S1_S1_S1_S1_S1_dii.exit.i.i.i.i
> 
> _ZL28CalcFBHourglassForceForElemsR6DomainPdS1_S1_S1_S1_S1_S1_dii.exit.i.i.i.i: ; preds = %if.then.i69.i.i.i.i.i, %_Z7ReleaseIdEvPPT_.exit67.i.i.i.i.i, %.split.i.i.i.i.i
>   call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %139) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %138) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %137) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %136) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %135) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %134) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %117)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %118)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %119)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %120)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %121)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %122)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %123)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %124)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %125)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %126)
>   br label %if.end.i.i.i.i
> 
> if.end.i.i.i.i:                                   ; preds = %_ZL28CalcFBHourglassForceForElemsR6DomainPdS1_S1_S1_S1_S1_S1_dii.exit.i.i.i.i, %.split.i48.i.i.i
>   %164 = load double*, double** %z8n.i.i.i.i, align 8, !tbaa !41
>   %cmp.not.i42.i.i.i.i = icmp eq double* %164, null
>   br i1 %cmp.not.i42.i.i.i.i, label %_Z7ReleaseIdEvPPT_.exit44.i.i.i.i, label %if.then.i43.i.i.i.i
> 
> if.then.i43.i.i.i.i:                              ; preds = %if.end.i.i.i.i
>   %165 = bitcast double* %164 to i8*
>   call void @free(i8* %165) #7
>   store double* null, double** %z8n.i.i.i.i, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit44.i.i.i.i
> 
> _Z7ReleaseIdEvPPT_.exit44.i.i.i.i:                ; preds = %if.then.i43.i.i.i.i, %if.end.i.i.i.i
>   %166 = load double*, double** %y8n.i.i.i.i, align 8, !tbaa !41
>   %cmp.not.i45.i.i.i.i = icmp eq double* %166, null
>   br i1 %cmp.not.i45.i.i.i.i, label %_Z7ReleaseIdEvPPT_.exit47.i.i.i.i, label %if.then.i46.i.i.i.i
> 
> if.then.i46.i.i.i.i:                              ; preds = %_Z7ReleaseIdEvPPT_.exit44.i.i.i.i
>   %167 = bitcast double* %166 to i8*
>   call void @free(i8* %167) #7
>   store double* null, double** %y8n.i.i.i.i, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit47.i.i.i.i
> 
> _Z7ReleaseIdEvPPT_.exit47.i.i.i.i:                ; preds = %if.then.i46.i.i.i.i, %_Z7ReleaseIdEvPPT_.exit44.i.i.i.i
>   %168 = load double*, double** %x8n.i.i.i.i, align 8, !tbaa !41
>   %cmp.not.i48.i.i.i.i = icmp eq double* %168, null
>   br i1 %cmp.not.i48.i.i.i.i, label %_Z7ReleaseIdEvPPT_.exit50.i.i.i.i, label %if.then.i49.i.i.i.i
> 
> if.then.i49.i.i.i.i:                              ; preds = %_Z7ReleaseIdEvPPT_.exit47.i.i.i.i
>   %169 = bitcast double* %168 to i8*
>   call void @free(i8* %169) #7
>   store double* null, double** %x8n.i.i.i.i, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit50.i.i.i.i
> 
> _Z7ReleaseIdEvPPT_.exit50.i.i.i.i:                ; preds = %if.then.i49.i.i.i.i, %_Z7ReleaseIdEvPPT_.exit47.i.i.i.i
>   %170 = load double*, double** %dvdz.i.i.i.i, align 8, !tbaa !41
>   %cmp.not.i51.i.i.i.i = icmp eq double* %170, null
>   br i1 %cmp.not.i51.i.i.i.i, label %_Z7ReleaseIdEvPPT_.exit53.i.i.i.i, label %if.then.i52.i.i.i.i
> 
> if.then.i52.i.i.i.i:                              ; preds = %_Z7ReleaseIdEvPPT_.exit50.i.i.i.i
>   %171 = bitcast double* %170 to i8*
>   call void @free(i8* %171) #7
>   store double* null, double** %dvdz.i.i.i.i, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit53.i.i.i.i
> 
> _Z7ReleaseIdEvPPT_.exit53.i.i.i.i:                ; preds = %if.then.i52.i.i.i.i, %_Z7ReleaseIdEvPPT_.exit50.i.i.i.i
>   %172 = load double*, double** %dvdy.i.i.i.i, align 8, !tbaa !41
>   %cmp.not.i37.i.i.i.i = icmp eq double* %172, null
>   br i1 %cmp.not.i37.i.i.i.i, label %_Z7ReleaseIdEvPPT_.exit39.i.i.i.i, label %if.then.i38.i.i.i.i
> 
> if.then.i38.i.i.i.i:                              ; preds = %_Z7ReleaseIdEvPPT_.exit53.i.i.i.i
>   %173 = bitcast double* %172 to i8*
>   call void @free(i8* %173) #7
>   store double* null, double** %dvdy.i.i.i.i, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit39.i.i.i.i
> 
> _Z7ReleaseIdEvPPT_.exit39.i.i.i.i:                ; preds = %if.then.i38.i.i.i.i, %_Z7ReleaseIdEvPPT_.exit53.i.i.i.i
>   %174 = load double*, double** %dvdx.i.i.i.i, align 8, !tbaa !41
>   %cmp.not.i.i50.i.i.i = icmp eq double* %174, null
>   br i1 %cmp.not.i.i50.i.i.i, label %_ZL28CalcHourglassControlForElemsR6DomainPdd.exit.i.i.i, label %if.then.i.i51.i.i.i
> 
> if.then.i.i51.i.i.i:                              ; preds = %_Z7ReleaseIdEvPPT_.exit39.i.i.i.i
>   %175 = bitcast double* %174 to i8*
>   call void @free(i8* %175) #7
>   store double* null, double** %dvdx.i.i.i.i, align 8, !tbaa !41
>   br label %_ZL28CalcHourglassControlForElemsR6DomainPdd.exit.i.i.i
> 
> _ZL28CalcHourglassControlForElemsR6DomainPdd.exit.i.i.i: ; preds = %if.then.i.i51.i.i.i, %_Z7ReleaseIdEvPPT_.exit39.i.i.i.i
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %92) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %90) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %88) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %86) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %84) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %82) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %79)
>   %176 = load double*, double** %determ.i.i.i, align 8, !tbaa !41
>   %cmp.not.i53.i.i.i = icmp eq double* %176, null
>   br i1 %cmp.not.i53.i.i.i, label %_Z7ReleaseIdEvPPT_.exit56.i.i.i, label %if.then.i54.i.i.i
> 
> if.then.i54.i.i.i:                                ; preds = %_ZL28CalcHourglassControlForElemsR6DomainPdd.exit.i.i.i
>   %177 = bitcast double* %176 to i8*
>   call void @free(i8* %177) #7
>   store double* null, double** %determ.i.i.i, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit56.i.i.i
> 
> _Z7ReleaseIdEvPPT_.exit56.i.i.i:                  ; preds = %if.then.i54.i.i.i, %_ZL28CalcHourglassControlForElemsR6DomainPdd.exit.i.i.i
>   %cmp.not.i57.i.i.i = icmp eq i8* %call.i31.i.i.i, null
>   br i1 %cmp.not.i57.i.i.i, label %_Z7ReleaseIdEvPPT_.exit60.i.i.i, label %if.then.i58.i.i.i
> 
> if.then.i58.i.i.i:                                ; preds = %_Z7ReleaseIdEvPPT_.exit56.i.i.i
>   call void @free(i8* nonnull %call.i31.i.i.i) #7
>   br label %_Z7ReleaseIdEvPPT_.exit60.i.i.i
> 
> _Z7ReleaseIdEvPPT_.exit60.i.i.i:                  ; preds = %if.then.i58.i.i.i, %_Z7ReleaseIdEvPPT_.exit56.i.i.i
>   %cmp.not.i25.i.i.i = icmp eq i8* %call.i29.i.i.i, null
>   br i1 %cmp.not.i25.i.i.i, label %_Z7ReleaseIdEvPPT_.exit27.i.i.i, label %if.then.i26.i.i.i
> 
> if.then.i26.i.i.i:                                ; preds = %_Z7ReleaseIdEvPPT_.exit60.i.i.i
>   call void @free(i8* nonnull %call.i29.i.i.i) #7
>   br label %_Z7ReleaseIdEvPPT_.exit27.i.i.i
> 
> _Z7ReleaseIdEvPPT_.exit27.i.i.i:                  ; preds = %if.then.i26.i.i.i, %_Z7ReleaseIdEvPPT_.exit60.i.i.i
>   %cmp.not.i.i.i.i = icmp eq i8* %call.i.i.i.i, null
>   br i1 %cmp.not.i.i.i.i, label %_Z7ReleaseIdEvPPT_.exit.i.i.i, label %if.then.i.i.i.i
> 
> if.then.i.i.i.i:                                  ; preds = %_Z7ReleaseIdEvPPT_.exit27.i.i.i
>   call void @free(i8* nonnull %call.i.i.i.i) #7
>   br label %_Z7ReleaseIdEvPPT_.exit.i.i.i
> 
> _Z7ReleaseIdEvPPT_.exit.i.i.i:                    ; preds = %if.then.i.i.i.i, %_Z7ReleaseIdEvPPT_.exit27.i.i.i
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #7
>   br label %_ZL17CalcForceForNodesR6Domain.exit.i
> 
> _ZL17CalcForceForNodesR6Domain.exit.i:            ; preds = %_Z7ReleaseIdEvPPT_.exit.i.i.i, %.split.i.i
>   %178 = load i32, i32* %m_numNode.i.i.i, align 4, !tbaa !6
>   %179 = load i8*, i8** @.apollo.region.handle.5, align 8
>   %180 = icmp eq i8* %179, null
>   br i1 %180, label %181, label %183
> 
> 181:                                              ; preds = %_ZL17CalcForceForNodesR6Domain.exit.i
>   %182 = call i8* @__apollo_region_create(i32 1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @8, i64 0, i64 0), i32 2) #7
>   store i8* %182, i8** @.apollo.region.handle.5, align 8
>   br label %183
> 
> 183:                                              ; preds = %181, %_ZL17CalcForceForNodesR6Domain.exit.i
>   %184 = phi i8* [ %179, %_ZL17CalcForceForNodesR6Domain.exit.i ], [ %182, %181 ]
>   call void @__apollo_region_begin(i8* %184) #7
>   %185 = uitofp i32 %178 to float
>   call void @__apollo_region_set_feature(i8* %184, float %185) #7
>   %186 = call i32 @__apollo_region_get_policy(i8* %184) #7
>   switch i32 %186, label %_ZL24CalcAccelerationForNodesR6Domaini.exit.i [
>     i32 0, label %_ZL24CalcAccelerationForNodesR6Domaini.exit.i.sink.split
>     i32 1, label %.apollo.case.1.i22.i
>   ]
5485,5487c2536,2537
< 530:                                              ; preds = %524
<   call void @exit(i32 -2) #29
<   unreachable
---
> .apollo.case.1.i22.i:                             ; preds = %183
>   br label %_ZL24CalcAccelerationForNodesR6Domaini.exit.i.sink.split
5489,5582c2539,2576
< 531:                                              ; preds = %522, %245, %515
<   %532 = bitcast %"class.std::vector.15"* %96 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %532)
<   %533 = bitcast i32* %90 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %533) #10
<   %534 = load i32, i32* %114, align 8, !tbaa !12
<   store i32 %534, i32* %90, align 4, !tbaa !12
<   %535 = icmp eq i32 %534, 0
<   br i1 %535, label %1674, label %536
< 
< 536:                                              ; preds = %531
<   %537 = bitcast double* %91 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %537) #10
<   %538 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 65
<   %539 = load double, double* %538, align 8, !tbaa !74
<   store double %539, double* %91, align 8, !tbaa !2
<   %540 = bitcast double* %92 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %540) #10
<   %541 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 64
<   %542 = load double, double* %541, align 8, !tbaa !75
<   store double %542, double* %92, align 8, !tbaa !2
<   %543 = bitcast double** %93 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %543) #10
<   %544 = sext i32 %534 to i64
<   %545 = shl nsw i64 %544, 3
<   %546 = call noalias i8* @malloc(i64 %545) #10
<   %547 = bitcast double** %93 to i8**
<   store i8* %546, i8** %547, align 8, !tbaa !6
<   %548 = sitofp i32 %534 to float
<   %549 = call noalias nonnull i8* @_Znwm(i64 4) #26
<   %550 = bitcast i8* %549 to float*
<   store float %548, float* %550, align 4
<   %551 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL31ApplyMaterialPropertiesForElemsR6DomainE12apolloRegion, align 8, !tbaa !6
<   %552 = icmp eq %"class.Apollo::Region"* %551, null
<   br i1 %552, label %553, label %608
< 
< 553:                                              ; preds = %536
<   %554 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %555 unwind label %581
< 
< 555:                                              ; preds = %553
<   %556 = bitcast %"class.std::basic_string"* %94 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %556) #10
<   %557 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %95, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %557) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %94, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %95)
<           to label %558 unwind label %583
< 
< 558:                                              ; preds = %555
<   %559 = bitcast i8* %554 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %559, i32 1, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.48, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %94)
<           to label %560 unwind label %585
< 
< 560:                                              ; preds = %558
<   store i8* %554, i8** bitcast (%"class.Apollo::Region"** @_ZZL31ApplyMaterialPropertiesForElemsR6DomainE12apolloRegion to i8**), align 8, !tbaa !6
<   %561 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %94, i64 0, i32 0, i32 0
<   %562 = load i8*, i8** %561, align 8, !tbaa !8
<   %563 = getelementptr inbounds i8, i8* %562, i64 -24
<   %564 = bitcast i8* %563 to %"struct.std::basic_string<char>::_Rep"*
<   %565 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %9, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %565) #10
<   %566 = icmp eq i8* %563, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %566, label %579, label %567, !prof !11
< 
< 567:                                              ; preds = %560
<   %568 = getelementptr inbounds i8, i8* %562, i64 -8
<   %569 = bitcast i8* %568 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %570, label %572
< 
< 570:                                              ; preds = %567
<   %571 = atomicrmw volatile add i32* %569, i32 -1 acq_rel
<   br label %575
< 
< 572:                                              ; preds = %567
<   %573 = load i32, i32* %569, align 4, !tbaa !12
<   %574 = add nsw i32 %573, -1
<   store i32 %574, i32* %569, align 4, !tbaa !12
<   br label %575
< 
< 575:                                              ; preds = %572, %570
<   %576 = phi i32 [ %571, %570 ], [ %573, %572 ]
<   %577 = icmp slt i32 %576, 1
<   br i1 %577, label %578, label %579
< 
< 578:                                              ; preds = %575
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %564, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %9) #10
<   br label %579
< 
< 579:                                              ; preds = %578, %575, %560
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %565) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %557) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %556) #10
<   %580 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL31ApplyMaterialPropertiesForElemsR6DomainE12apolloRegion, align 8, !tbaa !6
<   br label %608
---
> _ZL24CalcAccelerationForNodesR6Domaini.exit.i.sink.split: ; preds = %183, %.apollo.case.1.i22.i
>   %.sink46 = phi i32 [ 1, %.apollo.case.1.i22.i ], [ 36, %183 ]
>   call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num.i36.i, i32 %.sink46) #7
>   br label %_ZL24CalcAccelerationForNodesR6Domaini.exit.i
> 
> _ZL24CalcAccelerationForNodesR6Domaini.exit.i:    ; preds = %_ZL24CalcAccelerationForNodesR6Domaini.exit.i.sink.split, %183
>   %numNode.casted.sroa.0.0.insert.ext.i23.i = zext i32 %178 to i64
>   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 2, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, %class.Domain*)* @.omp_outlined..25 to void (i32*, i32*, ...)*), i64 %numNode.casted.sroa.0.0.insert.ext.i23.i, %class.Domain* nonnull %domain) #7
>   %187 = load i8*, i8** @.apollo.region.handle.5, align 8
>   call void @__apollo_region_end(i8* %187) #7
>   %m_sizeX.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 85
>   %188 = load i32, i32* %m_sizeX.i.i.i, align 4, !tbaa !6
>   %189 = bitcast i32* %numNodeBC.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %189) #7
>   %add.i.i = add nsw i32 %188, 1
>   %mul.i.i = mul nsw i32 %add.i.i, %add.i.i
>   store i32 %mul.i.i, i32* %numNodeBC.i.i, align 4, !tbaa !6
>   %190 = load i8*, i8** @.apollo.region.handle.28, align 8
>   %191 = icmp eq i8* %190, null
>   br i1 %191, label %192, label %194
> 
> 192:                                              ; preds = %_ZL24CalcAccelerationForNodesR6Domaini.exit.i
>   %193 = call i8* @__apollo_region_create(i32 3, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @31, i64 0, i64 0), i32 2)
>   store i8* %193, i8** @.apollo.region.handle.28, align 8
>   br label %194
> 
> 194:                                              ; preds = %192, %_ZL24CalcAccelerationForNodesR6Domaini.exit.i
>   %195 = phi i8* [ %190, %_ZL24CalcAccelerationForNodesR6Domaini.exit.i ], [ %193, %192 ]
>   call void @__apollo_region_begin(i8* %195)
>   %196 = uitofp i32 %mul.i.i to float
>   call void @__apollo_region_set_feature(i8* %195, float %196)
>   call void @__apollo_region_set_feature(i8* %195, float %196)
>   call void @__apollo_region_set_feature(i8* %195, float %196)
>   %197 = call i32 @__apollo_region_get_policy(i8* %195)
>   switch i32 %197, label %_ZL43ApplyAccelerationBoundaryConditionsForNodesR6Domain.exit.i [
>     i32 0, label %_ZL43ApplyAccelerationBoundaryConditionsForNodesR6Domain.exit.i.sink.split
>     i32 1, label %.apollo.case.1.i27.i
>   ]
5584,5587c2578,2579
< 581:                                              ; preds = %631, %628, %608, %553
<   %582 = landingpad { i8*, i32 }
<           cleanup
<   br label %1672
---
> .apollo.case.1.i27.i:                             ; preds = %194
>   br label %_ZL43ApplyAccelerationBoundaryConditionsForNodesR6Domain.exit.i.sink.split
5589,5592c2581,2618
< 583:                                              ; preds = %555
<   %584 = landingpad { i8*, i32 }
<           cleanup
<   br label %606
---
> _ZL43ApplyAccelerationBoundaryConditionsForNodesR6Domain.exit.i.sink.split: ; preds = %194, %.apollo.case.1.i27.i
>   %.sink47 = phi i32 [ 1, %.apollo.case.1.i27.i ], [ 36, %194 ]
>   call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num.i36.i, i32 %.sink47)
>   br label %_ZL43ApplyAccelerationBoundaryConditionsForNodesR6Domain.exit.i
> 
> _ZL43ApplyAccelerationBoundaryConditionsForNodesR6Domain.exit.i: ; preds = %_ZL43ApplyAccelerationBoundaryConditionsForNodesR6Domain.exit.i.sink.split, %194
>   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 2, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, %class.Domain*, i32*)* @.omp_outlined..26 to void (i32*, i32*, ...)*), %class.Domain* nonnull %domain, i32* nonnull %numNodeBC.i.i)
>   %198 = load i8*, i8** @.apollo.region.handle.28, align 8
>   call void @__apollo_region_end(i8* %198)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %189) #7
>   %199 = load i32, i32* %m_numNode.i.i.i, align 4, !tbaa !6
>   %200 = bitcast double* %dt.addr.i30.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %200)
>   %201 = bitcast double* %u_cut.addr.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %201)
>   %202 = bitcast double* %dt.addr.i30.i to i64*
>   store i64 %1, i64* %202, align 8, !tbaa !2
>   %203 = bitcast double* %u_cut.addr.i.i to i64*
>   store i64 %3, i64* %203, align 8, !tbaa !2
>   %204 = load i8*, i8** @.apollo.region.handle.21, align 8
>   %205 = icmp eq i8* %204, null
>   br i1 %205, label %206, label %208
> 
> 206:                                              ; preds = %_ZL43ApplyAccelerationBoundaryConditionsForNodesR6Domain.exit.i
>   %207 = call i8* @__apollo_region_create(i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @24, i64 0, i64 0), i32 2) #7
>   store i8* %207, i8** @.apollo.region.handle.21, align 8
>   br label %208
> 
> 208:                                              ; preds = %206, %_ZL43ApplyAccelerationBoundaryConditionsForNodesR6Domain.exit.i
>   %209 = phi i8* [ %204, %_ZL43ApplyAccelerationBoundaryConditionsForNodesR6Domain.exit.i ], [ %207, %206 ]
>   call void @__apollo_region_begin(i8* %209) #7
>   %210 = uitofp i32 %199 to float
>   call void @__apollo_region_set_feature(i8* %209, float %210) #7
>   %211 = call i32 @__apollo_region_get_policy(i8* %209) #7
>   switch i32 %211, label %_ZL20CalcVelocityForNodesR6Domainddi.exit.i [
>     i32 0, label %_ZL20CalcVelocityForNodesR6Domainddi.exit.i.sink.split
>     i32 1, label %.apollo.case.1.i33.i
>   ]
5594,5609c2620,2621
< 585:                                              ; preds = %558
<   %586 = landingpad { i8*, i32 }
<           cleanup
<   %587 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %94, i64 0, i32 0, i32 0
<   %588 = load i8*, i8** %587, align 8, !tbaa !8
<   %589 = getelementptr inbounds i8, i8* %588, i64 -24
<   %590 = bitcast i8* %589 to %"struct.std::basic_string<char>::_Rep"*
<   %591 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %8, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %591) #10
<   %592 = icmp eq i8* %589, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %592, label %605, label %593, !prof !11
< 
< 593:                                              ; preds = %585
<   %594 = getelementptr inbounds i8, i8* %588, i64 -8
<   %595 = bitcast i8* %594 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %596, label %598
---
> .apollo.case.1.i33.i:                             ; preds = %208
>   br label %_ZL20CalcVelocityForNodesR6Domainddi.exit.i.sink.split
5611,5613c2623,2658
< 596:                                              ; preds = %593
<   %597 = atomicrmw volatile add i32* %595, i32 -1 acq_rel
<   br label %601
---
> _ZL20CalcVelocityForNodesR6Domainddi.exit.i.sink.split: ; preds = %208, %.apollo.case.1.i33.i
>   %.sink48 = phi i32 [ 1, %.apollo.case.1.i33.i ], [ 36, %208 ]
>   call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num.i36.i, i32 %.sink48) #7
>   br label %_ZL20CalcVelocityForNodesR6Domainddi.exit.i
> 
> _ZL20CalcVelocityForNodesR6Domainddi.exit.i:      ; preds = %_ZL20CalcVelocityForNodesR6Domainddi.exit.i.sink.split, %208
>   %numNode.casted.sroa.0.0.insert.ext.i34.i = zext i32 %199 to i64
>   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 4, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, %class.Domain*, double*, double*)* @.omp_outlined..27 to void (i32*, i32*, ...)*), i64 %numNode.casted.sroa.0.0.insert.ext.i34.i, %class.Domain* nonnull %domain, double* nonnull %dt.addr.i30.i, double* nonnull %u_cut.addr.i.i) #7
>   %212 = load i8*, i8** @.apollo.region.handle.21, align 8
>   call void @__apollo_region_end(i8* %212) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %200)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %201)
>   %213 = load i32, i32* %m_numNode.i.i.i, align 4, !tbaa !6
>   %214 = bitcast double* %dt.addr.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %214)
>   %215 = bitcast double* %dt.addr.i.i to i64*
>   store i64 %1, i64* %215, align 8, !tbaa !2
>   %216 = load i8*, i8** @.apollo.region.handle.26, align 8
>   %217 = icmp eq i8* %216, null
>   br i1 %217, label %218, label %220
> 
> 218:                                              ; preds = %_ZL20CalcVelocityForNodesR6Domainddi.exit.i
>   %219 = call i8* @__apollo_region_create(i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @29, i64 0, i64 0), i32 2) #7
>   store i8* %219, i8** @.apollo.region.handle.26, align 8
>   br label %220
> 
> 220:                                              ; preds = %218, %_ZL20CalcVelocityForNodesR6Domainddi.exit.i
>   %221 = phi i8* [ %216, %_ZL20CalcVelocityForNodesR6Domainddi.exit.i ], [ %219, %218 ]
>   call void @__apollo_region_begin(i8* %221) #7
>   %222 = uitofp i32 %213 to float
>   call void @__apollo_region_set_feature(i8* %221, float %222) #7
>   %223 = call i32 @__apollo_region_get_policy(i8* %221) #7
>   switch i32 %223, label %_ZL13LagrangeNodalR6Domain.exit [
>     i32 0, label %_ZL13LagrangeNodalR6Domain.exit.sink.split
>     i32 1, label %.apollo.case.1.i.i
>   ]
5615,5619c2660,2661
< 598:                                              ; preds = %593
<   %599 = load i32, i32* %595, align 4, !tbaa !12
<   %600 = add nsw i32 %599, -1
<   store i32 %600, i32* %595, align 4, !tbaa !12
<   br label %601
---
> .apollo.case.1.i.i:                               ; preds = %220
>   br label %_ZL13LagrangeNodalR6Domain.exit.sink.split
5621,5875c2663,2713
< 601:                                              ; preds = %598, %596
<   %602 = phi i32 [ %597, %596 ], [ %599, %598 ]
<   %603 = icmp slt i32 %602, 1
<   br i1 %603, label %604, label %605
< 
< 604:                                              ; preds = %601
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %590, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %8) #10
<   br label %605
< 
< 605:                                              ; preds = %604, %601, %585
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %591) #10
<   br label %606
< 
< 606:                                              ; preds = %605, %583
<   %607 = phi { i8*, i32 } [ %586, %605 ], [ %584, %583 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %557) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %556) #10
<   call void @_ZdlPv(i8* nonnull %554) #28
<   br label %1672
< 
< 608:                                              ; preds = %579, %536
<   %609 = phi %"class.Apollo::Region"* [ %580, %579 ], [ %551, %536 ]
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %532, i8 0, i64 24, i1 false) #10
<   %610 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %611 unwind label %581
< 
< 611:                                              ; preds = %608
<   %612 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %96, i64 0, i32 0, i32 0, i32 0
<   %613 = bitcast %"class.std::vector.15"* %96 to i8**
<   store i8* %610, i8** %613, align 8, !tbaa !14
<   %614 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %96, i64 0, i32 0, i32 0, i32 1
<   %615 = bitcast float** %614 to i8**
<   %616 = getelementptr inbounds i8, i8* %610, i64 4
<   %617 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %96, i64 0, i32 0, i32 0, i32 2
<   %618 = bitcast float** %617 to i8**
<   store i8* %616, i8** %618, align 8, !tbaa !17
<   %619 = bitcast i8* %549 to i32*
<   %620 = bitcast i8* %610 to i32*
<   %621 = load i32, i32* %619, align 4
<   store i32 %621, i32* %620, align 4
<   store i8* %616, i8** %615, align 8, !tbaa !18
<   %622 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %609, %"class.std::vector.15"* nonnull %96)
<           to label %623 unwind label %807
< 
< 623:                                              ; preds = %611
<   %624 = load float*, float** %612, align 8, !tbaa !14
<   %625 = icmp eq float* %624, null
<   br i1 %625, label %628, label %626
< 
< 626:                                              ; preds = %623
<   %627 = bitcast float* %624 to i8*
<   call void @_ZdlPv(i8* nonnull %627) #10
<   br label %628
< 
< 628:                                              ; preds = %626, %623
<   %629 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL31ApplyMaterialPropertiesForElemsR6DomainE12apolloRegion, align 8, !tbaa !6
<   %630 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %629)
<           to label %631 unwind label %581
< 
< 631:                                              ; preds = %628
<   %632 = icmp eq i32 %630, 1
<   %633 = select i1 %632, i32 1, i32 36
<   %634 = icmp eq i32 %630, 0
<   %635 = select i1 %634, i32 36, i32 %633
<   call void @omp_set_num_threads(i32 %635) #10
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 5, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, double**, %class.Domain*, double*, double*)* @.omp_outlined..49 to void (i32*, i32*, ...)*), i32* nonnull %90, double** nonnull %93, %class.Domain* nonnull %0, double* nonnull %91, double* nonnull %92)
<   %636 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL31ApplyMaterialPropertiesForElemsR6DomainE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %636)
<           to label %637 unwind label %581
< 
< 637:                                              ; preds = %631
<   %638 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 16
<   %639 = load i32, i32* %638, align 8, !tbaa !12
<   %640 = icmp sgt i32 %639, 0
<   br i1 %640, label %641, label %801
< 
< 641:                                              ; preds = %637
<   %642 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 18
<   %643 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 20
<   %644 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 17
<   %645 = bitcast double** %67 to i8*
<   %646 = bitcast i32* %68 to i8*
<   %647 = bitcast i32** %69 to i8*
<   %648 = bitcast %"class.std::vector.15"* %86 to i8*
<   %649 = bitcast %"class.std::vector.15"* %89 to i8*
<   %650 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 51
<   %651 = bitcast double* %650 to i64*
<   %652 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 52
<   %653 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 57
<   %654 = bitcast double* %653 to i64*
<   %655 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 53
<   %656 = bitcast double* %655 to i64*
<   %657 = bitcast double* %70 to i8*
<   %658 = bitcast double* %71 to i8*
<   %659 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 66
<   %660 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 67
<   %661 = bitcast double* %660 to i64*
<   %662 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 69
<   %663 = bitcast double** %72 to i8*
<   %664 = bitcast double** %72 to i8**
<   %665 = bitcast double** %73 to i8*
<   %666 = bitcast double** %73 to i8**
<   %667 = bitcast double** %74 to i8*
<   %668 = bitcast double** %74 to i8**
<   %669 = bitcast double** %75 to i8*
<   %670 = bitcast double** %75 to i8**
<   %671 = bitcast double** %76 to i8*
<   %672 = bitcast double** %76 to i8**
<   %673 = bitcast double** %77 to i8*
<   %674 = bitcast double** %77 to i8**
<   %675 = bitcast double** %78 to i8*
<   %676 = bitcast double** %78 to i8**
<   %677 = bitcast double** %79 to i8*
<   %678 = bitcast double** %79 to i8**
<   %679 = bitcast double** %80 to i8*
<   %680 = bitcast double** %80 to i8**
<   %681 = bitcast double** %81 to i8*
<   %682 = bitcast double** %81 to i8**
<   %683 = bitcast double** %82 to i8*
<   %684 = bitcast double** %82 to i8**
<   %685 = bitcast double** %83 to i8*
<   %686 = bitcast double** %83 to i8**
<   %687 = bitcast %"class.std::basic_string"* %84 to i8*
<   %688 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %85, i64 0, i32 0
<   %689 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %84, i64 0, i32 0, i32 0
<   %690 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %66, i64 0, i32 0
<   %691 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %86, i64 0, i32 0, i32 0, i32 0
<   %692 = bitcast %"class.std::vector.15"* %86 to i8**
<   %693 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %86, i64 0, i32 0, i32 0, i32 1
<   %694 = bitcast float** %693 to i8**
<   %695 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %86, i64 0, i32 0, i32 0, i32 2
<   %696 = bitcast float** %695 to i8**
<   %697 = bitcast double** %34 to i8*
<   %698 = bitcast double** %35 to i8*
<   %699 = bitcast double** %36 to i8*
<   %700 = bitcast double** %37 to i8*
<   %701 = bitcast double** %38 to i8*
<   %702 = bitcast double** %39 to i8*
<   %703 = bitcast double** %40 to i8*
<   %704 = bitcast double** %41 to i8*
<   %705 = bitcast double** %42 to i8*
<   %706 = bitcast double** %43 to i8*
<   %707 = bitcast double** %44 to i8*
<   %708 = bitcast double** %45 to i8*
<   %709 = bitcast double** %46 to i8*
<   %710 = bitcast double** %47 to i8*
<   %711 = bitcast i32** %48 to i8*
<   %712 = bitcast %"class.std::vector.15"* %52 to i8*
<   %713 = bitcast %"class.std::vector.15"* %55 to i8*
<   %714 = bitcast %"class.std::vector.15"* %58 to i8*
<   %715 = bitcast %"class.std::vector.15"* %61 to i8*
<   %716 = bitcast %"class.std::vector.15"* %64 to i8*
<   %717 = bitcast double** %37 to i8**
<   %718 = bitcast double** %38 to i8**
<   %719 = bitcast double** %49 to i8*
<   %720 = bitcast double** %49 to i8**
<   %721 = bitcast %"class.std::basic_string"* %50 to i8*
<   %722 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %51, i64 0, i32 0
<   %723 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %50, i64 0, i32 0, i32 0
<   %724 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %33, i64 0, i32 0
<   %725 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %52, i64 0, i32 0, i32 0, i32 0
<   %726 = bitcast %"class.std::vector.15"* %52 to i8**
<   %727 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %52, i64 0, i32 0, i32 0, i32 1
<   %728 = bitcast float** %727 to i8**
<   %729 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %52, i64 0, i32 0, i32 0, i32 2
<   %730 = bitcast float** %729 to i8**
<   %731 = bitcast %"class.std::basic_string"* %53 to i8*
<   %732 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %54, i64 0, i32 0
<   %733 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %53, i64 0, i32 0, i32 0
<   %734 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %31, i64 0, i32 0
<   %735 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %55, i64 0, i32 0, i32 0, i32 0
<   %736 = bitcast %"class.std::vector.15"* %55 to i8**
<   %737 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %55, i64 0, i32 0, i32 0, i32 1
<   %738 = bitcast float** %737 to i8**
<   %739 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %55, i64 0, i32 0, i32 0, i32 2
<   %740 = bitcast float** %739 to i8**
<   %741 = bitcast %"class.std::basic_string"* %56 to i8*
<   %742 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %57, i64 0, i32 0
<   %743 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %56, i64 0, i32 0, i32 0
<   %744 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %29, i64 0, i32 0
<   %745 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %58, i64 0, i32 0, i32 0, i32 0
<   %746 = bitcast %"class.std::vector.15"* %58 to i8**
<   %747 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %58, i64 0, i32 0, i32 0, i32 1
<   %748 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %58, i64 0, i32 0, i32 0, i32 2
<   %749 = bitcast float** %748 to i8**
<   %750 = bitcast float** %747 to i8**
<   %751 = bitcast %"class.std::basic_string"* %59 to i8*
<   %752 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %60, i64 0, i32 0
<   %753 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %59, i64 0, i32 0, i32 0
<   %754 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %26, i64 0, i32 0
<   %755 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %61, i64 0, i32 0, i32 0, i32 0
<   %756 = bitcast %"class.std::vector.15"* %61 to i8**
<   %757 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %61, i64 0, i32 0, i32 0, i32 1
<   %758 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %61, i64 0, i32 0, i32 0, i32 2
<   %759 = bitcast float** %758 to i8**
<   %760 = bitcast float** %757 to i8**
<   %761 = bitcast %"class.std::basic_string"* %62 to i8*
<   %762 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %63, i64 0, i32 0
<   %763 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %62, i64 0, i32 0, i32 0
<   %764 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %25, i64 0, i32 0
<   %765 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %64, i64 0, i32 0, i32 0, i32 0
<   %766 = bitcast %"class.std::vector.15"* %64 to i8**
<   %767 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %64, i64 0, i32 0, i32 0, i32 1
<   %768 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %64, i64 0, i32 0, i32 0, i32 2
<   %769 = bitcast float** %768 to i8**
<   %770 = bitcast float** %767 to i8**
<   %771 = bitcast %"class.std::basic_string"* %87 to i8*
<   %772 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %88, i64 0, i32 0
<   %773 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %87, i64 0, i32 0, i32 0
<   %774 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %23, i64 0, i32 0
<   %775 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %89, i64 0, i32 0, i32 0, i32 0
<   %776 = bitcast %"class.std::vector.15"* %89 to i8**
<   %777 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %89, i64 0, i32 0, i32 0, i32 1
<   %778 = bitcast float** %777 to i8**
<   %779 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %89, i64 0, i32 0, i32 0, i32 2
<   %780 = bitcast float** %779 to i8**
<   %781 = bitcast double** %12 to i8*
<   %782 = bitcast double** %13 to i8*
<   %783 = bitcast double** %14 to i8*
<   %784 = bitcast double** %15 to i8*
<   %785 = bitcast double** %16 to i8*
<   %786 = bitcast i32* %17 to i8*
<   %787 = bitcast i32** %18 to i8*
<   %788 = bitcast %"class.std::vector.15"* %21 to i8*
<   %789 = bitcast double** %15 to i8**
<   %790 = bitcast double** %16 to i8**
<   %791 = bitcast %"class.std::basic_string"* %19 to i8*
<   %792 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %20, i64 0, i32 0
<   %793 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %19, i64 0, i32 0, i32 0
<   %794 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %11, i64 0, i32 0
<   %795 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %21, i64 0, i32 0, i32 0, i32 0
<   %796 = bitcast %"class.std::vector.15"* %21 to i8**
<   %797 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %21, i64 0, i32 0, i32 0, i32 1
<   %798 = bitcast float** %797 to i8**
<   %799 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %21, i64 0, i32 0, i32 0, i32 2
<   %800 = bitcast float** %799 to i8**
<   br label %813
< 
< 801:                                              ; preds = %1667, %637
<   %802 = load double*, double** %93, align 8, !tbaa !6
<   %803 = icmp eq double* %802, null
<   br i1 %803, label %806, label %804
< 
< 804:                                              ; preds = %801
<   %805 = bitcast double* %802 to i8*
<   call void @free(i8* %805) #10
<   store double* null, double** %93, align 8, !tbaa !6
<   br label %806
< 
< 806:                                              ; preds = %804, %801
<   call void @_ZdlPv(i8* nonnull %549) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %543) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %540) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %537) #10
<   br label %1674
---
> _ZL13LagrangeNodalR6Domain.exit.sink.split:       ; preds = %220, %.apollo.case.1.i.i
>   %.sink49 = phi i32 [ 1, %.apollo.case.1.i.i ], [ 36, %220 ]
>   call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num.i36.i, i32 %.sink49) #7
>   br label %_ZL13LagrangeNodalR6Domain.exit
> 
> _ZL13LagrangeNodalR6Domain.exit:                  ; preds = %_ZL13LagrangeNodalR6Domain.exit.sink.split, %220
>   %numNode.casted.sroa.0.0.insert.ext.i.i = zext i32 %213 to i64
>   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 3, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, %class.Domain*, double*)* @.omp_outlined..28 to void (i32*, i32*, ...)*), i64 %numNode.casted.sroa.0.0.insert.ext.i.i, %class.Domain* nonnull %domain, double* nonnull %dt.addr.i.i) #7
>   %224 = load i8*, i8** @.apollo.region.handle.26, align 8
>   call void @__apollo_region_end(i8* %224) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %214)
>   %225 = load i32, i32* %m_numElem.i.i.i.i, align 8, !tbaa !6
>   %cmp.i.i = icmp sgt i32 %225, 0
>   br i1 %cmp.i.i, label %if.then.i.i, label %_ZL20CalcLagrangeElementsR6Domain.exit.i
> 
> if.then.i.i:                                      ; preds = %_ZL13LagrangeNodalR6Domain.exit
>   %226 = load double, double* %m_deltatime.i.i, align 8, !tbaa !2
>   %conv.i15.i.i = zext i32 %225 to i64
>   %mul.i.i.i.i4 = shl nuw nsw i64 %conv.i15.i.i, 3
>   %call.i.i.i.i5 = call noalias i8* @malloc(i64 %mul.i.i.i.i4) #7
>   %m_dxx.i12.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 29
>   %227 = bitcast double** %m_dxx.i12.i.i to i8**
>   store i8* %call.i.i.i.i5, i8** %227, align 8, !tbaa !13
>   %call.i9.i.i.i = call noalias i8* @malloc(i64 %mul.i.i.i.i4) #7
>   %m_dyy.i13.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 30
>   %228 = bitcast double** %m_dyy.i13.i.i to i8**
>   store i8* %call.i9.i.i.i, i8** %228, align 8, !tbaa !17
>   %call.i11.i.i.i = call noalias i8* @malloc(i64 %mul.i.i.i.i4) #7
>   %m_dzz.i14.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 31
>   %229 = bitcast double** %m_dzz.i14.i.i to i8**
>   store i8* %call.i11.i.i.i, i8** %229, align 8, !tbaa !18
>   call void @_Z22CalcKinematicsForElemsR6Domaindi(%class.Domain* nonnull align 8 dereferenceable(1312) %domain, double %226, i32 %225)
>   %230 = load i8*, i8** @.apollo.region.handle.13, align 8
>   %231 = icmp eq i8* %230, null
>   br i1 %231, label %232, label %234
> 
> 232:                                              ; preds = %if.then.i.i
>   %233 = call i8* @__apollo_region_create(i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @16, i64 0, i64 0), i32 2)
>   store i8* %233, i8** @.apollo.region.handle.13, align 8
>   br label %234
> 
> 234:                                              ; preds = %232, %if.then.i.i
>   %235 = phi i8* [ %230, %if.then.i.i ], [ %233, %232 ]
>   call void @__apollo_region_begin(i8* %235)
>   %236 = uitofp i32 %225 to float
>   call void @__apollo_region_set_feature(i8* %235, float %236)
>   %237 = call i32 @__apollo_region_get_policy(i8* %235)
>   switch i32 %237, label %.split.i.i9 [
>     i32 0, label %.split.i.i9.sink.split
>     i32 1, label %.apollo.case.1.i.i7
>   ]
5877,5914c2715,2716
< 807:                                              ; preds = %611
<   %808 = landingpad { i8*, i32 }
<           cleanup
<   %809 = load float*, float** %612, align 8, !tbaa !14
<   %810 = icmp eq float* %809, null
<   br i1 %810, label %1672, label %811
< 
< 811:                                              ; preds = %807
<   %812 = bitcast float* %809 to i8*
<   call void @_ZdlPv(i8* nonnull %812) #10
<   br label %1672
< 
< 813:                                              ; preds = %1667, %641
<   %814 = phi i64 [ 0, %641 ], [ %1668, %1667 ]
<   %815 = phi i32 [ %639, %641 ], [ %1669, %1667 ]
<   %816 = load i32*, i32** %642, align 8, !tbaa !43
<   %817 = getelementptr inbounds i32, i32* %816, i64 %814
<   %818 = load i32, i32* %817, align 4, !tbaa !12
<   %819 = load i32**, i32*** %643, align 8, !tbaa !44
<   %820 = getelementptr inbounds i32*, i32** %819, i64 %814
<   %821 = load i32*, i32** %820, align 8, !tbaa !6
<   %822 = sdiv i32 %815, 2
<   %823 = sext i32 %822 to i64
<   %824 = icmp slt i64 %814, %823
<   br i1 %824, label %841, label %825
< 
< 825:                                              ; preds = %813
<   %826 = add nsw i32 %815, 15
<   %827 = sdiv i32 %826, -20
<   %828 = add i32 %827, %815
<   %829 = sext i32 %828 to i64
<   %830 = icmp slt i64 %814, %829
<   %831 = load i32, i32* %644, align 4, !tbaa !12
<   br i1 %830, label %832, label %838
< 
< 832:                                              ; preds = %825
<   %833 = add nsw i32 %831, 1
<   br label %841
---
> .apollo.case.1.i.i7:                              ; preds = %234
>   br label %.split.i.i9.sink.split
5916,5919c2718,2827
< 834:                                              ; preds = %880
<   %835 = landingpad { i8*, i32 }
<           cleanup
<   br label %1672
---
> .split.i.i9.sink.split:                           ; preds = %234, %.apollo.case.1.i.i7
>   %.sink50 = phi i32 [ 1, %.apollo.case.1.i.i7 ], [ 36, %234 ]
>   call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num.i36.i, i32 %.sink50)
>   br label %.split.i.i9
> 
> .split.i.i9:                                      ; preds = %.split.i.i9.sink.split, %234
>   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 2, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, %class.Domain*)* @.omp_outlined..29 to void (i32*, i32*, ...)*), i64 %conv.i15.i.i, %class.Domain* nonnull %domain)
>   %238 = load i8*, i8** @.apollo.region.handle.13, align 8
>   call void @__apollo_region_end(i8* %238)
>   %239 = load double*, double** %m_dzz.i14.i.i, align 8, !tbaa !41
>   %cmp.not.i.i.i.i8 = icmp eq double* %239, null
>   br i1 %cmp.not.i.i.i.i8, label %_Z7ReleaseIdEvPPT_.exit.i.i.i11, label %if.then.i.i.i.i10
> 
> if.then.i.i.i.i10:                                ; preds = %.split.i.i9
>   %240 = bitcast double* %239 to i8*
>   call void @free(i8* %240) #7
>   store double* null, double** %m_dzz.i14.i.i, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit.i.i.i11
> 
> _Z7ReleaseIdEvPPT_.exit.i.i.i11:                  ; preds = %if.then.i.i.i.i10, %.split.i.i9
>   %241 = load double*, double** %m_dyy.i13.i.i, align 8, !tbaa !41
>   %cmp.not.i2.i.i.i = icmp eq double* %241, null
>   br i1 %cmp.not.i2.i.i.i, label %_Z7ReleaseIdEvPPT_.exit4.i.i.i, label %if.then.i3.i.i.i
> 
> if.then.i3.i.i.i:                                 ; preds = %_Z7ReleaseIdEvPPT_.exit.i.i.i11
>   %242 = bitcast double* %241 to i8*
>   call void @free(i8* %242) #7
>   store double* null, double** %m_dyy.i13.i.i, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit4.i.i.i
> 
> _Z7ReleaseIdEvPPT_.exit4.i.i.i:                   ; preds = %if.then.i3.i.i.i, %_Z7ReleaseIdEvPPT_.exit.i.i.i11
>   %243 = load double*, double** %m_dxx.i12.i.i, align 8, !tbaa !41
>   %cmp.not.i5.i.i.i = icmp eq double* %243, null
>   br i1 %cmp.not.i5.i.i.i, label %_ZL20CalcLagrangeElementsR6Domain.exitthread-pre-split.i, label %if.then.i6.i.i.i
> 
> if.then.i6.i.i.i:                                 ; preds = %_Z7ReleaseIdEvPPT_.exit4.i.i.i
>   %244 = bitcast double* %243 to i8*
>   call void @free(i8* %244) #7
>   store double* null, double** %m_dxx.i12.i.i, align 8, !tbaa !41
>   br label %_ZL20CalcLagrangeElementsR6Domain.exitthread-pre-split.i
> 
> _ZL20CalcLagrangeElementsR6Domain.exitthread-pre-split.i: ; preds = %if.then.i6.i.i.i, %_Z7ReleaseIdEvPPT_.exit4.i.i.i
>   %.pr.i = load i32, i32* %m_numElem.i.i.i.i, align 8, !tbaa !6
>   br label %_ZL20CalcLagrangeElementsR6Domain.exit.i
> 
> _ZL20CalcLagrangeElementsR6Domain.exit.i:         ; preds = %_ZL20CalcLagrangeElementsR6Domain.exitthread-pre-split.i, %_ZL13LagrangeNodalR6Domain.exit
>   %245 = phi i32 [ %.pr.i, %_ZL20CalcLagrangeElementsR6Domain.exitthread-pre-split.i ], [ %225, %_ZL13LagrangeNodalR6Domain.exit ]
>   %cmp.not.i.i = icmp eq i32 %245, 0
>   br i1 %cmp.not.i.i, label %_ZL13CalcQForElemsR6Domain.exit.i, label %if.then.i8.i
> 
> if.then.i8.i:                                     ; preds = %_ZL20CalcLagrangeElementsR6Domain.exit.i
>   %246 = load i32, i32* %m_sizeX.i.i.i, align 4, !tbaa !6
>   %mul.i.i13 = shl nsw i32 %246, 1
>   %m_sizeY.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 86
>   %247 = load i32, i32* %m_sizeY.i.i.i, align 8, !tbaa !6
>   %mul3.i.i = mul nsw i32 %mul.i.i13, %247
>   %m_sizeZ.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 87
>   %248 = load i32, i32* %m_sizeZ.i.i.i, align 4, !tbaa !6
>   %mul12.i.i = shl i32 %247, 1
>   %reass.add.i.i = add i32 %mul12.i.i, %mul.i.i13
>   %reass.mul.i.i = mul i32 %reass.add.i.i, %248
>   %add8.i.i = add i32 %mul3.i.i, %245
>   %add13.i.i = add i32 %add8.i.i, %reass.mul.i.i
>   %conv.i47.i.i = sext i32 %245 to i64
>   %mul.i.i.i6.i = shl nsw i64 %conv.i47.i.i, 3
>   %call.i.i.i7.i = call noalias i8* @malloc(i64 %mul.i.i.i6.i) #7
>   %m_delx_xi.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 35
>   %249 = bitcast double** %m_delx_xi.i.i.i to i8**
>   store i8* %call.i.i.i7.i, i8** %249, align 8, !tbaa !42
>   %call.i17.i.i.i = call noalias i8* @malloc(i64 %mul.i.i.i6.i) #7
>   %m_delx_eta.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 36
>   %250 = bitcast double** %m_delx_eta.i.i.i to i8**
>   store i8* %call.i17.i.i.i, i8** %250, align 8, !tbaa !43
>   %call.i19.i.i.i = call noalias i8* @malloc(i64 %mul.i.i.i6.i) #7
>   %m_delx_zeta.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 37
>   %251 = bitcast double** %m_delx_zeta.i.i.i to i8**
>   store i8* %call.i19.i.i.i, i8** %251, align 8, !tbaa !44
>   %conv6.i.i.i = sext i32 %add13.i.i to i64
>   %mul.i20.i.i.i = shl nsw i64 %conv6.i.i.i, 3
>   %call.i21.i.i.i = call noalias i8* @malloc(i64 %mul.i20.i.i.i) #7
>   %m_delv_xi.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 32
>   %252 = bitcast double** %m_delv_xi.i.i.i to i8**
>   store i8* %call.i21.i.i.i, i8** %252, align 8, !tbaa !45
>   %call.i23.i.i.i = call noalias i8* @malloc(i64 %mul.i20.i.i.i) #7
>   %m_delv_eta.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 33
>   %253 = bitcast double** %m_delv_eta.i.i.i to i8**
>   store i8* %call.i23.i.i.i, i8** %253, align 8, !tbaa !46
>   %call.i25.i.i.i = call noalias i8* @malloc(i64 %mul.i20.i.i.i) #7
>   %m_delv_zeta.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 34
>   %254 = bitcast double** %m_delv_zeta.i.i.i to i8**
>   store i8* %call.i25.i.i.i, i8** %254, align 8, !tbaa !47
>   %255 = load i8*, i8** @.apollo.region.handle.24, align 8
>   %256 = icmp eq i8* %255, null
>   br i1 %256, label %257, label %259
> 
> 257:                                              ; preds = %if.then.i8.i
>   %258 = call i8* @__apollo_region_create(i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @27, i64 0, i64 0), i32 2)
>   store i8* %258, i8** @.apollo.region.handle.24, align 8
>   br label %259
> 
> 259:                                              ; preds = %257, %if.then.i8.i
>   %260 = phi i8* [ %255, %if.then.i8.i ], [ %258, %257 ]
>   call void @__apollo_region_begin(i8* %260)
>   %261 = uitofp i32 %245 to float
>   call void @__apollo_region_set_feature(i8* %260, float %261)
>   %262 = call i32 @__apollo_region_get_policy(i8* %260)
>   switch i32 %262, label %_ZL31CalcMonotonicQGradientsForElemsR6Domain.exit.i.i [
>     i32 0, label %_ZL31CalcMonotonicQGradientsForElemsR6Domain.exit.i.i.sink.split
>     i32 1, label %.apollo.case.1.i.i.i15
>   ]
5921,5924c2829,2830
< 836:                                              ; preds = %872
<   %837 = landingpad { i8*, i32 }
<           cleanup
<   br label %1672
---
> .apollo.case.1.i.i.i15:                           ; preds = %259
>   br label %_ZL31CalcMonotonicQGradientsForElemsR6Domain.exit.i.i.sink.split
5926,6082c2832,2884
< 838:                                              ; preds = %825
<   %839 = mul i32 %831, 10
<   %840 = add i32 %839, 10
<   br label %841
< 
< 841:                                              ; preds = %838, %832, %813
<   %842 = phi i32 [ %833, %832 ], [ %840, %838 ], [ 1, %813 ]
<   %843 = load double*, double** %93, align 8, !tbaa !6
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %645)
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %646)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %647)
<   call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %648)
<   call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %649)
<   store double* %843, double** %67, align 8, !tbaa !6
<   store i32 %818, i32* %68, align 4, !tbaa !12
<   store i32* %821, i32** %69, align 8, !tbaa !6
<   %844 = load i64, i64* %651, align 8, !tbaa !76
<   %845 = load double, double* %652, align 8, !tbaa !77
<   %846 = load i64, i64* %654, align 8, !tbaa !78
<   %847 = load i64, i64* %656, align 8, !tbaa !79
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %657) #10
<   %848 = load double, double* %541, align 8, !tbaa !75
<   store double %848, double* %70, align 8, !tbaa !2
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %658) #10
<   %849 = load double, double* %538, align 8, !tbaa !74
<   store double %849, double* %71, align 8, !tbaa !2
<   %850 = load double, double* %659, align 8, !tbaa !80
<   %851 = load i64, i64* %661, align 8, !tbaa !81
<   %852 = load double, double* %662, align 8, !tbaa !82
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %663) #10
<   %853 = sext i32 %818 to i64
<   %854 = shl nsw i64 %853, 3
<   %855 = call noalias i8* @malloc(i64 %854) #10
<   store i8* %855, i8** %664, align 8, !tbaa !6
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %665) #10
<   %856 = call noalias i8* @malloc(i64 %854) #10
<   store i8* %856, i8** %666, align 8, !tbaa !6
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %667) #10
<   %857 = call noalias i8* @malloc(i64 %854) #10
<   store i8* %857, i8** %668, align 8, !tbaa !6
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %669) #10
<   %858 = call noalias i8* @malloc(i64 %854) #10
<   store i8* %858, i8** %670, align 8, !tbaa !6
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %671) #10
<   %859 = call noalias i8* @malloc(i64 %854) #10
<   store i8* %859, i8** %672, align 8, !tbaa !6
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %673) #10
<   %860 = call noalias i8* @malloc(i64 %854) #10
<   store i8* %860, i8** %674, align 8, !tbaa !6
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %675) #10
<   %861 = call noalias i8* @malloc(i64 %854) #10
<   store i8* %861, i8** %676, align 8, !tbaa !6
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %677) #10
<   %862 = call noalias i8* @malloc(i64 %854) #10
<   store i8* %862, i8** %678, align 8, !tbaa !6
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %679) #10
<   %863 = call noalias i8* @malloc(i64 %854) #10
<   store i8* %863, i8** %680, align 8, !tbaa !6
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %681) #10
<   %864 = call noalias i8* @malloc(i64 %854) #10
<   store i8* %864, i8** %682, align 8, !tbaa !6
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %683) #10
<   %865 = call noalias i8* @malloc(i64 %854) #10
<   store i8* %865, i8** %684, align 8, !tbaa !6
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %685) #10
<   %866 = call noalias i8* @malloc(i64 %854) #10
<   store i8* %866, i8** %686, align 8, !tbaa !6
<   %867 = call noalias i8* @malloc(i64 %854) #10
<   %868 = call noalias i8* @malloc(i64 %854) #10
<   %869 = icmp sgt i32 %842, 0
<   br i1 %869, label %870, label %872
< 
< 870:                                              ; preds = %841
<   %871 = bitcast double %852 to i64
<   br label %880
< 
< 872:                                              ; preds = %1413, %841
<   %873 = phi i32 [ %818, %841 ], [ %1416, %1413 ]
<   %874 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %875 unwind label %836
< 
< 875:                                              ; preds = %872
<   %876 = sitofp i32 %873 to float
<   %877 = bitcast i8* %874 to float*
<   store float %876, float* %877, align 4
<   %878 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL15EvalEOSForElemsR6DomainPdiPiiE12apolloRegion_0, align 8, !tbaa !6
<   %879 = icmp eq %"class.Apollo::Region"* %878, null
<   br i1 %879, label %1423, label %1473
< 
< 880:                                              ; preds = %1413, %870
<   %881 = phi i32 [ %818, %870 ], [ %1416, %1413 ]
<   %882 = phi i32 [ 0, %870 ], [ %1414, %1413 ]
<   %883 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %884 unwind label %834
< 
< 884:                                              ; preds = %880
<   %885 = sitofp i32 %881 to float
<   %886 = bitcast i8* %883 to float*
<   store float %885, float* %886, align 4
<   %887 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL15EvalEOSForElemsR6DomainPdiPiiE12apolloRegion, align 8, !tbaa !6
<   %888 = icmp eq %"class.Apollo::Region"* %887, null
<   br i1 %888, label %889, label %939
< 
< 889:                                              ; preds = %884
<   %890 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %891 unwind label %913
< 
< 891:                                              ; preds = %889
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %687) #10
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %688) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %84, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %85)
<           to label %892 unwind label %915
< 
< 892:                                              ; preds = %891
<   %893 = bitcast i8* %890 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %893, i32 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.50, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %84)
<           to label %894 unwind label %917
< 
< 894:                                              ; preds = %892
<   store i8* %890, i8** bitcast (%"class.Apollo::Region"** @_ZZL15EvalEOSForElemsR6DomainPdiPiiE12apolloRegion to i8**), align 8, !tbaa !6
<   %895 = load i8*, i8** %689, align 8, !tbaa !8
<   %896 = getelementptr inbounds i8, i8* %895, i64 -24
<   %897 = bitcast i8* %896 to %"struct.std::basic_string<char>::_Rep"*
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %690) #10
<   %898 = icmp eq i8* %896, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %898, label %911, label %899, !prof !11
< 
< 899:                                              ; preds = %894
<   %900 = getelementptr inbounds i8, i8* %895, i64 -8
<   %901 = bitcast i8* %900 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %902, label %904
< 
< 902:                                              ; preds = %899
<   %903 = atomicrmw volatile add i32* %901, i32 -1 acq_rel
<   br label %907
< 
< 904:                                              ; preds = %899
<   %905 = load i32, i32* %901, align 4, !tbaa !12
<   %906 = add nsw i32 %905, -1
<   store i32 %906, i32* %901, align 4, !tbaa !12
<   br label %907
< 
< 907:                                              ; preds = %904, %902
<   %908 = phi i32 [ %903, %902 ], [ %905, %904 ]
<   %909 = icmp slt i32 %908, 1
<   br i1 %909, label %910, label %911
< 
< 910:                                              ; preds = %907
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %897, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %66) #10
<   br label %911
< 
< 911:                                              ; preds = %910, %907, %894
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %690) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %688) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %687) #10
<   %912 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL15EvalEOSForElemsR6DomainPdiPiiE12apolloRegion, align 8, !tbaa !6
<   br label %939
---
> _ZL31CalcMonotonicQGradientsForElemsR6Domain.exit.i.i.sink.split: ; preds = %259, %.apollo.case.1.i.i.i15
>   %.sink51 = phi i32 [ 1, %.apollo.case.1.i.i.i15 ], [ 36, %259 ]
>   call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num.i36.i, i32 %.sink51)
>   br label %_ZL31CalcMonotonicQGradientsForElemsR6Domain.exit.i.i
> 
> _ZL31CalcMonotonicQGradientsForElemsR6Domain.exit.i.i: ; preds = %_ZL31CalcMonotonicQGradientsForElemsR6Domain.exit.i.i.sink.split, %259
>   %numElem.casted.sroa.0.0.insert.ext.i.i.i = zext i32 %245 to i64
>   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 2, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, %class.Domain*)* @.omp_outlined..30 to void (i32*, i32*, ...)*), i64 %numElem.casted.sroa.0.0.insert.ext.i.i.i, %class.Domain* nonnull %domain)
>   %263 = load i8*, i8** @.apollo.region.handle.24, align 8
>   call void @__apollo_region_end(i8* %263)
>   %m_numReg.i.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 16
>   %264 = load i32, i32* %m_numReg.i.i.i.i, align 8, !tbaa !6
>   %cmp10.i.i.i = icmp sgt i32 %264, 0
>   br i1 %cmp10.i.i.i, label %for.body.lr.ph.i.i.i, label %_ZL22CalcMonotonicQForElemsR6Domain.exit.i.i
> 
> for.body.lr.ph.i.i.i:                             ; preds = %_ZL31CalcMonotonicQGradientsForElemsR6Domain.exit.i.i
>   %m_regElemSize.i.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 18
>   %265 = bitcast i32* %r.addr.i.i.i.i to i8*
>   %m_monoq_limiter_mult.i.i.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 60
>   %266 = bitcast double* %m_monoq_limiter_mult.i.i.i.i.i to i64*
>   %m_monoq_max_slope.i.i.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 59
>   %267 = bitcast double* %m_monoq_max_slope.i.i.i.i.i to i64*
>   %m_qlc_monoq.i.i.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 61
>   %268 = bitcast double* %m_qlc_monoq.i.i.i.i.i to i64*
>   %m_qqc_monoq.i.i.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 62
>   %269 = bitcast double* %m_qqc_monoq.i.i.i.i.i to i64*
>   br label %for.body.i.i.i
> 
> for.body.i.i.i:                                   ; preds = %for.inc.i.i.i, %for.body.lr.ph.i.i.i
>   %270 = phi i32 [ %264, %for.body.lr.ph.i.i.i ], [ %288, %for.inc.i.i.i ]
>   %indvars.iv.i.i.i = phi i64 [ 0, %for.body.lr.ph.i.i.i ], [ %indvars.iv.next.i.i.i, %for.inc.i.i.i ]
>   %271 = load i32*, i32** %m_regElemSize.i.i.i.i, align 8, !tbaa !48
>   %arrayidx.i.i.i.i = getelementptr inbounds i32, i32* %271, i64 %indvars.iv.i.i.i
>   %272 = load i32, i32* %arrayidx.i.i.i.i, align 4, !tbaa !6
>   %cmp2.i.i.i = icmp sgt i32 %272, 0
>   br i1 %cmp2.i.i.i, label %if.then.i.i.i16, label %for.inc.i.i.i
> 
> if.then.i.i.i16:                                  ; preds = %for.body.i.i.i
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %265)
>   %273 = trunc i64 %indvars.iv.i.i.i to i32
>   store i32 %273, i32* %r.addr.i.i.i.i, align 4, !tbaa !6
>   %274 = load i64, i64* %266, align 8, !tbaa !49
>   %275 = load i64, i64* %267, align 8, !tbaa !50
>   %276 = load i64, i64* %268, align 8, !tbaa !51
>   %277 = load i64, i64* %269, align 8, !tbaa !52
>   %278 = load i8*, i8** @.apollo.region.handle.2, align 8
>   %279 = icmp eq i8* %278, null
>   br i1 %279, label %280, label %282
> 
> 280:                                              ; preds = %if.then.i.i.i16
>   %281 = call i8* @__apollo_region_create(i32 1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @5, i64 0, i64 0), i32 2)
>   store i8* %281, i8** @.apollo.region.handle.2, align 8
>   br label %282
6084,6087c2886,2898
< 913:                                              ; preds = %962, %956, %953, %939, %889
<   %914 = landingpad { i8*, i32 }
<           cleanup
<   br label %1664
---
> 282:                                              ; preds = %280, %if.then.i.i.i16
>   %283 = phi i8* [ %278, %if.then.i.i.i16 ], [ %281, %280 ]
>   call void @__apollo_region_begin(i8* %283)
>   %284 = load i32*, i32** %m_regElemSize.i.i.i.i, align 8, !tbaa !48
>   %arrayidx.i.i.i.i.i = getelementptr inbounds i32, i32* %284, i64 %indvars.iv.i.i.i
>   %tmp.apollo.slice16.i.i.i.i = load i32, i32* %arrayidx.i.i.i.i.i, align 4, !tbaa !6
>   %285 = uitofp i32 %tmp.apollo.slice16.i.i.i.i to float
>   call void @__apollo_region_set_feature(i8* %283, float %285)
>   %286 = call i32 @__apollo_region_get_policy(i8* %283)
>   switch i32 %286, label %_ZL28CalcMonotonicQRegionForElemsR6Domainid.exit.i.i.i [
>     i32 0, label %_ZL28CalcMonotonicQRegionForElemsR6Domainid.exit.i.i.i.sink.split
>     i32 1, label %.apollo.case.1.i.i.i.i18
>   ]
6089,6092c2900,2901
< 915:                                              ; preds = %891
<   %916 = landingpad { i8*, i32 }
<           cleanup
<   br label %937
---
> .apollo.case.1.i.i.i.i18:                         ; preds = %282
>   br label %_ZL28CalcMonotonicQRegionForElemsR6Domainid.exit.i.i.i.sink.split
6094,6305c2903,2945
< 917:                                              ; preds = %892
<   %918 = landingpad { i8*, i32 }
<           cleanup
<   %919 = load i8*, i8** %689, align 8, !tbaa !8
<   %920 = getelementptr inbounds i8, i8* %919, i64 -24
<   %921 = bitcast i8* %920 to %"struct.std::basic_string<char>::_Rep"*
<   %922 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %65, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %922) #10
<   %923 = icmp eq i8* %920, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %923, label %936, label %924, !prof !11
< 
< 924:                                              ; preds = %917
<   %925 = getelementptr inbounds i8, i8* %919, i64 -8
<   %926 = bitcast i8* %925 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %927, label %929
< 
< 927:                                              ; preds = %924
<   %928 = atomicrmw volatile add i32* %926, i32 -1 acq_rel
<   br label %932
< 
< 929:                                              ; preds = %924
<   %930 = load i32, i32* %926, align 4, !tbaa !12
<   %931 = add nsw i32 %930, -1
<   store i32 %931, i32* %926, align 4, !tbaa !12
<   br label %932
< 
< 932:                                              ; preds = %929, %927
<   %933 = phi i32 [ %928, %927 ], [ %930, %929 ]
<   %934 = icmp slt i32 %933, 1
<   br i1 %934, label %935, label %936
< 
< 935:                                              ; preds = %932
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %921, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %65) #10
<   br label %936
< 
< 936:                                              ; preds = %935, %932, %917
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %922) #10
<   br label %937
< 
< 937:                                              ; preds = %936, %915
<   %938 = phi { i8*, i32 } [ %918, %936 ], [ %916, %915 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %688) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %687) #10
<   call void @_ZdlPv(i8* nonnull %890) #28
<   br label %1664
< 
< 939:                                              ; preds = %911, %884
<   %940 = phi %"class.Apollo::Region"* [ %912, %911 ], [ %887, %884 ]
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %648, i8 0, i64 24, i1 false) #10
<   %941 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %942 unwind label %913
< 
< 942:                                              ; preds = %939
<   store i8* %941, i8** %692, align 8, !tbaa !14
<   %943 = getelementptr inbounds i8, i8* %941, i64 4
<   store i8* %943, i8** %696, align 8, !tbaa !17
<   %944 = bitcast i8* %883 to i32*
<   %945 = bitcast i8* %941 to i32*
<   %946 = load i32, i32* %944, align 4
<   store i32 %946, i32* %945, align 4
<   store i8* %943, i8** %694, align 8, !tbaa !18
<   %947 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %940, %"class.std::vector.15"* nonnull %86)
<           to label %948 unwind label %1417
< 
< 948:                                              ; preds = %942
<   %949 = load float*, float** %691, align 8, !tbaa !14
<   %950 = icmp eq float* %949, null
<   br i1 %950, label %953, label %951
< 
< 951:                                              ; preds = %948
<   %952 = bitcast float* %949 to i8*
<   call void @_ZdlPv(i8* nonnull %952) #10
<   br label %953
< 
< 953:                                              ; preds = %951, %948
<   %954 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL15EvalEOSForElemsR6DomainPdiPiiE12apolloRegion, align 8, !tbaa !6
<   %955 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %954)
<           to label %956 unwind label %913
< 
< 956:                                              ; preds = %953
<   %957 = icmp eq i32 %955, 1
<   %958 = select i1 %957, i32 1, i32 36
<   %959 = icmp eq i32 %955, 0
<   %960 = select i1 %959, i32 36, i32 %958
<   call void @omp_set_num_threads(i32 %960) #10
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 15, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, i32**, double**, %class.Domain*, double**, double**, double**, double**, double**, double**, double**, double**, double*, double*, double**)* @.omp_outlined..51 to void (i32*, i32*, ...)*), i32* nonnull %68, i32** nonnull %69, double** nonnull %72, %class.Domain* nonnull %0, double** nonnull %73, double** nonnull %74, double** nonnull %75, double** nonnull %78, double** nonnull %79, double** nonnull %76, double** nonnull %67, double** nonnull %77, double* nonnull %71, double* nonnull %70, double** nonnull %80)
<   %961 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL15EvalEOSForElemsR6DomainPdiPiiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %961)
<           to label %962 unwind label %913
< 
< 962:                                              ; preds = %956
<   %963 = load double*, double** %81, align 8, !tbaa !6
<   %964 = load double*, double** %82, align 8, !tbaa !6
<   %965 = load double*, double** %83, align 8, !tbaa !6
<   %966 = load double*, double** %74, align 8, !tbaa !6
<   %967 = load double*, double** %72, align 8, !tbaa !6
<   %968 = load double*, double** %75, align 8, !tbaa !6
<   %969 = load double*, double** %76, align 8, !tbaa !6
<   %970 = load double*, double** %77, align 8, !tbaa !6
<   %971 = load double*, double** %67, align 8, !tbaa !6
<   %972 = load double*, double** %80, align 8, !tbaa !6
<   %973 = load double*, double** %73, align 8, !tbaa !6
<   %974 = load double*, double** %78, align 8, !tbaa !6
<   %975 = load double*, double** %79, align 8, !tbaa !6
<   %976 = load double, double* %70, align 8, !tbaa !2
<   %977 = load i32, i32* %68, align 4, !tbaa !12
<   %978 = load i32*, i32** %69, align 8, !tbaa !6
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %697)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %698)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %699)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %700)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %701)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %702)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %703)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %704)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %705)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %706)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %707)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %708)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %709)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %710)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %711)
<   call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %712)
<   call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %713)
<   call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %714)
<   call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %715)
<   call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %716)
<   store double* %963, double** %34, align 8, !tbaa !6
<   store double* %964, double** %35, align 8, !tbaa !6
<   store double* %965, double** %36, align 8, !tbaa !6
<   store i8* %867, i8** %717, align 8, !tbaa !6
<   store i8* %868, i8** %718, align 8, !tbaa !6
<   store double* %966, double** %39, align 8, !tbaa !6
<   store double* %967, double** %40, align 8, !tbaa !6
<   store double* %968, double** %41, align 8, !tbaa !6
<   store double* %970, double** %42, align 8, !tbaa !6
<   store double* %971, double** %43, align 8, !tbaa !6
<   store double* %972, double** %44, align 8, !tbaa !6
<   store double* %973, double** %45, align 8, !tbaa !6
<   store double* %974, double** %46, align 8, !tbaa !6
<   store double* %975, double** %47, align 8, !tbaa !6
<   store i32* %978, i32** %48, align 8, !tbaa !6
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %719) #10
<   %979 = sext i32 %977 to i64
<   %980 = shl nsw i64 %979, 3
<   %981 = call noalias i8* @malloc(i64 %980) #10
<   store i8* %981, i8** %720, align 8, !tbaa !6
<   %982 = sitofp i32 %977 to float
<   %983 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %984 unwind label %913
< 
< 984:                                              ; preds = %962
<   %985 = bitcast i8* %983 to float*
<   store float %982, float* %985, align 4
<   %986 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion, align 8, !tbaa !6
<   %987 = icmp eq %"class.Apollo::Region"* %986, null
<   br i1 %987, label %988, label %1038
< 
< 988:                                              ; preds = %984
<   %989 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %990 unwind label %1012
< 
< 990:                                              ; preds = %988
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %721) #10
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %722) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %50, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %51)
<           to label %991 unwind label %1014
< 
< 991:                                              ; preds = %990
<   %992 = bitcast i8* %989 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %992, i32 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.54, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %50)
<           to label %993 unwind label %1016
< 
< 993:                                              ; preds = %991
<   store i8* %989, i8** bitcast (%"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion to i8**), align 8, !tbaa !6
<   %994 = load i8*, i8** %723, align 8, !tbaa !8
<   %995 = getelementptr inbounds i8, i8* %994, i64 -24
<   %996 = bitcast i8* %995 to %"struct.std::basic_string<char>::_Rep"*
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %724) #10
<   %997 = icmp eq i8* %995, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %997, label %1010, label %998, !prof !11
< 
< 998:                                              ; preds = %993
<   %999 = getelementptr inbounds i8, i8* %994, i64 -8
<   %1000 = bitcast i8* %999 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %1001, label %1003
< 
< 1001:                                             ; preds = %998
<   %1002 = atomicrmw volatile add i32* %1000, i32 -1 acq_rel
<   br label %1006
< 
< 1003:                                             ; preds = %998
<   %1004 = load i32, i32* %1000, align 4, !tbaa !12
<   %1005 = add nsw i32 %1004, -1
<   store i32 %1005, i32* %1000, align 4, !tbaa !12
<   br label %1006
< 
< 1006:                                             ; preds = %1003, %1001
<   %1007 = phi i32 [ %1002, %1001 ], [ %1004, %1003 ]
<   %1008 = icmp slt i32 %1007, 1
<   br i1 %1008, label %1009, label %1010
< 
< 1009:                                             ; preds = %1006
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %996, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %33) #10
<   br label %1010
< 
< 1010:                                             ; preds = %1009, %1006, %993
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %724) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %722) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %721) #10
<   %1011 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion, align 8, !tbaa !6
<   br label %1038
---
> _ZL28CalcMonotonicQRegionForElemsR6Domainid.exit.i.i.i.sink.split: ; preds = %282, %.apollo.case.1.i.i.i.i18
>   %.sink52 = phi i32 [ 1, %.apollo.case.1.i.i.i.i18 ], [ 36, %282 ]
>   call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num.i36.i, i32 %.sink52)
>   br label %_ZL28CalcMonotonicQRegionForElemsR6Domainid.exit.i.i.i
> 
> _ZL28CalcMonotonicQRegionForElemsR6Domainid.exit.i.i.i: ; preds = %_ZL28CalcMonotonicQRegionForElemsR6Domainid.exit.i.i.i.sink.split, %282
>   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 7, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, %class.Domain*, i64, i64, i64, i64, i64)* @.omp_outlined..31 to void (i32*, i32*, ...)*), i32* nonnull %r.addr.i.i.i.i, %class.Domain* nonnull %domain, i64 4068233174594694770, i64 %274, i64 %275, i64 %276, i64 %277)
>   %287 = load i8*, i8** @.apollo.region.handle.2, align 8
>   call void @__apollo_region_end(i8* %287)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %265)
>   %.pre.i.i.i = load i32, i32* %m_numReg.i.i.i.i, align 8, !tbaa !6
>   br label %for.inc.i.i.i
> 
> for.inc.i.i.i:                                    ; preds = %_ZL28CalcMonotonicQRegionForElemsR6Domainid.exit.i.i.i, %for.body.i.i.i
>   %288 = phi i32 [ %270, %for.body.i.i.i ], [ %.pre.i.i.i, %_ZL28CalcMonotonicQRegionForElemsR6Domainid.exit.i.i.i ]
>   %indvars.iv.next.i.i.i = add nuw nsw i64 %indvars.iv.i.i.i, 1
>   %289 = sext i32 %288 to i64
>   %cmp.i.i.i = icmp slt i64 %indvars.iv.next.i.i.i, %289
>   br i1 %cmp.i.i.i, label %for.body.i.i.i, label %_ZL22CalcMonotonicQForElemsR6Domain.exit.i.i
> 
> _ZL22CalcMonotonicQForElemsR6Domain.exit.i.i:     ; preds = %for.inc.i.i.i, %_ZL31CalcMonotonicQGradientsForElemsR6Domain.exit.i.i
>   call void @_ZN6Domain19DeallocateGradientsEv(%class.Domain* nonnull %domain)
>   %cmp1450.i.i = icmp sgt i32 %245, 0
>   br i1 %cmp1450.i.i, label %for.body.lr.ph.i.i, label %_ZL13CalcQForElemsR6Domain.exit.i
> 
> for.body.lr.ph.i.i:                               ; preds = %_ZL22CalcMonotonicQForElemsR6Domain.exit.i.i
>   %_M_start.i.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 40, i32 0, i32 0, i32 0, i32 0
>   %290 = load double*, double** %_M_start.i.i.i.i, align 8, !tbaa !11
>   %m_qstop.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 58
>   %291 = load double, double* %m_qstop.i.i.i, align 8, !tbaa !53
>   br label %for.body.i.i
> 
> for.cond.i.i:                                     ; preds = %for.body.i.i
>   %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %numElem.casted.sroa.0.0.insert.ext.i.i.i
>   br i1 %exitcond.not.i.i, label %_ZL13CalcQForElemsR6Domain.exit.i, label %for.body.i.i
> 
> for.body.i.i:                                     ; preds = %for.cond.i.i, %for.body.lr.ph.i.i
>   %indvars.iv.i.i = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %indvars.iv.next.i.i, %for.cond.i.i ]
>   %add.ptr.i.i.i.i = getelementptr inbounds double, double* %290, i64 %indvars.iv.i.i
>   %292 = load double, double* %add.ptr.i.i.i.i, align 8, !tbaa !2
>   %cmp17.i.i = fcmp ogt double %292, %291
>   %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
>   br i1 %cmp17.i.i, label %if.then20.i.i, label %for.cond.i.i
6307,6310c2947,2949
< 1012:                                             ; preds = %1403, %1391, %1378, %1324, %1314, %1308, %1305, %1292, %1238, %1228, %1222, %1219, %1206, %1152, %1143, %1140, %1127, %1073, %1062, %1055, %1052, %1038, %988
<   %1013 = landingpad { i8*, i32 }
<           cleanup
<   br label %1411
---
> if.then20.i.i:                                    ; preds = %for.body.i.i
>   call void @exit(i32 -2) #23
>   unreachable
6312,6315c2951,3002
< 1014:                                             ; preds = %990
<   %1015 = landingpad { i8*, i32 }
<           cleanup
<   br label %1036
---
> _ZL13CalcQForElemsR6Domain.exit.i:                ; preds = %for.cond.i.i, %_ZL22CalcMonotonicQForElemsR6Domain.exit.i.i, %_ZL20CalcLagrangeElementsR6Domain.exit.i
>   %293 = bitcast i32* %numElem.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %293) #7
>   %294 = load i32, i32* %m_numElem.i.i.i.i, align 8, !tbaa !6
>   store i32 %294, i32* %numElem.i.i, align 4, !tbaa !6
>   %cmp.not.i10.i = icmp eq i32 %294, 0
>   br i1 %cmp.not.i10.i, label %_ZL31ApplyMaterialPropertiesForElemsR6Domain.exit.i, label %if.then.i11.i
> 
> if.then.i11.i:                                    ; preds = %_ZL13CalcQForElemsR6Domain.exit.i
>   %295 = bitcast double* %eosvmin.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %295) #7
>   %m_eosvmin.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 65
>   %296 = bitcast double* %m_eosvmin.i.i.i to i64*
>   %297 = load i64, i64* %296, align 8, !tbaa !54
>   %298 = bitcast double* %eosvmin.i.i to i64*
>   store i64 %297, i64* %298, align 8, !tbaa !2
>   %299 = bitcast double* %eosvmax.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %299) #7
>   %m_eosvmax.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 64
>   %300 = bitcast double* %m_eosvmax.i.i.i to i64*
>   %301 = load i64, i64* %300, align 8, !tbaa !55
>   %302 = bitcast double* %eosvmax.i.i to i64*
>   store i64 %301, i64* %302, align 8, !tbaa !2
>   %303 = bitcast double** %vnewc.i.i to i8*
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %303) #7
>   %conv.i.i = sext i32 %294 to i64
>   %mul.i.i.i = shl nsw i64 %conv.i.i, 3
>   %call.i.i.i = call noalias i8* @malloc(i64 %mul.i.i.i) #7
>   %304 = bitcast double** %vnewc.i.i to i8**
>   store i8* %call.i.i.i, i8** %304, align 8, !tbaa !41
>   %305 = load i8*, i8** @.apollo.region.handle.23, align 8
>   %306 = icmp eq i8* %305, null
>   br i1 %306, label %307, label %309
> 
> 307:                                              ; preds = %if.then.i11.i
>   %308 = call i8* @__apollo_region_create(i32 4, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @26, i64 0, i64 0), i32 2)
>   store i8* %308, i8** @.apollo.region.handle.23, align 8
>   br label %309
> 
> 309:                                              ; preds = %307, %if.then.i11.i
>   %310 = phi i8* [ %305, %if.then.i11.i ], [ %308, %307 ]
>   call void @__apollo_region_begin(i8* %310)
>   %311 = uitofp i32 %294 to float
>   call void @__apollo_region_set_feature(i8* %310, float %311)
>   call void @__apollo_region_set_feature(i8* %310, float %311)
>   call void @__apollo_region_set_feature(i8* %310, float %311)
>   call void @__apollo_region_set_feature(i8* %310, float %311)
>   %312 = call i32 @__apollo_region_get_policy(i8* %310)
>   switch i32 %312, label %.split.i14.i [
>     i32 0, label %.split.i14.i.sink.split
>     i32 1, label %.apollo.case.1.i13.i
>   ]
6317,6478c3004,3005
< 1016:                                             ; preds = %991
<   %1017 = landingpad { i8*, i32 }
<           cleanup
<   %1018 = load i8*, i8** %723, align 8, !tbaa !8
<   %1019 = getelementptr inbounds i8, i8* %1018, i64 -24
<   %1020 = bitcast i8* %1019 to %"struct.std::basic_string<char>::_Rep"*
<   %1021 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %32, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %1021) #10
<   %1022 = icmp eq i8* %1019, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %1022, label %1035, label %1023, !prof !11
< 
< 1023:                                             ; preds = %1016
<   %1024 = getelementptr inbounds i8, i8* %1018, i64 -8
<   %1025 = bitcast i8* %1024 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %1026, label %1028
< 
< 1026:                                             ; preds = %1023
<   %1027 = atomicrmw volatile add i32* %1025, i32 -1 acq_rel
<   br label %1031
< 
< 1028:                                             ; preds = %1023
<   %1029 = load i32, i32* %1025, align 4, !tbaa !12
<   %1030 = add nsw i32 %1029, -1
<   store i32 %1030, i32* %1025, align 4, !tbaa !12
<   br label %1031
< 
< 1031:                                             ; preds = %1028, %1026
<   %1032 = phi i32 [ %1027, %1026 ], [ %1029, %1028 ]
<   %1033 = icmp slt i32 %1032, 1
<   br i1 %1033, label %1034, label %1035
< 
< 1034:                                             ; preds = %1031
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %1020, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %32) #10
<   br label %1035
< 
< 1035:                                             ; preds = %1034, %1031, %1016
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %1021) #10
<   br label %1036
< 
< 1036:                                             ; preds = %1035, %1014
<   %1037 = phi { i8*, i32 } [ %1017, %1035 ], [ %1015, %1014 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %722) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %721) #10
<   call void @_ZdlPv(i8* nonnull %989) #28
<   br label %1411
< 
< 1038:                                             ; preds = %1010, %984
<   %1039 = phi %"class.Apollo::Region"* [ %1011, %1010 ], [ %986, %984 ]
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %712, i8 0, i64 24, i1 false) #10
<   %1040 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %1041 unwind label %1012
< 
< 1041:                                             ; preds = %1038
<   store i8* %1040, i8** %726, align 8, !tbaa !14
<   %1042 = getelementptr inbounds i8, i8* %1040, i64 4
<   store i8* %1042, i8** %730, align 8, !tbaa !17
<   %1043 = bitcast i8* %983 to i32*
<   %1044 = bitcast i8* %1040 to i32*
<   %1045 = load i32, i32* %1043, align 4
<   store i32 %1045, i32* %1044, align 4
<   store i8* %1042, i8** %728, align 8, !tbaa !18
<   %1046 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %1039, %"class.std::vector.15"* nonnull %52)
<           to label %1047 unwind label %1097
< 
< 1047:                                             ; preds = %1041
<   %1048 = load float*, float** %725, align 8, !tbaa !14
<   %1049 = icmp eq float* %1048, null
<   br i1 %1049, label %1052, label %1050
< 
< 1050:                                             ; preds = %1047
<   %1051 = bitcast float* %1048 to i8*
<   call void @_ZdlPv(i8* nonnull %1051) #10
<   br label %1052
< 
< 1052:                                             ; preds = %1050, %1047
<   %1053 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion, align 8, !tbaa !6
<   %1054 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %1053)
<           to label %1055 unwind label %1012
< 
< 1055:                                             ; preds = %1052
<   %1056 = icmp eq i32 %1054, 1
<   %1057 = select i1 %1056, i32 1, i32 36
<   %1058 = icmp eq i32 %1054, 0
<   %1059 = select i1 %1058, i32 36, i32 %1057
<   call void @omp_set_num_threads(i32 %1059) #10
<   %1060 = zext i32 %977 to i64
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 8, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, double**, double**, double**, double**, double**, double**, i64)* @.omp_outlined..55 to void (i32*, i32*, ...)*), i64 %1060, double** nonnull %35, double** nonnull %40, double** nonnull %45, double** nonnull %39, double** nonnull %41, double** nonnull %44, i64 %851)
<   %1061 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %1061)
<           to label %1062 unwind label %1012
< 
< 1062:                                             ; preds = %1055
<   %1063 = load double*, double** %49, align 8, !tbaa !6
<   %1064 = load double*, double** %37, align 8, !tbaa !6
<   %1065 = load double*, double** %38, align 8, !tbaa !6
<   %1066 = load double*, double** %35, align 8, !tbaa !6
<   %1067 = load double*, double** %42, align 8, !tbaa !6
<   %1068 = load double*, double** %43, align 8, !tbaa !6
<   %1069 = load i32*, i32** %48, align 8, !tbaa !6
<   invoke fastcc void @_ZL20CalcPressureForElemsPdS_S_S_S_S_dddiPi(double* %1063, double* %1064, double* %1065, double* %1066, double* %1067, double* %1068, double %850, double %845, double %976, i32 %977, i32* %1069)
<           to label %1070 unwind label %1012
< 
< 1070:                                             ; preds = %1062
<   store float %982, float* %985, align 4
<   %1071 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_0, align 8, !tbaa !6
<   %1072 = icmp eq %"class.Apollo::Region"* %1071, null
<   br i1 %1072, label %1073, label %1127
< 
< 1073:                                             ; preds = %1070
<   %1074 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %1075 unwind label %1012
< 
< 1075:                                             ; preds = %1073
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %731) #10
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %732) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %53, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %54)
<           to label %1076 unwind label %1103
< 
< 1076:                                             ; preds = %1075
<   %1077 = bitcast i8* %1074 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %1077, i32 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.56, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %53)
<           to label %1078 unwind label %1105
< 
< 1078:                                             ; preds = %1076
<   store i8* %1074, i8** bitcast (%"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_0 to i8**), align 8, !tbaa !6
<   %1079 = load i8*, i8** %733, align 8, !tbaa !8
<   %1080 = getelementptr inbounds i8, i8* %1079, i64 -24
<   %1081 = bitcast i8* %1080 to %"struct.std::basic_string<char>::_Rep"*
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %734) #10
<   %1082 = icmp eq i8* %1080, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %1082, label %1095, label %1083, !prof !11
< 
< 1083:                                             ; preds = %1078
<   %1084 = getelementptr inbounds i8, i8* %1079, i64 -8
<   %1085 = bitcast i8* %1084 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %1086, label %1088
< 
< 1086:                                             ; preds = %1083
<   %1087 = atomicrmw volatile add i32* %1085, i32 -1 acq_rel
<   br label %1091
< 
< 1088:                                             ; preds = %1083
<   %1089 = load i32, i32* %1085, align 4, !tbaa !12
<   %1090 = add nsw i32 %1089, -1
<   store i32 %1090, i32* %1085, align 4, !tbaa !12
<   br label %1091
< 
< 1091:                                             ; preds = %1088, %1086
<   %1092 = phi i32 [ %1087, %1086 ], [ %1089, %1088 ]
<   %1093 = icmp slt i32 %1092, 1
<   br i1 %1093, label %1094, label %1095
< 
< 1094:                                             ; preds = %1091
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %1081, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %31) #10
<   br label %1095
< 
< 1095:                                             ; preds = %1094, %1091, %1078
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %734) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %732) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %731) #10
<   %1096 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_0, align 8, !tbaa !6
<   br label %1127
---
> .apollo.case.1.i13.i:                             ; preds = %309
>   br label %.split.i14.i.sink.split
6480,6490c3007,3262
< 1097:                                             ; preds = %1041
<   %1098 = landingpad { i8*, i32 }
<           cleanup
<   %1099 = load float*, float** %725, align 8, !tbaa !14
<   %1100 = icmp eq float* %1099, null
<   br i1 %1100, label %1411, label %1101
< 
< 1101:                                             ; preds = %1097
<   %1102 = bitcast float* %1099 to i8*
<   call void @_ZdlPv(i8* nonnull %1102) #10
<   br label %1411
---
> .split.i14.i.sink.split:                          ; preds = %309, %.apollo.case.1.i13.i
>   %.sink53 = phi i32 [ 1, %.apollo.case.1.i13.i ], [ 36, %309 ]
>   call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num.i36.i, i32 %.sink53)
>   br label %.split.i14.i
> 
> .split.i14.i:                                     ; preds = %.split.i14.i.sink.split, %309
>   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 5, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, double**, %class.Domain*, double*, double*)* @.omp_outlined..34 to void (i32*, i32*, ...)*), i32* nonnull %numElem.i.i, double** nonnull %vnewc.i.i, %class.Domain* nonnull %domain, double* nonnull %eosvmin.i.i, double* nonnull %eosvmax.i.i)
>   %313 = load i8*, i8** @.apollo.region.handle.23, align 8
>   call void @__apollo_region_end(i8* %313)
>   %m_numReg.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 16
>   %314 = load i32, i32* %m_numReg.i.i.i, align 8, !tbaa !6
>   %cmp551.i.i = icmp sgt i32 %314, 0
>   br i1 %cmp551.i.i, label %for.body.lr.ph.i15.i, label %for.cond.cleanup.i.i
> 
> for.body.lr.ph.i15.i:                             ; preds = %.split.i14.i
>   %m_regElemSize.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 18
>   %m_regElemlist.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 20
>   %m_cost.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 17
>   %315 = bitcast double** %vnewc.i.i to i64*
>   %316 = bitcast double** %vnewc.addr.i.i.i to i8*
>   %317 = bitcast i32* %numElemReg.addr.i.i.i to i8*
>   %318 = bitcast i32** %regElemList.addr.i.i.i to i8*
>   %319 = bitcast double** %vnewc.addr.i.i.i to i64*
>   %320 = bitcast i32** %regElemList.addr.i.i.i to i64*
>   %m_e_cut.i.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 51
>   %321 = bitcast double* %m_e_cut.i.i.i.i to i64*
>   %m_p_cut.i.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 52
>   %m_ss4o3.i.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 57
>   %322 = bitcast double* %m_ss4o3.i.i.i.i to i64*
>   %m_q_cut.i.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 53
>   %323 = bitcast double* %m_q_cut.i.i.i.i to i64*
>   %324 = bitcast double* %eosvmax.i.i.i to i8*
>   %325 = bitcast double* %eosvmax.i.i.i to i64*
>   %326 = bitcast double* %eosvmin.i.i.i to i8*
>   %327 = bitcast double* %eosvmin.i.i.i to i64*
>   %m_pmin.i.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 66
>   %m_emin.i.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 67
>   %328 = bitcast double* %m_emin.i.i.i.i to i64*
>   %m_refdens.i.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 69
>   %329 = bitcast double** %e_old.i.i.i to i8*
>   %330 = bitcast double** %e_old.i.i.i to i8**
>   %331 = bitcast double** %delvc.i.i.i to i8*
>   %332 = bitcast double** %delvc.i.i.i to i8**
>   %333 = bitcast double** %p_old.i.i.i to i8*
>   %334 = bitcast double** %p_old.i.i.i to i8**
>   %335 = bitcast double** %q_old.i.i.i to i8*
>   %336 = bitcast double** %q_old.i.i.i to i8**
>   %337 = bitcast double** %compression.i.i.i to i8*
>   %338 = bitcast double** %compression.i.i.i to i8**
>   %339 = bitcast double** %compHalfStep.i.i.i to i8*
>   %340 = bitcast double** %compHalfStep.i.i.i to i8**
>   %341 = bitcast double** %qq_old.i.i.i to i8*
>   %342 = bitcast double** %qq_old.i.i.i to i8**
>   %343 = bitcast double** %ql_old.i.i.i to i8*
>   %344 = bitcast double** %ql_old.i.i.i to i8**
>   %345 = bitcast double** %work.i.i.i to i8*
>   %346 = bitcast double** %work.i.i.i to i8**
>   %347 = bitcast double** %p_new.i.i.i to i8*
>   %348 = bitcast double** %p_new.i.i.i to i8**
>   %349 = bitcast double** %e_new.i.i.i to i8*
>   %350 = bitcast double** %e_new.i.i.i to i8**
>   %351 = bitcast double** %q_new.i.i.i to i8*
>   %352 = bitcast double** %q_new.i.i.i to i8**
>   %353 = bitcast double** %e_new.i.i.i to i64*
>   %354 = bitcast double** %q_new.i.i.i to i64*
>   %355 = bitcast double** %p_old.i.i.i to i64*
>   %356 = bitcast double** %e_old.i.i.i to i64*
>   %357 = bitcast double** %q_old.i.i.i to i64*
>   %358 = bitcast double** %work.i.i.i to i64*
>   %359 = bitcast double** %delvc.i.i.i to i64*
>   %360 = bitcast double** %qq_old.i.i.i to i64*
>   %361 = bitcast double** %ql_old.i.i.i to i64*
>   %362 = bitcast double** %p_new.addr.i.i.i.i to i8*
>   %363 = bitcast double** %e_new.addr.i.i.i.i to i8*
>   %364 = bitcast double** %q_new.addr.i.i.i.i to i8*
>   %365 = bitcast double** %bvc.addr.i.i.i.i to i8*
>   %366 = bitcast double** %pbvc.addr.i.i.i.i to i8*
>   %367 = bitcast double** %p_old.addr.i.i.i.i to i8*
>   %368 = bitcast double** %e_old.addr.i.i.i.i to i8*
>   %369 = bitcast double** %q_old.addr.i.i.i.i to i8*
>   %370 = bitcast double** %compHalfStep.addr.i.i.i.i to i8*
>   %371 = bitcast double** %vnewc.addr.i.i.i.i to i8*
>   %372 = bitcast double** %work.addr.i.i.i.i to i8*
>   %373 = bitcast double** %delvc.addr.i.i.i.i to i8*
>   %374 = bitcast double** %qq_old.addr.i.i.i.i to i8*
>   %375 = bitcast double** %ql_old.addr.i.i.i.i to i8*
>   %376 = bitcast i32** %regElemList.addr.i.i.i.i to i8*
>   %377 = bitcast double** %e_new.addr.i.i.i.i to i64*
>   %378 = bitcast double** %q_new.addr.i.i.i.i to i64*
>   %379 = bitcast double** %bvc.addr.i.i.i.i to i8**
>   %380 = bitcast double** %pbvc.addr.i.i.i.i to i8**
>   %381 = bitcast double** %p_old.addr.i.i.i.i to i64*
>   %382 = bitcast double** %e_old.addr.i.i.i.i to i64*
>   %383 = bitcast double** %q_old.addr.i.i.i.i to i64*
>   %384 = bitcast double** %work.addr.i.i.i.i to i64*
>   %385 = bitcast double** %delvc.addr.i.i.i.i to i64*
>   %386 = bitcast double** %qq_old.addr.i.i.i.i to i64*
>   %387 = bitcast double** %ql_old.addr.i.i.i.i to i64*
>   %388 = bitcast double** %pHalfStep.i.i.i.i to i8*
>   %389 = bitcast double** %pHalfStep.i.i.i.i to i8**
>   %390 = bitcast double** %p_new.i.i.i to i64*
>   %391 = bitcast double** %vnewc.addr.i93.i.i.i to i8*
>   %392 = bitcast double** %enewc.addr.i.i.i.i to i8*
>   %393 = bitcast double** %pnewc.addr.i.i.i.i to i8*
>   %394 = bitcast double** %pbvc.addr.i94.i.i.i to i8*
>   %395 = bitcast double** %bvc.addr.i95.i.i.i to i8*
>   %396 = bitcast i32* %len.addr.i.i.i.i to i8*
>   %397 = bitcast i32** %regElemList.addr.i96.i.i.i to i8*
>   %398 = bitcast double** %vnewc.addr.i93.i.i.i to i64*
>   %399 = bitcast double** %enewc.addr.i.i.i.i to i64*
>   %400 = bitcast double** %pnewc.addr.i.i.i.i to i64*
>   %401 = bitcast double** %pbvc.addr.i94.i.i.i to i8**
>   %402 = bitcast double** %bvc.addr.i95.i.i.i to i8**
>   %403 = bitcast i32** %regElemList.addr.i96.i.i.i to i64*
>   br label %for.body.i18.i
> 
> for.cond.cleanup.i.i:                             ; preds = %_ZL15EvalEOSForElemsR6DomainPdiPii.exit.i.i, %.split.i14.i
>   %404 = load double*, double** %vnewc.i.i, align 8, !tbaa !41
>   %cmp.not.i.i.i19 = icmp eq double* %404, null
>   br i1 %cmp.not.i.i.i19, label %_Z7ReleaseIdEvPPT_.exit.i.i, label %if.then.i.i16.i
> 
> if.then.i.i16.i:                                  ; preds = %for.cond.cleanup.i.i
>   %405 = bitcast double* %404 to i8*
>   call void @free(i8* %405) #7
>   store double* null, double** %vnewc.i.i, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit.i.i
> 
> _Z7ReleaseIdEvPPT_.exit.i.i:                      ; preds = %if.then.i.i16.i, %for.cond.cleanup.i.i
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %303) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %299) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %295) #7
>   br label %_ZL31ApplyMaterialPropertiesForElemsR6Domain.exit.i
> 
> for.body.i18.i:                                   ; preds = %_ZL15EvalEOSForElemsR6DomainPdiPii.exit.i.i, %for.body.lr.ph.i15.i
>   %indvars.iv.i17.i = phi i64 [ 0, %for.body.lr.ph.i15.i ], [ %indvars.iv.next.i31.i, %_ZL15EvalEOSForElemsR6DomainPdiPii.exit.i.i ]
>   %406 = phi i32 [ %314, %for.body.lr.ph.i15.i ], [ %560, %_ZL15EvalEOSForElemsR6DomainPdiPii.exit.i.i ]
>   %407 = load i32*, i32** %m_regElemSize.i.i.i, align 8, !tbaa !48
>   %arrayidx.i.i.i = getelementptr inbounds i32, i32* %407, i64 %indvars.iv.i17.i
>   %408 = load i32, i32* %arrayidx.i.i.i, align 4, !tbaa !6
>   %409 = load i32**, i32*** %m_regElemlist.i.i.i, align 8, !tbaa !56
>   %arrayidx.i47.i.i = getelementptr inbounds i32*, i32** %409, i64 %indvars.iv.i17.i
>   %410 = bitcast i32** %arrayidx.i47.i.i to i64*
>   %411 = load i64, i64* %410, align 8, !tbaa !41
>   %div.i.i = sdiv i32 %406, 2
>   %412 = sext i32 %div.i.i to i64
>   %cmp9.i.i = icmp slt i64 %indvars.iv.i17.i, %412
>   br i1 %cmp9.i.i, label %if.end21.i.i, label %if.else.i.i
> 
> if.else.i.i:                                      ; preds = %for.body.i18.i
>   %add.i.i20 = add nsw i32 %406, 15
>   %div13.neg.i.i = sdiv i32 %add.i.i20, -20
>   %sub.i.i = add i32 %div13.neg.i.i, %406
>   %413 = sext i32 %sub.i.i to i64
>   %cmp14.i.i = icmp slt i64 %indvars.iv.i17.i, %413
>   %414 = load i32, i32* %m_cost.i.i.i, align 4, !tbaa !6
>   %add17.i.i = add nsw i32 %414, 1
>   %mul.i19.i = mul nsw i32 %add17.i.i, 10
>   %spec.select.i.i = select i1 %cmp14.i.i, i32 %add17.i.i, i32 %mul.i19.i
>   br label %if.end21.i.i
> 
> if.end21.i.i:                                     ; preds = %if.else.i.i, %for.body.i18.i
>   %rep.0.i.i = phi i32 [ 1, %for.body.i18.i ], [ %spec.select.i.i, %if.else.i.i ]
>   %415 = load i64, i64* %315, align 8, !tbaa !41
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %316)
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %317)
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %318)
>   store i64 %415, i64* %319, align 8, !tbaa !41
>   store i32 %408, i32* %numElemReg.addr.i.i.i, align 4, !tbaa !6
>   store i64 %411, i64* %320, align 8, !tbaa !41
>   %416 = load i64, i64* %321, align 8, !tbaa !57
>   %417 = load double, double* %m_p_cut.i.i.i.i, align 8, !tbaa !58
>   %418 = load i64, i64* %322, align 8, !tbaa !59
>   %419 = load i64, i64* %323, align 8, !tbaa !60
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %324) #7
>   %420 = load i64, i64* %300, align 8, !tbaa !55
>   store i64 %420, i64* %325, align 8, !tbaa !2
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %326) #7
>   %421 = load i64, i64* %296, align 8, !tbaa !54
>   store i64 %421, i64* %327, align 8, !tbaa !2
>   %422 = load double, double* %m_pmin.i.i.i.i, align 8, !tbaa !61
>   %423 = load i64, i64* %328, align 8, !tbaa !62
>   %424 = load double, double* %m_refdens.i.i.i.i, align 8, !tbaa !63
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %329) #7
>   %conv.i.i.i21 = sext i32 %408 to i64
>   %mul.i.i.i20.i = shl nsw i64 %conv.i.i.i21, 3
>   %call.i.i.i21.i = call noalias i8* @malloc(i64 %mul.i.i.i20.i) #7
>   store i8* %call.i.i.i21.i, i8** %330, align 8, !tbaa !41
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %331) #7
>   %call.i68.i.i.i = call noalias i8* @malloc(i64 %mul.i.i.i20.i) #7
>   store i8* %call.i68.i.i.i, i8** %332, align 8, !tbaa !41
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %333) #7
>   %call.i70.i.i.i = call noalias i8* @malloc(i64 %mul.i.i.i20.i) #7
>   store i8* %call.i70.i.i.i, i8** %334, align 8, !tbaa !41
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %335) #7
>   %call.i72.i.i.i = call noalias i8* @malloc(i64 %mul.i.i.i20.i) #7
>   store i8* %call.i72.i.i.i, i8** %336, align 8, !tbaa !41
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %337) #7
>   %call.i74.i.i.i = call noalias i8* @malloc(i64 %mul.i.i.i20.i) #7
>   store i8* %call.i74.i.i.i, i8** %338, align 8, !tbaa !41
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %339) #7
>   %call.i76.i.i.i = call noalias i8* @malloc(i64 %mul.i.i.i20.i) #7
>   store i8* %call.i76.i.i.i, i8** %340, align 8, !tbaa !41
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %341) #7
>   %call.i78.i.i.i = call noalias i8* @malloc(i64 %mul.i.i.i20.i) #7
>   store i8* %call.i78.i.i.i, i8** %342, align 8, !tbaa !41
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %343) #7
>   %call.i80.i.i.i = call noalias i8* @malloc(i64 %mul.i.i.i20.i) #7
>   store i8* %call.i80.i.i.i, i8** %344, align 8, !tbaa !41
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %345) #7
>   %call.i82.i.i.i = call noalias i8* @malloc(i64 %mul.i.i.i20.i) #7
>   store i8* %call.i82.i.i.i, i8** %346, align 8, !tbaa !41
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %347) #7
>   %call.i84.i.i.i = call noalias i8* @malloc(i64 %mul.i.i.i20.i) #7
>   store i8* %call.i84.i.i.i, i8** %348, align 8, !tbaa !41
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %349) #7
>   %call.i86.i.i.i = call noalias i8* @malloc(i64 %mul.i.i.i20.i) #7
>   store i8* %call.i86.i.i.i, i8** %350, align 8, !tbaa !41
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %351) #7
>   %call.i88.i.i.i = call noalias i8* @malloc(i64 %mul.i.i.i20.i) #7
>   store i8* %call.i88.i.i.i, i8** %352, align 8, !tbaa !41
>   %call.i90.i.i.i = call noalias i8* @malloc(i64 %mul.i.i.i20.i) #7
>   %425 = bitcast i8* %call.i90.i.i.i to double*
>   %call.i92.i.i.i = call noalias i8* @malloc(i64 %mul.i.i.i20.i) #7
>   %426 = bitcast i8* %call.i92.i.i.i to double*
>   %cmp145.i.i.i = icmp sgt i32 %rep.0.i.i, 0
>   br i1 %cmp145.i.i.i, label %for.body.lr.ph.i.i22.i, label %for.cond.cleanup.i.i.i
> 
> for.body.lr.ph.i.i22.i:                           ; preds = %if.end21.i.i
>   %427 = bitcast double %424 to i64
>   br label %for.body.i.i26.i
> 
> for.cond.cleanup.i.loopexit.i.i:                  ; preds = %_ZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPi.exit.i.i.i
>   %.pre.i.i = load i32, i32* %numElemReg.addr.i.i.i, align 4, !tbaa !6
>   br label %for.cond.cleanup.i.i.i
> 
> for.cond.cleanup.i.i.i:                           ; preds = %for.cond.cleanup.i.loopexit.i.i, %if.end21.i.i
>   %428 = phi i32 [ %.pre.i.i, %for.cond.cleanup.i.loopexit.i.i ], [ %408, %if.end21.i.i ]
>   %429 = load i8*, i8** @.apollo.region.handle.20, align 8
>   %430 = icmp eq i8* %429, null
>   br i1 %430, label %431, label %433
> 
> 431:                                              ; preds = %for.cond.cleanup.i.i.i
>   %432 = call i8* @__apollo_region_create(i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @23, i64 0, i64 0), i32 2)
>   store i8* %432, i8** @.apollo.region.handle.20, align 8
>   br label %433
> 
> 433:                                              ; preds = %431, %for.cond.cleanup.i.i.i
>   %434 = phi i8* [ %429, %for.cond.cleanup.i.i.i ], [ %432, %431 ]
>   call void @__apollo_region_begin(i8* %434)
>   %435 = uitofp i32 %428 to float
>   call void @__apollo_region_set_feature(i8* %434, float %435)
>   %436 = call i32 @__apollo_region_get_policy(i8* %434)
>   switch i32 %436, label %.split63.i.i.i [
>     i32 0, label %.split63.i.i.i.sink.split
>     i32 1, label %.apollo.case.166.i.i.i
>   ]
6492,6495c3264,3265
< 1103:                                             ; preds = %1075
<   %1104 = landingpad { i8*, i32 }
<           cleanup
<   br label %1125
---
> .apollo.case.166.i.i.i:                           ; preds = %433
>   br label %.split63.i.i.i.sink.split
6497,6645c3267,3314
< 1105:                                             ; preds = %1076
<   %1106 = landingpad { i8*, i32 }
<           cleanup
<   %1107 = load i8*, i8** %733, align 8, !tbaa !8
<   %1108 = getelementptr inbounds i8, i8* %1107, i64 -24
<   %1109 = bitcast i8* %1108 to %"struct.std::basic_string<char>::_Rep"*
<   %1110 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %30, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %1110) #10
<   %1111 = icmp eq i8* %1108, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %1111, label %1124, label %1112, !prof !11
< 
< 1112:                                             ; preds = %1105
<   %1113 = getelementptr inbounds i8, i8* %1107, i64 -8
<   %1114 = bitcast i8* %1113 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %1115, label %1117
< 
< 1115:                                             ; preds = %1112
<   %1116 = atomicrmw volatile add i32* %1114, i32 -1 acq_rel
<   br label %1120
< 
< 1117:                                             ; preds = %1112
<   %1118 = load i32, i32* %1114, align 4, !tbaa !12
<   %1119 = add nsw i32 %1118, -1
<   store i32 %1119, i32* %1114, align 4, !tbaa !12
<   br label %1120
< 
< 1120:                                             ; preds = %1117, %1115
<   %1121 = phi i32 [ %1116, %1115 ], [ %1118, %1117 ]
<   %1122 = icmp slt i32 %1121, 1
<   br i1 %1122, label %1123, label %1124
< 
< 1123:                                             ; preds = %1120
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %1109, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %30) #10
<   br label %1124
< 
< 1124:                                             ; preds = %1123, %1120, %1105
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %1110) #10
<   br label %1125
< 
< 1125:                                             ; preds = %1124, %1103
<   %1126 = phi { i8*, i32 } [ %1106, %1124 ], [ %1104, %1103 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %732) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %731) #10
<   call void @_ZdlPv(i8* nonnull %1074) #28
<   br label %1411
< 
< 1127:                                             ; preds = %1095, %1070
<   %1128 = phi %"class.Apollo::Region"* [ %1096, %1095 ], [ %1071, %1070 ]
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %713, i8 0, i64 24, i1 false) #10
<   %1129 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %1130 unwind label %1012
< 
< 1130:                                             ; preds = %1127
<   store i8* %1129, i8** %736, align 8, !tbaa !14
<   %1131 = getelementptr inbounds i8, i8* %1129, i64 4
<   store i8* %1131, i8** %740, align 8, !tbaa !17
<   %1132 = bitcast i8* %1129 to i32*
<   %1133 = load i32, i32* %1043, align 4
<   store i32 %1133, i32* %1132, align 4
<   store i8* %1131, i8** %738, align 8, !tbaa !18
<   %1134 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %1128, %"class.std::vector.15"* nonnull %55)
<           to label %1135 unwind label %1176
< 
< 1135:                                             ; preds = %1130
<   %1136 = load float*, float** %735, align 8, !tbaa !14
<   %1137 = icmp eq float* %1136, null
<   br i1 %1137, label %1140, label %1138
< 
< 1138:                                             ; preds = %1135
<   %1139 = bitcast float* %1136 to i8*
<   call void @_ZdlPv(i8* nonnull %1139) #10
<   br label %1140
< 
< 1140:                                             ; preds = %1138, %1135
<   %1141 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_0, align 8, !tbaa !6
<   %1142 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %1141)
<           to label %1143 unwind label %1012
< 
< 1143:                                             ; preds = %1140
<   %1144 = icmp eq i32 %1142, 1
<   %1145 = select i1 %1144, i32 1, i32 36
<   %1146 = icmp eq i32 %1142, 0
<   %1147 = select i1 %1146, i32 36, i32 %1145
<   call void @omp_set_num_threads(i32 %1147) #10
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 13, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, double**, double**, double**, double**, double**, double**, double**, i64, double**, double**, double**, double**)* @.omp_outlined..57 to void (i32*, i32*, ...)*), i64 %1060, double** nonnull %42, double** nonnull %45, double** nonnull %36, double** nonnull %38, double** nonnull %35, double** nonnull %37, double** nonnull %49, i64 %871, double** nonnull %47, double** nonnull %46, double** nonnull %39, double** nonnull %41)
<   %1148 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_0, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %1148)
<           to label %1149 unwind label %1012
< 
< 1149:                                             ; preds = %1143
<   store float %982, float* %985, align 4
<   %1150 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_1, align 8, !tbaa !6
<   %1151 = icmp eq %"class.Apollo::Region"* %1150, null
<   br i1 %1151, label %1152, label %1206
< 
< 1152:                                             ; preds = %1149
<   %1153 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %1154 unwind label %1012
< 
< 1154:                                             ; preds = %1152
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %741) #10
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %742) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %56, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %57)
<           to label %1155 unwind label %1182
< 
< 1155:                                             ; preds = %1154
<   %1156 = bitcast i8* %1153 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %1156, i32 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.58, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %56)
<           to label %1157 unwind label %1184
< 
< 1157:                                             ; preds = %1155
<   store i8* %1153, i8** bitcast (%"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_1 to i8**), align 8, !tbaa !6
<   %1158 = load i8*, i8** %743, align 8, !tbaa !8
<   %1159 = getelementptr inbounds i8, i8* %1158, i64 -24
<   %1160 = bitcast i8* %1159 to %"struct.std::basic_string<char>::_Rep"*
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %744) #10
<   %1161 = icmp eq i8* %1159, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %1161, label %1174, label %1162, !prof !11
< 
< 1162:                                             ; preds = %1157
<   %1163 = getelementptr inbounds i8, i8* %1158, i64 -8
<   %1164 = bitcast i8* %1163 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %1165, label %1167
< 
< 1165:                                             ; preds = %1162
<   %1166 = atomicrmw volatile add i32* %1164, i32 -1 acq_rel
<   br label %1170
< 
< 1167:                                             ; preds = %1162
<   %1168 = load i32, i32* %1164, align 4, !tbaa !12
<   %1169 = add nsw i32 %1168, -1
<   store i32 %1169, i32* %1164, align 4, !tbaa !12
<   br label %1170
< 
< 1170:                                             ; preds = %1167, %1165
<   %1171 = phi i32 [ %1166, %1165 ], [ %1168, %1167 ]
<   %1172 = icmp slt i32 %1171, 1
<   br i1 %1172, label %1173, label %1174
< 
< 1173:                                             ; preds = %1170
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %1160, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %29) #10
<   br label %1174
< 
< 1174:                                             ; preds = %1173, %1170, %1157
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %744) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %742) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %741) #10
<   %1175 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_1, align 8, !tbaa !6
<   br label %1206
---
> .split63.i.i.i.sink.split:                        ; preds = %433, %.apollo.case.166.i.i.i
>   %.sink54 = phi i32 [ 1, %.apollo.case.166.i.i.i ], [ 36, %433 ]
>   call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num.i36.i, i32 %.sink54)
>   br label %.split63.i.i.i
> 
> .split63.i.i.i:                                   ; preds = %.split63.i.i.i.sink.split, %433
>   %numElemReg.casted.sroa.0.0.insert.ext.i.i.i = zext i32 %428 to i64
>   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 6, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, i32**, %class.Domain*, double**, double**, double**)* @.omp_outlined..36 to void (i32*, i32*, ...)*), i64 %numElemReg.casted.sroa.0.0.insert.ext.i.i.i, i32** nonnull %regElemList.addr.i.i.i, %class.Domain* nonnull %domain, double** nonnull %p_new.i.i.i, double** nonnull %e_new.i.i.i, double** nonnull %q_new.i.i.i)
>   %437 = load i8*, i8** @.apollo.region.handle.20, align 8
>   call void @__apollo_region_end(i8* %437)
>   %438 = load i64, i64* %319, align 8, !tbaa !41
>   %439 = load i64, i64* %353, align 8, !tbaa !41
>   %440 = load i64, i64* %390, align 8, !tbaa !41
>   %441 = load i32, i32* %numElemReg.addr.i.i.i, align 4, !tbaa !6
>   %442 = load i64, i64* %320, align 8, !tbaa !41
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %391)
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %392)
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %393)
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %394)
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %395)
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %396)
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %397)
>   store i64 %438, i64* %398, align 8, !tbaa !41
>   store i64 %439, i64* %399, align 8, !tbaa !41
>   store i64 %440, i64* %400, align 8, !tbaa !41
>   store i8* %call.i92.i.i.i, i8** %401, align 8, !tbaa !41
>   store i8* %call.i90.i.i.i, i8** %402, align 8, !tbaa !41
>   store i32 %441, i32* %len.addr.i.i.i.i, align 4, !tbaa !6
>   store i64 %442, i64* %403, align 8, !tbaa !41
>   %443 = load i8*, i8** @.apollo.region.handle.27, align 8
>   %444 = icmp eq i8* %443, null
>   br i1 %444, label %445, label %447
> 
> 445:                                              ; preds = %.split63.i.i.i
>   %446 = call i8* @__apollo_region_create(i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @30, i64 0, i64 0), i32 2) #7
>   store i8* %446, i8** @.apollo.region.handle.27, align 8
>   br label %447
> 
> 447:                                              ; preds = %445, %.split63.i.i.i
>   %448 = phi i8* [ %443, %.split63.i.i.i ], [ %446, %445 ]
>   call void @__apollo_region_begin(i8* %448) #7
>   %449 = uitofp i32 %441 to float
>   call void @__apollo_region_set_feature(i8* %448, float %449) #7
>   %450 = call i32 @__apollo_region_get_policy(i8* %448) #7
>   switch i32 %450, label %_ZL22CalcSoundSpeedForElemsR6DomainPddS1_S1_S1_S1_diPi.exit.i.i.i [
>     i32 0, label %_ZL22CalcSoundSpeedForElemsR6DomainPddS1_S1_S1_S1_diPi.exit.i.i.i.sink.split
>     i32 1, label %.apollo.case.1.i98.i.i.i
>   ]
6647,6657c3316,3317
< 1176:                                             ; preds = %1130
<   %1177 = landingpad { i8*, i32 }
<           cleanup
<   %1178 = load float*, float** %735, align 8, !tbaa !14
<   %1179 = icmp eq float* %1178, null
<   br i1 %1179, label %1411, label %1180
< 
< 1180:                                             ; preds = %1176
<   %1181 = bitcast float* %1178 to i8*
<   call void @_ZdlPv(i8* nonnull %1181) #10
<   br label %1411
---
> .apollo.case.1.i98.i.i.i:                         ; preds = %447
>   br label %_ZL22CalcSoundSpeedForElemsR6DomainPddS1_S1_S1_S1_diPi.exit.i.i.i.sink.split
6659,6662c3319,3516
< 1182:                                             ; preds = %1154
<   %1183 = landingpad { i8*, i32 }
<           cleanup
<   br label %1204
---
> _ZL22CalcSoundSpeedForElemsR6DomainPddS1_S1_S1_S1_diPi.exit.i.i.i.sink.split: ; preds = %447, %.apollo.case.1.i98.i.i.i
>   %.sink55 = phi i32 [ 1, %.apollo.case.1.i98.i.i.i ], [ 36, %447 ]
>   call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num.i36.i, i32 %.sink55) #7
>   br label %_ZL22CalcSoundSpeedForElemsR6DomainPddS1_S1_S1_S1_diPi.exit.i.i.i
> 
> _ZL22CalcSoundSpeedForElemsR6DomainPddS1_S1_S1_S1_diPi.exit.i.i.i: ; preds = %_ZL22CalcSoundSpeedForElemsR6DomainPddS1_S1_S1_S1_diPi.exit.i.i.i.sink.split, %447
>   %451 = bitcast double %424 to i64
>   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 10, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, i32**, double**, double**, double**, double**, double**, i64, %class.Domain*, i64)* @.omp_outlined..44 to void (i32*, i32*, ...)*), i32* nonnull %len.addr.i.i.i.i, i32** nonnull %regElemList.addr.i96.i.i.i, double** nonnull %pbvc.addr.i94.i.i.i, double** nonnull %enewc.addr.i.i.i.i, double** nonnull %vnewc.addr.i93.i.i.i, double** nonnull %bvc.addr.i95.i.i.i, double** nonnull %pnewc.addr.i.i.i.i, i64 %451, %class.Domain* nonnull %domain, i64 %418) #7
>   %452 = load i8*, i8** @.apollo.region.handle.27, align 8
>   call void @__apollo_region_end(i8* %452) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %391)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %392)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %393)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %394)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %395)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %396)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %397)
>   %cmp.not.i.i.i23.i = icmp eq i8* %call.i92.i.i.i, null
>   br i1 %cmp.not.i.i.i23.i, label %_Z7ReleaseIdEvPPT_.exit.i.i25.i, label %if.then.i.i.i24.i
> 
> if.then.i.i.i24.i:                                ; preds = %_ZL22CalcSoundSpeedForElemsR6DomainPddS1_S1_S1_S1_diPi.exit.i.i.i
>   call void @free(i8* nonnull %call.i92.i.i.i) #7
>   br label %_Z7ReleaseIdEvPPT_.exit.i.i25.i
> 
> _Z7ReleaseIdEvPPT_.exit.i.i25.i:                  ; preds = %if.then.i.i.i24.i, %_ZL22CalcSoundSpeedForElemsR6DomainPddS1_S1_S1_S1_diPi.exit.i.i.i
>   %cmp.not.i100.i.i.i = icmp eq i8* %call.i90.i.i.i, null
>   br i1 %cmp.not.i100.i.i.i, label %_Z7ReleaseIdEvPPT_.exit102.i.i.i, label %if.then.i101.i.i.i
> 
> if.then.i101.i.i.i:                               ; preds = %_Z7ReleaseIdEvPPT_.exit.i.i25.i
>   call void @free(i8* nonnull %call.i90.i.i.i) #7
>   br label %_Z7ReleaseIdEvPPT_.exit102.i.i.i
> 
> _Z7ReleaseIdEvPPT_.exit102.i.i.i:                 ; preds = %if.then.i101.i.i.i, %_Z7ReleaseIdEvPPT_.exit.i.i25.i
>   %453 = load double*, double** %q_new.i.i.i, align 8, !tbaa !41
>   %cmp.not.i103.i.i.i = icmp eq double* %453, null
>   br i1 %cmp.not.i103.i.i.i, label %_Z7ReleaseIdEvPPT_.exit105.i.i.i, label %if.then.i104.i.i.i
> 
> if.then.i104.i.i.i:                               ; preds = %_Z7ReleaseIdEvPPT_.exit102.i.i.i
>   %454 = bitcast double* %453 to i8*
>   call void @free(i8* %454) #7
>   store double* null, double** %q_new.i.i.i, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit105.i.i.i
> 
> _Z7ReleaseIdEvPPT_.exit105.i.i.i:                 ; preds = %if.then.i104.i.i.i, %_Z7ReleaseIdEvPPT_.exit102.i.i.i
>   %455 = load double*, double** %e_new.i.i.i, align 8, !tbaa !41
>   %cmp.not.i106.i.i.i = icmp eq double* %455, null
>   br i1 %cmp.not.i106.i.i.i, label %_Z7ReleaseIdEvPPT_.exit108.i.i.i, label %if.then.i107.i.i.i
> 
> if.then.i107.i.i.i:                               ; preds = %_Z7ReleaseIdEvPPT_.exit105.i.i.i
>   %456 = bitcast double* %455 to i8*
>   call void @free(i8* %456) #7
>   store double* null, double** %e_new.i.i.i, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit108.i.i.i
> 
> _Z7ReleaseIdEvPPT_.exit108.i.i.i:                 ; preds = %if.then.i107.i.i.i, %_Z7ReleaseIdEvPPT_.exit105.i.i.i
>   %457 = load double*, double** %p_new.i.i.i, align 8, !tbaa !41
>   %cmp.not.i109.i.i.i = icmp eq double* %457, null
>   br i1 %cmp.not.i109.i.i.i, label %_Z7ReleaseIdEvPPT_.exit111.i.i.i, label %if.then.i110.i.i.i
> 
> if.then.i110.i.i.i:                               ; preds = %_Z7ReleaseIdEvPPT_.exit108.i.i.i
>   %458 = bitcast double* %457 to i8*
>   call void @free(i8* %458) #7
>   store double* null, double** %p_new.i.i.i, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit111.i.i.i
> 
> _Z7ReleaseIdEvPPT_.exit111.i.i.i:                 ; preds = %if.then.i110.i.i.i, %_Z7ReleaseIdEvPPT_.exit108.i.i.i
>   %459 = load double*, double** %work.i.i.i, align 8, !tbaa !41
>   %cmp.not.i112.i.i.i = icmp eq double* %459, null
>   br i1 %cmp.not.i112.i.i.i, label %_Z7ReleaseIdEvPPT_.exit114.i.i.i, label %if.then.i113.i.i.i
> 
> if.then.i113.i.i.i:                               ; preds = %_Z7ReleaseIdEvPPT_.exit111.i.i.i
>   %460 = bitcast double* %459 to i8*
>   call void @free(i8* %460) #7
>   store double* null, double** %work.i.i.i, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit114.i.i.i
> 
> _Z7ReleaseIdEvPPT_.exit114.i.i.i:                 ; preds = %if.then.i113.i.i.i, %_Z7ReleaseIdEvPPT_.exit111.i.i.i
>   %461 = load double*, double** %ql_old.i.i.i, align 8, !tbaa !41
>   %cmp.not.i115.i.i.i = icmp eq double* %461, null
>   br i1 %cmp.not.i115.i.i.i, label %_Z7ReleaseIdEvPPT_.exit117.i.i.i, label %if.then.i116.i.i.i
> 
> if.then.i116.i.i.i:                               ; preds = %_Z7ReleaseIdEvPPT_.exit114.i.i.i
>   %462 = bitcast double* %461 to i8*
>   call void @free(i8* %462) #7
>   store double* null, double** %ql_old.i.i.i, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit117.i.i.i
> 
> _Z7ReleaseIdEvPPT_.exit117.i.i.i:                 ; preds = %if.then.i116.i.i.i, %_Z7ReleaseIdEvPPT_.exit114.i.i.i
>   %463 = load double*, double** %qq_old.i.i.i, align 8, !tbaa !41
>   %cmp.not.i118.i.i.i = icmp eq double* %463, null
>   br i1 %cmp.not.i118.i.i.i, label %_Z7ReleaseIdEvPPT_.exit120.i.i.i, label %if.then.i119.i.i.i
> 
> if.then.i119.i.i.i:                               ; preds = %_Z7ReleaseIdEvPPT_.exit117.i.i.i
>   %464 = bitcast double* %463 to i8*
>   call void @free(i8* %464) #7
>   store double* null, double** %qq_old.i.i.i, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit120.i.i.i
> 
> _Z7ReleaseIdEvPPT_.exit120.i.i.i:                 ; preds = %if.then.i119.i.i.i, %_Z7ReleaseIdEvPPT_.exit117.i.i.i
>   %465 = load double*, double** %compHalfStep.i.i.i, align 8, !tbaa !41
>   %cmp.not.i121.i.i.i = icmp eq double* %465, null
>   br i1 %cmp.not.i121.i.i.i, label %_Z7ReleaseIdEvPPT_.exit123.i.i.i, label %if.then.i122.i.i.i
> 
> if.then.i122.i.i.i:                               ; preds = %_Z7ReleaseIdEvPPT_.exit120.i.i.i
>   %466 = bitcast double* %465 to i8*
>   call void @free(i8* %466) #7
>   store double* null, double** %compHalfStep.i.i.i, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit123.i.i.i
> 
> _Z7ReleaseIdEvPPT_.exit123.i.i.i:                 ; preds = %if.then.i122.i.i.i, %_Z7ReleaseIdEvPPT_.exit120.i.i.i
>   %467 = load double*, double** %compression.i.i.i, align 8, !tbaa !41
>   %cmp.not.i124.i.i.i = icmp eq double* %467, null
>   br i1 %cmp.not.i124.i.i.i, label %_Z7ReleaseIdEvPPT_.exit126.i.i.i, label %if.then.i125.i.i.i
> 
> if.then.i125.i.i.i:                               ; preds = %_Z7ReleaseIdEvPPT_.exit123.i.i.i
>   %468 = bitcast double* %467 to i8*
>   call void @free(i8* %468) #7
>   store double* null, double** %compression.i.i.i, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit126.i.i.i
> 
> _Z7ReleaseIdEvPPT_.exit126.i.i.i:                 ; preds = %if.then.i125.i.i.i, %_Z7ReleaseIdEvPPT_.exit123.i.i.i
>   %469 = load double*, double** %q_old.i.i.i, align 8, !tbaa !41
>   %cmp.not.i127.i.i.i = icmp eq double* %469, null
>   br i1 %cmp.not.i127.i.i.i, label %_Z7ReleaseIdEvPPT_.exit129.i.i.i, label %if.then.i128.i.i.i
> 
> if.then.i128.i.i.i:                               ; preds = %_Z7ReleaseIdEvPPT_.exit126.i.i.i
>   %470 = bitcast double* %469 to i8*
>   call void @free(i8* %470) #7
>   store double* null, double** %q_old.i.i.i, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit129.i.i.i
> 
> _Z7ReleaseIdEvPPT_.exit129.i.i.i:                 ; preds = %if.then.i128.i.i.i, %_Z7ReleaseIdEvPPT_.exit126.i.i.i
>   %471 = load double*, double** %p_old.i.i.i, align 8, !tbaa !41
>   %cmp.not.i130.i.i.i = icmp eq double* %471, null
>   br i1 %cmp.not.i130.i.i.i, label %_Z7ReleaseIdEvPPT_.exit132.i.i.i, label %if.then.i131.i.i.i
> 
> if.then.i131.i.i.i:                               ; preds = %_Z7ReleaseIdEvPPT_.exit129.i.i.i
>   %472 = bitcast double* %471 to i8*
>   call void @free(i8* %472) #7
>   store double* null, double** %p_old.i.i.i, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit132.i.i.i
> 
> _Z7ReleaseIdEvPPT_.exit132.i.i.i:                 ; preds = %if.then.i131.i.i.i, %_Z7ReleaseIdEvPPT_.exit129.i.i.i
>   %473 = load double*, double** %delvc.i.i.i, align 8, !tbaa !41
>   %cmp.not.i133.i.i.i = icmp eq double* %473, null
>   br i1 %cmp.not.i133.i.i.i, label %_Z7ReleaseIdEvPPT_.exit135.i.i.i, label %if.then.i134.i.i.i
> 
> if.then.i134.i.i.i:                               ; preds = %_Z7ReleaseIdEvPPT_.exit132.i.i.i
>   %474 = bitcast double* %473 to i8*
>   call void @free(i8* %474) #7
>   store double* null, double** %delvc.i.i.i, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit135.i.i.i
> 
> _Z7ReleaseIdEvPPT_.exit135.i.i.i:                 ; preds = %if.then.i134.i.i.i, %_Z7ReleaseIdEvPPT_.exit132.i.i.i
>   %475 = load double*, double** %e_old.i.i.i, align 8, !tbaa !41
>   %cmp.not.i136.i.i.i = icmp eq double* %475, null
>   br i1 %cmp.not.i136.i.i.i, label %_ZL15EvalEOSForElemsR6DomainPdiPii.exit.i.i, label %if.then.i137.i.i.i
> 
> if.then.i137.i.i.i:                               ; preds = %_Z7ReleaseIdEvPPT_.exit135.i.i.i
>   %476 = bitcast double* %475 to i8*
>   call void @free(i8* %476) #7
>   store double* null, double** %e_old.i.i.i, align 8, !tbaa !41
>   br label %_ZL15EvalEOSForElemsR6DomainPdiPii.exit.i.i
> 
> for.body.i.i26.i:                                 ; preds = %_ZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPi.exit.i.i.i, %for.body.lr.ph.i.i22.i
>   %j.0146.i.i.i = phi i32 [ 0, %for.body.lr.ph.i.i22.i ], [ %inc.i.i.i, %_ZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPi.exit.i.i.i ]
>   %477 = load i8*, i8** @.apollo.region.handle.9, align 8
>   %478 = icmp eq i8* %477, null
>   br i1 %478, label %479, label %481
> 
> 479:                                              ; preds = %for.body.i.i26.i
>   %480 = call i8* @__apollo_region_create(i32 5, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @12, i64 0, i64 0), i32 2)
>   store i8* %480, i8** @.apollo.region.handle.9, align 8
>   br label %481
> 
> 481:                                              ; preds = %479, %for.body.i.i26.i
>   %482 = phi i8* [ %477, %for.body.i.i26.i ], [ %480, %479 ]
>   call void @__apollo_region_begin(i8* %482)
>   %tmp.apollo.slice.i.i.i = load i32, i32* %numElemReg.addr.i.i.i, align 4, !tbaa !6
>   %483 = uitofp i32 %tmp.apollo.slice.i.i.i to float
>   call void @__apollo_region_set_feature(i8* %482, float %483)
>   %tmp.apollo.slice58.i.i.i = load i32, i32* %numElemReg.addr.i.i.i, align 4, !tbaa !6
>   %484 = uitofp i32 %tmp.apollo.slice58.i.i.i to float
>   call void @__apollo_region_set_feature(i8* %482, float %484)
>   %tmp.apollo.slice59.i.i.i = load i32, i32* %numElemReg.addr.i.i.i, align 4, !tbaa !6
>   %485 = uitofp i32 %tmp.apollo.slice59.i.i.i to float
>   call void @__apollo_region_set_feature(i8* %482, float %485)
>   %tmp.apollo.slice60.i.i.i = load i32, i32* %numElemReg.addr.i.i.i, align 4, !tbaa !6
>   %486 = uitofp i32 %tmp.apollo.slice60.i.i.i to float
>   call void @__apollo_region_set_feature(i8* %482, float %486)
>   %tmp.apollo.slice61.i.i.i = load i32, i32* %numElemReg.addr.i.i.i, align 4, !tbaa !6
>   %487 = uitofp i32 %tmp.apollo.slice61.i.i.i to float
>   call void @__apollo_region_set_feature(i8* %482, float %487)
>   %488 = call i32 @__apollo_region_get_policy(i8* %482)
>   switch i32 %488, label %.split.i.i.i25 [
>     i32 0, label %.split.i.i.i25.sink.split
>     i32 1, label %.apollo.case.1.i.i28.i
>   ]
6664,6822c3518,3519
< 1184:                                             ; preds = %1155
<   %1185 = landingpad { i8*, i32 }
<           cleanup
<   %1186 = load i8*, i8** %743, align 8, !tbaa !8
<   %1187 = getelementptr inbounds i8, i8* %1186, i64 -24
<   %1188 = bitcast i8* %1187 to %"struct.std::basic_string<char>::_Rep"*
<   %1189 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %27, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %1189) #10
<   %1190 = icmp eq i8* %1187, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %1190, label %1203, label %1191, !prof !11
< 
< 1191:                                             ; preds = %1184
<   %1192 = getelementptr inbounds i8, i8* %1186, i64 -8
<   %1193 = bitcast i8* %1192 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %1194, label %1196
< 
< 1194:                                             ; preds = %1191
<   %1195 = atomicrmw volatile add i32* %1193, i32 -1 acq_rel
<   br label %1199
< 
< 1196:                                             ; preds = %1191
<   %1197 = load i32, i32* %1193, align 4, !tbaa !12
<   %1198 = add nsw i32 %1197, -1
<   store i32 %1198, i32* %1193, align 4, !tbaa !12
<   br label %1199
< 
< 1199:                                             ; preds = %1196, %1194
<   %1200 = phi i32 [ %1195, %1194 ], [ %1197, %1196 ]
<   %1201 = icmp slt i32 %1200, 1
<   br i1 %1201, label %1202, label %1203
< 
< 1202:                                             ; preds = %1199
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %1188, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %27) #10
<   br label %1203
< 
< 1203:                                             ; preds = %1202, %1199, %1184
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %1189) #10
<   br label %1204
< 
< 1204:                                             ; preds = %1203, %1182
<   %1205 = phi { i8*, i32 } [ %1185, %1203 ], [ %1183, %1182 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %742) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %741) #10
<   call void @_ZdlPv(i8* nonnull %1153) #28
<   br label %1411
< 
< 1206:                                             ; preds = %1174, %1149
<   %1207 = phi %"class.Apollo::Region"* [ %1175, %1174 ], [ %1150, %1149 ]
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %714, i8 0, i64 24, i1 false) #10
<   %1208 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %1209 unwind label %1012
< 
< 1209:                                             ; preds = %1206
<   store i8* %1208, i8** %746, align 8, !tbaa !14
<   %1210 = getelementptr inbounds i8, i8* %1208, i64 4
<   store i8* %1210, i8** %749, align 8, !tbaa !17
<   %1211 = bitcast i8* %1208 to i32*
<   %1212 = load i32, i32* %1043, align 4
<   store i32 %1212, i32* %1211, align 4
<   store i8* %1210, i8** %750, align 8, !tbaa !18
<   %1213 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %1207, %"class.std::vector.15"* nonnull %58)
<           to label %1214 unwind label %1262
< 
< 1214:                                             ; preds = %1209
<   %1215 = load float*, float** %745, align 8, !tbaa !14
<   %1216 = icmp eq float* %1215, null
<   br i1 %1216, label %1219, label %1217
< 
< 1217:                                             ; preds = %1214
<   %1218 = bitcast float* %1215 to i8*
<   call void @_ZdlPv(i8* nonnull %1218) #10
<   br label %1219
< 
< 1219:                                             ; preds = %1217, %1214
<   %1220 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_1, align 8, !tbaa !6
<   %1221 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %1220)
<           to label %1222 unwind label %1012
< 
< 1222:                                             ; preds = %1219
<   %1223 = icmp eq i32 %1221, 1
<   %1224 = select i1 %1223, i32 1, i32 36
<   %1225 = icmp eq i32 %1221, 0
<   %1226 = select i1 %1225, i32 36, i32 %1224
<   call void @omp_set_num_threads(i32 %1226) #10
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 5, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, double**, double**, i64, i64)* @.omp_outlined..59 to void (i32*, i32*, ...)*), i64 %1060, double** nonnull %35, double** nonnull %44, i64 %844, i64 %851)
<   %1227 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_1, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %1227)
<           to label %1228 unwind label %1012
< 
< 1228:                                             ; preds = %1222
<   %1229 = load double*, double** %34, align 8, !tbaa !6
<   %1230 = load double*, double** %37, align 8, !tbaa !6
<   %1231 = load double*, double** %38, align 8, !tbaa !6
<   %1232 = load double*, double** %35, align 8, !tbaa !6
<   %1233 = load double*, double** %43, align 8, !tbaa !6
<   %1234 = load i32*, i32** %48, align 8, !tbaa !6
<   invoke fastcc void @_ZL20CalcPressureForElemsPdS_S_S_S_S_dddiPi(double* %1229, double* %1230, double* %1231, double* %1232, double* %969, double* %1233, double %850, double %845, double %976, i32 %977, i32* %1234)
<           to label %1235 unwind label %1012
< 
< 1235:                                             ; preds = %1228
<   store float %982, float* %985, align 4
<   %1236 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_2, align 8, !tbaa !6
<   %1237 = icmp eq %"class.Apollo::Region"* %1236, null
<   br i1 %1237, label %1238, label %1292
< 
< 1238:                                             ; preds = %1235
<   %1239 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %1240 unwind label %1012
< 
< 1240:                                             ; preds = %1238
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %751) #10
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %752) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %59, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %60)
<           to label %1241 unwind label %1268
< 
< 1241:                                             ; preds = %1240
<   %1242 = bitcast i8* %1239 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %1242, i32 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.60, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %59)
<           to label %1243 unwind label %1270
< 
< 1243:                                             ; preds = %1241
<   store i8* %1239, i8** bitcast (%"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_2 to i8**), align 8, !tbaa !6
<   %1244 = load i8*, i8** %753, align 8, !tbaa !8
<   %1245 = getelementptr inbounds i8, i8* %1244, i64 -24
<   %1246 = bitcast i8* %1245 to %"struct.std::basic_string<char>::_Rep"*
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %754) #10
<   %1247 = icmp eq i8* %1245, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %1247, label %1260, label %1248, !prof !11
< 
< 1248:                                             ; preds = %1243
<   %1249 = getelementptr inbounds i8, i8* %1244, i64 -8
<   %1250 = bitcast i8* %1249 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %1251, label %1253
< 
< 1251:                                             ; preds = %1248
<   %1252 = atomicrmw volatile add i32* %1250, i32 -1 acq_rel
<   br label %1256
< 
< 1253:                                             ; preds = %1248
<   %1254 = load i32, i32* %1250, align 4, !tbaa !12
<   %1255 = add nsw i32 %1254, -1
<   store i32 %1255, i32* %1250, align 4, !tbaa !12
<   br label %1256
< 
< 1256:                                             ; preds = %1253, %1251
<   %1257 = phi i32 [ %1252, %1251 ], [ %1254, %1253 ]
<   %1258 = icmp slt i32 %1257, 1
<   br i1 %1258, label %1259, label %1260
< 
< 1259:                                             ; preds = %1256
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %1246, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %26) #10
<   br label %1260
< 
< 1260:                                             ; preds = %1259, %1256, %1243
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %754) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %752) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %751) #10
<   %1261 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_2, align 8, !tbaa !6
<   br label %1292
---
> .apollo.case.1.i.i28.i:                           ; preds = %481
>   br label %.split.i.i.i25.sink.split
6824,6834c3521,3601
< 1262:                                             ; preds = %1209
<   %1263 = landingpad { i8*, i32 }
<           cleanup
<   %1264 = load float*, float** %745, align 8, !tbaa !14
<   %1265 = icmp eq float* %1264, null
<   br i1 %1265, label %1411, label %1266
< 
< 1266:                                             ; preds = %1262
<   %1267 = bitcast float* %1264 to i8*
<   call void @_ZdlPv(i8* nonnull %1267) #10
<   br label %1411
---
> .split.i.i.i25.sink.split:                        ; preds = %481, %.apollo.case.1.i.i28.i
>   %.sink56 = phi i32 [ 1, %.apollo.case.1.i.i28.i ], [ 36, %481 ]
>   call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num.i36.i, i32 %.sink56)
>   br label %.split.i.i.i25
> 
> .split.i.i.i25:                                   ; preds = %.split.i.i.i25.sink.split, %481
>   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 15, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, i32**, double**, %class.Domain*, double**, double**, double**, double**, double**, double**, double**, double**, double*, double*, double**)* @.omp_outlined..35 to void (i32*, i32*, ...)*), i32* nonnull %numElemReg.addr.i.i.i, i32** nonnull %regElemList.addr.i.i.i, double** nonnull %e_old.i.i.i, %class.Domain* nonnull %domain, double** nonnull %delvc.i.i.i, double** nonnull %p_old.i.i.i, double** nonnull %q_old.i.i.i, double** nonnull %qq_old.i.i.i, double** nonnull %ql_old.i.i.i, double** nonnull %compression.i.i.i, double** nonnull %vnewc.addr.i.i.i, double** nonnull %compHalfStep.i.i.i, double* nonnull %eosvmin.i.i.i, double* nonnull %eosvmax.i.i.i, double** nonnull %work.i.i.i)
>   %489 = load i8*, i8** @.apollo.region.handle.9, align 8
>   call void @__apollo_region_end(i8* %489)
>   %490 = load double*, double** %p_new.i.i.i, align 8, !tbaa !41
>   %491 = load i64, i64* %353, align 8, !tbaa !41
>   %492 = load i64, i64* %354, align 8, !tbaa !41
>   %493 = load i64, i64* %355, align 8, !tbaa !41
>   %494 = load i64, i64* %356, align 8, !tbaa !41
>   %495 = load i64, i64* %357, align 8, !tbaa !41
>   %496 = load double*, double** %compression.i.i.i, align 8, !tbaa !41
>   %497 = load double*, double** %compHalfStep.i.i.i, align 8, !tbaa !41
>   %498 = load double*, double** %vnewc.addr.i.i.i, align 8, !tbaa !41
>   %499 = load i64, i64* %358, align 8, !tbaa !41
>   %500 = load i64, i64* %359, align 8, !tbaa !41
>   %501 = load i64, i64* %360, align 8, !tbaa !41
>   %502 = load i64, i64* %361, align 8, !tbaa !41
>   %503 = load double, double* %eosvmax.i.i.i, align 8, !tbaa !2
>   %504 = load i32, i32* %numElemReg.addr.i.i.i, align 4, !tbaa !6
>   %505 = load i32*, i32** %regElemList.addr.i.i.i, align 8, !tbaa !41
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %362)
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %363)
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %364)
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %365)
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %366)
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %367)
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %368)
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %369)
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %370)
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %371)
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %372)
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %373)
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %374)
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %375)
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %376)
>   store double* %490, double** %p_new.addr.i.i.i.i, align 8, !tbaa !41
>   store i64 %491, i64* %377, align 8, !tbaa !41
>   store i64 %492, i64* %378, align 8, !tbaa !41
>   store i8* %call.i90.i.i.i, i8** %379, align 8, !tbaa !41
>   store i8* %call.i92.i.i.i, i8** %380, align 8, !tbaa !41
>   store i64 %493, i64* %381, align 8, !tbaa !41
>   store i64 %494, i64* %382, align 8, !tbaa !41
>   store i64 %495, i64* %383, align 8, !tbaa !41
>   store double* %497, double** %compHalfStep.addr.i.i.i.i, align 8, !tbaa !41
>   store double* %498, double** %vnewc.addr.i.i.i.i, align 8, !tbaa !41
>   store i64 %499, i64* %384, align 8, !tbaa !41
>   store i64 %500, i64* %385, align 8, !tbaa !41
>   store i64 %501, i64* %386, align 8, !tbaa !41
>   store i64 %502, i64* %387, align 8, !tbaa !41
>   store i32* %505, i32** %regElemList.addr.i.i.i.i, align 8, !tbaa !41
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %388) #7
>   %conv.i.i.i.i22 = sext i32 %504 to i64
>   %mul.i.i.i.i.i23 = shl nsw i64 %conv.i.i.i.i22, 3
>   %call.i.i.i.i.i24 = call noalias i8* @malloc(i64 %mul.i.i.i.i.i23) #7
>   store i8* %call.i.i.i.i.i24, i8** %389, align 8, !tbaa !41
>   %length.casted.sroa.0.0.insert.ext.i.i.i.i = zext i32 %504 to i64
>   %506 = load i8*, i8** @.apollo.region.handle.7, align 8
>   %507 = icmp eq i8* %506, null
>   %508 = bitcast i8* %call.i.i.i.i.i24 to double*
>   br i1 %507, label %509, label %511
> 
> 509:                                              ; preds = %.split.i.i.i25
>   %510 = call i8* @__apollo_region_create(i32 1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @10, i64 0, i64 0), i32 2)
>   store i8* %510, i8** @.apollo.region.handle.7, align 8
>   br label %511
> 
> 511:                                              ; preds = %509, %.split.i.i.i25
>   %512 = phi i8* [ %506, %.split.i.i.i25 ], [ %510, %509 ]
>   call void @__apollo_region_begin(i8* %512)
>   %513 = uitofp i32 %504 to float
>   call void @__apollo_region_set_feature(i8* %512, float %513)
>   %514 = call i32 @__apollo_region_get_policy(i8* %512)
>   switch i32 %514, label %.split47.i.i.i.i [
>     i32 0, label %.split47.i.i.i.i.sink.split
>     i32 1, label %.apollo.case.150.i.i.i.i
>   ]
6836,6839c3603,3604
< 1268:                                             ; preds = %1240
<   %1269 = landingpad { i8*, i32 }
<           cleanup
<   br label %1290
---
> .apollo.case.150.i.i.i.i:                         ; preds = %511
>   br label %.split47.i.i.i.i.sink.split
6841,6999c3606,3634
< 1270:                                             ; preds = %1241
<   %1271 = landingpad { i8*, i32 }
<           cleanup
<   %1272 = load i8*, i8** %753, align 8, !tbaa !8
<   %1273 = getelementptr inbounds i8, i8* %1272, i64 -24
<   %1274 = bitcast i8* %1273 to %"struct.std::basic_string<char>::_Rep"*
<   %1275 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %24, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %1275) #10
<   %1276 = icmp eq i8* %1273, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %1276, label %1289, label %1277, !prof !11
< 
< 1277:                                             ; preds = %1270
<   %1278 = getelementptr inbounds i8, i8* %1272, i64 -8
<   %1279 = bitcast i8* %1278 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %1280, label %1282
< 
< 1280:                                             ; preds = %1277
<   %1281 = atomicrmw volatile add i32* %1279, i32 -1 acq_rel
<   br label %1285
< 
< 1282:                                             ; preds = %1277
<   %1283 = load i32, i32* %1279, align 4, !tbaa !12
<   %1284 = add nsw i32 %1283, -1
<   store i32 %1284, i32* %1279, align 4, !tbaa !12
<   br label %1285
< 
< 1285:                                             ; preds = %1282, %1280
<   %1286 = phi i32 [ %1281, %1280 ], [ %1283, %1282 ]
<   %1287 = icmp slt i32 %1286, 1
<   br i1 %1287, label %1288, label %1289
< 
< 1288:                                             ; preds = %1285
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %1274, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %24) #10
<   br label %1289
< 
< 1289:                                             ; preds = %1288, %1285, %1270
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %1275) #10
<   br label %1290
< 
< 1290:                                             ; preds = %1289, %1268
<   %1291 = phi { i8*, i32 } [ %1271, %1289 ], [ %1269, %1268 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %752) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %751) #10
<   call void @_ZdlPv(i8* nonnull %1239) #28
<   br label %1411
< 
< 1292:                                             ; preds = %1260, %1235
<   %1293 = phi %"class.Apollo::Region"* [ %1261, %1260 ], [ %1236, %1235 ]
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %715, i8 0, i64 24, i1 false) #10
<   %1294 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %1295 unwind label %1012
< 
< 1295:                                             ; preds = %1292
<   store i8* %1294, i8** %756, align 8, !tbaa !14
<   %1296 = getelementptr inbounds i8, i8* %1294, i64 4
<   store i8* %1296, i8** %759, align 8, !tbaa !17
<   %1297 = bitcast i8* %1294 to i32*
<   %1298 = load i32, i32* %1043, align 4
<   store i32 %1298, i32* %1297, align 4
<   store i8* %1296, i8** %760, align 8, !tbaa !18
<   %1299 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %1293, %"class.std::vector.15"* nonnull %61)
<           to label %1300 unwind label %1348
< 
< 1300:                                             ; preds = %1295
<   %1301 = load float*, float** %755, align 8, !tbaa !14
<   %1302 = icmp eq float* %1301, null
<   br i1 %1302, label %1305, label %1303
< 
< 1303:                                             ; preds = %1300
<   %1304 = bitcast float* %1301 to i8*
<   call void @_ZdlPv(i8* nonnull %1304) #10
<   br label %1305
< 
< 1305:                                             ; preds = %1303, %1300
<   %1306 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_2, align 8, !tbaa !6
<   %1307 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %1306)
<           to label %1308 unwind label %1012
< 
< 1308:                                             ; preds = %1305
<   %1309 = icmp eq i32 %1307, 1
<   %1310 = select i1 %1309, i32 1, i32 36
<   %1311 = icmp eq i32 %1307, 0
<   %1312 = select i1 %1311, i32 36, i32 %1310
<   call void @omp_set_num_threads(i32 %1312) #10
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 17, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, i32**, double**, double**, double**, double**, double**, double**, i64, double**, double**, double**, double**, double**, double**, i64, i64)* @.omp_outlined..61 to void (i32*, i32*, ...)*), i64 %1060, i32** nonnull %48, double** nonnull %45, double** nonnull %38, double** nonnull %35, double** nonnull %43, double** nonnull %37, double** nonnull %34, i64 %871, double** nonnull %47, double** nonnull %46, double** nonnull %39, double** nonnull %41, double** nonnull %49, double** nonnull %36, i64 %844, i64 %851)
<   %1313 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_2, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %1313)
<           to label %1314 unwind label %1012
< 
< 1314:                                             ; preds = %1308
<   %1315 = load double*, double** %34, align 8, !tbaa !6
<   %1316 = load double*, double** %37, align 8, !tbaa !6
<   %1317 = load double*, double** %38, align 8, !tbaa !6
<   %1318 = load double*, double** %35, align 8, !tbaa !6
<   %1319 = load double*, double** %43, align 8, !tbaa !6
<   %1320 = load i32*, i32** %48, align 8, !tbaa !6
<   invoke fastcc void @_ZL20CalcPressureForElemsPdS_S_S_S_S_dddiPi(double* %1315, double* %1316, double* %1317, double* %1318, double* %969, double* %1319, double %850, double %845, double %976, i32 %977, i32* %1320)
<           to label %1321 unwind label %1012
< 
< 1321:                                             ; preds = %1314
<   store float %982, float* %985, align 4
<   %1322 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_3, align 8, !tbaa !6
<   %1323 = icmp eq %"class.Apollo::Region"* %1322, null
<   br i1 %1323, label %1324, label %1378
< 
< 1324:                                             ; preds = %1321
<   %1325 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %1326 unwind label %1012
< 
< 1326:                                             ; preds = %1324
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %761) #10
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %762) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %62, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %63)
<           to label %1327 unwind label %1354
< 
< 1327:                                             ; preds = %1326
<   %1328 = bitcast i8* %1325 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %1328, i32 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.62, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %62)
<           to label %1329 unwind label %1356
< 
< 1329:                                             ; preds = %1327
<   store i8* %1325, i8** bitcast (%"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_3 to i8**), align 8, !tbaa !6
<   %1330 = load i8*, i8** %763, align 8, !tbaa !8
<   %1331 = getelementptr inbounds i8, i8* %1330, i64 -24
<   %1332 = bitcast i8* %1331 to %"struct.std::basic_string<char>::_Rep"*
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %764) #10
<   %1333 = icmp eq i8* %1331, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %1333, label %1346, label %1334, !prof !11
< 
< 1334:                                             ; preds = %1329
<   %1335 = getelementptr inbounds i8, i8* %1330, i64 -8
<   %1336 = bitcast i8* %1335 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %1337, label %1339
< 
< 1337:                                             ; preds = %1334
<   %1338 = atomicrmw volatile add i32* %1336, i32 -1 acq_rel
<   br label %1342
< 
< 1339:                                             ; preds = %1334
<   %1340 = load i32, i32* %1336, align 4, !tbaa !12
<   %1341 = add nsw i32 %1340, -1
<   store i32 %1341, i32* %1336, align 4, !tbaa !12
<   br label %1342
< 
< 1342:                                             ; preds = %1339, %1337
<   %1343 = phi i32 [ %1338, %1337 ], [ %1340, %1339 ]
<   %1344 = icmp slt i32 %1343, 1
<   br i1 %1344, label %1345, label %1346
< 
< 1345:                                             ; preds = %1342
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %1332, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %25) #10
<   br label %1346
< 
< 1346:                                             ; preds = %1345, %1342, %1329
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %764) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %762) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %761) #10
<   %1347 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_3, align 8, !tbaa !6
<   br label %1378
---
> .split47.i.i.i.i.sink.split:                      ; preds = %511, %.apollo.case.150.i.i.i.i
>   %.sink57 = phi i32 [ 1, %.apollo.case.150.i.i.i.i ], [ 36, %511 ]
>   call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num.i36.i, i32 %.sink57)
>   br label %.split47.i.i.i.i
> 
> .split47.i.i.i.i:                                 ; preds = %.split47.i.i.i.i.sink.split, %511
>   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 8, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, double**, double**, double**, double**, double**, double**, i64)* @.omp_outlined..37 to void (i32*, i32*, ...)*), i64 %length.casted.sroa.0.0.insert.ext.i.i.i.i, double** nonnull %e_new.addr.i.i.i.i, double** nonnull %e_old.addr.i.i.i.i, double** nonnull %delvc.addr.i.i.i.i, double** nonnull %p_old.addr.i.i.i.i, double** nonnull %q_old.addr.i.i.i.i, double** nonnull %work.addr.i.i.i.i, i64 %423)
>   %515 = load i8*, i8** @.apollo.region.handle.7, align 8
>   call void @__apollo_region_end(i8* %515)
>   %516 = load double*, double** %e_new.addr.i.i.i.i, align 8, !tbaa !41
>   call fastcc void @_ZL20CalcPressureForElemsPdS_S_S_S_S_dddiPi(double* %508, double* %425, double* %426, double* %516, double* %497, double* %498, double %422, double %417, double %503, i32 %504, i32* %505)
>   %517 = load i8*, i8** @.apollo.region.handle.4, align 8
>   %518 = icmp eq i8* %517, null
>   br i1 %518, label %519, label %521
> 
> 519:                                              ; preds = %.split47.i.i.i.i
>   %520 = call i8* @__apollo_region_create(i32 1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @7, i64 0, i64 0), i32 2)
>   store i8* %520, i8** @.apollo.region.handle.4, align 8
>   br label %521
> 
> 521:                                              ; preds = %519, %.split47.i.i.i.i
>   %522 = phi i8* [ %517, %.split47.i.i.i.i ], [ %520, %519 ]
>   call void @__apollo_region_begin(i8* %522)
>   call void @__apollo_region_set_feature(i8* %522, float %513)
>   %523 = call i32 @__apollo_region_get_policy(i8* %522)
>   switch i32 %523, label %.split.i.i.i.i26 [
>     i32 0, label %.split.i.i.i.i26.sink.split
>     i32 1, label %.apollo.case.1.i.i.i30.i
>   ]
7001,7011c3636,3637
< 1348:                                             ; preds = %1295
<   %1349 = landingpad { i8*, i32 }
<           cleanup
<   %1350 = load float*, float** %755, align 8, !tbaa !14
<   %1351 = icmp eq float* %1350, null
<   br i1 %1351, label %1411, label %1352
< 
< 1352:                                             ; preds = %1348
<   %1353 = bitcast float* %1350 to i8*
<   call void @_ZdlPv(i8* nonnull %1353) #10
<   br label %1411
---
> .apollo.case.1.i.i.i30.i:                         ; preds = %521
>   br label %.split.i.i.i.i26.sink.split
7013,7016c3639,3655
< 1354:                                             ; preds = %1326
<   %1355 = landingpad { i8*, i32 }
<           cleanup
<   br label %1376
---
> .split.i.i.i.i26.sink.split:                      ; preds = %521, %.apollo.case.1.i.i.i30.i
>   %.sink58 = phi i32 [ 1, %.apollo.case.1.i.i.i30.i ], [ 36, %521 ]
>   call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num.i36.i, i32 %.sink58)
>   br label %.split.i.i.i.i26
> 
> .split.i.i.i.i26:                                 ; preds = %.split.i.i.i.i26.sink.split, %521
>   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 13, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, double**, double**, double**, double**, double**, double**, double**, i64, double**, double**, double**, double**)* @.omp_outlined..38 to void (i32*, i32*, ...)*), i64 %length.casted.sroa.0.0.insert.ext.i.i.i.i, double** nonnull %compHalfStep.addr.i.i.i.i, double** nonnull %delvc.addr.i.i.i.i, double** nonnull %q_new.addr.i.i.i.i, double** nonnull %pbvc.addr.i.i.i.i, double** nonnull %e_new.addr.i.i.i.i, double** nonnull %bvc.addr.i.i.i.i, double** nonnull %pHalfStep.i.i.i.i, i64 %427, double** nonnull %ql_old.addr.i.i.i.i, double** nonnull %qq_old.addr.i.i.i.i, double** nonnull %p_old.addr.i.i.i.i, double** nonnull %q_old.addr.i.i.i.i)
>   %524 = load i8*, i8** @.apollo.region.handle.4, align 8
>   call void @__apollo_region_end(i8* %524)
>   %525 = load i8*, i8** @.apollo.region.handle.25, align 8
>   %526 = icmp eq i8* %525, null
>   br i1 %526, label %527, label %529
> 
> 527:                                              ; preds = %.split.i.i.i.i26
>   %528 = call i8* @__apollo_region_create(i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @28, i64 0, i64 0), i32 2)
>   store i8* %528, i8** @.apollo.region.handle.25, align 8
>   br label %529
7018,7116c3657,3665
< 1356:                                             ; preds = %1327
<   %1357 = landingpad { i8*, i32 }
<           cleanup
<   %1358 = load i8*, i8** %763, align 8, !tbaa !8
<   %1359 = getelementptr inbounds i8, i8* %1358, i64 -24
<   %1360 = bitcast i8* %1359 to %"struct.std::basic_string<char>::_Rep"*
<   %1361 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %28, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %1361) #10
<   %1362 = icmp eq i8* %1359, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %1362, label %1375, label %1363, !prof !11
< 
< 1363:                                             ; preds = %1356
<   %1364 = getelementptr inbounds i8, i8* %1358, i64 -8
<   %1365 = bitcast i8* %1364 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %1366, label %1368
< 
< 1366:                                             ; preds = %1363
<   %1367 = atomicrmw volatile add i32* %1365, i32 -1 acq_rel
<   br label %1371
< 
< 1368:                                             ; preds = %1363
<   %1369 = load i32, i32* %1365, align 4, !tbaa !12
<   %1370 = add nsw i32 %1369, -1
<   store i32 %1370, i32* %1365, align 4, !tbaa !12
<   br label %1371
< 
< 1371:                                             ; preds = %1368, %1366
<   %1372 = phi i32 [ %1367, %1366 ], [ %1369, %1368 ]
<   %1373 = icmp slt i32 %1372, 1
<   br i1 %1373, label %1374, label %1375
< 
< 1374:                                             ; preds = %1371
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %1360, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %28) #10
<   br label %1375
< 
< 1375:                                             ; preds = %1374, %1371, %1356
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %1361) #10
<   br label %1376
< 
< 1376:                                             ; preds = %1375, %1354
<   %1377 = phi { i8*, i32 } [ %1357, %1375 ], [ %1355, %1354 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %762) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %761) #10
<   call void @_ZdlPv(i8* nonnull %1325) #28
<   br label %1411
< 
< 1378:                                             ; preds = %1346, %1321
<   %1379 = phi %"class.Apollo::Region"* [ %1347, %1346 ], [ %1322, %1321 ]
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %716, i8 0, i64 24, i1 false) #10
<   %1380 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %1381 unwind label %1012
< 
< 1381:                                             ; preds = %1378
<   store i8* %1380, i8** %766, align 8, !tbaa !14
<   %1382 = getelementptr inbounds i8, i8* %1380, i64 4
<   store i8* %1382, i8** %769, align 8, !tbaa !17
<   %1383 = bitcast i8* %1380 to i32*
<   %1384 = load i32, i32* %1043, align 4
<   store i32 %1384, i32* %1383, align 4
<   store i8* %1382, i8** %770, align 8, !tbaa !18
<   %1385 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %1379, %"class.std::vector.15"* nonnull %64)
<           to label %1386 unwind label %1405
< 
< 1386:                                             ; preds = %1381
<   %1387 = load float*, float** %765, align 8, !tbaa !14
<   %1388 = icmp eq float* %1387, null
<   br i1 %1388, label %1391, label %1389
< 
< 1389:                                             ; preds = %1386
<   %1390 = bitcast float* %1387 to i8*
<   call void @_ZdlPv(i8* nonnull %1390) #10
<   br label %1391
< 
< 1391:                                             ; preds = %1389, %1386
<   %1392 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_3, align 8, !tbaa !6
<   %1393 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %1392)
<           to label %1394 unwind label %1012
< 
< 1394:                                             ; preds = %1391
<   %1395 = icmp eq i32 %1393, 1
<   %1396 = select i1 %1395, i32 1, i32 36
<   %1397 = icmp eq i32 %1393, 0
<   %1398 = select i1 %1397, i32 36, i32 %1396
<   call void @omp_set_num_threads(i32 %1398) #10
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 13, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, i32**, double**, double**, double**, double**, double**, double**, i64, double**, double**, double**, i64)* @.omp_outlined..63 to void (i32*, i32*, ...)*), i64 %1060, i32** nonnull %48, double** nonnull %45, double** nonnull %38, double** nonnull %35, double** nonnull %43, double** nonnull %37, double** nonnull %34, i64 %871, double** nonnull %36, double** nonnull %47, double** nonnull %46, i64 %847)
<   %1399 = load double*, double** %49, align 8, !tbaa !6
<   %1400 = icmp eq double* %1399, null
<   br i1 %1400, label %1403, label %1401
< 
< 1401:                                             ; preds = %1394
<   %1402 = bitcast double* %1399 to i8*
<   call void @free(i8* %1402) #10
<   store double* null, double** %49, align 8, !tbaa !6
<   br label %1403
< 
< 1403:                                             ; preds = %1401, %1394
<   %1404 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_3, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %1404)
<           to label %1413 unwind label %1012
---
> 529:                                              ; preds = %527, %.split.i.i.i.i26
>   %530 = phi i8* [ %525, %.split.i.i.i.i26 ], [ %528, %527 ]
>   call void @__apollo_region_begin(i8* %530)
>   call void @__apollo_region_set_feature(i8* %530, float %513)
>   %531 = call i32 @__apollo_region_get_policy(i8* %530)
>   switch i32 %531, label %.split66.i.i.i.i [
>     i32 0, label %.split66.i.i.i.i.sink.split
>     i32 1, label %.apollo.case.169.i.i.i.i
>   ]
7118,7163c3667,3668
< 1405:                                             ; preds = %1381
<   %1406 = landingpad { i8*, i32 }
<           cleanup
<   %1407 = load float*, float** %765, align 8, !tbaa !14
<   %1408 = icmp eq float* %1407, null
<   br i1 %1408, label %1411, label %1409
< 
< 1409:                                             ; preds = %1405
<   %1410 = bitcast float* %1407 to i8*
<   call void @_ZdlPv(i8* nonnull %1410) #10
<   br label %1411
< 
< 1411:                                             ; preds = %1409, %1405, %1376, %1352, %1348, %1290, %1266, %1262, %1204, %1180, %1176, %1125, %1101, %1097, %1036, %1012
<   %1412 = phi { i8*, i32 } [ %1013, %1012 ], [ %1377, %1376 ], [ %1291, %1290 ], [ %1205, %1204 ], [ %1126, %1125 ], [ %1037, %1036 ], [ %1098, %1097 ], [ %1098, %1101 ], [ %1177, %1176 ], [ %1177, %1180 ], [ %1263, %1262 ], [ %1263, %1266 ], [ %1349, %1348 ], [ %1349, %1352 ], [ %1406, %1405 ], [ %1406, %1409 ]
<   call void @_ZdlPv(i8* nonnull %983) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %719) #10
<   br label %1664
< 
< 1413:                                             ; preds = %1403
<   call void @_ZdlPv(i8* nonnull %983) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %719) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %697)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %698)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %699)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %700)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %701)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %702)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %703)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %704)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %705)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %706)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %707)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %708)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %709)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %710)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %711)
<   call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %712)
<   call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %713)
<   call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %714)
<   call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %715)
<   call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %716)
<   call void @_ZdlPv(i8* nonnull %883) #10
<   %1414 = add nuw nsw i32 %882, 1
<   %1415 = icmp eq i32 %1414, %842
<   %1416 = load i32, i32* %68, align 4, !tbaa !12
<   br i1 %1415, label %872, label %880, !llvm.loop !83
---
> .apollo.case.169.i.i.i.i:                         ; preds = %529
>   br label %.split66.i.i.i.i.sink.split
7165,7235c3670,3700
< 1417:                                             ; preds = %942
<   %1418 = landingpad { i8*, i32 }
<           cleanup
<   %1419 = load float*, float** %691, align 8, !tbaa !14
<   %1420 = icmp eq float* %1419, null
<   br i1 %1420, label %1664, label %1421
< 
< 1421:                                             ; preds = %1417
<   %1422 = bitcast float* %1419 to i8*
<   call void @_ZdlPv(i8* nonnull %1422) #10
<   br label %1664
< 
< 1423:                                             ; preds = %875
<   %1424 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %1425 unwind label %1447
< 
< 1425:                                             ; preds = %1423
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %771) #10
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %772) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %87, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %88)
<           to label %1426 unwind label %1449
< 
< 1426:                                             ; preds = %1425
<   %1427 = bitcast i8* %1424 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %1427, i32 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.52, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %87)
<           to label %1428 unwind label %1451
< 
< 1428:                                             ; preds = %1426
<   store i8* %1424, i8** bitcast (%"class.Apollo::Region"** @_ZZL15EvalEOSForElemsR6DomainPdiPiiE12apolloRegion_0 to i8**), align 8, !tbaa !6
<   %1429 = load i8*, i8** %773, align 8, !tbaa !8
<   %1430 = getelementptr inbounds i8, i8* %1429, i64 -24
<   %1431 = bitcast i8* %1430 to %"struct.std::basic_string<char>::_Rep"*
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %774) #10
<   %1432 = icmp eq i8* %1430, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %1432, label %1445, label %1433, !prof !11
< 
< 1433:                                             ; preds = %1428
<   %1434 = getelementptr inbounds i8, i8* %1429, i64 -8
<   %1435 = bitcast i8* %1434 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %1436, label %1438
< 
< 1436:                                             ; preds = %1433
<   %1437 = atomicrmw volatile add i32* %1435, i32 -1 acq_rel
<   br label %1441
< 
< 1438:                                             ; preds = %1433
<   %1439 = load i32, i32* %1435, align 4, !tbaa !12
<   %1440 = add nsw i32 %1439, -1
<   store i32 %1440, i32* %1435, align 4, !tbaa !12
<   br label %1441
< 
< 1441:                                             ; preds = %1438, %1436
<   %1442 = phi i32 [ %1437, %1436 ], [ %1439, %1438 ]
<   %1443 = icmp slt i32 %1442, 1
<   br i1 %1443, label %1444, label %1445
< 
< 1444:                                             ; preds = %1441
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %1431, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %23) #10
<   br label %1445
< 
< 1445:                                             ; preds = %1444, %1441, %1428
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %774) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %772) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %771) #10
<   %1446 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL15EvalEOSForElemsR6DomainPdiPiiE12apolloRegion_0, align 8, !tbaa !6
<   br label %1473
< 
< 1447:                                             ; preds = %1498, %1490, %1487, %1473, %1423
<   %1448 = landingpad { i8*, i32 }
<           cleanup
<   br label %1664
---
> .split66.i.i.i.i.sink.split:                      ; preds = %529, %.apollo.case.169.i.i.i.i
>   %.sink59 = phi i32 [ 1, %.apollo.case.169.i.i.i.i ], [ 36, %529 ]
>   call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num.i36.i, i32 %.sink59)
>   br label %.split66.i.i.i.i
> 
> .split66.i.i.i.i:                                 ; preds = %.split66.i.i.i.i.sink.split, %529
>   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 5, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, double**, double**, i64, i64)* @.omp_outlined..39 to void (i32*, i32*, ...)*), i64 %length.casted.sroa.0.0.insert.ext.i.i.i.i, double** nonnull %e_new.addr.i.i.i.i, double** nonnull %work.addr.i.i.i.i, i64 %416, i64 %423)
>   %532 = load i8*, i8** @.apollo.region.handle.25, align 8
>   call void @__apollo_region_end(i8* %532)
>   %533 = load double*, double** %bvc.addr.i.i.i.i, align 8, !tbaa !41
>   %534 = load double*, double** %pbvc.addr.i.i.i.i, align 8, !tbaa !41
>   %535 = load double*, double** %e_new.addr.i.i.i.i, align 8, !tbaa !41
>   call fastcc void @_ZL20CalcPressureForElemsPdS_S_S_S_S_dddiPi(double* %490, double* %533, double* %534, double* %535, double* %496, double* %498, double %422, double %417, double %503, i32 %504, i32* %505)
>   %536 = load i8*, i8** @.apollo.region.handle.16, align 8
>   %537 = icmp eq i8* %536, null
>   br i1 %537, label %538, label %540
> 
> 538:                                              ; preds = %.split66.i.i.i.i
>   %539 = call i8* @__apollo_region_create(i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @19, i64 0, i64 0), i32 2)
>   store i8* %539, i8** @.apollo.region.handle.16, align 8
>   br label %540
> 
> 540:                                              ; preds = %538, %.split66.i.i.i.i
>   %541 = phi i8* [ %536, %.split66.i.i.i.i ], [ %539, %538 ]
>   call void @__apollo_region_begin(i8* %541)
>   call void @__apollo_region_set_feature(i8* %541, float %513)
>   %542 = call i32 @__apollo_region_get_policy(i8* %541)
>   switch i32 %542, label %.split53.i.i.i.i [
>     i32 0, label %.split53.i.i.i.i.sink.split
>     i32 1, label %.apollo.case.156.i.i.i.i
>   ]
7237,7240c3702,3703
< 1449:                                             ; preds = %1425
<   %1450 = landingpad { i8*, i32 }
<           cleanup
<   br label %1471
---
> .apollo.case.156.i.i.i.i:                         ; preds = %540
>   br label %.split53.i.i.i.i.sink.split
7242,7419c3705,3738
< 1451:                                             ; preds = %1426
<   %1452 = landingpad { i8*, i32 }
<           cleanup
<   %1453 = load i8*, i8** %773, align 8, !tbaa !8
<   %1454 = getelementptr inbounds i8, i8* %1453, i64 -24
<   %1455 = bitcast i8* %1454 to %"struct.std::basic_string<char>::_Rep"*
<   %1456 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %22, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %1456) #10
<   %1457 = icmp eq i8* %1454, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %1457, label %1470, label %1458, !prof !11
< 
< 1458:                                             ; preds = %1451
<   %1459 = getelementptr inbounds i8, i8* %1453, i64 -8
<   %1460 = bitcast i8* %1459 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %1461, label %1463
< 
< 1461:                                             ; preds = %1458
<   %1462 = atomicrmw volatile add i32* %1460, i32 -1 acq_rel
<   br label %1466
< 
< 1463:                                             ; preds = %1458
<   %1464 = load i32, i32* %1460, align 4, !tbaa !12
<   %1465 = add nsw i32 %1464, -1
<   store i32 %1465, i32* %1460, align 4, !tbaa !12
<   br label %1466
< 
< 1466:                                             ; preds = %1463, %1461
<   %1467 = phi i32 [ %1462, %1461 ], [ %1464, %1463 ]
<   %1468 = icmp slt i32 %1467, 1
<   br i1 %1468, label %1469, label %1470
< 
< 1469:                                             ; preds = %1466
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %1455, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %22) #10
<   br label %1470
< 
< 1470:                                             ; preds = %1469, %1466, %1451
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %1456) #10
<   br label %1471
< 
< 1471:                                             ; preds = %1470, %1449
<   %1472 = phi { i8*, i32 } [ %1452, %1470 ], [ %1450, %1449 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %772) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %771) #10
<   call void @_ZdlPv(i8* nonnull %1424) #28
<   br label %1664
< 
< 1473:                                             ; preds = %1445, %875
<   %1474 = phi %"class.Apollo::Region"* [ %1446, %1445 ], [ %878, %875 ]
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %649, i8 0, i64 24, i1 false) #10
<   %1475 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %1476 unwind label %1447
< 
< 1476:                                             ; preds = %1473
<   store i8* %1475, i8** %776, align 8, !tbaa !14
<   %1477 = getelementptr inbounds i8, i8* %1475, i64 4
<   store i8* %1477, i8** %780, align 8, !tbaa !17
<   %1478 = bitcast i8* %874 to i32*
<   %1479 = bitcast i8* %1475 to i32*
<   %1480 = load i32, i32* %1478, align 4
<   store i32 %1480, i32* %1479, align 4
<   store i8* %1477, i8** %778, align 8, !tbaa !18
<   %1481 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %1474, %"class.std::vector.15"* nonnull %89)
<           to label %1482 unwind label %1658
< 
< 1482:                                             ; preds = %1476
<   %1483 = load float*, float** %775, align 8, !tbaa !14
<   %1484 = icmp eq float* %1483, null
<   br i1 %1484, label %1487, label %1485
< 
< 1485:                                             ; preds = %1482
<   %1486 = bitcast float* %1483 to i8*
<   call void @_ZdlPv(i8* nonnull %1486) #10
<   br label %1487
< 
< 1487:                                             ; preds = %1485, %1482
<   %1488 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL15EvalEOSForElemsR6DomainPdiPiiE12apolloRegion_0, align 8, !tbaa !6
<   %1489 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %1488)
<           to label %1490 unwind label %1447
< 
< 1490:                                             ; preds = %1487
<   %1491 = icmp eq i32 %1489, 1
<   %1492 = select i1 %1491, i32 1, i32 36
<   %1493 = icmp eq i32 %1489, 0
<   %1494 = select i1 %1493, i32 36, i32 %1492
<   call void @omp_set_num_threads(i32 %1494) #10
<   %1495 = load i32, i32* %68, align 4, !tbaa !12
<   %1496 = zext i32 %1495 to i64
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 6, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, i32**, %class.Domain*, double**, double**, double**)* @.omp_outlined..53 to void (i32*, i32*, ...)*), i64 %1496, i32** nonnull %69, %class.Domain* nonnull %0, double** nonnull %81, double** nonnull %82, double** nonnull %83)
<   %1497 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL15EvalEOSForElemsR6DomainPdiPiiE12apolloRegion_0, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %1497)
<           to label %1498 unwind label %1447
< 
< 1498:                                             ; preds = %1490
<   %1499 = load double*, double** %67, align 8, !tbaa !6
<   %1500 = load double*, double** %82, align 8, !tbaa !6
<   %1501 = load double*, double** %81, align 8, !tbaa !6
<   %1502 = load i32, i32* %68, align 4, !tbaa !12
<   %1503 = load i32*, i32** %69, align 8, !tbaa !6
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %781)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %782)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %783)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %784)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %785)
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %786)
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %787)
<   call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %788)
<   store double* %1499, double** %12, align 8, !tbaa !6
<   store double* %1500, double** %13, align 8, !tbaa !6
<   store double* %1501, double** %14, align 8, !tbaa !6
<   store i8* %868, i8** %789, align 8, !tbaa !6
<   store i8* %867, i8** %790, align 8, !tbaa !6
<   store i32 %1502, i32* %17, align 4, !tbaa !12
<   store i32* %1503, i32** %18, align 8, !tbaa !6
<   %1504 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %1505 unwind label %1447
< 
< 1505:                                             ; preds = %1498
<   %1506 = sitofp i32 %1502 to float
<   %1507 = bitcast i8* %1504 to float*
<   store float %1506, float* %1507, align 4
<   %1508 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL22CalcSoundSpeedForElemsR6DomainPddS1_S1_S1_S1_diPiE12apolloRegion, align 8, !tbaa !6
<   %1509 = icmp eq %"class.Apollo::Region"* %1508, null
<   br i1 %1509, label %1510, label %1560
< 
< 1510:                                             ; preds = %1505
<   %1511 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %1512 unwind label %1534
< 
< 1512:                                             ; preds = %1510
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %791) #10
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %792) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %19, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %20)
<           to label %1513 unwind label %1536
< 
< 1513:                                             ; preds = %1512
<   %1514 = bitcast i8* %1511 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %1514, i32 1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.68, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %19)
<           to label %1515 unwind label %1538
< 
< 1515:                                             ; preds = %1513
<   store i8* %1511, i8** bitcast (%"class.Apollo::Region"** @_ZZL22CalcSoundSpeedForElemsR6DomainPddS1_S1_S1_S1_diPiE12apolloRegion to i8**), align 8, !tbaa !6
<   %1516 = load i8*, i8** %793, align 8, !tbaa !8
<   %1517 = getelementptr inbounds i8, i8* %1516, i64 -24
<   %1518 = bitcast i8* %1517 to %"struct.std::basic_string<char>::_Rep"*
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %794) #10
<   %1519 = icmp eq i8* %1517, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %1519, label %1532, label %1520, !prof !11
< 
< 1520:                                             ; preds = %1515
<   %1521 = getelementptr inbounds i8, i8* %1516, i64 -8
<   %1522 = bitcast i8* %1521 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %1523, label %1525
< 
< 1523:                                             ; preds = %1520
<   %1524 = atomicrmw volatile add i32* %1522, i32 -1 acq_rel
<   br label %1528
< 
< 1525:                                             ; preds = %1520
<   %1526 = load i32, i32* %1522, align 4, !tbaa !12
<   %1527 = add nsw i32 %1526, -1
<   store i32 %1527, i32* %1522, align 4, !tbaa !12
<   br label %1528
< 
< 1528:                                             ; preds = %1525, %1523
<   %1529 = phi i32 [ %1524, %1523 ], [ %1526, %1525 ]
<   %1530 = icmp slt i32 %1529, 1
<   br i1 %1530, label %1531, label %1532
< 
< 1531:                                             ; preds = %1528
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %1518, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %11) #10
<   br label %1532
< 
< 1532:                                             ; preds = %1531, %1528, %1515
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %794) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %792) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %791) #10
<   %1533 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL22CalcSoundSpeedForElemsR6DomainPddS1_S1_S1_S1_diPiE12apolloRegion, align 8, !tbaa !6
<   br label %1560
---
> .split53.i.i.i.i.sink.split:                      ; preds = %540, %.apollo.case.156.i.i.i.i
>   %.sink60 = phi i32 [ 1, %.apollo.case.156.i.i.i.i ], [ 36, %540 ]
>   call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num.i36.i, i32 %.sink60)
>   br label %.split53.i.i.i.i
> 
> .split53.i.i.i.i:                                 ; preds = %.split53.i.i.i.i.sink.split, %540
>   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 17, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, i32**, double**, double**, double**, double**, double**, double**, i64, double**, double**, double**, double**, double**, double**, i64, i64)* @.omp_outlined..40 to void (i32*, i32*, ...)*), i64 %length.casted.sroa.0.0.insert.ext.i.i.i.i, i32** nonnull %regElemList.addr.i.i.i.i, double** nonnull %delvc.addr.i.i.i.i, double** nonnull %pbvc.addr.i.i.i.i, double** nonnull %e_new.addr.i.i.i.i, double** nonnull %vnewc.addr.i.i.i.i, double** nonnull %bvc.addr.i.i.i.i, double** nonnull %p_new.addr.i.i.i.i, i64 %427, double** nonnull %ql_old.addr.i.i.i.i, double** nonnull %qq_old.addr.i.i.i.i, double** nonnull %p_old.addr.i.i.i.i, double** nonnull %q_old.addr.i.i.i.i, double** nonnull %pHalfStep.i.i.i.i, double** nonnull %q_new.addr.i.i.i.i, i64 %416, i64 %423)
>   %543 = load i8*, i8** @.apollo.region.handle.16, align 8
>   call void @__apollo_region_end(i8* %543)
>   %544 = load double*, double** %p_new.addr.i.i.i.i, align 8, !tbaa !41
>   %545 = load double*, double** %bvc.addr.i.i.i.i, align 8, !tbaa !41
>   %546 = load double*, double** %pbvc.addr.i.i.i.i, align 8, !tbaa !41
>   %547 = load double*, double** %e_new.addr.i.i.i.i, align 8, !tbaa !41
>   %548 = load double*, double** %vnewc.addr.i.i.i.i, align 8, !tbaa !41
>   %549 = load i32*, i32** %regElemList.addr.i.i.i.i, align 8, !tbaa !41
>   call fastcc void @_ZL20CalcPressureForElemsPdS_S_S_S_S_dddiPi(double* %544, double* %545, double* %546, double* %547, double* %496, double* %548, double %422, double %417, double %503, i32 %504, i32* %549)
>   %550 = load i8*, i8** @.apollo.region.handle.22, align 8
>   %551 = icmp eq i8* %550, null
>   br i1 %551, label %552, label %554
> 
> 552:                                              ; preds = %.split53.i.i.i.i
>   %553 = call i8* @__apollo_region_create(i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @25, i64 0, i64 0), i32 2)
>   store i8* %553, i8** @.apollo.region.handle.22, align 8
>   br label %554
> 
> 554:                                              ; preds = %552, %.split53.i.i.i.i
>   %555 = phi i8* [ %550, %.split53.i.i.i.i ], [ %553, %552 ]
>   call void @__apollo_region_begin(i8* %555)
>   call void @__apollo_region_set_feature(i8* %555, float %513)
>   %556 = call i32 @__apollo_region_get_policy(i8* %555)
>   switch i32 %556, label %.split59.i.i.i.i [
>     i32 0, label %.split59.i.i.i.i.sink.split
>     i32 1, label %.apollo.case.162.i.i.i.i
>   ]
7421,7424c3740,3741
< 1534:                                             ; preds = %1577, %1574, %1560, %1510
<   %1535 = landingpad { i8*, i32 }
<           cleanup
<   br label %1590
---
> .apollo.case.162.i.i.i.i:                         ; preds = %554
>   br label %.split59.i.i.i.i.sink.split
7426,7429c3743,3835
< 1536:                                             ; preds = %1512
<   %1537 = landingpad { i8*, i32 }
<           cleanup
<   br label %1558
---
> .split59.i.i.i.i.sink.split:                      ; preds = %554, %.apollo.case.162.i.i.i.i
>   %.sink61 = phi i32 [ 1, %.apollo.case.162.i.i.i.i ], [ 36, %554 ]
>   call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num.i36.i, i32 %.sink61)
>   br label %.split59.i.i.i.i
> 
> .split59.i.i.i.i:                                 ; preds = %.split59.i.i.i.i.sink.split, %554
>   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 13, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, i32**, double**, double**, double**, double**, double**, double**, i64, double**, double**, double**, i64)* @.omp_outlined..41 to void (i32*, i32*, ...)*), i64 %length.casted.sroa.0.0.insert.ext.i.i.i.i, i32** nonnull %regElemList.addr.i.i.i.i, double** nonnull %delvc.addr.i.i.i.i, double** nonnull %pbvc.addr.i.i.i.i, double** nonnull %e_new.addr.i.i.i.i, double** nonnull %vnewc.addr.i.i.i.i, double** nonnull %bvc.addr.i.i.i.i, double** nonnull %p_new.addr.i.i.i.i, i64 %427, double** nonnull %q_new.addr.i.i.i.i, double** nonnull %ql_old.addr.i.i.i.i, double** nonnull %qq_old.addr.i.i.i.i, i64 %419)
>   %557 = load i8*, i8** @.apollo.region.handle.22, align 8
>   call void @__apollo_region_end(i8* %557)
>   %558 = load double*, double** %pHalfStep.i.i.i.i, align 8, !tbaa !41
>   %cmp.not.i.i.i.i.i27 = icmp eq double* %558, null
>   br i1 %cmp.not.i.i.i.i.i27, label %_ZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPi.exit.i.i.i, label %if.then.i.i.i.i.i28
> 
> if.then.i.i.i.i.i28:                              ; preds = %.split59.i.i.i.i
>   %559 = bitcast double* %558 to i8*
>   call void @free(i8* %559) #7
>   store double* null, double** %pHalfStep.i.i.i.i, align 8, !tbaa !41
>   br label %_ZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPi.exit.i.i.i
> 
> _ZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPi.exit.i.i.i: ; preds = %if.then.i.i.i.i.i28, %.split59.i.i.i.i
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %388) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %362)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %363)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %364)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %365)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %366)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %367)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %368)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %369)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %370)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %371)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %372)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %373)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %374)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %375)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %376)
>   %inc.i.i.i = add nuw nsw i32 %j.0146.i.i.i, 1
>   %exitcond.not.i.i.i = icmp eq i32 %inc.i.i.i, %rep.0.i.i
>   br i1 %exitcond.not.i.i.i, label %for.cond.cleanup.i.loopexit.i.i, label %for.body.i.i26.i
> 
> _ZL15EvalEOSForElemsR6DomainPdiPii.exit.i.i:      ; preds = %if.then.i137.i.i.i, %_Z7ReleaseIdEvPPT_.exit135.i.i.i
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %351) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %349) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %347) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %345) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %343) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %341) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %339) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %337) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %335) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %333) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %331) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %329) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %326) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %324) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %316)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %317)
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %318)
>   %indvars.iv.next.i31.i = add nuw nsw i64 %indvars.iv.i17.i, 1
>   %560 = load i32, i32* %m_numReg.i.i.i, align 8, !tbaa !6
>   %561 = sext i32 %560 to i64
>   %cmp5.i.i = icmp slt i64 %indvars.iv.next.i31.i, %561
>   br i1 %cmp5.i.i, label %for.body.i18.i, label %for.cond.cleanup.i.i
> 
> _ZL31ApplyMaterialPropertiesForElemsR6Domain.exit.i: ; preds = %_Z7ReleaseIdEvPPT_.exit.i.i, %_ZL13CalcQForElemsR6Domain.exit.i
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %293) #7
>   %cmp.not.i32.i = icmp eq i32 %225, 0
>   br i1 %cmp.not.i32.i, label %_ZL16LagrangeElementsR6Domaini.exit, label %if.then.i33.i
> 
> if.then.i33.i:                                    ; preds = %_ZL31ApplyMaterialPropertiesForElemsR6Domain.exit.i
>   %m_v_cut.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 54
>   %562 = bitcast double* %m_v_cut.i.i to i64*
>   %563 = load i64, i64* %562, align 8, !tbaa !64
>   %length.casted.sroa.0.0.insert.ext.i.i = zext i32 %225 to i64
>   %564 = load i8*, i8** @.apollo.region.handle.12, align 8
>   %565 = icmp eq i8* %564, null
>   br i1 %565, label %566, label %568
> 
> 566:                                              ; preds = %if.then.i33.i
>   %567 = call i8* @__apollo_region_create(i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @15, i64 0, i64 0), i32 2) #7
>   store i8* %567, i8** @.apollo.region.handle.12, align 8
>   br label %568
> 
> 568:                                              ; preds = %566, %if.then.i33.i
>   %569 = phi i8* [ %564, %if.then.i33.i ], [ %567, %566 ]
>   call void @__apollo_region_begin(i8* %569) #7
>   %570 = uitofp i32 %225 to float
>   call void @__apollo_region_set_feature(i8* %569, float %570) #7
>   %571 = call i32 @__apollo_region_get_policy(i8* %569) #7
>   switch i32 %571, label %.split.i37.i [
>     i32 0, label %.split.i37.i.sink.split
>     i32 1, label %.apollo.case.1.i36.i
>   ]
7431,7520c3837,3838
< 1538:                                             ; preds = %1513
<   %1539 = landingpad { i8*, i32 }
<           cleanup
<   %1540 = load i8*, i8** %793, align 8, !tbaa !8
<   %1541 = getelementptr inbounds i8, i8* %1540, i64 -24
<   %1542 = bitcast i8* %1541 to %"struct.std::basic_string<char>::_Rep"*
<   %1543 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %10, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %1543) #10
<   %1544 = icmp eq i8* %1541, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %1544, label %1557, label %1545, !prof !11
< 
< 1545:                                             ; preds = %1538
<   %1546 = getelementptr inbounds i8, i8* %1540, i64 -8
<   %1547 = bitcast i8* %1546 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %1548, label %1550
< 
< 1548:                                             ; preds = %1545
<   %1549 = atomicrmw volatile add i32* %1547, i32 -1 acq_rel
<   br label %1553
< 
< 1550:                                             ; preds = %1545
<   %1551 = load i32, i32* %1547, align 4, !tbaa !12
<   %1552 = add nsw i32 %1551, -1
<   store i32 %1552, i32* %1547, align 4, !tbaa !12
<   br label %1553
< 
< 1553:                                             ; preds = %1550, %1548
<   %1554 = phi i32 [ %1549, %1548 ], [ %1551, %1550 ]
<   %1555 = icmp slt i32 %1554, 1
<   br i1 %1555, label %1556, label %1557
< 
< 1556:                                             ; preds = %1553
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %1542, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %10) #10
<   br label %1557
< 
< 1557:                                             ; preds = %1556, %1553, %1538
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %1543) #10
<   br label %1558
< 
< 1558:                                             ; preds = %1557, %1536
<   %1559 = phi { i8*, i32 } [ %1539, %1557 ], [ %1537, %1536 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %792) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %791) #10
<   call void @_ZdlPv(i8* nonnull %1511) #28
<   br label %1590
< 
< 1560:                                             ; preds = %1532, %1505
<   %1561 = phi %"class.Apollo::Region"* [ %1533, %1532 ], [ %1508, %1505 ]
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %788, i8 0, i64 24, i1 false) #10
<   %1562 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %1563 unwind label %1534
< 
< 1563:                                             ; preds = %1560
<   store i8* %1562, i8** %796, align 8, !tbaa !14
<   %1564 = getelementptr inbounds i8, i8* %1562, i64 4
<   store i8* %1564, i8** %800, align 8, !tbaa !17
<   %1565 = bitcast i8* %1504 to i32*
<   %1566 = bitcast i8* %1562 to i32*
<   %1567 = load i32, i32* %1565, align 4
<   store i32 %1567, i32* %1566, align 4
<   store i8* %1564, i8** %798, align 8, !tbaa !18
<   %1568 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %1561, %"class.std::vector.15"* nonnull %21)
<           to label %1569 unwind label %1584
< 
< 1569:                                             ; preds = %1563
<   %1570 = load float*, float** %795, align 8, !tbaa !14
<   %1571 = icmp eq float* %1570, null
<   br i1 %1571, label %1574, label %1572
< 
< 1572:                                             ; preds = %1569
<   %1573 = bitcast float* %1570 to i8*
<   call void @_ZdlPv(i8* nonnull %1573) #10
<   br label %1574
< 
< 1574:                                             ; preds = %1572, %1569
<   %1575 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL22CalcSoundSpeedForElemsR6DomainPddS1_S1_S1_S1_diPiE12apolloRegion, align 8, !tbaa !6
<   %1576 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %1575)
<           to label %1577 unwind label %1534
< 
< 1577:                                             ; preds = %1574
<   %1578 = icmp eq i32 %1576, 1
<   %1579 = select i1 %1578, i32 1, i32 36
<   %1580 = icmp eq i32 %1576, 0
<   %1581 = select i1 %1580, i32 36, i32 %1579
<   call void @omp_set_num_threads(i32 %1581) #10
<   %1582 = bitcast double %852 to i64
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 10, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, i32**, double**, double**, double**, double**, double**, i64, %class.Domain*, i64)* @.omp_outlined..69 to void (i32*, i32*, ...)*), i32* nonnull %17, i32** nonnull %18, double** nonnull %15, double** nonnull %13, double** nonnull %12, double** nonnull %16, double** nonnull %14, i64 %1582, %class.Domain* nonnull %0, i64 %846)
<   %1583 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL22CalcSoundSpeedForElemsR6DomainPddS1_S1_S1_S1_diPiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %1583)
<           to label %1592 unwind label %1534
---
> .apollo.case.1.i36.i:                             ; preds = %568
>   br label %.split.i37.i.sink.split
7522,7694c3840,3907
< 1584:                                             ; preds = %1563
<   %1585 = landingpad { i8*, i32 }
<           cleanup
<   %1586 = load float*, float** %795, align 8, !tbaa !14
<   %1587 = icmp eq float* %1586, null
<   br i1 %1587, label %1590, label %1588
< 
< 1588:                                             ; preds = %1584
<   %1589 = bitcast float* %1586 to i8*
<   call void @_ZdlPv(i8* nonnull %1589) #10
<   br label %1590
< 
< 1590:                                             ; preds = %1588, %1584, %1558, %1534
<   %1591 = phi { i8*, i32 } [ %1535, %1534 ], [ %1559, %1558 ], [ %1585, %1584 ], [ %1585, %1588 ]
<   call void @_ZdlPv(i8* nonnull %1504) #10
<   br label %1664
< 
< 1592:                                             ; preds = %1577
<   call void @_ZdlPv(i8* nonnull %1504) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %781)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %782)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %783)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %784)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %785)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %786)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %787)
<   call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %788)
<   %1593 = icmp eq i8* %868, null
<   br i1 %1593, label %1595, label %1594
< 
< 1594:                                             ; preds = %1592
<   call void @free(i8* nonnull %868) #10
<   br label %1595
< 
< 1595:                                             ; preds = %1594, %1592
<   %1596 = icmp eq i8* %867, null
<   br i1 %1596, label %1598, label %1597
< 
< 1597:                                             ; preds = %1595
<   call void @free(i8* nonnull %867) #10
<   br label %1598
< 
< 1598:                                             ; preds = %1597, %1595
<   %1599 = load double*, double** %83, align 8, !tbaa !6
<   %1600 = icmp eq double* %1599, null
<   br i1 %1600, label %1603, label %1601
< 
< 1601:                                             ; preds = %1598
<   %1602 = bitcast double* %1599 to i8*
<   call void @free(i8* %1602) #10
<   store double* null, double** %83, align 8, !tbaa !6
<   br label %1603
< 
< 1603:                                             ; preds = %1601, %1598
<   %1604 = load double*, double** %82, align 8, !tbaa !6
<   %1605 = icmp eq double* %1604, null
<   br i1 %1605, label %1608, label %1606
< 
< 1606:                                             ; preds = %1603
<   %1607 = bitcast double* %1604 to i8*
<   call void @free(i8* %1607) #10
<   store double* null, double** %82, align 8, !tbaa !6
<   br label %1608
< 
< 1608:                                             ; preds = %1606, %1603
<   %1609 = load double*, double** %81, align 8, !tbaa !6
<   %1610 = icmp eq double* %1609, null
<   br i1 %1610, label %1613, label %1611
< 
< 1611:                                             ; preds = %1608
<   %1612 = bitcast double* %1609 to i8*
<   call void @free(i8* %1612) #10
<   store double* null, double** %81, align 8, !tbaa !6
<   br label %1613
< 
< 1613:                                             ; preds = %1611, %1608
<   %1614 = load double*, double** %80, align 8, !tbaa !6
<   %1615 = icmp eq double* %1614, null
<   br i1 %1615, label %1618, label %1616
< 
< 1616:                                             ; preds = %1613
<   %1617 = bitcast double* %1614 to i8*
<   call void @free(i8* %1617) #10
<   store double* null, double** %80, align 8, !tbaa !6
<   br label %1618
< 
< 1618:                                             ; preds = %1616, %1613
<   %1619 = load double*, double** %79, align 8, !tbaa !6
<   %1620 = icmp eq double* %1619, null
<   br i1 %1620, label %1623, label %1621
< 
< 1621:                                             ; preds = %1618
<   %1622 = bitcast double* %1619 to i8*
<   call void @free(i8* %1622) #10
<   store double* null, double** %79, align 8, !tbaa !6
<   br label %1623
< 
< 1623:                                             ; preds = %1621, %1618
<   %1624 = load double*, double** %78, align 8, !tbaa !6
<   %1625 = icmp eq double* %1624, null
<   br i1 %1625, label %1628, label %1626
< 
< 1626:                                             ; preds = %1623
<   %1627 = bitcast double* %1624 to i8*
<   call void @free(i8* %1627) #10
<   store double* null, double** %78, align 8, !tbaa !6
<   br label %1628
< 
< 1628:                                             ; preds = %1626, %1623
<   %1629 = load double*, double** %77, align 8, !tbaa !6
<   %1630 = icmp eq double* %1629, null
<   br i1 %1630, label %1633, label %1631
< 
< 1631:                                             ; preds = %1628
<   %1632 = bitcast double* %1629 to i8*
<   call void @free(i8* %1632) #10
<   store double* null, double** %77, align 8, !tbaa !6
<   br label %1633
< 
< 1633:                                             ; preds = %1631, %1628
<   %1634 = load double*, double** %76, align 8, !tbaa !6
<   %1635 = icmp eq double* %1634, null
<   br i1 %1635, label %1638, label %1636
< 
< 1636:                                             ; preds = %1633
<   %1637 = bitcast double* %1634 to i8*
<   call void @free(i8* %1637) #10
<   store double* null, double** %76, align 8, !tbaa !6
<   br label %1638
< 
< 1638:                                             ; preds = %1636, %1633
<   %1639 = load double*, double** %75, align 8, !tbaa !6
<   %1640 = icmp eq double* %1639, null
<   br i1 %1640, label %1643, label %1641
< 
< 1641:                                             ; preds = %1638
<   %1642 = bitcast double* %1639 to i8*
<   call void @free(i8* %1642) #10
<   store double* null, double** %75, align 8, !tbaa !6
<   br label %1643
< 
< 1643:                                             ; preds = %1641, %1638
<   %1644 = load double*, double** %74, align 8, !tbaa !6
<   %1645 = icmp eq double* %1644, null
<   br i1 %1645, label %1648, label %1646
< 
< 1646:                                             ; preds = %1643
<   %1647 = bitcast double* %1644 to i8*
<   call void @free(i8* %1647) #10
<   store double* null, double** %74, align 8, !tbaa !6
<   br label %1648
< 
< 1648:                                             ; preds = %1646, %1643
<   %1649 = load double*, double** %73, align 8, !tbaa !6
<   %1650 = icmp eq double* %1649, null
<   br i1 %1650, label %1653, label %1651
< 
< 1651:                                             ; preds = %1648
<   %1652 = bitcast double* %1649 to i8*
<   call void @free(i8* %1652) #10
<   store double* null, double** %73, align 8, !tbaa !6
<   br label %1653
< 
< 1653:                                             ; preds = %1651, %1648
<   %1654 = load double*, double** %72, align 8, !tbaa !6
<   %1655 = icmp eq double* %1654, null
<   br i1 %1655, label %1667, label %1656
< 
< 1656:                                             ; preds = %1653
<   %1657 = bitcast double* %1654 to i8*
<   call void @free(i8* %1657) #10
<   store double* null, double** %72, align 8, !tbaa !6
<   br label %1667
---
> .split.i37.i.sink.split:                          ; preds = %568, %.apollo.case.1.i36.i
>   %.sink62 = phi i32 [ 1, %.apollo.case.1.i36.i ], [ 36, %568 ]
>   call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num.i36.i, i32 %.sink62) #7
>   br label %.split.i37.i
> 
> .split.i37.i:                                     ; preds = %.split.i37.i.sink.split, %568
>   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 3, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, %class.Domain*, i64)* @.omp_outlined..45 to void (i32*, i32*, ...)*), i64 %length.casted.sroa.0.0.insert.ext.i.i, %class.Domain* nonnull %domain, i64 %563) #7
>   %572 = load i8*, i8** @.apollo.region.handle.12, align 8
>   call void @__apollo_region_end(i8* %572) #7
>   br label %_ZL16LagrangeElementsR6Domaini.exit
> 
> _ZL16LagrangeElementsR6Domaini.exit:              ; preds = %_ZL31ApplyMaterialPropertiesForElemsR6Domain.exit.i, %.split.i37.i
>   %m_dtcourant.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 70
>   %m_dthydro.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 71
>   %573 = bitcast double* %m_dtcourant.i.i to <2 x double>*
>   store <2 x double> <double 1.000000e+20, double 1.000000e+20>, <2 x double>* %573, align 8, !tbaa !2
>   %m_numReg.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 16
>   %574 = load i32, i32* %m_numReg.i.i, align 8, !tbaa !6
>   %cmp72.i = icmp sgt i32 %574, 0
>   br i1 %cmp72.i, label %for.body.lr.ph.i, label %_ZL27CalcTimeConstraintsForElemsR6Domain.exit
> 
> for.body.lr.ph.i:                                 ; preds = %_ZL16LagrangeElementsR6Domaini.exit
>   %m_regElemSize.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 18
>   %m_regElemlist.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 20
>   %m_qqc.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 63
>   %575 = bitcast double* %m_qqc.i.i to i64*
>   %576 = bitcast i32** %regElemlist.addr.i33.i to i8*
>   %577 = bitcast i32** %regElemlist.addr.i33.i to i64*
>   %578 = bitcast i32* %threads.i34.i to i8*
>   %579 = bitcast i32** %courant_elem_per_thread.i.i to i8*
>   %580 = bitcast double** %dtcourant_per_thread.i.i to i8*
>   %581 = bitcast double** %dtcourant_per_thread.i.i to i64**
>   %582 = bitcast double* %m_dtcourant.i.i to i64*
>   %m_dvovmax.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 68
>   %583 = bitcast double* %m_dvovmax.i.i to i64*
>   %584 = bitcast i32** %regElemlist.addr.i.i to i8*
>   %585 = bitcast i32** %regElemlist.addr.i.i to i64*
>   %586 = bitcast i32* %threads.i.i to i8*
>   %587 = bitcast i32** %hydro_elem_per_thread.i.i to i8*
>   %588 = bitcast double** %dthydro_per_thread.i.i to i8*
>   %589 = bitcast double** %dthydro_per_thread.i.i to i64**
>   %590 = bitcast double* %m_dthydro.i.i to i64*
>   br label %for.body.i
> 
> for.body.i:                                       ; preds = %_ZL27CalcHydroConstraintForElemsR6DomainiPidRd.exit.i, %for.body.lr.ph.i
>   %indvars.iv.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %indvars.iv.next.i, %_ZL27CalcHydroConstraintForElemsR6DomainiPidRd.exit.i ]
>   %591 = load i32*, i32** %m_regElemSize.i.i, align 8, !tbaa !48
>   %arrayidx.i29.i = getelementptr inbounds i32, i32* %591, i64 %indvars.iv.i
>   %592 = load i32, i32* %arrayidx.i29.i, align 4, !tbaa !6
>   %593 = load i32**, i32*** %m_regElemlist.i.i, align 8, !tbaa !56
>   %arrayidx.i31.i = getelementptr inbounds i32*, i32** %593, i64 %indvars.iv.i
>   %594 = bitcast i32** %arrayidx.i31.i to i64*
>   %595 = load i64, i64* %594, align 8, !tbaa !41
>   %596 = load i64, i64* %575, align 8, !tbaa !65
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %576) #7
>   store i64 %595, i64* %577, align 8, !tbaa !41
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %578) #7
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %579) #7
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %580) #7
>   %length.casted.sroa.0.0.insert.ext.i35.i = zext i32 %592 to i64
>   %597 = load i8*, i8** @.apollo.region.handle.15, align 8
>   %598 = icmp eq i8* %597, null
>   br i1 %598, label %599, label %601
> 
> 599:                                              ; preds = %for.body.i
>   %600 = call i8* @__apollo_region_create(i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @18, i64 0, i64 0), i32 2) #7
>   store i8* %600, i8** @.apollo.region.handle.15, align 8
>   br label %601
7696,7841c3909,3918
< 1658:                                             ; preds = %1476
<   %1659 = landingpad { i8*, i32 }
<           cleanup
<   %1660 = load float*, float** %775, align 8, !tbaa !14
<   %1661 = icmp eq float* %1660, null
<   br i1 %1661, label %1664, label %1662
< 
< 1662:                                             ; preds = %1658
<   %1663 = bitcast float* %1660 to i8*
<   call void @_ZdlPv(i8* nonnull %1663) #10
<   br label %1664
< 
< 1664:                                             ; preds = %1447, %1471, %1590, %1658, %1662, %913, %937, %1411, %1417, %1421
<   %1665 = phi i8* [ %883, %1421 ], [ %883, %1417 ], [ %883, %1411 ], [ %883, %937 ], [ %883, %913 ], [ %874, %1662 ], [ %874, %1658 ], [ %874, %1590 ], [ %874, %1471 ], [ %874, %1447 ]
<   %1666 = phi { i8*, i32 } [ %1418, %1421 ], [ %1418, %1417 ], [ %1412, %1411 ], [ %938, %937 ], [ %914, %913 ], [ %1659, %1662 ], [ %1659, %1658 ], [ %1591, %1590 ], [ %1472, %1471 ], [ %1448, %1447 ]
<   call void @_ZdlPv(i8* nonnull %1665) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %685) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %683) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %681) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %679) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %677) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %675) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %673) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %671) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %669) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %667) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %665) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %663) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %658) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %657) #10
<   br label %1672
< 
< 1667:                                             ; preds = %1656, %1653
<   call void @_ZdlPv(i8* nonnull %874) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %685) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %683) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %681) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %679) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %677) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %675) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %673) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %671) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %669) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %667) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %665) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %663) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %658) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %657) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %645)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %646)
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %647)
<   call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %648)
<   call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %649)
<   %1668 = add nuw nsw i64 %814, 1
<   %1669 = load i32, i32* %638, align 8, !tbaa !12
<   %1670 = sext i32 %1669 to i64
<   %1671 = icmp slt i64 %1668, %1670
<   br i1 %1671, label %813, label %801, !llvm.loop !84
< 
< 1672:                                             ; preds = %1664, %836, %834, %811, %807, %606, %581
<   %1673 = phi { i8*, i32 } [ %582, %581 ], [ %607, %606 ], [ %808, %807 ], [ %808, %811 ], [ %1666, %1664 ], [ %835, %834 ], [ %837, %836 ]
<   call void @_ZdlPv(i8* nonnull %549) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %543) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %540) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %537) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %533) #10
<   resume { i8*, i32 } %1673
< 
< 1674:                                             ; preds = %531, %806
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %533) #10
<   call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %532)
<   %1675 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 54
<   %1676 = bitcast double* %1675 to i64*
<   %1677 = load i64, i64* %1676, align 8, !tbaa !85
<   %1678 = bitcast %"class.std::vector.15"* %7 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1678)
<   %1679 = icmp eq i32 %1, 0
<   br i1 %1679, label %1780, label %1680
< 
< 1680:                                             ; preds = %1674
<   %1681 = sitofp i32 %1 to float
<   %1682 = call noalias nonnull i8* @_Znwm(i64 4) #26
<   %1683 = bitcast i8* %1682 to float*
<   store float %1681, float* %1683, align 4
<   %1684 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL21UpdateVolumesForElemsR6DomaindiE12apolloRegion, align 8, !tbaa !6
<   %1685 = icmp eq %"class.Apollo::Region"* %1684, null
<   br i1 %1685, label %1686, label %1741
< 
< 1686:                                             ; preds = %1680
<   %1687 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %1688 unwind label %1714
< 
< 1688:                                             ; preds = %1686
<   %1689 = bitcast %"class.std::basic_string"* %5 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1689) #10
<   %1690 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %6, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %1690) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %5, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %6)
<           to label %1691 unwind label %1716
< 
< 1691:                                             ; preds = %1688
<   %1692 = bitcast i8* %1687 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %1692, i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.70, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %5)
<           to label %1693 unwind label %1718
< 
< 1693:                                             ; preds = %1691
<   store i8* %1687, i8** bitcast (%"class.Apollo::Region"** @_ZZL21UpdateVolumesForElemsR6DomaindiE12apolloRegion to i8**), align 8, !tbaa !6
<   %1694 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %5, i64 0, i32 0, i32 0
<   %1695 = load i8*, i8** %1694, align 8, !tbaa !8
<   %1696 = getelementptr inbounds i8, i8* %1695, i64 -24
<   %1697 = bitcast i8* %1696 to %"struct.std::basic_string<char>::_Rep"*
<   %1698 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %4, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %1698) #10
<   %1699 = icmp eq i8* %1696, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %1699, label %1712, label %1700, !prof !11
< 
< 1700:                                             ; preds = %1693
<   %1701 = getelementptr inbounds i8, i8* %1695, i64 -8
<   %1702 = bitcast i8* %1701 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %1703, label %1705
< 
< 1703:                                             ; preds = %1700
<   %1704 = atomicrmw volatile add i32* %1702, i32 -1 acq_rel
<   br label %1708
< 
< 1705:                                             ; preds = %1700
<   %1706 = load i32, i32* %1702, align 4, !tbaa !12
<   %1707 = add nsw i32 %1706, -1
<   store i32 %1707, i32* %1702, align 4, !tbaa !12
<   br label %1708
< 
< 1708:                                             ; preds = %1705, %1703
<   %1709 = phi i32 [ %1704, %1703 ], [ %1706, %1705 ]
<   %1710 = icmp slt i32 %1709, 1
<   br i1 %1710, label %1711, label %1712
< 
< 1711:                                             ; preds = %1708
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %1697, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %4) #10
<   br label %1712
< 
< 1712:                                             ; preds = %1711, %1708, %1693
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %1698) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %1690) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1689) #10
<   %1713 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL21UpdateVolumesForElemsR6DomaindiE12apolloRegion, align 8, !tbaa !6
<   br label %1741
---
> 601:                                              ; preds = %599, %for.body.i
>   %602 = phi i8* [ %597, %for.body.i ], [ %600, %599 ]
>   call void @__apollo_region_begin(i8* %602) #7
>   %603 = uitofp i32 %592 to float
>   call void @__apollo_region_set_feature(i8* %602, float %603) #7
>   %604 = call i32 @__apollo_region_get_policy(i8* %602) #7
>   switch i32 %604, label %.split.i40.i [
>     i32 0, label %.split.i40.i.sink.split
>     i32 1, label %.apollo.case.1.i38.i
>   ]
7843,7846c3920,3921
< 1714:                                             ; preds = %1764, %1761, %1741, %1686
<   %1715 = landingpad { i8*, i32 }
<           cleanup
<   br label %1778
---
> .apollo.case.1.i38.i:                             ; preds = %601
>   br label %.split.i40.i.sink.split
7848,7851c3923,4042
< 1716:                                             ; preds = %1688
<   %1717 = landingpad { i8*, i32 }
<           cleanup
<   br label %1739
---
> .split.i40.i.sink.split:                          ; preds = %601, %.apollo.case.1.i38.i
>   %.sink63 = phi i32 [ 1, %.apollo.case.1.i38.i ], [ 36, %601 ]
>   call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num.i36.i, i32 %.sink63) #7
>   br label %.split.i40.i
> 
> .split.i40.i:                                     ; preds = %.split.i40.i.sink.split, %601
>   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 8, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, i32**, double**, i64, double*, i64, i32**, %class.Domain*)* @.omp_outlined..46 to void (i32*, i32*, ...)*), i32* nonnull %threads.i34.i, i32** nonnull %courant_elem_per_thread.i.i, double** nonnull %dtcourant_per_thread.i.i, i64 %596, double* nonnull %m_dtcourant.i.i, i64 %length.casted.sroa.0.0.insert.ext.i35.i, i32** nonnull %regElemlist.addr.i33.i, %class.Domain* nonnull %domain) #7
>   %605 = load i8*, i8** @.apollo.region.handle.15, align 8
>   call void @__apollo_region_end(i8* %605) #7
>   %606 = load i32, i32* %threads.i34.i, align 4, !tbaa !6
>   %cmp26.i39.i = icmp sgt i32 %606, 1
>   br i1 %cmp26.i39.i, label %for.body.lr.ph.i42.i, label %for.cond.cleanup.i44.i
> 
> for.body.lr.ph.i42.i:                             ; preds = %.split.i40.i
>   %607 = load double*, double** %dtcourant_per_thread.i.i, align 8, !tbaa !41
>   %608 = load i32*, i32** %courant_elem_per_thread.i.i, align 8
>   %.pre.i41.i = load double, double* %607, align 8, !tbaa !2
>   br label %for.body.i48.i
> 
> for.cond.cleanup.i44.i:                           ; preds = %for.inc.i54.i, %.split.i40.i
>   %609 = load i32*, i32** %courant_elem_per_thread.i.i, align 8, !tbaa !41
>   %610 = load i32, i32* %609, align 4, !tbaa !6
>   %cmp11.not.i43.i = icmp eq i32 %610, -1
>   br i1 %cmp11.not.i43.i, label %if.end14thread-pre-split.i57.i, label %if.then12.i55.i
> 
> for.body.i48.i:                                   ; preds = %for.inc.i54.i, %for.body.lr.ph.i42.i
>   %611 = phi i32 [ %606, %for.body.lr.ph.i42.i ], [ %615, %for.inc.i54.i ]
>   %612 = phi double [ %.pre.i41.i, %for.body.lr.ph.i42.i ], [ %616, %for.inc.i54.i ]
>   %indvars.iv.i45.i = phi i64 [ 1, %for.body.lr.ph.i42.i ], [ %indvars.iv.next.i52.i, %for.inc.i54.i ]
>   %arrayidx.i46.i = getelementptr inbounds double, double* %607, i64 %indvars.iv.i45.i
>   %613 = load double, double* %arrayidx.i46.i, align 8, !tbaa !2
>   %cmp3.i47.i = fcmp olt double %613, %612
>   br i1 %cmp3.i47.i, label %if.then.i51.i, label %for.inc.i54.i
> 
> if.then.i51.i:                                    ; preds = %for.body.i48.i
>   store double %613, double* %607, align 8, !tbaa !2
>   %arrayidx8.i49.i = getelementptr inbounds i32, i32* %608, i64 %indvars.iv.i45.i
>   %614 = load i32, i32* %arrayidx8.i49.i, align 4, !tbaa !6
>   store i32 %614, i32* %608, align 4, !tbaa !6
>   %.pre28.i50.i = load i32, i32* %threads.i34.i, align 4, !tbaa !6
>   br label %for.inc.i54.i
> 
> for.inc.i54.i:                                    ; preds = %if.then.i51.i, %for.body.i48.i
>   %615 = phi i32 [ %611, %for.body.i48.i ], [ %.pre28.i50.i, %if.then.i51.i ]
>   %616 = phi double [ %612, %for.body.i48.i ], [ %613, %if.then.i51.i ]
>   %indvars.iv.next.i52.i = add nuw nsw i64 %indvars.iv.i45.i, 1
>   %617 = sext i32 %615 to i64
>   %cmp.i53.i = icmp slt i64 %indvars.iv.next.i52.i, %617
>   br i1 %cmp.i53.i, label %for.body.i48.i, label %for.cond.cleanup.i44.i
> 
> if.then12.i55.i:                                  ; preds = %for.cond.cleanup.i44.i
>   %618 = load i64*, i64** %581, align 8, !tbaa !41
>   %619 = load i64, i64* %618, align 8, !tbaa !2
>   store i64 %619, i64* %582, align 8, !tbaa !2
>   %620 = bitcast i64* %618 to double*
>   br label %if.end14.i59.i
> 
> if.end14thread-pre-split.i57.i:                   ; preds = %for.cond.cleanup.i44.i
>   %.pr.i56.i = load double*, double** %dtcourant_per_thread.i.i, align 8, !tbaa !41
>   br label %if.end14.i59.i
> 
> if.end14.i59.i:                                   ; preds = %if.end14thread-pre-split.i57.i, %if.then12.i55.i
>   %621 = phi double* [ %.pr.i56.i, %if.end14thread-pre-split.i57.i ], [ %620, %if.then12.i55.i ]
>   %isnull.i58.i = icmp eq double* %621, null
>   br i1 %isnull.i58.i, label %delete.end.i63.i, label %delete.notnull.i61.i
> 
> delete.notnull.i61.i:                             ; preds = %if.end14.i59.i
>   %622 = bitcast double* %621 to i8*
>   call void @_ZdaPv(i8* %622) #25
>   %.pre29.i60.i = load i32*, i32** %courant_elem_per_thread.i.i, align 8, !tbaa !41
>   br label %delete.end.i63.i
> 
> delete.end.i63.i:                                 ; preds = %delete.notnull.i61.i, %if.end14.i59.i
>   %623 = phi i32* [ %.pre29.i60.i, %delete.notnull.i61.i ], [ %609, %if.end14.i59.i ]
>   %isnull15.i62.i = icmp eq i32* %623, null
>   br i1 %isnull15.i62.i, label %_ZL29CalcCourantConstraintForElemsR6DomainiPidRd.exit.i, label %delete.notnull16.i64.i
> 
> delete.notnull16.i64.i:                           ; preds = %delete.end.i63.i
>   %624 = bitcast i32* %623 to i8*
>   call void @_ZdaPv(i8* %624) #25
>   br label %_ZL29CalcCourantConstraintForElemsR6DomainiPidRd.exit.i
> 
> _ZL29CalcCourantConstraintForElemsR6DomainiPidRd.exit.i: ; preds = %delete.notnull16.i64.i, %delete.end.i63.i
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %580) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %579) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %578) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %576) #7
>   %625 = load i32*, i32** %m_regElemSize.i.i, align 8, !tbaa !48
>   %arrayidx.i67.i = getelementptr inbounds i32, i32* %625, i64 %indvars.iv.i
>   %626 = load i32, i32* %arrayidx.i67.i, align 4, !tbaa !6
>   %627 = load i32**, i32*** %m_regElemlist.i.i, align 8, !tbaa !56
>   %arrayidx.i70.i = getelementptr inbounds i32*, i32** %627, i64 %indvars.iv.i
>   %628 = bitcast i32** %arrayidx.i70.i to i64*
>   %629 = load i64, i64* %628, align 8, !tbaa !41
>   %630 = load i64, i64* %583, align 8, !tbaa !66
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %584) #7
>   store i64 %629, i64* %585, align 8, !tbaa !41
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %586) #7
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %587) #7
>   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %588) #7
>   %length.casted.sroa.0.0.insert.ext.i.i29 = zext i32 %626 to i64
>   %631 = load i8*, i8** @.apollo.region.handle.19, align 8
>   %632 = icmp eq i8* %631, null
>   br i1 %632, label %633, label %635
> 
> 633:                                              ; preds = %_ZL29CalcCourantConstraintForElemsR6DomainiPidRd.exit.i
>   %634 = call i8* @__apollo_region_create(i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @22, i64 0, i64 0), i32 2) #7
>   store i8* %634, i8** @.apollo.region.handle.19, align 8
>   br label %635
> 
> 635:                                              ; preds = %633, %_ZL29CalcCourantConstraintForElemsR6DomainiPidRd.exit.i
>   %636 = phi i8* [ %631, %_ZL29CalcCourantConstraintForElemsR6DomainiPidRd.exit.i ], [ %634, %633 ]
>   call void @__apollo_region_begin(i8* %636) #7
>   %637 = uitofp i32 %626 to float
>   call void @__apollo_region_set_feature(i8* %636, float %637) #7
>   %638 = call i32 @__apollo_region_get_policy(i8* %636) #7
>   switch i32 %638, label %.split.i.i32 [
>     i32 0, label %.split.i.i32.sink.split
>     i32 1, label %.apollo.case.1.i.i31
>   ]
7853,7953c4044,4045
< 1718:                                             ; preds = %1691
<   %1719 = landingpad { i8*, i32 }
<           cleanup
<   %1720 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %5, i64 0, i32 0, i32 0
<   %1721 = load i8*, i8** %1720, align 8, !tbaa !8
<   %1722 = getelementptr inbounds i8, i8* %1721, i64 -24
<   %1723 = bitcast i8* %1722 to %"struct.std::basic_string<char>::_Rep"*
<   %1724 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %3, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %1724) #10
<   %1725 = icmp eq i8* %1722, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %1725, label %1738, label %1726, !prof !11
< 
< 1726:                                             ; preds = %1718
<   %1727 = getelementptr inbounds i8, i8* %1721, i64 -8
<   %1728 = bitcast i8* %1727 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %1729, label %1731
< 
< 1729:                                             ; preds = %1726
<   %1730 = atomicrmw volatile add i32* %1728, i32 -1 acq_rel
<   br label %1734
< 
< 1731:                                             ; preds = %1726
<   %1732 = load i32, i32* %1728, align 4, !tbaa !12
<   %1733 = add nsw i32 %1732, -1
<   store i32 %1733, i32* %1728, align 4, !tbaa !12
<   br label %1734
< 
< 1734:                                             ; preds = %1731, %1729
<   %1735 = phi i32 [ %1730, %1729 ], [ %1732, %1731 ]
<   %1736 = icmp slt i32 %1735, 1
<   br i1 %1736, label %1737, label %1738
< 
< 1737:                                             ; preds = %1734
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %1723, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %3) #10
<   br label %1738
< 
< 1738:                                             ; preds = %1737, %1734, %1718
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %1724) #10
<   br label %1739
< 
< 1739:                                             ; preds = %1738, %1716
<   %1740 = phi { i8*, i32 } [ %1719, %1738 ], [ %1717, %1716 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %1690) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1689) #10
<   call void @_ZdlPv(i8* nonnull %1687) #28
<   br label %1778
< 
< 1741:                                             ; preds = %1712, %1680
<   %1742 = phi %"class.Apollo::Region"* [ %1713, %1712 ], [ %1684, %1680 ]
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %1678, i8 0, i64 24, i1 false) #10
<   %1743 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %1744 unwind label %1714
< 
< 1744:                                             ; preds = %1741
<   %1745 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %7, i64 0, i32 0, i32 0, i32 0
<   %1746 = bitcast %"class.std::vector.15"* %7 to i8**
<   store i8* %1743, i8** %1746, align 8, !tbaa !14
<   %1747 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %7, i64 0, i32 0, i32 0, i32 1
<   %1748 = bitcast float** %1747 to i8**
<   %1749 = getelementptr inbounds i8, i8* %1743, i64 4
<   %1750 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %7, i64 0, i32 0, i32 0, i32 2
<   %1751 = bitcast float** %1750 to i8**
<   store i8* %1749, i8** %1751, align 8, !tbaa !17
<   %1752 = bitcast i8* %1682 to i32*
<   %1753 = bitcast i8* %1743 to i32*
<   %1754 = load i32, i32* %1752, align 4
<   store i32 %1754, i32* %1753, align 4
<   store i8* %1749, i8** %1748, align 8, !tbaa !18
<   %1755 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %1742, %"class.std::vector.15"* nonnull %7)
<           to label %1756 unwind label %1772
< 
< 1756:                                             ; preds = %1744
<   %1757 = load float*, float** %1745, align 8, !tbaa !14
<   %1758 = icmp eq float* %1757, null
<   br i1 %1758, label %1761, label %1759
< 
< 1759:                                             ; preds = %1756
<   %1760 = bitcast float* %1757 to i8*
<   call void @_ZdlPv(i8* nonnull %1760) #10
<   br label %1761
< 
< 1761:                                             ; preds = %1759, %1756
<   %1762 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL21UpdateVolumesForElemsR6DomaindiE12apolloRegion, align 8, !tbaa !6
<   %1763 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %1762)
<           to label %1764 unwind label %1714
< 
< 1764:                                             ; preds = %1761
<   %1765 = icmp eq i32 %1763, 1
<   %1766 = select i1 %1765, i32 1, i32 36
<   %1767 = icmp eq i32 %1763, 0
<   %1768 = select i1 %1767, i32 36, i32 %1766
<   call void @omp_set_num_threads(i32 %1768) #10
<   %1769 = zext i32 %1 to i64
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 3, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, %class.Domain*, i64)* @.omp_outlined..71 to void (i32*, i32*, ...)*), i64 %1769, %class.Domain* nonnull %0, i64 %1677)
<   %1770 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL21UpdateVolumesForElemsR6DomaindiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %1770)
<           to label %1771 unwind label %1714
< 
< 1771:                                             ; preds = %1764
<   call void @_ZdlPv(i8* nonnull %1682) #10
<   br label %1780
---
> .apollo.case.1.i.i31:                             ; preds = %635
>   br label %.split.i.i32.sink.split
7955,7970c4047,4138
< 1772:                                             ; preds = %1744
<   %1773 = landingpad { i8*, i32 }
<           cleanup
<   %1774 = load float*, float** %1745, align 8, !tbaa !14
<   %1775 = icmp eq float* %1774, null
<   br i1 %1775, label %1778, label %1776
< 
< 1776:                                             ; preds = %1772
<   %1777 = bitcast float* %1774 to i8*
<   call void @_ZdlPv(i8* nonnull %1777) #10
<   br label %1778
< 
< 1778:                                             ; preds = %1776, %1772, %1739, %1714
<   %1779 = phi { i8*, i32 } [ %1715, %1714 ], [ %1740, %1739 ], [ %1773, %1772 ], [ %1773, %1776 ]
<   call void @_ZdlPv(i8* nonnull %1682) #10
<   resume { i8*, i32 } %1779
---
> .split.i.i32.sink.split:                          ; preds = %635, %.apollo.case.1.i.i31
>   %.sink64 = phi i32 [ 1, %.apollo.case.1.i.i31 ], [ 36, %635 ]
>   call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num.i36.i, i32 %.sink64) #7
>   br label %.split.i.i32
> 
> .split.i.i32:                                     ; preds = %.split.i.i32.sink.split, %635
>   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 8, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, i32**, double**, double*, i64, i32**, %class.Domain*, i64)* @.omp_outlined..47 to void (i32*, i32*, ...)*), i32* nonnull %threads.i.i, i32** nonnull %hydro_elem_per_thread.i.i, double** nonnull %dthydro_per_thread.i.i, double* nonnull %m_dthydro.i.i, i64 %length.casted.sroa.0.0.insert.ext.i.i29, i32** nonnull %regElemlist.addr.i.i, %class.Domain* nonnull %domain, i64 %630) #7
>   %639 = load i8*, i8** @.apollo.region.handle.19, align 8
>   call void @__apollo_region_end(i8* %639) #7
>   %640 = load i32, i32* %threads.i.i, align 4, !tbaa !6
>   %cmp26.i.i = icmp sgt i32 %640, 1
>   br i1 %cmp26.i.i, label %for.body.lr.ph.i.i34, label %for.cond.cleanup.i.i35
> 
> for.body.lr.ph.i.i34:                             ; preds = %.split.i.i32
>   %641 = load double*, double** %dthydro_per_thread.i.i, align 8, !tbaa !41
>   %642 = load i32*, i32** %hydro_elem_per_thread.i.i, align 8
>   %.pre.i.i33 = load double, double* %641, align 8, !tbaa !2
>   br label %for.body.i.i37
> 
> for.cond.cleanup.i.i35:                           ; preds = %for.inc.i.i, %.split.i.i32
>   %643 = load i32*, i32** %hydro_elem_per_thread.i.i, align 8, !tbaa !41
>   %644 = load i32, i32* %643, align 4, !tbaa !6
>   %cmp11.not.i.i = icmp eq i32 %644, -1
>   br i1 %cmp11.not.i.i, label %if.end14thread-pre-split.i.i, label %if.then12.i.i
> 
> for.body.i.i37:                                   ; preds = %for.inc.i.i, %for.body.lr.ph.i.i34
>   %645 = phi i32 [ %640, %for.body.lr.ph.i.i34 ], [ %649, %for.inc.i.i ]
>   %646 = phi double [ %.pre.i.i33, %for.body.lr.ph.i.i34 ], [ %650, %for.inc.i.i ]
>   %indvars.iv.i.i36 = phi i64 [ 1, %for.body.lr.ph.i.i34 ], [ %indvars.iv.next.i.i39, %for.inc.i.i ]
>   %arrayidx.i.i = getelementptr inbounds double, double* %641, i64 %indvars.iv.i.i36
>   %647 = load double, double* %arrayidx.i.i, align 8, !tbaa !2
>   %cmp3.i.i = fcmp olt double %647, %646
>   br i1 %cmp3.i.i, label %if.then.i.i38, label %for.inc.i.i
> 
> if.then.i.i38:                                    ; preds = %for.body.i.i37
>   store double %647, double* %641, align 8, !tbaa !2
>   %arrayidx8.i.i = getelementptr inbounds i32, i32* %642, i64 %indvars.iv.i.i36
>   %648 = load i32, i32* %arrayidx8.i.i, align 4, !tbaa !6
>   store i32 %648, i32* %642, align 4, !tbaa !6
>   %.pre28.i.i = load i32, i32* %threads.i.i, align 4, !tbaa !6
>   br label %for.inc.i.i
> 
> for.inc.i.i:                                      ; preds = %if.then.i.i38, %for.body.i.i37
>   %649 = phi i32 [ %645, %for.body.i.i37 ], [ %.pre28.i.i, %if.then.i.i38 ]
>   %650 = phi double [ %646, %for.body.i.i37 ], [ %647, %if.then.i.i38 ]
>   %indvars.iv.next.i.i39 = add nuw nsw i64 %indvars.iv.i.i36, 1
>   %651 = sext i32 %649 to i64
>   %cmp.i.i40 = icmp slt i64 %indvars.iv.next.i.i39, %651
>   br i1 %cmp.i.i40, label %for.body.i.i37, label %for.cond.cleanup.i.i35
> 
> if.then12.i.i:                                    ; preds = %for.cond.cleanup.i.i35
>   %652 = load i64*, i64** %589, align 8, !tbaa !41
>   %653 = load i64, i64* %652, align 8, !tbaa !2
>   store i64 %653, i64* %590, align 8, !tbaa !2
>   %654 = bitcast i64* %652 to double*
>   br label %if.end14.i.i
> 
> if.end14thread-pre-split.i.i:                     ; preds = %for.cond.cleanup.i.i35
>   %.pr.i.i = load double*, double** %dthydro_per_thread.i.i, align 8, !tbaa !41
>   br label %if.end14.i.i
> 
> if.end14.i.i:                                     ; preds = %if.end14thread-pre-split.i.i, %if.then12.i.i
>   %655 = phi double* [ %.pr.i.i, %if.end14thread-pre-split.i.i ], [ %654, %if.then12.i.i ]
>   %isnull.i.i = icmp eq double* %655, null
>   br i1 %isnull.i.i, label %delete.end.i.i, label %delete.notnull.i.i
> 
> delete.notnull.i.i:                               ; preds = %if.end14.i.i
>   %656 = bitcast double* %655 to i8*
>   call void @_ZdaPv(i8* %656) #25
>   %.pre29.i.i = load i32*, i32** %hydro_elem_per_thread.i.i, align 8, !tbaa !41
>   br label %delete.end.i.i
> 
> delete.end.i.i:                                   ; preds = %delete.notnull.i.i, %if.end14.i.i
>   %657 = phi i32* [ %.pre29.i.i, %delete.notnull.i.i ], [ %643, %if.end14.i.i ]
>   %isnull15.i.i = icmp eq i32* %657, null
>   br i1 %isnull15.i.i, label %_ZL27CalcHydroConstraintForElemsR6DomainiPidRd.exit.i, label %delete.notnull16.i.i
> 
> delete.notnull16.i.i:                             ; preds = %delete.end.i.i
>   %658 = bitcast i32* %657 to i8*
>   call void @_ZdaPv(i8* %658) #25
>   br label %_ZL27CalcHydroConstraintForElemsR6DomainiPidRd.exit.i
> 
> _ZL27CalcHydroConstraintForElemsR6DomainiPidRd.exit.i: ; preds = %delete.notnull16.i.i, %delete.end.i.i
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %588) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %587) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %586) #7
>   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %584) #7
>   %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
>   %659 = load i32, i32* %m_numReg.i.i, align 8, !tbaa !6
>   %660 = sext i32 %659 to i64
>   %cmp.i = icmp slt i64 %indvars.iv.next.i, %660
>   br i1 %cmp.i, label %for.body.i, label %_ZL27CalcTimeConstraintsForElemsR6Domain.exit
7972,7973c4140
< 1780:                                             ; preds = %1674, %1771
<   call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1678)
---
> _ZL27CalcTimeConstraintsForElemsR6Domain.exit:    ; preds = %_ZL27CalcHydroConstraintForElemsR6DomainiPidRd.exit.i, %_ZL16LagrangeElementsR6Domaini.exit
7977,7991c4144
< ; Function Attrs: norecurse nounwind uwtable
< define internal void @.omp_outlined..21(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, i64 %2, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %3) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %5 = alloca i32, align 4
<   %6 = alloca i32, align 4
<   %7 = alloca i32, align 4
<   %8 = alloca i32, align 4
<   %9 = trunc i64 %2 to i32
<   %10 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL17CalcForceForNodesR6DomainE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %10)
<           to label %11 unwind label %156
< 
< 11:                                               ; preds = %4
<   %12 = add nsw i32 %9, -1
<   %13 = icmp sgt i32 %9, 0
<   br i1 %13, label %16, label %14
---
> declare dso_local void @_Z11DumpToVisitR6Domainiii(%class.Domain* nonnull align 8 dereferenceable(1312), i32, i32, i32) local_unnamed_addr #0
7993,7995c4146
< 14:                                               ; preds = %11
<   %15 = load i32, i32* %0, align 4, !tbaa !12
<   br label %152
---
> declare dso_local void @_Z25VerifyAndWriteFinalOutputdR6Domainii(double, %class.Domain* nonnull align 8 dereferenceable(1312), i32, i32) local_unnamed_addr #0
7997,8201c4148,4149
< 16:                                               ; preds = %11
<   %17 = bitcast i32* %5 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #10
<   store i32 0, i32* %5, align 4, !tbaa !12
<   %18 = bitcast i32* %6 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #10
<   store i32 %12, i32* %6, align 4, !tbaa !12
<   %19 = bitcast i32* %7 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #10
<   store i32 1, i32* %7, align 4, !tbaa !12
<   %20 = bitcast i32* %8 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #10
<   store i32 0, i32* %8, align 4, !tbaa !12
<   %21 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %21, i32 34, i32* nonnull %8, i32* nonnull %5, i32* nonnull %6, i32* nonnull %7, i32 1, i32 1) #10
<   %22 = load i32, i32* %6, align 4, !tbaa !12
<   %23 = icmp slt i32 %22, %9
<   %24 = select i1 %23, i32 %22, i32 %12
<   store i32 %24, i32* %6, align 4, !tbaa !12
<   %25 = load i32, i32* %5, align 4, !tbaa !12
<   %26 = icmp slt i32 %24, %25
<   br i1 %26, label %151, label %27
< 
< 27:                                               ; preds = %16
<   %28 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 9, i32 0, i32 0, i32 0
<   %29 = load double*, double** %28, align 8, !tbaa !22
<   %30 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 10, i32 0, i32 0, i32 0
<   %31 = load double*, double** %30, align 8, !tbaa !22
<   %32 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 11, i32 0, i32 0, i32 0
<   %33 = load double*, double** %32, align 8, !tbaa !22
<   %34 = sext i32 %25 to i64
<   %35 = add i32 %24, 1
<   %36 = sub i32 %24, %25
<   %37 = zext i32 %36 to i64
<   %38 = add nuw nsw i64 %37, 1
<   %39 = icmp ult i32 %36, 3
<   br i1 %39, label %124, label %40
< 
< 40:                                               ; preds = %27
<   %41 = getelementptr double, double* %29, i64 %34
<   %42 = sub i32 %24, %25
<   %43 = zext i32 %42 to i64
<   %44 = add nsw i64 %34, %43
<   %45 = add nsw i64 %44, 1
<   %46 = getelementptr double, double* %29, i64 %45
<   %47 = getelementptr double, double* %31, i64 %34
<   %48 = getelementptr double, double* %31, i64 %45
<   %49 = getelementptr double, double* %33, i64 %34
<   %50 = getelementptr double, double* %33, i64 %45
<   %51 = icmp ult double* %41, %48
<   %52 = icmp ult double* %47, %46
<   %53 = and i1 %51, %52
<   %54 = icmp ult double* %41, %50
<   %55 = icmp ult double* %49, %46
<   %56 = and i1 %54, %55
<   %57 = or i1 %53, %56
<   %58 = icmp ult double* %47, %50
<   %59 = icmp ult double* %49, %48
<   %60 = and i1 %58, %59
<   %61 = or i1 %57, %60
<   br i1 %61, label %124, label %62
< 
< 62:                                               ; preds = %40
<   %63 = and i64 %38, 8589934588
<   %64 = add nsw i64 %63, %34
<   %65 = add nsw i64 %63, -4
<   %66 = lshr exact i64 %65, 2
<   %67 = add nuw nsw i64 %66, 1
<   %68 = and i64 %67, 1
<   %69 = icmp eq i64 %65, 0
<   br i1 %69, label %105, label %70
< 
< 70:                                               ; preds = %62
<   %71 = and i64 %67, 9223372036854775806
<   br label %72
< 
< 72:                                               ; preds = %72, %70
<   %73 = phi i64 [ 0, %70 ], [ %102, %72 ]
<   %74 = phi i64 [ %71, %70 ], [ %103, %72 ]
<   %75 = add i64 %73, %34
<   %76 = getelementptr inbounds double, double* %29, i64 %75
<   %77 = bitcast double* %76 to <2 x double>*
<   store <2 x double> zeroinitializer, <2 x double>* %77, align 8, !tbaa !2, !alias.scope !86, !noalias !89
<   %78 = getelementptr inbounds double, double* %76, i64 2
<   %79 = bitcast double* %78 to <2 x double>*
<   store <2 x double> zeroinitializer, <2 x double>* %79, align 8, !tbaa !2, !alias.scope !86, !noalias !89
<   %80 = getelementptr inbounds double, double* %31, i64 %75
<   %81 = bitcast double* %80 to <2 x double>*
<   store <2 x double> zeroinitializer, <2 x double>* %81, align 8, !tbaa !2, !alias.scope !92, !noalias !93
<   %82 = getelementptr inbounds double, double* %80, i64 2
<   %83 = bitcast double* %82 to <2 x double>*
<   store <2 x double> zeroinitializer, <2 x double>* %83, align 8, !tbaa !2, !alias.scope !92, !noalias !93
<   %84 = getelementptr inbounds double, double* %33, i64 %75
<   %85 = bitcast double* %84 to <2 x double>*
<   store <2 x double> zeroinitializer, <2 x double>* %85, align 8, !tbaa !2, !alias.scope !93
<   %86 = getelementptr inbounds double, double* %84, i64 2
<   %87 = bitcast double* %86 to <2 x double>*
<   store <2 x double> zeroinitializer, <2 x double>* %87, align 8, !tbaa !2, !alias.scope !93
<   %88 = or i64 %73, 4
<   %89 = add i64 %88, %34
<   %90 = getelementptr inbounds double, double* %29, i64 %89
<   %91 = bitcast double* %90 to <2 x double>*
<   store <2 x double> zeroinitializer, <2 x double>* %91, align 8, !tbaa !2, !alias.scope !86, !noalias !89
<   %92 = getelementptr inbounds double, double* %90, i64 2
<   %93 = bitcast double* %92 to <2 x double>*
<   store <2 x double> zeroinitializer, <2 x double>* %93, align 8, !tbaa !2, !alias.scope !86, !noalias !89
<   %94 = getelementptr inbounds double, double* %31, i64 %89
<   %95 = bitcast double* %94 to <2 x double>*
<   store <2 x double> zeroinitializer, <2 x double>* %95, align 8, !tbaa !2, !alias.scope !92, !noalias !93
<   %96 = getelementptr inbounds double, double* %94, i64 2
<   %97 = bitcast double* %96 to <2 x double>*
<   store <2 x double> zeroinitializer, <2 x double>* %97, align 8, !tbaa !2, !alias.scope !92, !noalias !93
<   %98 = getelementptr inbounds double, double* %33, i64 %89
<   %99 = bitcast double* %98 to <2 x double>*
<   store <2 x double> zeroinitializer, <2 x double>* %99, align 8, !tbaa !2, !alias.scope !93
<   %100 = getelementptr inbounds double, double* %98, i64 2
<   %101 = bitcast double* %100 to <2 x double>*
<   store <2 x double> zeroinitializer, <2 x double>* %101, align 8, !tbaa !2, !alias.scope !93
<   %102 = add i64 %73, 8
<   %103 = add i64 %74, -2
<   %104 = icmp eq i64 %103, 0
<   br i1 %104, label %105, label %72, !llvm.loop !94
< 
< 105:                                              ; preds = %72, %62
<   %106 = phi i64 [ 0, %62 ], [ %102, %72 ]
<   %107 = icmp eq i64 %68, 0
<   br i1 %107, label %122, label %108
< 
< 108:                                              ; preds = %105
<   %109 = add i64 %106, %34
<   %110 = getelementptr inbounds double, double* %29, i64 %109
<   %111 = bitcast double* %110 to <2 x double>*
<   store <2 x double> zeroinitializer, <2 x double>* %111, align 8, !tbaa !2, !alias.scope !86, !noalias !89
<   %112 = getelementptr inbounds double, double* %110, i64 2
<   %113 = bitcast double* %112 to <2 x double>*
<   store <2 x double> zeroinitializer, <2 x double>* %113, align 8, !tbaa !2, !alias.scope !86, !noalias !89
<   %114 = getelementptr inbounds double, double* %31, i64 %109
<   %115 = bitcast double* %114 to <2 x double>*
<   store <2 x double> zeroinitializer, <2 x double>* %115, align 8, !tbaa !2, !alias.scope !92, !noalias !93
<   %116 = getelementptr inbounds double, double* %114, i64 2
<   %117 = bitcast double* %116 to <2 x double>*
<   store <2 x double> zeroinitializer, <2 x double>* %117, align 8, !tbaa !2, !alias.scope !92, !noalias !93
<   %118 = getelementptr inbounds double, double* %33, i64 %109
<   %119 = bitcast double* %118 to <2 x double>*
<   store <2 x double> zeroinitializer, <2 x double>* %119, align 8, !tbaa !2, !alias.scope !93
<   %120 = getelementptr inbounds double, double* %118, i64 2
<   %121 = bitcast double* %120 to <2 x double>*
<   store <2 x double> zeroinitializer, <2 x double>* %121, align 8, !tbaa !2, !alias.scope !93
<   br label %122
< 
< 122:                                              ; preds = %105, %108
<   %123 = icmp eq i64 %38, %63
<   br i1 %123, label %151, label %124
< 
< 124:                                              ; preds = %40, %27, %122
<   %125 = phi i64 [ %34, %40 ], [ %34, %27 ], [ %64, %122 ]
<   %126 = add i32 %24, 1
<   %127 = trunc i64 %125 to i32
<   %128 = sub i32 %126, %127
<   %129 = and i32 %128, 1
<   %130 = icmp eq i32 %129, 0
<   br i1 %130, label %136, label %131
< 
< 131:                                              ; preds = %124
<   %132 = getelementptr inbounds double, double* %29, i64 %125
<   store double 0.000000e+00, double* %132, align 8, !tbaa !2
<   %133 = getelementptr inbounds double, double* %31, i64 %125
<   store double 0.000000e+00, double* %133, align 8, !tbaa !2
<   %134 = getelementptr inbounds double, double* %33, i64 %125
<   store double 0.000000e+00, double* %134, align 8, !tbaa !2
<   %135 = add nsw i64 %125, 1
<   br label %136
< 
< 136:                                              ; preds = %131, %124
<   %137 = phi i64 [ %125, %124 ], [ %135, %131 ]
<   %138 = icmp eq i32 %24, %127
<   br i1 %138, label %151, label %139
< 
< 139:                                              ; preds = %136, %139
<   %140 = phi i64 [ %148, %139 ], [ %137, %136 ]
<   %141 = getelementptr inbounds double, double* %29, i64 %140
<   store double 0.000000e+00, double* %141, align 8, !tbaa !2
<   %142 = getelementptr inbounds double, double* %31, i64 %140
<   store double 0.000000e+00, double* %142, align 8, !tbaa !2
<   %143 = getelementptr inbounds double, double* %33, i64 %140
<   store double 0.000000e+00, double* %143, align 8, !tbaa !2
<   %144 = add nsw i64 %140, 1
<   %145 = getelementptr inbounds double, double* %29, i64 %144
<   store double 0.000000e+00, double* %145, align 8, !tbaa !2
<   %146 = getelementptr inbounds double, double* %31, i64 %144
<   store double 0.000000e+00, double* %146, align 8, !tbaa !2
<   %147 = getelementptr inbounds double, double* %33, i64 %144
<   store double 0.000000e+00, double* %147, align 8, !tbaa !2
<   %148 = add nsw i64 %140, 2
<   %149 = trunc i64 %148 to i32
<   %150 = icmp eq i32 %35, %149
<   br i1 %150, label %151, label %139, !llvm.loop !96
< 
< 151:                                              ; preds = %136, %139, %122, %16
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %21)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #10
<   br label %152
---
> ; Function Attrs: nounwind
> declare dso_local void @_ZN6DomainD1Ev(%class.Domain*) unnamed_addr #1
8203,8208c4151
< 152:                                              ; preds = %14, %151
<   %153 = phi i32 [ %15, %14 ], [ %21, %151 ]
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %153)
<   %154 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL17CalcForceForNodesR6DomainE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %154)
<           to label %155 unwind label %156
---
> declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8), i8*, i64) local_unnamed_addr #0
8210,8211c4153
< 155:                                              ; preds = %152
<   ret void
---
> declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo9_M_insertIlEERSoT_(%"class.std::basic_ostream"*, i64) local_unnamed_addr #0
8213,8218c4155,4449
< 156:                                              ; preds = %152, %4
<   %157 = landingpad { i8*, i32 }
<           catch i8* null
<   %158 = extractvalue { i8*, i32 } %157, 0
<   call void @__clang_call_terminate(i8* %158) #29
<   unreachable
---
> ; Function Attrs: norecurse nounwind uwtable
> define internal void @.omp_outlined..19(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i64 %numNode, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %domain) #6 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
> entry:
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %numNode.addr.sroa.0.0.extract.trunc = trunc i64 %numNode to i32
>   %sub3 = add nsw i32 %numNode.addr.sroa.0.0.extract.trunc, -1
>   %cmp = icmp sgt i32 %numNode.addr.sroa.0.0.extract.trunc, 0
>   br i1 %cmp, label %omp.precond.then, label %omp.precond.end
> 
> omp.precond.then:                                 ; preds = %entry
>   %0 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %1 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #7
>   store i32 %sub3, i32* %.omp.ub, align 4, !tbaa !6
>   %2 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %3 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   %4 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %4, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %5 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp5.not = icmp slt i32 %5, %numNode.addr.sroa.0.0.extract.trunc
>   %cond = select i1 %cmp5.not, i32 %5, i32 %sub3
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %6 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp6.not33 = icmp sgt i32 %6, %cond
>   br i1 %cmp6.not33, label %omp.loop.exit, label %omp.inner.for.body.lr.ph
> 
> omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
>   %_M_start.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 9, i32 0, i32 0, i32 0, i32 0
>   %7 = load double*, double** %_M_start.i.i, align 8, !tbaa !11
>   %_M_start.i.i31 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 10, i32 0, i32 0, i32 0, i32 0
>   %8 = load double*, double** %_M_start.i.i31, align 8, !tbaa !11
>   %_M_start.i.i28 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 11, i32 0, i32 0, i32 0, i32 0
>   %9 = load double*, double** %_M_start.i.i28, align 8, !tbaa !11
>   %10 = sext i32 %6 to i64
>   %11 = icmp sgt i32 %cond, %6
>   %smax = select i1 %11, i32 %cond, i32 %6
>   %12 = add i32 %smax, 1
>   %13 = sub i32 %smax, %6
>   %14 = zext i32 %13 to i64
>   %15 = add nuw nsw i64 %14, 1
>   %min.iters.check = icmp ult i32 %13, 15
>   br i1 %min.iters.check, label %omp.inner.for.body.preheader, label %vector.memcheck
> 
> vector.memcheck:                                  ; preds = %omp.inner.for.body.lr.ph
>   %scevgep = getelementptr double, double* %7, i64 %10
>   %16 = sub i32 %smax, %6
>   %17 = zext i32 %16 to i64
>   %18 = add nsw i64 %10, %17
>   %19 = add nsw i64 %18, 1
>   %scevgep39 = getelementptr double, double* %7, i64 %19
>   %scevgep41 = getelementptr double, double* %8, i64 %10
>   %scevgep43 = getelementptr double, double* %8, i64 %19
>   %scevgep45 = getelementptr double, double* %9, i64 %10
>   %scevgep47 = getelementptr double, double* %9, i64 %19
>   %bound0 = icmp ult double* %scevgep, %scevgep43
>   %bound1 = icmp ult double* %scevgep41, %scevgep39
>   %found.conflict = and i1 %bound0, %bound1
>   %bound049 = icmp ult double* %scevgep, %scevgep47
>   %bound150 = icmp ult double* %scevgep45, %scevgep39
>   %found.conflict51 = and i1 %bound049, %bound150
>   %conflict.rdx = or i1 %found.conflict, %found.conflict51
>   %bound052 = icmp ult double* %scevgep41, %scevgep47
>   %bound153 = icmp ult double* %scevgep45, %scevgep43
>   %found.conflict54 = and i1 %bound052, %bound153
>   %conflict.rdx55 = or i1 %conflict.rdx, %found.conflict54
>   br i1 %conflict.rdx55, label %omp.inner.for.body.preheader, label %vector.ph
> 
> vector.ph:                                        ; preds = %vector.memcheck
>   %n.vec = and i64 %15, 8589934576
>   %ind.end = add nsw i64 %n.vec, %10
>   %20 = add nsw i64 %n.vec, -16
>   %21 = lshr exact i64 %20, 4
>   %22 = add nuw nsw i64 %21, 1
>   %xtraiter56 = and i64 %22, 1
>   %23 = icmp eq i64 %20, 0
>   br i1 %23, label %middle.block.unr-lcssa, label %vector.ph.new
> 
> vector.ph.new:                                    ; preds = %vector.ph
>   %unroll_iter = and i64 %22, 2305843009213693950
>   br label %vector.body
> 
> vector.body:                                      ; preds = %vector.body, %vector.ph.new
>   %index = phi i64 [ 0, %vector.ph.new ], [ %index.next.1, %vector.body ]
>   %niter = phi i64 [ %unroll_iter, %vector.ph.new ], [ %niter.nsub.1, %vector.body ]
>   %offset.idx = add i64 %index, %10
>   %24 = getelementptr inbounds double, double* %7, i64 %offset.idx
>   %25 = bitcast double* %24 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %25, align 8, !tbaa !2, !alias.scope !67, !noalias !70
>   %26 = getelementptr inbounds double, double* %24, i64 4
>   %27 = bitcast double* %26 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %27, align 8, !tbaa !2, !alias.scope !67, !noalias !70
>   %28 = getelementptr inbounds double, double* %24, i64 8
>   %29 = bitcast double* %28 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %29, align 8, !tbaa !2, !alias.scope !67, !noalias !70
>   %30 = getelementptr inbounds double, double* %24, i64 12
>   %31 = bitcast double* %30 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %31, align 8, !tbaa !2, !alias.scope !67, !noalias !70
>   %32 = getelementptr inbounds double, double* %8, i64 %offset.idx
>   %33 = bitcast double* %32 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %33, align 8, !tbaa !2, !alias.scope !73, !noalias !74
>   %34 = getelementptr inbounds double, double* %32, i64 4
>   %35 = bitcast double* %34 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %35, align 8, !tbaa !2, !alias.scope !73, !noalias !74
>   %36 = getelementptr inbounds double, double* %32, i64 8
>   %37 = bitcast double* %36 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %37, align 8, !tbaa !2, !alias.scope !73, !noalias !74
>   %38 = getelementptr inbounds double, double* %32, i64 12
>   %39 = bitcast double* %38 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %39, align 8, !tbaa !2, !alias.scope !73, !noalias !74
>   %40 = getelementptr inbounds double, double* %9, i64 %offset.idx
>   %41 = bitcast double* %40 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %41, align 8, !tbaa !2, !alias.scope !74
>   %42 = getelementptr inbounds double, double* %40, i64 4
>   %43 = bitcast double* %42 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %43, align 8, !tbaa !2, !alias.scope !74
>   %44 = getelementptr inbounds double, double* %40, i64 8
>   %45 = bitcast double* %44 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %45, align 8, !tbaa !2, !alias.scope !74
>   %46 = getelementptr inbounds double, double* %40, i64 12
>   %47 = bitcast double* %46 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %47, align 8, !tbaa !2, !alias.scope !74
>   %index.next = or i64 %index, 16
>   %offset.idx.1 = add i64 %index.next, %10
>   %48 = getelementptr inbounds double, double* %7, i64 %offset.idx.1
>   %49 = bitcast double* %48 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %49, align 8, !tbaa !2, !alias.scope !67, !noalias !70
>   %50 = getelementptr inbounds double, double* %48, i64 4
>   %51 = bitcast double* %50 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %51, align 8, !tbaa !2, !alias.scope !67, !noalias !70
>   %52 = getelementptr inbounds double, double* %48, i64 8
>   %53 = bitcast double* %52 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %53, align 8, !tbaa !2, !alias.scope !67, !noalias !70
>   %54 = getelementptr inbounds double, double* %48, i64 12
>   %55 = bitcast double* %54 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %55, align 8, !tbaa !2, !alias.scope !67, !noalias !70
>   %56 = getelementptr inbounds double, double* %8, i64 %offset.idx.1
>   %57 = bitcast double* %56 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %57, align 8, !tbaa !2, !alias.scope !73, !noalias !74
>   %58 = getelementptr inbounds double, double* %56, i64 4
>   %59 = bitcast double* %58 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %59, align 8, !tbaa !2, !alias.scope !73, !noalias !74
>   %60 = getelementptr inbounds double, double* %56, i64 8
>   %61 = bitcast double* %60 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %61, align 8, !tbaa !2, !alias.scope !73, !noalias !74
>   %62 = getelementptr inbounds double, double* %56, i64 12
>   %63 = bitcast double* %62 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %63, align 8, !tbaa !2, !alias.scope !73, !noalias !74
>   %64 = getelementptr inbounds double, double* %9, i64 %offset.idx.1
>   %65 = bitcast double* %64 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %65, align 8, !tbaa !2, !alias.scope !74
>   %66 = getelementptr inbounds double, double* %64, i64 4
>   %67 = bitcast double* %66 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %67, align 8, !tbaa !2, !alias.scope !74
>   %68 = getelementptr inbounds double, double* %64, i64 8
>   %69 = bitcast double* %68 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %69, align 8, !tbaa !2, !alias.scope !74
>   %70 = getelementptr inbounds double, double* %64, i64 12
>   %71 = bitcast double* %70 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %71, align 8, !tbaa !2, !alias.scope !74
>   %index.next.1 = add i64 %index, 32
>   %niter.nsub.1 = add i64 %niter, -2
>   %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
>   br i1 %niter.ncmp.1, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !75
> 
> middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
>   %index.unr = phi i64 [ 0, %vector.ph ], [ %index.next.1, %vector.body ]
>   %lcmp.mod57.not = icmp eq i64 %xtraiter56, 0
>   br i1 %lcmp.mod57.not, label %middle.block, label %vector.body.epil
> 
> vector.body.epil:                                 ; preds = %middle.block.unr-lcssa
>   %offset.idx.epil = add i64 %index.unr, %10
>   %72 = getelementptr inbounds double, double* %7, i64 %offset.idx.epil
>   %73 = bitcast double* %72 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %73, align 8, !tbaa !2, !alias.scope !67, !noalias !70
>   %74 = getelementptr inbounds double, double* %72, i64 4
>   %75 = bitcast double* %74 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %75, align 8, !tbaa !2, !alias.scope !67, !noalias !70
>   %76 = getelementptr inbounds double, double* %72, i64 8
>   %77 = bitcast double* %76 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %77, align 8, !tbaa !2, !alias.scope !67, !noalias !70
>   %78 = getelementptr inbounds double, double* %72, i64 12
>   %79 = bitcast double* %78 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %79, align 8, !tbaa !2, !alias.scope !67, !noalias !70
>   %80 = getelementptr inbounds double, double* %8, i64 %offset.idx.epil
>   %81 = bitcast double* %80 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %81, align 8, !tbaa !2, !alias.scope !73, !noalias !74
>   %82 = getelementptr inbounds double, double* %80, i64 4
>   %83 = bitcast double* %82 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %83, align 8, !tbaa !2, !alias.scope !73, !noalias !74
>   %84 = getelementptr inbounds double, double* %80, i64 8
>   %85 = bitcast double* %84 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %85, align 8, !tbaa !2, !alias.scope !73, !noalias !74
>   %86 = getelementptr inbounds double, double* %80, i64 12
>   %87 = bitcast double* %86 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %87, align 8, !tbaa !2, !alias.scope !73, !noalias !74
>   %88 = getelementptr inbounds double, double* %9, i64 %offset.idx.epil
>   %89 = bitcast double* %88 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %89, align 8, !tbaa !2, !alias.scope !74
>   %90 = getelementptr inbounds double, double* %88, i64 4
>   %91 = bitcast double* %90 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %91, align 8, !tbaa !2, !alias.scope !74
>   %92 = getelementptr inbounds double, double* %88, i64 8
>   %93 = bitcast double* %92 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %93, align 8, !tbaa !2, !alias.scope !74
>   %94 = getelementptr inbounds double, double* %88, i64 12
>   %95 = bitcast double* %94 to <4 x double>*
>   store <4 x double> zeroinitializer, <4 x double>* %95, align 8, !tbaa !2, !alias.scope !74
>   br label %middle.block
> 
> middle.block:                                     ; preds = %middle.block.unr-lcssa, %vector.body.epil
>   %cmp.n = icmp eq i64 %15, %n.vec
>   br i1 %cmp.n, label %omp.loop.exit, label %omp.inner.for.body.preheader
> 
> omp.inner.for.body.preheader:                     ; preds = %middle.block, %vector.memcheck, %omp.inner.for.body.lr.ph
>   %indvars.iv.ph = phi i64 [ %10, %vector.memcheck ], [ %10, %omp.inner.for.body.lr.ph ], [ %ind.end, %middle.block ]
>   %96 = add i32 %smax, 1
>   %97 = trunc i64 %indvars.iv.ph to i32
>   %98 = sub i32 %96, %97
>   %99 = sub i32 %smax, %97
>   %xtraiter = and i32 %98, 3
>   %lcmp.mod.not = icmp eq i32 %xtraiter, 0
>   br i1 %lcmp.mod.not, label %omp.inner.for.body.prol.loopexit, label %omp.inner.for.body.prol
> 
> omp.inner.for.body.prol:                          ; preds = %omp.inner.for.body.preheader, %omp.inner.for.body.prol
>   %indvars.iv.prol = phi i64 [ %indvars.iv.next.prol, %omp.inner.for.body.prol ], [ %indvars.iv.ph, %omp.inner.for.body.preheader ]
>   %prol.iter = phi i32 [ %prol.iter.sub, %omp.inner.for.body.prol ], [ %xtraiter, %omp.inner.for.body.preheader ]
>   %add.ptr.i.i.prol = getelementptr inbounds double, double* %7, i64 %indvars.iv.prol
>   store double 0.000000e+00, double* %add.ptr.i.i.prol, align 8, !tbaa !2
>   %add.ptr.i.i32.prol = getelementptr inbounds double, double* %8, i64 %indvars.iv.prol
>   store double 0.000000e+00, double* %add.ptr.i.i32.prol, align 8, !tbaa !2
>   %add.ptr.i.i29.prol = getelementptr inbounds double, double* %9, i64 %indvars.iv.prol
>   store double 0.000000e+00, double* %add.ptr.i.i29.prol, align 8, !tbaa !2
>   %indvars.iv.next.prol = add nsw i64 %indvars.iv.prol, 1
>   %prol.iter.sub = add i32 %prol.iter, -1
>   %prol.iter.cmp.not = icmp eq i32 %prol.iter.sub, 0
>   br i1 %prol.iter.cmp.not, label %omp.inner.for.body.prol.loopexit, label %omp.inner.for.body.prol, !llvm.loop !77
> 
> omp.inner.for.body.prol.loopexit:                 ; preds = %omp.inner.for.body.prol, %omp.inner.for.body.preheader
>   %indvars.iv.unr = phi i64 [ %indvars.iv.ph, %omp.inner.for.body.preheader ], [ %indvars.iv.next.prol, %omp.inner.for.body.prol ]
>   %100 = icmp ult i32 %99, 3
>   br i1 %100, label %omp.loop.exit, label %omp.inner.for.body
> 
> omp.inner.for.body:                               ; preds = %omp.inner.for.body.prol.loopexit, %omp.inner.for.body
>   %indvars.iv = phi i64 [ %indvars.iv.next.3, %omp.inner.for.body ], [ %indvars.iv.unr, %omp.inner.for.body.prol.loopexit ]
>   %add.ptr.i.i = getelementptr inbounds double, double* %7, i64 %indvars.iv
>   store double 0.000000e+00, double* %add.ptr.i.i, align 8, !tbaa !2
>   %add.ptr.i.i32 = getelementptr inbounds double, double* %8, i64 %indvars.iv
>   store double 0.000000e+00, double* %add.ptr.i.i32, align 8, !tbaa !2
>   %add.ptr.i.i29 = getelementptr inbounds double, double* %9, i64 %indvars.iv
>   store double 0.000000e+00, double* %add.ptr.i.i29, align 8, !tbaa !2
>   %indvars.iv.next = add nsw i64 %indvars.iv, 1
>   %add.ptr.i.i.1 = getelementptr inbounds double, double* %7, i64 %indvars.iv.next
>   store double 0.000000e+00, double* %add.ptr.i.i.1, align 8, !tbaa !2
>   %add.ptr.i.i32.1 = getelementptr inbounds double, double* %8, i64 %indvars.iv.next
>   store double 0.000000e+00, double* %add.ptr.i.i32.1, align 8, !tbaa !2
>   %add.ptr.i.i29.1 = getelementptr inbounds double, double* %9, i64 %indvars.iv.next
>   store double 0.000000e+00, double* %add.ptr.i.i29.1, align 8, !tbaa !2
>   %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
>   %add.ptr.i.i.2 = getelementptr inbounds double, double* %7, i64 %indvars.iv.next.1
>   store double 0.000000e+00, double* %add.ptr.i.i.2, align 8, !tbaa !2
>   %add.ptr.i.i32.2 = getelementptr inbounds double, double* %8, i64 %indvars.iv.next.1
>   store double 0.000000e+00, double* %add.ptr.i.i32.2, align 8, !tbaa !2
>   %add.ptr.i.i29.2 = getelementptr inbounds double, double* %9, i64 %indvars.iv.next.1
>   store double 0.000000e+00, double* %add.ptr.i.i29.2, align 8, !tbaa !2
>   %indvars.iv.next.2 = add nsw i64 %indvars.iv, 3
>   %add.ptr.i.i.3 = getelementptr inbounds double, double* %7, i64 %indvars.iv.next.2
>   store double 0.000000e+00, double* %add.ptr.i.i.3, align 8, !tbaa !2
>   %add.ptr.i.i32.3 = getelementptr inbounds double, double* %8, i64 %indvars.iv.next.2
>   store double 0.000000e+00, double* %add.ptr.i.i32.3, align 8, !tbaa !2
>   %add.ptr.i.i29.3 = getelementptr inbounds double, double* %9, i64 %indvars.iv.next.2
>   store double 0.000000e+00, double* %add.ptr.i.i29.3, align 8, !tbaa !2
>   %indvars.iv.next.3 = add nsw i64 %indvars.iv, 4
>   %lftr.wideiv.3 = trunc i64 %indvars.iv.next.3 to i32
>   %exitcond.not.3 = icmp eq i32 %12, %lftr.wideiv.3
>   br i1 %exitcond.not.3, label %omp.loop.exit, label %omp.inner.for.body, !llvm.loop !79
> 
> omp.loop.exit:                                    ; preds = %omp.inner.for.body.prol.loopexit, %omp.inner.for.body, %middle.block, %omp.precond.then
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %4)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #7
>   br label %omp.precond.end
> 
> omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
>   ret void
8222,8281c4453,4506
< define internal void @.omp_outlined..23(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, i64 %2, double** nocapture nonnull readonly align 8 dereferenceable(8) %3) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %5 = alloca i32, align 4
<   %6 = alloca i32, align 4
<   %7 = alloca i32, align 4
<   %8 = alloca i32, align 4
<   %9 = trunc i64 %2 to i32
<   %10 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL23CalcVolumeForceForElemsR6DomainE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %10)
<           to label %11 unwind label %46
< 
< 11:                                               ; preds = %4
<   %12 = add nsw i32 %9, -1
<   %13 = icmp sgt i32 %9, 0
<   br i1 %13, label %16, label %14
< 
< 14:                                               ; preds = %11
<   %15 = load i32, i32* %0, align 4, !tbaa !12
<   br label %42
< 
< 16:                                               ; preds = %11
<   %17 = bitcast i32* %5 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #10
<   store i32 0, i32* %5, align 4, !tbaa !12
<   %18 = bitcast i32* %6 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #10
<   store i32 %12, i32* %6, align 4, !tbaa !12
<   %19 = bitcast i32* %7 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #10
<   store i32 1, i32* %7, align 4, !tbaa !12
<   %20 = bitcast i32* %8 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #10
<   store i32 0, i32* %8, align 4, !tbaa !12
<   %21 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %21, i32 34, i32* nonnull %8, i32* nonnull %5, i32* nonnull %6, i32* nonnull %7, i32 1, i32 1) #10
<   %22 = load i32, i32* %6, align 4, !tbaa !12
<   %23 = icmp slt i32 %22, %9
<   %24 = select i1 %23, i32 %22, i32 %12
<   store i32 %24, i32* %6, align 4, !tbaa !12
<   %25 = load i32, i32* %5, align 4, !tbaa !12
<   %26 = icmp sgt i32 %25, %24
<   br i1 %26, label %41, label %27
< 
< 27:                                               ; preds = %16
<   %28 = load double*, double** %3, align 8, !tbaa !6
<   %29 = sext i32 %25 to i64
<   %30 = add i32 %24, 1
<   br label %35
< 
< 31:                                               ; preds = %35
<   %32 = add nsw i64 %36, 1
<   %33 = trunc i64 %32 to i32
<   %34 = icmp eq i32 %30, %33
<   br i1 %34, label %41, label %35
< 
< 35:                                               ; preds = %27, %31
<   %36 = phi i64 [ %29, %27 ], [ %32, %31 ]
<   %37 = getelementptr inbounds double, double* %28, i64 %36
<   %38 = load double, double* %37, align 8, !tbaa !2
<   %39 = fcmp ugt double %38, 0.000000e+00
<   br i1 %39, label %31, label %40
---
> define internal void @.omp_outlined..20(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i64 %numElem, double** nocapture nonnull readonly align 8 dereferenceable(8) %determ) #6 {
> entry:
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %numElem.addr.sroa.0.0.extract.trunc = trunc i64 %numElem to i32
>   %sub2 = add nsw i32 %numElem.addr.sroa.0.0.extract.trunc, -1
>   %cmp = icmp sgt i32 %numElem.addr.sroa.0.0.extract.trunc, 0
>   br i1 %cmp, label %omp.precond.then, label %omp.precond.end
> 
> omp.precond.then:                                 ; preds = %entry
>   %0 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %1 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #7
>   store i32 %sub2, i32* %.omp.ub, align 4, !tbaa !6
>   %2 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %3 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   %4 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %4, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %5 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp4.not = icmp slt i32 %5, %numElem.addr.sroa.0.0.extract.trunc
>   %cond = select i1 %cmp4.not, i32 %5, i32 %sub2
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %6 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp5.not19 = icmp sgt i32 %6, %cond
>   br i1 %cmp5.not19, label %omp.loop.exit, label %omp.inner.for.body.lr.ph
> 
> omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
>   %7 = load double*, double** %determ, align 8, !tbaa !41
>   %8 = sext i32 %6 to i64
>   %9 = icmp sgt i32 %cond, %6
>   %smax = select i1 %9, i32 %cond, i32 %6
>   %10 = add i32 %smax, 1
>   br label %omp.inner.for.body
> 
> omp.inner.for.cond:                               ; preds = %omp.inner.for.body
>   %indvars.iv.next = add nsw i64 %indvars.iv, 1
>   %lftr.wideiv = trunc i64 %indvars.iv.next to i32
>   %exitcond.not = icmp eq i32 %10, %lftr.wideiv
>   br i1 %exitcond.not, label %omp.loop.exit, label %omp.inner.for.body
> 
> omp.inner.for.body:                               ; preds = %omp.inner.for.cond, %omp.inner.for.body.lr.ph
>   %indvars.iv = phi i64 [ %indvars.iv.next, %omp.inner.for.cond ], [ %8, %omp.inner.for.body.lr.ph ]
>   %arrayidx = getelementptr inbounds double, double* %7, i64 %indvars.iv
>   %11 = load double, double* %arrayidx, align 8, !tbaa !2
>   %cmp6 = fcmp ugt double %11, 0.000000e+00
>   br i1 %cmp6, label %omp.inner.for.cond, label %if.then
8283,8284c4508,4509
< 40:                                               ; preds = %35
<   call void @exit(i32 -1) #29
---
> if.then:                                          ; preds = %omp.inner.for.body
>   call void @exit(i32 -1) #23
8287,8300c4512,4518
< 41:                                               ; preds = %31, %16
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %21)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #10
<   br label %42
< 
< 42:                                               ; preds = %14, %41
<   %43 = phi i32 [ %15, %14 ], [ %21, %41 ]
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %43)
<   %44 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL23CalcVolumeForceForElemsR6DomainE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %44)
<           to label %45 unwind label %46
---
> omp.loop.exit:                                    ; preds = %omp.inner.for.cond, %omp.precond.then
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %4)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #7
>   br label %omp.precond.end
8302c4520
< 45:                                               ; preds = %42
---
> omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
8304,8310d4521
< 
< 46:                                               ; preds = %42, %4
<   %47 = landingpad { i8*, i32 }
<           catch i8* null
<   %48 = extractvalue { i8*, i32 } %47, 0
<   call void @__clang_call_terminate(i8* %48) #29
<   unreachable
8314c4525
< declare dso_local void @exit(i32) local_unnamed_addr #17
---
> declare dso_local void @exit(i32) local_unnamed_addr #15
8316,8317c4527,4528
< ; Function Attrs: inaccessiblememonly nofree nounwind willreturn
< declare dso_local noalias noundef i8* @malloc(i64) local_unnamed_addr #18
---
> ; Function Attrs: nofree nounwind
> declare dso_local noalias i8* @malloc(i64) local_unnamed_addr #10
8320,8443c4531,4672
< define internal void @.omp_outlined..25(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, i64 %2, double** nocapture nonnull readonly align 8 dereferenceable(8) %3, double** nocapture nonnull readonly align 8 dereferenceable(8) %4, double** nocapture nonnull readonly align 8 dereferenceable(8) %5, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %6) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %8 = alloca i32, align 4
<   %9 = alloca i32, align 4
<   %10 = alloca i32, align 4
<   %11 = alloca i32, align 4
<   %12 = trunc i64 %2 to i32
<   %13 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL23InitStressTermsForElemsR6DomainPdS1_S1_iE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %13)
<           to label %14 unwind label %86
< 
< 14:                                               ; preds = %7
<   %15 = add nsw i32 %12, -1
<   %16 = icmp sgt i32 %12, 0
<   br i1 %16, label %19, label %17
< 
< 17:                                               ; preds = %14
<   %18 = load i32, i32* %0, align 4, !tbaa !12
<   br label %82
< 
< 19:                                               ; preds = %14
<   %20 = bitcast i32* %8 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #10
<   store i32 0, i32* %8, align 4, !tbaa !12
<   %21 = bitcast i32* %9 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #10
<   store i32 %15, i32* %9, align 4, !tbaa !12
<   %22 = bitcast i32* %10 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22) #10
<   store i32 1, i32* %10, align 4, !tbaa !12
<   %23 = bitcast i32* %11 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %23) #10
<   store i32 0, i32* %11, align 4, !tbaa !12
<   %24 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %24, i32 34, i32* nonnull %11, i32* nonnull %8, i32* nonnull %9, i32* nonnull %10, i32 1, i32 1) #10
<   %25 = load i32, i32* %9, align 4, !tbaa !12
<   %26 = icmp slt i32 %25, %12
<   %27 = select i1 %26, i32 %25, i32 %15
<   store i32 %27, i32* %9, align 4, !tbaa !12
<   %28 = load i32, i32* %8, align 4, !tbaa !12
<   %29 = icmp slt i32 %27, %28
<   br i1 %29, label %81, label %30
< 
< 30:                                               ; preds = %19
<   %31 = getelementptr inbounds %class.Domain, %class.Domain* %6, i64 0, i32 39, i32 0, i32 0, i32 0
<   %32 = load double*, double** %31, align 8, !tbaa !22
<   %33 = getelementptr inbounds %class.Domain, %class.Domain* %6, i64 0, i32 40, i32 0, i32 0, i32 0
<   %34 = load double*, double** %33, align 8, !tbaa !22
<   %35 = load double*, double** %5, align 8, !tbaa !6
<   %36 = load double*, double** %4, align 8, !tbaa !6
<   %37 = load double*, double** %3, align 8, !tbaa !6
<   %38 = sext i32 %28 to i64
<   %39 = add i32 %27, 1
<   %40 = sub i32 %39, %28
<   %41 = and i32 %40, 1
<   %42 = icmp eq i32 %41, 0
<   br i1 %42, label %54, label %43
< 
< 43:                                               ; preds = %30
<   %44 = getelementptr inbounds double, double* %32, i64 %38
<   %45 = load double, double* %44, align 8, !tbaa !2
<   %46 = fneg double %45
<   %47 = getelementptr inbounds double, double* %34, i64 %38
<   %48 = load double, double* %47, align 8, !tbaa !2
<   %49 = fsub double %46, %48
<   %50 = getelementptr inbounds double, double* %35, i64 %38
<   store double %49, double* %50, align 8, !tbaa !2
<   %51 = getelementptr inbounds double, double* %36, i64 %38
<   store double %49, double* %51, align 8, !tbaa !2
<   %52 = getelementptr inbounds double, double* %37, i64 %38
<   store double %49, double* %52, align 8, !tbaa !2
<   %53 = add nsw i64 %38, 1
<   br label %54
< 
< 54:                                               ; preds = %43, %30
<   %55 = phi i64 [ %38, %30 ], [ %53, %43 ]
<   %56 = icmp eq i32 %27, %28
<   br i1 %56, label %81, label %57
< 
< 57:                                               ; preds = %54, %57
<   %58 = phi i64 [ %78, %57 ], [ %55, %54 ]
<   %59 = getelementptr inbounds double, double* %32, i64 %58
<   %60 = load double, double* %59, align 8, !tbaa !2
<   %61 = fneg double %60
<   %62 = getelementptr inbounds double, double* %34, i64 %58
<   %63 = load double, double* %62, align 8, !tbaa !2
<   %64 = fsub double %61, %63
<   %65 = getelementptr inbounds double, double* %35, i64 %58
<   store double %64, double* %65, align 8, !tbaa !2
<   %66 = getelementptr inbounds double, double* %36, i64 %58
<   store double %64, double* %66, align 8, !tbaa !2
<   %67 = getelementptr inbounds double, double* %37, i64 %58
<   store double %64, double* %67, align 8, !tbaa !2
<   %68 = add nsw i64 %58, 1
<   %69 = getelementptr inbounds double, double* %32, i64 %68
<   %70 = load double, double* %69, align 8, !tbaa !2
<   %71 = fneg double %70
<   %72 = getelementptr inbounds double, double* %34, i64 %68
<   %73 = load double, double* %72, align 8, !tbaa !2
<   %74 = fsub double %71, %73
<   %75 = getelementptr inbounds double, double* %35, i64 %68
<   store double %74, double* %75, align 8, !tbaa !2
<   %76 = getelementptr inbounds double, double* %36, i64 %68
<   store double %74, double* %76, align 8, !tbaa !2
<   %77 = getelementptr inbounds double, double* %37, i64 %68
<   store double %74, double* %77, align 8, !tbaa !2
<   %78 = add nsw i64 %58, 2
<   %79 = trunc i64 %78 to i32
<   %80 = icmp eq i32 %39, %79
<   br i1 %80, label %81, label %57
< 
< 81:                                               ; preds = %54, %57, %19
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %24)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %23) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #10
<   br label %82
< 
< 82:                                               ; preds = %17, %81
<   %83 = phi i32 [ %18, %17 ], [ %24, %81 ]
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %83)
<   %84 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL23InitStressTermsForElemsR6DomainPdS1_S1_iE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %84)
<           to label %85 unwind label %86
---
> define internal void @.omp_outlined..21(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i64 %numElem, double** nocapture nonnull readonly align 8 dereferenceable(8) %sigxx, double** nocapture nonnull readonly align 8 dereferenceable(8) %sigyy, double** nocapture nonnull readonly align 8 dereferenceable(8) %sigzz, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %domain) #6 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
> entry:
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %numElem.addr.sroa.0.0.extract.trunc = trunc i64 %numElem to i32
>   %sub3 = add nsw i32 %numElem.addr.sroa.0.0.extract.trunc, -1
>   %cmp = icmp sgt i32 %numElem.addr.sroa.0.0.extract.trunc, 0
>   br i1 %cmp, label %omp.precond.then, label %omp.precond.end
> 
> omp.precond.then:                                 ; preds = %entry
>   %0 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %1 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #7
>   store i32 %sub3, i32* %.omp.ub, align 4, !tbaa !6
>   %2 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %3 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   %4 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %4, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %5 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp5.not = icmp slt i32 %5, %numElem.addr.sroa.0.0.extract.trunc
>   %cond = select i1 %cmp5.not, i32 %5, i32 %sub3
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %6 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp6.not34 = icmp sgt i32 %6, %cond
>   br i1 %cmp6.not34, label %omp.loop.exit, label %omp.inner.for.body.lr.ph
> 
> omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
>   %_M_start.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 39, i32 0, i32 0, i32 0, i32 0
>   %7 = load double*, double** %_M_start.i.i, align 8, !tbaa !11
>   %_M_start.i.i32 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 40, i32 0, i32 0, i32 0, i32 0
>   %8 = load double*, double** %_M_start.i.i32, align 8, !tbaa !11
>   %9 = load double*, double** %sigzz, align 8, !tbaa !41
>   %10 = load double*, double** %sigyy, align 8, !tbaa !41
>   %11 = load double*, double** %sigxx, align 8, !tbaa !41
>   %12 = sext i32 %6 to i64
>   %13 = icmp sgt i32 %cond, %6
>   %smax = select i1 %13, i32 %cond, i32 %6
>   %14 = add i32 %smax, 1
>   %15 = sub i32 %14, %6
>   %16 = sub i32 %smax, %6
>   %xtraiter = and i32 %15, 3
>   %lcmp.mod.not = icmp eq i32 %xtraiter, 0
>   br i1 %lcmp.mod.not, label %omp.inner.for.body.prol.loopexit, label %omp.inner.for.body.prol
> 
> omp.inner.for.body.prol:                          ; preds = %omp.inner.for.body.lr.ph, %omp.inner.for.body.prol
>   %indvars.iv.prol = phi i64 [ %indvars.iv.next.prol, %omp.inner.for.body.prol ], [ %12, %omp.inner.for.body.lr.ph ]
>   %prol.iter = phi i32 [ %prol.iter.sub, %omp.inner.for.body.prol ], [ %xtraiter, %omp.inner.for.body.lr.ph ]
>   %add.ptr.i.i.prol = getelementptr inbounds double, double* %7, i64 %indvars.iv.prol
>   %17 = load double, double* %add.ptr.i.i.prol, align 8, !tbaa !2
>   %fneg.prol = fneg double %17
>   %add.ptr.i.i33.prol = getelementptr inbounds double, double* %8, i64 %indvars.iv.prol
>   %18 = load double, double* %add.ptr.i.i33.prol, align 8, !tbaa !2
>   %sub9.prol = fsub double %fneg.prol, %18
>   %arrayidx.prol = getelementptr inbounds double, double* %9, i64 %indvars.iv.prol
>   store double %sub9.prol, double* %arrayidx.prol, align 8, !tbaa !2
>   %arrayidx11.prol = getelementptr inbounds double, double* %10, i64 %indvars.iv.prol
>   store double %sub9.prol, double* %arrayidx11.prol, align 8, !tbaa !2
>   %arrayidx13.prol = getelementptr inbounds double, double* %11, i64 %indvars.iv.prol
>   store double %sub9.prol, double* %arrayidx13.prol, align 8, !tbaa !2
>   %indvars.iv.next.prol = add nsw i64 %indvars.iv.prol, 1
>   %prol.iter.sub = add i32 %prol.iter, -1
>   %prol.iter.cmp.not = icmp eq i32 %prol.iter.sub, 0
>   br i1 %prol.iter.cmp.not, label %omp.inner.for.body.prol.loopexit, label %omp.inner.for.body.prol, !llvm.loop !80
> 
> omp.inner.for.body.prol.loopexit:                 ; preds = %omp.inner.for.body.prol, %omp.inner.for.body.lr.ph
>   %indvars.iv.unr = phi i64 [ %12, %omp.inner.for.body.lr.ph ], [ %indvars.iv.next.prol, %omp.inner.for.body.prol ]
>   %19 = icmp ult i32 %16, 3
>   br i1 %19, label %omp.loop.exit, label %omp.inner.for.body
> 
> omp.inner.for.body:                               ; preds = %omp.inner.for.body.prol.loopexit, %omp.inner.for.body
>   %indvars.iv = phi i64 [ %indvars.iv.next.3, %omp.inner.for.body ], [ %indvars.iv.unr, %omp.inner.for.body.prol.loopexit ]
>   %add.ptr.i.i = getelementptr inbounds double, double* %7, i64 %indvars.iv
>   %20 = load double, double* %add.ptr.i.i, align 8, !tbaa !2
>   %fneg = fneg double %20
>   %add.ptr.i.i33 = getelementptr inbounds double, double* %8, i64 %indvars.iv
>   %21 = load double, double* %add.ptr.i.i33, align 8, !tbaa !2
>   %sub9 = fsub double %fneg, %21
>   %arrayidx = getelementptr inbounds double, double* %9, i64 %indvars.iv
>   store double %sub9, double* %arrayidx, align 8, !tbaa !2
>   %arrayidx11 = getelementptr inbounds double, double* %10, i64 %indvars.iv
>   store double %sub9, double* %arrayidx11, align 8, !tbaa !2
>   %arrayidx13 = getelementptr inbounds double, double* %11, i64 %indvars.iv
>   store double %sub9, double* %arrayidx13, align 8, !tbaa !2
>   %indvars.iv.next = add nsw i64 %indvars.iv, 1
>   %add.ptr.i.i.1 = getelementptr inbounds double, double* %7, i64 %indvars.iv.next
>   %22 = load double, double* %add.ptr.i.i.1, align 8, !tbaa !2
>   %fneg.1 = fneg double %22
>   %add.ptr.i.i33.1 = getelementptr inbounds double, double* %8, i64 %indvars.iv.next
>   %23 = load double, double* %add.ptr.i.i33.1, align 8, !tbaa !2
>   %sub9.1 = fsub double %fneg.1, %23
>   %arrayidx.1 = getelementptr inbounds double, double* %9, i64 %indvars.iv.next
>   store double %sub9.1, double* %arrayidx.1, align 8, !tbaa !2
>   %arrayidx11.1 = getelementptr inbounds double, double* %10, i64 %indvars.iv.next
>   store double %sub9.1, double* %arrayidx11.1, align 8, !tbaa !2
>   %arrayidx13.1 = getelementptr inbounds double, double* %11, i64 %indvars.iv.next
>   store double %sub9.1, double* %arrayidx13.1, align 8, !tbaa !2
>   %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
>   %add.ptr.i.i.2 = getelementptr inbounds double, double* %7, i64 %indvars.iv.next.1
>   %24 = load double, double* %add.ptr.i.i.2, align 8, !tbaa !2
>   %fneg.2 = fneg double %24
>   %add.ptr.i.i33.2 = getelementptr inbounds double, double* %8, i64 %indvars.iv.next.1
>   %25 = load double, double* %add.ptr.i.i33.2, align 8, !tbaa !2
>   %sub9.2 = fsub double %fneg.2, %25
>   %arrayidx.2 = getelementptr inbounds double, double* %9, i64 %indvars.iv.next.1
>   store double %sub9.2, double* %arrayidx.2, align 8, !tbaa !2
>   %arrayidx11.2 = getelementptr inbounds double, double* %10, i64 %indvars.iv.next.1
>   store double %sub9.2, double* %arrayidx11.2, align 8, !tbaa !2
>   %arrayidx13.2 = getelementptr inbounds double, double* %11, i64 %indvars.iv.next.1
>   store double %sub9.2, double* %arrayidx13.2, align 8, !tbaa !2
>   %indvars.iv.next.2 = add nsw i64 %indvars.iv, 3
>   %add.ptr.i.i.3 = getelementptr inbounds double, double* %7, i64 %indvars.iv.next.2
>   %26 = load double, double* %add.ptr.i.i.3, align 8, !tbaa !2
>   %fneg.3 = fneg double %26
>   %add.ptr.i.i33.3 = getelementptr inbounds double, double* %8, i64 %indvars.iv.next.2
>   %27 = load double, double* %add.ptr.i.i33.3, align 8, !tbaa !2
>   %sub9.3 = fsub double %fneg.3, %27
>   %arrayidx.3 = getelementptr inbounds double, double* %9, i64 %indvars.iv.next.2
>   store double %sub9.3, double* %arrayidx.3, align 8, !tbaa !2
>   %arrayidx11.3 = getelementptr inbounds double, double* %10, i64 %indvars.iv.next.2
>   store double %sub9.3, double* %arrayidx11.3, align 8, !tbaa !2
>   %arrayidx13.3 = getelementptr inbounds double, double* %11, i64 %indvars.iv.next.2
>   store double %sub9.3, double* %arrayidx13.3, align 8, !tbaa !2
>   %indvars.iv.next.3 = add nsw i64 %indvars.iv, 4
>   %lftr.wideiv.3 = trunc i64 %indvars.iv.next.3 to i32
>   %exitcond.not.3 = icmp eq i32 %14, %lftr.wideiv.3
>   br i1 %exitcond.not.3, label %omp.loop.exit, label %omp.inner.for.body
> 
> omp.loop.exit:                                    ; preds = %omp.inner.for.body.prol.loopexit, %omp.inner.for.body, %omp.precond.then
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %4)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #7
>   br label %omp.precond.end
8445c4674
< 85:                                               ; preds = %82
---
> omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
8447,8453d4675
< 
< 86:                                               ; preds = %82, %7
<   %87 = landingpad { i8*, i32 }
<           catch i8* null
<   %88 = extractvalue { i8*, i32 } %87, 0
<   call void @__clang_call_terminate(i8* %88) #29
<   unreachable
8457,9581c4679,5926
< define internal void @.omp_outlined..27(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, i32* nocapture nonnull readonly align 4 dereferenceable(4) %2, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %3, double** nocapture nonnull readonly align 8 dereferenceable(8) %4, i32* nocapture nonnull readonly align 4 dereferenceable(4) %5, double** nocapture nonnull readonly align 8 dereferenceable(8) %6, double** nocapture nonnull readonly align 8 dereferenceable(8) %7, double** nocapture nonnull readonly align 8 dereferenceable(8) %8, double** nocapture nonnull readonly align 8 dereferenceable(8) %9, double** nocapture nonnull readonly align 8 dereferenceable(8) %10, double** nocapture nonnull readonly align 8 dereferenceable(8) %11, [8 x double]* nocapture nonnull align 8 dereferenceable(64) %12, [8 x double]* nocapture nonnull align 8 dereferenceable(64) %13, [8 x double]* nocapture nonnull align 8 dereferenceable(64) %14, i32* nocapture nonnull readonly align 4 dereferenceable(4) %15) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %17 = alloca i32, align 4
<   %18 = alloca i32, align 4
<   %19 = alloca i32, align 4
<   %20 = alloca i32, align 4
<   %21 = alloca [3 x [8 x double]], align 16
<   %22 = alloca [8 x double], align 16
<   %23 = alloca [8 x double], align 16
<   %24 = alloca [8 x double], align 16
<   %25 = alloca i32, align 4
<   %26 = alloca i32, align 4
<   %27 = alloca i32, align 4
<   %28 = alloca i32, align 4
<   %29 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL23IntegrateStressForElemsR6DomainPdS1_S1_S1_iiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %29)
<           to label %30 unwind label %939
< 
< 30:                                               ; preds = %16
<   %31 = load i32, i32* %2, align 4, !tbaa !12
<   %32 = add nsw i32 %31, -1
<   %33 = icmp sgt i32 %31, 0
<   br i1 %33, label %36, label %34
< 
< 34:                                               ; preds = %30
<   %35 = load i32, i32* %0, align 4, !tbaa !12
<   br label %817
< 
< 36:                                               ; preds = %30
<   %37 = bitcast i32* %17 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %37) #10
<   store i32 0, i32* %17, align 4, !tbaa !12
<   %38 = bitcast i32* %18 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %38) #10
<   store i32 %32, i32* %18, align 4, !tbaa !12
<   %39 = bitcast i32* %19 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %39) #10
<   store i32 1, i32* %19, align 4, !tbaa !12
<   %40 = bitcast i32* %20 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %40) #10
<   store i32 0, i32* %20, align 4, !tbaa !12
<   %41 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %41, i32 34, i32* nonnull %20, i32* nonnull %17, i32* nonnull %18, i32* nonnull %19, i32 1, i32 1) #10
<   %42 = load i32, i32* %18, align 4, !tbaa !12
<   %43 = icmp slt i32 %42, %31
<   %44 = select i1 %43, i32 %42, i32 %32
<   store i32 %44, i32* %18, align 4, !tbaa !12
<   %45 = load i32, i32* %17, align 4, !tbaa !12
<   %46 = icmp sgt i32 %45, %44
<   br i1 %46, label %815, label %47
< 
< 47:                                               ; preds = %36
<   %48 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 21, i32 0, i32 0, i32 0
<   %49 = bitcast [3 x [8 x double]]* %21 to i8*
<   %50 = bitcast [8 x double]* %22 to i8*
<   %51 = bitcast [8 x double]* %23 to i8*
<   %52 = bitcast [8 x double]* %24 to i8*
<   %53 = getelementptr inbounds [8 x double], [8 x double]* %22, i64 0, i64 0
<   %54 = getelementptr inbounds [8 x double], [8 x double]* %23, i64 0, i64 0
<   %55 = getelementptr inbounds [8 x double], [8 x double]* %24, i64 0, i64 0
<   %56 = getelementptr %class.Domain, %class.Domain* %3, i64 0, i32 0, i32 0, i32 0, i32 0
<   %57 = getelementptr %class.Domain, %class.Domain* %3, i64 0, i32 1, i32 0, i32 0, i32 0
<   %58 = getelementptr %class.Domain, %class.Domain* %3, i64 0, i32 2, i32 0, i32 0, i32 0
<   %59 = getelementptr inbounds [8 x double], [8 x double]* %22, i64 0, i64 1
<   %60 = getelementptr inbounds [8 x double], [8 x double]* %22, i64 0, i64 2
<   %61 = getelementptr inbounds [8 x double], [8 x double]* %22, i64 0, i64 3
<   %62 = getelementptr inbounds [8 x double], [8 x double]* %22, i64 0, i64 4
<   %63 = getelementptr inbounds [8 x double], [8 x double]* %22, i64 0, i64 5
<   %64 = getelementptr inbounds [8 x double], [8 x double]* %22, i64 0, i64 6
<   %65 = getelementptr inbounds [8 x double], [8 x double]* %22, i64 0, i64 7
<   %66 = getelementptr inbounds [8 x double], [8 x double]* %23, i64 0, i64 1
<   %67 = getelementptr inbounds [8 x double], [8 x double]* %23, i64 0, i64 2
<   %68 = getelementptr inbounds [8 x double], [8 x double]* %23, i64 0, i64 3
<   %69 = getelementptr inbounds [8 x double], [8 x double]* %23, i64 0, i64 4
<   %70 = getelementptr inbounds [8 x double], [8 x double]* %23, i64 0, i64 5
<   %71 = getelementptr inbounds [8 x double], [8 x double]* %23, i64 0, i64 6
<   %72 = getelementptr inbounds [8 x double], [8 x double]* %23, i64 0, i64 7
<   %73 = getelementptr inbounds [8 x double], [8 x double]* %24, i64 0, i64 1
<   %74 = getelementptr inbounds [8 x double], [8 x double]* %24, i64 0, i64 2
<   %75 = getelementptr inbounds [8 x double], [8 x double]* %24, i64 0, i64 3
<   %76 = getelementptr inbounds [8 x double], [8 x double]* %24, i64 0, i64 4
<   %77 = getelementptr inbounds [8 x double], [8 x double]* %24, i64 0, i64 5
<   %78 = getelementptr inbounds [8 x double], [8 x double]* %24, i64 0, i64 6
<   %79 = getelementptr inbounds [8 x double], [8 x double]* %24, i64 0, i64 7
<   %80 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %21, i64 0, i64 0
<   %81 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %21, i64 0, i64 1, i64 0
<   %82 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %21, i64 0, i64 2, i64 0
<   %83 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %21, i64 0, i64 0, i64 1
<   %84 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %21, i64 0, i64 1, i64 1
<   %85 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %21, i64 0, i64 2, i64 1
<   %86 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %21, i64 0, i64 0, i64 2
<   %87 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %21, i64 0, i64 1, i64 2
<   %88 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %21, i64 0, i64 2, i64 2
<   %89 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %21, i64 0, i64 0, i64 3
<   %90 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %21, i64 0, i64 1, i64 3
<   %91 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %21, i64 0, i64 2, i64 3
<   %92 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %21, i64 0, i64 0, i64 4
<   %93 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %21, i64 0, i64 1, i64 4
<   %94 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %21, i64 0, i64 2, i64 4
<   %95 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %21, i64 0, i64 0, i64 5
<   %96 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %21, i64 0, i64 1, i64 5
<   %97 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %21, i64 0, i64 2, i64 5
<   %98 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %21, i64 0, i64 0, i64 6
<   %99 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %21, i64 0, i64 1, i64 6
<   %100 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %21, i64 0, i64 2, i64 6
<   %101 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %21, i64 0, i64 0, i64 7
<   %102 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %21, i64 0, i64 1, i64 7
<   %103 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %21, i64 0, i64 2, i64 7
<   %104 = getelementptr inbounds [8 x double], [8 x double]* %12, i64 0, i64 0
<   %105 = getelementptr inbounds [8 x double], [8 x double]* %13, i64 0, i64 0
<   %106 = getelementptr inbounds [8 x double], [8 x double]* %14, i64 0, i64 0
<   %107 = getelementptr inbounds [8 x double], [8 x double]* %12, i64 0, i64 1
<   %108 = getelementptr inbounds [8 x double], [8 x double]* %13, i64 0, i64 1
<   %109 = getelementptr inbounds [8 x double], [8 x double]* %14, i64 0, i64 1
<   %110 = getelementptr inbounds [8 x double], [8 x double]* %12, i64 0, i64 2
<   %111 = getelementptr inbounds [8 x double], [8 x double]* %13, i64 0, i64 2
<   %112 = getelementptr inbounds [8 x double], [8 x double]* %14, i64 0, i64 2
<   %113 = getelementptr inbounds [8 x double], [8 x double]* %12, i64 0, i64 3
<   %114 = getelementptr inbounds [8 x double], [8 x double]* %13, i64 0, i64 3
<   %115 = getelementptr inbounds [8 x double], [8 x double]* %14, i64 0, i64 3
<   %116 = getelementptr inbounds [8 x double], [8 x double]* %12, i64 0, i64 4
<   %117 = getelementptr inbounds [8 x double], [8 x double]* %13, i64 0, i64 4
<   %118 = getelementptr inbounds [8 x double], [8 x double]* %14, i64 0, i64 4
<   %119 = getelementptr inbounds [8 x double], [8 x double]* %12, i64 0, i64 5
<   %120 = getelementptr inbounds [8 x double], [8 x double]* %13, i64 0, i64 5
<   %121 = getelementptr inbounds [8 x double], [8 x double]* %14, i64 0, i64 5
<   %122 = getelementptr inbounds [8 x double], [8 x double]* %12, i64 0, i64 6
<   %123 = getelementptr inbounds [8 x double], [8 x double]* %13, i64 0, i64 6
<   %124 = getelementptr inbounds [8 x double], [8 x double]* %14, i64 0, i64 6
<   %125 = getelementptr inbounds [8 x double], [8 x double]* %12, i64 0, i64 7
<   %126 = getelementptr inbounds [8 x double], [8 x double]* %13, i64 0, i64 7
<   %127 = getelementptr inbounds [8 x double], [8 x double]* %14, i64 0, i64 7
<   %128 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 9, i32 0, i32 0, i32 0
<   %129 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 10, i32 0, i32 0, i32 0
<   %130 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 11, i32 0, i32 0, i32 0
<   %131 = sext i32 %45 to i64
<   %132 = bitcast double* %86 to <2 x double>*
<   %133 = bitcast [3 x [8 x double]]* %21 to <2 x double>*
<   %134 = bitcast double* %87 to <2 x double>*
<   %135 = bitcast double* %81 to <2 x double>*
<   %136 = bitcast double* %88 to <2 x double>*
<   %137 = bitcast double* %82 to <2 x double>*
<   %138 = bitcast double* %98 to <2 x double>*
<   %139 = bitcast double* %92 to <2 x double>*
<   %140 = bitcast double* %99 to <2 x double>*
<   %141 = bitcast double* %93 to <2 x double>*
<   %142 = bitcast double* %100 to <2 x double>*
<   %143 = bitcast double* %94 to <2 x double>*
<   br label %144
< 
< 144:                                              ; preds = %47, %807
<   %145 = phi i64 [ %131, %47 ], [ %808, %807 ]
<   %146 = phi i32 [ %45, %47 ], [ %809, %807 ]
<   %147 = shl nsw i32 %146, 3
<   %148 = sext i32 %147 to i64
<   %149 = load i32*, i32** %48, align 8, !tbaa !19
<   %150 = getelementptr inbounds i32, i32* %149, i64 %148
<   call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %49) #10
<   call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %50) #10
<   call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %51) #10
<   call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %52) #10
<   %151 = load double*, double** %56, align 8, !tbaa !22
<   %152 = load double*, double** %57, align 8, !tbaa !22
<   %153 = load double*, double** %58, align 8, !tbaa !22
<   %154 = load i32, i32* %150, align 4, !tbaa !12
<   %155 = getelementptr inbounds i32, i32* %150, i64 1
<   %156 = load i32, i32* %155, align 4, !tbaa !12
<   %157 = getelementptr inbounds i32, i32* %150, i64 2
<   %158 = load i32, i32* %157, align 4, !tbaa !12
<   %159 = getelementptr inbounds i32, i32* %150, i64 3
<   %160 = load i32, i32* %159, align 4, !tbaa !12
<   %161 = getelementptr inbounds i32, i32* %150, i64 4
<   %162 = load i32, i32* %161, align 4, !tbaa !12
<   %163 = getelementptr inbounds i32, i32* %150, i64 5
<   %164 = load i32, i32* %163, align 4, !tbaa !12
<   %165 = getelementptr inbounds i32, i32* %150, i64 6
<   %166 = load i32, i32* %165, align 4, !tbaa !12
<   %167 = getelementptr inbounds i32, i32* %150, i64 7
<   %168 = load i32, i32* %167, align 4, !tbaa !12
<   %169 = sext i32 %154 to i64
<   %170 = getelementptr inbounds double, double* %151, i64 %169
<   %171 = load double, double* %170, align 8, !tbaa !2
<   store double %171, double* %53, align 16, !tbaa !2
<   %172 = sext i32 %156 to i64
<   %173 = getelementptr inbounds double, double* %151, i64 %172
<   %174 = load double, double* %173, align 8, !tbaa !2
<   store double %174, double* %59, align 8, !tbaa !2
<   %175 = sext i32 %158 to i64
<   %176 = getelementptr inbounds double, double* %151, i64 %175
<   %177 = load double, double* %176, align 8, !tbaa !2
<   store double %177, double* %60, align 16, !tbaa !2
<   %178 = sext i32 %160 to i64
<   %179 = getelementptr inbounds double, double* %151, i64 %178
<   %180 = load double, double* %179, align 8, !tbaa !2
<   store double %180, double* %61, align 8, !tbaa !2
<   %181 = sext i32 %162 to i64
<   %182 = getelementptr inbounds double, double* %151, i64 %181
<   %183 = load double, double* %182, align 8, !tbaa !2
<   store double %183, double* %62, align 16, !tbaa !2
<   %184 = sext i32 %164 to i64
<   %185 = getelementptr inbounds double, double* %151, i64 %184
<   %186 = load double, double* %185, align 8, !tbaa !2
<   store double %186, double* %63, align 8, !tbaa !2
<   %187 = sext i32 %166 to i64
<   %188 = getelementptr inbounds double, double* %151, i64 %187
<   %189 = load double, double* %188, align 8, !tbaa !2
<   store double %189, double* %64, align 16, !tbaa !2
<   %190 = sext i32 %168 to i64
<   %191 = getelementptr inbounds double, double* %151, i64 %190
<   %192 = load double, double* %191, align 8, !tbaa !2
<   store double %192, double* %65, align 8, !tbaa !2
<   %193 = getelementptr inbounds double, double* %152, i64 %169
<   %194 = load double, double* %193, align 8, !tbaa !2
<   store double %194, double* %54, align 16, !tbaa !2
<   %195 = getelementptr inbounds double, double* %152, i64 %172
<   %196 = load double, double* %195, align 8, !tbaa !2
<   store double %196, double* %66, align 8, !tbaa !2
<   %197 = getelementptr inbounds double, double* %152, i64 %175
<   %198 = load double, double* %197, align 8, !tbaa !2
<   store double %198, double* %67, align 16, !tbaa !2
<   %199 = getelementptr inbounds double, double* %152, i64 %178
<   %200 = load double, double* %199, align 8, !tbaa !2
<   store double %200, double* %68, align 8, !tbaa !2
<   %201 = getelementptr inbounds double, double* %152, i64 %181
<   %202 = load double, double* %201, align 8, !tbaa !2
<   store double %202, double* %69, align 16, !tbaa !2
<   %203 = getelementptr inbounds double, double* %152, i64 %184
<   %204 = load double, double* %203, align 8, !tbaa !2
<   store double %204, double* %70, align 8, !tbaa !2
<   %205 = getelementptr inbounds double, double* %152, i64 %187
<   %206 = load double, double* %205, align 8, !tbaa !2
<   store double %206, double* %71, align 16, !tbaa !2
<   %207 = getelementptr inbounds double, double* %152, i64 %190
<   %208 = load double, double* %207, align 8, !tbaa !2
<   store double %208, double* %72, align 8, !tbaa !2
<   %209 = getelementptr inbounds double, double* %153, i64 %169
<   %210 = load double, double* %209, align 8, !tbaa !2
<   store double %210, double* %55, align 16, !tbaa !2
<   %211 = getelementptr inbounds double, double* %153, i64 %172
<   %212 = load double, double* %211, align 8, !tbaa !2
<   store double %212, double* %73, align 8, !tbaa !2
<   %213 = getelementptr inbounds double, double* %153, i64 %175
<   %214 = load double, double* %213, align 8, !tbaa !2
<   store double %214, double* %74, align 16, !tbaa !2
<   %215 = getelementptr inbounds double, double* %153, i64 %178
<   %216 = load double, double* %215, align 8, !tbaa !2
<   store double %216, double* %75, align 8, !tbaa !2
<   %217 = getelementptr inbounds double, double* %153, i64 %181
<   %218 = load double, double* %217, align 8, !tbaa !2
<   store double %218, double* %76, align 16, !tbaa !2
<   %219 = getelementptr inbounds double, double* %153, i64 %184
<   %220 = load double, double* %219, align 8, !tbaa !2
<   store double %220, double* %77, align 8, !tbaa !2
<   %221 = getelementptr inbounds double, double* %153, i64 %187
<   %222 = load double, double* %221, align 8, !tbaa !2
<   store double %222, double* %78, align 16, !tbaa !2
<   %223 = getelementptr inbounds double, double* %153, i64 %190
<   %224 = load double, double* %223, align 8, !tbaa !2
<   store double %224, double* %79, align 8, !tbaa !2
<   %225 = load double*, double** %4, align 8, !tbaa !6
<   %226 = getelementptr inbounds double, double* %225, i64 %145
<   call fastcc void @_ZL32CalcElemShapeFunctionDerivativesPKdS0_S0_PA8_dPd(double* nonnull %53, double* nonnull %54, double* nonnull %55, [8 x double]* nonnull %80, double* %226)
<   %227 = fadd double %177, %180
<   %228 = fsub double %227, %174
<   %229 = fsub double %228, %171
<   %230 = fmul double %229, 5.000000e-01
<   %231 = fadd double %198, %200
<   %232 = fsub double %231, %196
<   %233 = fsub double %232, %194
<   %234 = fmul double %233, 5.000000e-01
<   %235 = fadd double %214, %216
<   %236 = fsub double %235, %212
<   %237 = fsub double %236, %210
<   %238 = fmul double %237, 5.000000e-01
<   %239 = fadd double %174, %177
<   %240 = fsub double %239, %180
<   %241 = fsub double %240, %171
<   %242 = fmul double %241, 5.000000e-01
<   %243 = fadd double %196, %198
<   %244 = fsub double %243, %200
<   %245 = fsub double %244, %194
<   %246 = fmul double %245, 5.000000e-01
<   %247 = fadd double %212, %214
<   %248 = fsub double %247, %216
<   %249 = fsub double %248, %210
<   %250 = fmul double %249, 5.000000e-01
<   %251 = fmul double %234, %250
<   %252 = fmul double %246, %238
<   %253 = fsub double %251, %252
<   %254 = fmul double %253, 2.500000e-01
<   %255 = fmul double %242, %238
<   %256 = fmul double %230, %250
<   %257 = fsub double %255, %256
<   %258 = fmul double %257, 2.500000e-01
<   %259 = fmul double %230, %246
<   %260 = fmul double %242, %234
<   %261 = fsub double %259, %260
<   %262 = fmul double %261, 2.500000e-01
<   %263 = fadd double %254, 0.000000e+00
<   %264 = fadd double %258, 0.000000e+00
<   %265 = fadd double %262, 0.000000e+00
<   %266 = fadd double %174, %186
<   %267 = fsub double %266, %183
<   %268 = fsub double %267, %171
<   %269 = fmul double %268, 5.000000e-01
<   %270 = fadd double %196, %204
<   %271 = fsub double %270, %202
<   %272 = fsub double %271, %194
<   %273 = fmul double %272, 5.000000e-01
<   %274 = fadd double %212, %220
<   %275 = fsub double %274, %218
<   %276 = fsub double %275, %210
<   %277 = fmul double %276, 5.000000e-01
<   %278 = fadd double %183, %186
<   %279 = fsub double %278, %174
<   %280 = fsub double %279, %171
<   %281 = fmul double %280, 5.000000e-01
<   %282 = fadd double %202, %204
<   %283 = fsub double %282, %196
<   %284 = fsub double %283, %194
<   %285 = fmul double %284, 5.000000e-01
<   %286 = fadd double %218, %220
<   %287 = fsub double %286, %212
<   %288 = fsub double %287, %210
<   %289 = fmul double %288, 5.000000e-01
<   %290 = fmul double %273, %289
<   %291 = fmul double %285, %277
<   %292 = fsub double %290, %291
<   %293 = fmul double %292, 2.500000e-01
<   %294 = fmul double %281, %277
<   %295 = fmul double %269, %289
<   %296 = fsub double %294, %295
<   %297 = fmul double %296, 2.500000e-01
<   %298 = fmul double %269, %285
<   %299 = fmul double %281, %273
<   %300 = fsub double %298, %299
<   %301 = fmul double %300, 2.500000e-01
<   %302 = fadd double %263, %293
<   %303 = fadd double %293, 0.000000e+00
<   %304 = fadd double %264, %297
<   %305 = fadd double %297, 0.000000e+00
<   %306 = fadd double %265, %301
<   %307 = fadd double %301, 0.000000e+00
<   %308 = insertelement <2 x double> poison, double %210, i32 0
<   %309 = insertelement <2 x double> %308, double %214, i32 1
<   %310 = insertelement <2 x double> poison, double %218, i32 0
<   %311 = insertelement <2 x double> %310, double %222, i32 1
<   %312 = fadd <2 x double> %309, %311
<   %313 = insertelement <2 x double> poison, double %224, i32 0
<   %314 = insertelement <2 x double> %313, double %220, i32 1
<   %315 = fsub <2 x double> %312, %314
<   %316 = insertelement <2 x double> poison, double %216, i32 0
<   %317 = insertelement <2 x double> %316, double %212, i32 1
<   %318 = fsub <2 x double> %315, %317
<   %319 = fmul <2 x double> %318, <double 5.000000e-01, double 5.000000e-01>
<   %320 = insertelement <2 x double> %310, double %220, i32 1
<   %321 = insertelement <2 x double> %313, double %222, i32 1
<   %322 = fadd <2 x double> %320, %321
<   %323 = fsub <2 x double> %322, %309
<   %324 = fsub <2 x double> %323, %317
<   %325 = fmul <2 x double> %324, <double 5.000000e-01, double 5.000000e-01>
<   %326 = insertelement <2 x double> poison, double %202, i32 0
<   %327 = insertelement <2 x double> %326, double %204, i32 1
<   %328 = insertelement <2 x double> poison, double %208, i32 0
<   %329 = insertelement <2 x double> %328, double %206, i32 1
<   %330 = fadd <2 x double> %327, %329
<   %331 = insertelement <2 x double> poison, double %194, i32 0
<   %332 = insertelement <2 x double> %331, double %198, i32 1
<   %333 = fsub <2 x double> %330, %332
<   %334 = insertelement <2 x double> poison, double %200, i32 0
<   %335 = insertelement <2 x double> %334, double %196, i32 1
<   %336 = fsub <2 x double> %333, %335
<   %337 = fmul <2 x double> %336, <double 5.000000e-01, double 5.000000e-01>
<   %338 = insertelement <2 x double> poison, double %171, i32 0
<   %339 = insertelement <2 x double> %338, double %177, i32 1
<   %340 = insertelement <2 x double> poison, double %183, i32 0
<   %341 = insertelement <2 x double> %340, double %189, i32 1
<   %342 = fadd <2 x double> %339, %341
<   %343 = insertelement <2 x double> poison, double %192, i32 0
<   %344 = insertelement <2 x double> %343, double %186, i32 1
<   %345 = fsub <2 x double> %342, %344
<   %346 = insertelement <2 x double> poison, double %180, i32 0
<   %347 = insertelement <2 x double> %346, double %174, i32 1
<   %348 = fsub <2 x double> %345, %347
<   %349 = fmul <2 x double> %348, <double 5.000000e-01, double 5.000000e-01>
<   %350 = insertelement <2 x double> %326, double %206, i32 1
<   %351 = fadd <2 x double> %332, %350
<   %352 = insertelement <2 x double> %328, double %204, i32 1
<   %353 = fsub <2 x double> %351, %352
<   %354 = fsub <2 x double> %353, %335
<   %355 = fmul <2 x double> %354, <double 5.000000e-01, double 5.000000e-01>
<   %356 = insertelement <2 x double> %340, double %186, i32 1
<   %357 = insertelement <2 x double> %343, double %189, i32 1
<   %358 = fadd <2 x double> %356, %357
<   %359 = fsub <2 x double> %358, %339
<   %360 = fsub <2 x double> %359, %347
<   %361 = fmul <2 x double> %360, <double 5.000000e-01, double 5.000000e-01>
<   %362 = fmul <2 x double> %355, %325
<   %363 = fmul <2 x double> %337, %319
<   %364 = fsub <2 x double> %362, %363
<   %365 = fmul <2 x double> %364, <double 2.500000e-01, double 2.500000e-01>
<   %366 = extractelement <2 x double> %365, i32 1
<   %367 = fmul <2 x double> %361, %319
<   %368 = fmul <2 x double> %349, %325
<   %369 = fsub <2 x double> %367, %368
<   %370 = fmul <2 x double> %369, <double 2.500000e-01, double 2.500000e-01>
<   %371 = extractelement <2 x double> %370, i32 1
<   %372 = fmul <2 x double> %349, %337
<   %373 = fmul <2 x double> %361, %355
<   %374 = fsub <2 x double> %372, %373
<   %375 = fmul <2 x double> %374, <double 2.500000e-01, double 2.500000e-01>
<   %376 = extractelement <2 x double> %375, i32 1
<   %377 = fadd double %180, %192
<   %378 = fsub double %377, %189
<   %379 = fsub double %378, %177
<   %380 = fmul double %379, 5.000000e-01
<   %381 = fadd double %200, %208
<   %382 = fsub double %381, %206
<   %383 = fsub double %382, %198
<   %384 = fmul double %383, 5.000000e-01
<   %385 = fadd double %216, %224
<   %386 = fsub double %385, %222
<   %387 = fsub double %386, %214
<   %388 = fmul double %387, 5.000000e-01
<   %389 = fadd double %189, %192
<   %390 = fsub double %389, %180
<   %391 = fsub double %390, %177
<   %392 = fmul double %391, 5.000000e-01
<   %393 = fadd double %206, %208
<   %394 = fsub double %393, %200
<   %395 = fsub double %394, %198
<   %396 = fmul double %395, 5.000000e-01
<   %397 = fadd double %222, %224
<   %398 = fsub double %397, %216
<   %399 = fsub double %398, %214
<   %400 = fmul double %399, 5.000000e-01
<   %401 = fmul double %384, %400
<   %402 = fmul double %396, %388
<   %403 = fsub double %401, %402
<   %404 = fmul double %403, 2.500000e-01
<   %405 = fmul double %392, %388
<   %406 = fmul double %380, %400
<   %407 = fsub double %405, %406
<   %408 = fmul double %407, 2.500000e-01
<   %409 = fmul double %380, %396
<   %410 = fmul double %392, %384
<   %411 = fsub double %409, %410
<   %412 = fmul double %411, 2.500000e-01
<   %413 = insertelement <2 x double> poison, double %366, i32 0
<   %414 = insertelement <2 x double> %413, double %404, i32 1
<   %415 = fadd <2 x double> %414, zeroinitializer
<   %416 = insertelement <2 x double> poison, double %263, i32 0
<   %417 = shufflevector <2 x double> %416, <2 x double> undef, <2 x i32> zeroinitializer
<   %418 = fadd <2 x double> %417, %414
<   %419 = insertelement <2 x double> poison, double %371, i32 0
<   %420 = insertelement <2 x double> %419, double %408, i32 1
<   %421 = fadd <2 x double> %420, zeroinitializer
<   %422 = insertelement <2 x double> poison, double %264, i32 0
<   %423 = shufflevector <2 x double> %422, <2 x double> undef, <2 x i32> zeroinitializer
<   %424 = fadd <2 x double> %423, %420
<   %425 = insertelement <2 x double> poison, double %376, i32 0
<   %426 = insertelement <2 x double> %425, double %412, i32 1
<   %427 = fadd <2 x double> %426, zeroinitializer
<   %428 = insertelement <2 x double> poison, double %265, i32 0
<   %429 = shufflevector <2 x double> %428, <2 x double> undef, <2 x i32> zeroinitializer
<   %430 = fadd <2 x double> %429, %426
<   %431 = insertelement <2 x double> poison, double %404, i32 0
<   %432 = shufflevector <2 x double> %431, <2 x double> %365, <2 x i32> <i32 0, i32 2>
<   %433 = fadd <2 x double> %418, %432
<   store <2 x double> %433, <2 x double>* %132, align 16, !tbaa !2
<   %434 = fadd <2 x double> %415, %432
<   %435 = insertelement <2 x double> poison, double %303, i32 0
<   %436 = shufflevector <2 x double> %435, <2 x double> undef, <2 x i32> zeroinitializer
<   %437 = fadd <2 x double> %436, %365
<   %438 = insertelement <2 x double> poison, double %302, i32 0
<   %439 = shufflevector <2 x double> %438, <2 x double> undef, <2 x i32> zeroinitializer
<   %440 = fadd <2 x double> %439, %365
<   store <2 x double> %440, <2 x double>* %133, align 16, !tbaa !2
<   %441 = insertelement <2 x double> poison, double %408, i32 0
<   %442 = shufflevector <2 x double> %441, <2 x double> %370, <2 x i32> <i32 0, i32 2>
<   %443 = fadd <2 x double> %424, %442
<   store <2 x double> %443, <2 x double>* %134, align 16, !tbaa !2
<   %444 = fadd <2 x double> %421, %442
<   %445 = insertelement <2 x double> poison, double %305, i32 0
<   %446 = shufflevector <2 x double> %445, <2 x double> undef, <2 x i32> zeroinitializer
<   %447 = fadd <2 x double> %446, %370
<   %448 = insertelement <2 x double> poison, double %304, i32 0
<   %449 = shufflevector <2 x double> %448, <2 x double> undef, <2 x i32> zeroinitializer
<   %450 = fadd <2 x double> %449, %370
<   store <2 x double> %450, <2 x double>* %135, align 16, !tbaa !2
<   %451 = insertelement <2 x double> poison, double %412, i32 0
<   %452 = shufflevector <2 x double> %451, <2 x double> %375, <2 x i32> <i32 0, i32 2>
<   %453 = fadd <2 x double> %430, %452
<   store <2 x double> %453, <2 x double>* %136, align 16, !tbaa !2
<   %454 = fadd <2 x double> %427, %452
<   %455 = insertelement <2 x double> poison, double %307, i32 0
<   %456 = shufflevector <2 x double> %455, <2 x double> undef, <2 x i32> zeroinitializer
<   %457 = fadd <2 x double> %456, %375
<   %458 = insertelement <2 x double> poison, double %306, i32 0
<   %459 = shufflevector <2 x double> %458, <2 x double> undef, <2 x i32> zeroinitializer
<   %460 = fadd <2 x double> %459, %375
<   store <2 x double> %460, <2 x double>* %137, align 16, !tbaa !2
<   %461 = load double, double* %65, align 8, !tbaa !2
<   %462 = extractelement <2 x double> %358, i32 1
<   %463 = fsub double %462, %461
<   %464 = fsub double %463, %183
<   %465 = fmul double %464, 5.000000e-01
<   %466 = extractelement <2 x double> %330, i32 1
<   %467 = fsub double %466, %208
<   %468 = fsub double %467, %202
<   %469 = fmul double %468, 5.000000e-01
<   %470 = extractelement <2 x double> %322, i32 1
<   %471 = fsub double %470, %224
<   %472 = fsub double %471, %218
<   %473 = fmul double %472, 5.000000e-01
<   %474 = fadd double %189, %461
<   %475 = fsub double %474, %186
<   %476 = fsub double %475, %183
<   %477 = fmul double %476, 5.000000e-01
<   %478 = fsub double %393, %204
<   %479 = fsub double %478, %202
<   %480 = fmul double %479, 5.000000e-01
<   %481 = fsub double %397, %220
<   %482 = fsub double %481, %218
<   %483 = fmul double %482, 5.000000e-01
<   %484 = fmul double %469, %483
<   %485 = fmul double %480, %473
<   %486 = fsub double %484, %485
<   %487 = fmul double %486, 2.500000e-01
<   %488 = fmul double %473, %477
<   %489 = fmul double %483, %465
<   %490 = fsub double %488, %489
<   %491 = fmul double %490, 2.500000e-01
<   %492 = fmul double %480, %465
<   %493 = fmul double %469, %477
<   %494 = fsub double %492, %493
<   %495 = fmul double %494, 2.500000e-01
<   %496 = insertelement <2 x double> poison, double %487, i32 0
<   %497 = shufflevector <2 x double> %496, <2 x double> undef, <2 x i32> zeroinitializer
<   %498 = fadd <2 x double> %497, %434
<   store <2 x double> %498, <2 x double>* %138, align 16, !tbaa !2
<   %499 = fadd <2 x double> %497, %437
<   store <2 x double> %499, <2 x double>* %139, align 16, !tbaa !2
<   %500 = insertelement <2 x double> poison, double %491, i32 0
<   %501 = shufflevector <2 x double> %500, <2 x double> undef, <2 x i32> zeroinitializer
<   %502 = fadd <2 x double> %444, %501
<   store <2 x double> %502, <2 x double>* %140, align 16, !tbaa !2
<   %503 = fadd <2 x double> %447, %501
<   store <2 x double> %503, <2 x double>* %141, align 16, !tbaa !2
<   %504 = insertelement <2 x double> poison, double %495, i32 0
<   %505 = shufflevector <2 x double> %504, <2 x double> undef, <2 x i32> zeroinitializer
<   %506 = fadd <2 x double> %454, %505
<   store <2 x double> %506, <2 x double>* %142, align 16, !tbaa !2
<   %507 = fadd <2 x double> %457, %505
<   store <2 x double> %507, <2 x double>* %143, align 16, !tbaa !2
<   %508 = load i32, i32* %5, align 4, !tbaa !12
<   %509 = icmp sgt i32 %508, 1
<   %510 = load double*, double** %6, align 8, !tbaa !6
<   %511 = getelementptr inbounds double, double* %510, i64 %145
<   %512 = load double, double* %511, align 8, !tbaa !2
<   %513 = load double*, double** %7, align 8, !tbaa !6
<   %514 = getelementptr inbounds double, double* %513, i64 %145
<   %515 = load double, double* %514, align 8, !tbaa !2
<   %516 = load double*, double** %8, align 8, !tbaa !6
<   %517 = getelementptr inbounds double, double* %516, i64 %145
<   %518 = load double, double* %517, align 8, !tbaa !2
<   br i1 %509, label %519, label %619
< 
< 519:                                              ; preds = %144
<   %520 = load double*, double** %9, align 8, !tbaa !6
<   %521 = getelementptr inbounds double, double* %520, i64 %148
<   %522 = load double*, double** %10, align 8, !tbaa !6
<   %523 = getelementptr inbounds double, double* %522, i64 %148
<   %524 = load double*, double** %11, align 8, !tbaa !6
<   %525 = getelementptr inbounds double, double* %524, i64 %148
<   %526 = extractelement <2 x double> %440, i32 0
<   %527 = fneg double %526
<   %528 = fmul double %512, %527
<   store double %528, double* %521, align 8, !tbaa !2
<   %529 = load double, double* %81, align 16, !tbaa !2
<   %530 = fneg double %529
<   %531 = fmul double %515, %530
<   store double %531, double* %523, align 8, !tbaa !2
<   %532 = load double, double* %82, align 16, !tbaa !2
<   %533 = fneg double %532
<   %534 = fmul double %518, %533
<   store double %534, double* %525, align 8, !tbaa !2
<   %535 = load double, double* %83, align 8, !tbaa !2
<   %536 = fneg double %535
<   %537 = fmul double %512, %536
<   %538 = getelementptr inbounds double, double* %521, i64 1
<   store double %537, double* %538, align 8, !tbaa !2
<   %539 = load double, double* %84, align 8, !tbaa !2
<   %540 = fneg double %539
<   %541 = fmul double %515, %540
<   %542 = getelementptr inbounds double, double* %523, i64 1
<   store double %541, double* %542, align 8, !tbaa !2
<   %543 = load double, double* %85, align 8, !tbaa !2
<   %544 = fneg double %543
<   %545 = fmul double %518, %544
<   %546 = getelementptr inbounds double, double* %525, i64 1
<   store double %545, double* %546, align 8, !tbaa !2
<   %547 = load double, double* %86, align 16, !tbaa !2
<   %548 = fneg double %547
<   %549 = fmul double %512, %548
<   %550 = getelementptr inbounds double, double* %521, i64 2
<   store double %549, double* %550, align 8, !tbaa !2
<   %551 = load double, double* %87, align 16, !tbaa !2
<   %552 = fneg double %551
<   %553 = fmul double %515, %552
<   %554 = getelementptr inbounds double, double* %523, i64 2
<   store double %553, double* %554, align 8, !tbaa !2
<   %555 = load double, double* %88, align 16, !tbaa !2
<   %556 = fneg double %555
<   %557 = fmul double %518, %556
<   %558 = getelementptr inbounds double, double* %525, i64 2
<   store double %557, double* %558, align 8, !tbaa !2
<   %559 = load double, double* %89, align 8, !tbaa !2
<   %560 = fneg double %559
<   %561 = fmul double %512, %560
<   %562 = getelementptr inbounds double, double* %521, i64 3
<   store double %561, double* %562, align 8, !tbaa !2
<   %563 = load double, double* %90, align 8, !tbaa !2
<   %564 = fneg double %563
<   %565 = fmul double %515, %564
<   %566 = getelementptr inbounds double, double* %523, i64 3
<   store double %565, double* %566, align 8, !tbaa !2
<   %567 = load double, double* %91, align 8, !tbaa !2
<   %568 = fneg double %567
<   %569 = fmul double %518, %568
<   %570 = getelementptr inbounds double, double* %525, i64 3
<   store double %569, double* %570, align 8, !tbaa !2
<   %571 = load double, double* %92, align 16, !tbaa !2
<   %572 = fneg double %571
<   %573 = fmul double %512, %572
<   %574 = getelementptr inbounds double, double* %521, i64 4
<   store double %573, double* %574, align 8, !tbaa !2
<   %575 = load double, double* %93, align 16, !tbaa !2
<   %576 = fneg double %575
<   %577 = fmul double %515, %576
<   %578 = getelementptr inbounds double, double* %523, i64 4
<   store double %577, double* %578, align 8, !tbaa !2
<   %579 = load double, double* %94, align 16, !tbaa !2
<   %580 = fneg double %579
<   %581 = fmul double %518, %580
<   %582 = getelementptr inbounds double, double* %525, i64 4
<   store double %581, double* %582, align 8, !tbaa !2
<   %583 = load double, double* %95, align 8, !tbaa !2
<   %584 = fneg double %583
<   %585 = fmul double %512, %584
<   %586 = getelementptr inbounds double, double* %521, i64 5
<   store double %585, double* %586, align 8, !tbaa !2
<   %587 = load double, double* %96, align 8, !tbaa !2
<   %588 = fneg double %587
<   %589 = fmul double %515, %588
<   %590 = getelementptr inbounds double, double* %523, i64 5
<   store double %589, double* %590, align 8, !tbaa !2
<   %591 = load double, double* %97, align 8, !tbaa !2
<   %592 = fneg double %591
<   %593 = fmul double %518, %592
<   %594 = getelementptr inbounds double, double* %525, i64 5
<   store double %593, double* %594, align 8, !tbaa !2
<   %595 = load double, double* %98, align 16, !tbaa !2
<   %596 = fneg double %595
<   %597 = fmul double %512, %596
<   %598 = getelementptr inbounds double, double* %521, i64 6
<   store double %597, double* %598, align 8, !tbaa !2
<   %599 = load double, double* %99, align 16, !tbaa !2
<   %600 = fneg double %599
<   %601 = fmul double %515, %600
<   %602 = getelementptr inbounds double, double* %523, i64 6
<   store double %601, double* %602, align 8, !tbaa !2
<   %603 = load double, double* %100, align 16, !tbaa !2
<   %604 = fneg double %603
<   %605 = fmul double %518, %604
<   %606 = getelementptr inbounds double, double* %525, i64 6
<   store double %605, double* %606, align 8, !tbaa !2
<   %607 = load double, double* %101, align 8, !tbaa !2
<   %608 = fneg double %607
<   %609 = fmul double %512, %608
<   %610 = getelementptr inbounds double, double* %521, i64 7
<   store double %609, double* %610, align 8, !tbaa !2
<   %611 = load double, double* %102, align 8, !tbaa !2
<   %612 = fneg double %611
<   %613 = fmul double %515, %612
<   %614 = getelementptr inbounds double, double* %523, i64 7
<   store double %613, double* %614, align 8, !tbaa !2
<   %615 = load double, double* %103, align 8, !tbaa !2
<   %616 = fneg double %615
<   %617 = fmul double %518, %616
<   %618 = getelementptr inbounds double, double* %525, i64 7
<   store double %617, double* %618, align 8, !tbaa !2
<   br label %807
< 
< 619:                                              ; preds = %144
<   %620 = extractelement <2 x double> %440, i32 0
<   %621 = fneg double %620
<   %622 = fmul double %512, %621
<   store double %622, double* %104, align 8, !tbaa !2
<   %623 = extractelement <2 x double> %450, i32 0
<   %624 = fneg double %623
<   %625 = fmul double %515, %624
<   store double %625, double* %105, align 8, !tbaa !2
<   %626 = extractelement <2 x double> %460, i32 0
<   %627 = fneg double %626
<   %628 = fmul double %518, %627
<   store double %628, double* %106, align 8, !tbaa !2
<   %629 = load double, double* %83, align 8, !tbaa !2
<   %630 = fneg double %629
<   %631 = fmul double %512, %630
<   store double %631, double* %107, align 8, !tbaa !2
<   %632 = load double, double* %84, align 8, !tbaa !2
<   %633 = fneg double %632
<   %634 = fmul double %515, %633
<   store double %634, double* %108, align 8, !tbaa !2
<   %635 = load double, double* %85, align 8, !tbaa !2
<   %636 = fneg double %635
<   %637 = fmul double %518, %636
<   store double %637, double* %109, align 8, !tbaa !2
<   %638 = load double, double* %86, align 16, !tbaa !2
<   %639 = fneg double %638
<   %640 = fmul double %512, %639
<   store double %640, double* %110, align 8, !tbaa !2
<   %641 = load double, double* %87, align 16, !tbaa !2
<   %642 = fneg double %641
<   %643 = fmul double %515, %642
<   store double %643, double* %111, align 8, !tbaa !2
<   %644 = load double, double* %88, align 16, !tbaa !2
<   %645 = fneg double %644
<   %646 = fmul double %518, %645
<   store double %646, double* %112, align 8, !tbaa !2
<   %647 = extractelement <2 x double> %433, i32 1
<   %648 = fneg double %647
<   %649 = fmul double %512, %648
<   store double %649, double* %113, align 8, !tbaa !2
<   %650 = extractelement <2 x double> %443, i32 1
<   %651 = fneg double %650
<   %652 = fmul double %515, %651
<   store double %652, double* %114, align 8, !tbaa !2
<   %653 = extractelement <2 x double> %453, i32 1
<   %654 = fneg double %653
<   %655 = fmul double %518, %654
<   store double %655, double* %115, align 8, !tbaa !2
<   %656 = extractelement <2 x double> %499, i32 0
<   %657 = fneg double %656
<   %658 = fmul double %512, %657
<   store double %658, double* %116, align 8, !tbaa !2
<   %659 = extractelement <2 x double> %503, i32 0
<   %660 = fneg double %659
<   %661 = fmul double %515, %660
<   store double %661, double* %117, align 8, !tbaa !2
<   %662 = extractelement <2 x double> %507, i32 0
<   %663 = fneg double %662
<   %664 = fmul double %518, %663
<   store double %664, double* %118, align 8, !tbaa !2
<   %665 = extractelement <2 x double> %499, i32 1
<   %666 = fneg double %665
<   %667 = fmul double %512, %666
<   store double %667, double* %119, align 8, !tbaa !2
<   %668 = extractelement <2 x double> %503, i32 1
<   %669 = fneg double %668
<   %670 = fmul double %515, %669
<   store double %670, double* %120, align 8, !tbaa !2
<   %671 = extractelement <2 x double> %507, i32 1
<   %672 = fneg double %671
<   %673 = fmul double %518, %672
<   store double %673, double* %121, align 8, !tbaa !2
<   %674 = extractelement <2 x double> %498, i32 0
<   %675 = fneg double %674
<   %676 = fmul double %512, %675
<   store double %676, double* %122, align 8, !tbaa !2
<   %677 = extractelement <2 x double> %502, i32 0
<   %678 = fneg double %677
<   %679 = fmul double %515, %678
<   store double %679, double* %123, align 8, !tbaa !2
<   %680 = extractelement <2 x double> %506, i32 0
<   %681 = fneg double %680
<   %682 = fmul double %518, %681
<   store double %682, double* %124, align 8, !tbaa !2
<   %683 = extractelement <2 x double> %498, i32 1
<   %684 = fneg double %683
<   %685 = fmul double %512, %684
<   store double %685, double* %125, align 8, !tbaa !2
<   %686 = extractelement <2 x double> %502, i32 1
<   %687 = fneg double %686
<   %688 = fmul double %515, %687
<   store double %688, double* %126, align 8, !tbaa !2
<   %689 = extractelement <2 x double> %506, i32 1
<   %690 = fneg double %689
<   %691 = fmul double %518, %690
<   store double %691, double* %127, align 8, !tbaa !2
<   %692 = load double*, double** %128, align 8, !tbaa !22
<   %693 = load double*, double** %129, align 8, !tbaa !22
<   %694 = load double*, double** %130, align 8, !tbaa !22
<   %695 = load i32, i32* %150, align 4, !tbaa !12
<   %696 = load double, double* %104, align 8, !tbaa !2
<   %697 = sext i32 %695 to i64
<   %698 = getelementptr inbounds double, double* %692, i64 %697
<   %699 = load double, double* %698, align 8, !tbaa !2
<   %700 = fadd double %696, %699
<   store double %700, double* %698, align 8, !tbaa !2
<   %701 = load double, double* %105, align 8, !tbaa !2
<   %702 = getelementptr inbounds double, double* %693, i64 %697
<   %703 = load double, double* %702, align 8, !tbaa !2
<   %704 = fadd double %701, %703
<   store double %704, double* %702, align 8, !tbaa !2
<   %705 = load double, double* %106, align 8, !tbaa !2
<   %706 = getelementptr inbounds double, double* %694, i64 %697
<   %707 = load double, double* %706, align 8, !tbaa !2
<   %708 = fadd double %705, %707
<   store double %708, double* %706, align 8, !tbaa !2
<   %709 = load i32, i32* %155, align 4, !tbaa !12
<   %710 = load double, double* %107, align 8, !tbaa !2
<   %711 = sext i32 %709 to i64
<   %712 = getelementptr inbounds double, double* %692, i64 %711
<   %713 = load double, double* %712, align 8, !tbaa !2
<   %714 = fadd double %710, %713
<   store double %714, double* %712, align 8, !tbaa !2
<   %715 = load double, double* %108, align 8, !tbaa !2
<   %716 = getelementptr inbounds double, double* %693, i64 %711
<   %717 = load double, double* %716, align 8, !tbaa !2
<   %718 = fadd double %715, %717
<   store double %718, double* %716, align 8, !tbaa !2
<   %719 = load double, double* %109, align 8, !tbaa !2
<   %720 = getelementptr inbounds double, double* %694, i64 %711
<   %721 = load double, double* %720, align 8, !tbaa !2
<   %722 = fadd double %719, %721
<   store double %722, double* %720, align 8, !tbaa !2
<   %723 = load i32, i32* %157, align 4, !tbaa !12
<   %724 = load double, double* %110, align 8, !tbaa !2
<   %725 = sext i32 %723 to i64
<   %726 = getelementptr inbounds double, double* %692, i64 %725
<   %727 = load double, double* %726, align 8, !tbaa !2
<   %728 = fadd double %724, %727
<   store double %728, double* %726, align 8, !tbaa !2
<   %729 = load double, double* %111, align 8, !tbaa !2
<   %730 = getelementptr inbounds double, double* %693, i64 %725
<   %731 = load double, double* %730, align 8, !tbaa !2
<   %732 = fadd double %729, %731
<   store double %732, double* %730, align 8, !tbaa !2
<   %733 = load double, double* %112, align 8, !tbaa !2
<   %734 = getelementptr inbounds double, double* %694, i64 %725
<   %735 = load double, double* %734, align 8, !tbaa !2
<   %736 = fadd double %733, %735
<   store double %736, double* %734, align 8, !tbaa !2
<   %737 = load i32, i32* %159, align 4, !tbaa !12
<   %738 = load double, double* %113, align 8, !tbaa !2
<   %739 = sext i32 %737 to i64
<   %740 = getelementptr inbounds double, double* %692, i64 %739
<   %741 = load double, double* %740, align 8, !tbaa !2
<   %742 = fadd double %738, %741
<   store double %742, double* %740, align 8, !tbaa !2
<   %743 = load double, double* %114, align 8, !tbaa !2
<   %744 = getelementptr inbounds double, double* %693, i64 %739
<   %745 = load double, double* %744, align 8, !tbaa !2
<   %746 = fadd double %743, %745
<   store double %746, double* %744, align 8, !tbaa !2
<   %747 = load double, double* %115, align 8, !tbaa !2
<   %748 = getelementptr inbounds double, double* %694, i64 %739
<   %749 = load double, double* %748, align 8, !tbaa !2
<   %750 = fadd double %747, %749
<   store double %750, double* %748, align 8, !tbaa !2
<   %751 = load i32, i32* %161, align 4, !tbaa !12
<   %752 = load double, double* %116, align 8, !tbaa !2
<   %753 = sext i32 %751 to i64
<   %754 = getelementptr inbounds double, double* %692, i64 %753
<   %755 = load double, double* %754, align 8, !tbaa !2
<   %756 = fadd double %752, %755
<   store double %756, double* %754, align 8, !tbaa !2
<   %757 = load double, double* %117, align 8, !tbaa !2
<   %758 = getelementptr inbounds double, double* %693, i64 %753
<   %759 = load double, double* %758, align 8, !tbaa !2
<   %760 = fadd double %757, %759
<   store double %760, double* %758, align 8, !tbaa !2
<   %761 = load double, double* %118, align 8, !tbaa !2
<   %762 = getelementptr inbounds double, double* %694, i64 %753
<   %763 = load double, double* %762, align 8, !tbaa !2
<   %764 = fadd double %761, %763
<   store double %764, double* %762, align 8, !tbaa !2
<   %765 = load i32, i32* %163, align 4, !tbaa !12
<   %766 = load double, double* %119, align 8, !tbaa !2
<   %767 = sext i32 %765 to i64
<   %768 = getelementptr inbounds double, double* %692, i64 %767
<   %769 = load double, double* %768, align 8, !tbaa !2
<   %770 = fadd double %766, %769
<   store double %770, double* %768, align 8, !tbaa !2
<   %771 = load double, double* %120, align 8, !tbaa !2
<   %772 = getelementptr inbounds double, double* %693, i64 %767
<   %773 = load double, double* %772, align 8, !tbaa !2
<   %774 = fadd double %771, %773
<   store double %774, double* %772, align 8, !tbaa !2
<   %775 = load double, double* %121, align 8, !tbaa !2
<   %776 = getelementptr inbounds double, double* %694, i64 %767
<   %777 = load double, double* %776, align 8, !tbaa !2
<   %778 = fadd double %775, %777
<   store double %778, double* %776, align 8, !tbaa !2
<   %779 = load i32, i32* %165, align 4, !tbaa !12
<   %780 = load double, double* %122, align 8, !tbaa !2
<   %781 = sext i32 %779 to i64
<   %782 = getelementptr inbounds double, double* %692, i64 %781
<   %783 = load double, double* %782, align 8, !tbaa !2
<   %784 = fadd double %780, %783
<   store double %784, double* %782, align 8, !tbaa !2
<   %785 = load double, double* %123, align 8, !tbaa !2
<   %786 = getelementptr inbounds double, double* %693, i64 %781
<   %787 = load double, double* %786, align 8, !tbaa !2
<   %788 = fadd double %785, %787
<   store double %788, double* %786, align 8, !tbaa !2
<   %789 = load double, double* %124, align 8, !tbaa !2
<   %790 = getelementptr inbounds double, double* %694, i64 %781
<   %791 = load double, double* %790, align 8, !tbaa !2
<   %792 = fadd double %789, %791
<   store double %792, double* %790, align 8, !tbaa !2
<   %793 = load i32, i32* %167, align 4, !tbaa !12
<   %794 = load double, double* %125, align 8, !tbaa !2
<   %795 = sext i32 %793 to i64
<   %796 = getelementptr inbounds double, double* %692, i64 %795
<   %797 = load double, double* %796, align 8, !tbaa !2
<   %798 = fadd double %794, %797
<   store double %798, double* %796, align 8, !tbaa !2
<   %799 = load double, double* %126, align 8, !tbaa !2
<   %800 = getelementptr inbounds double, double* %693, i64 %795
<   %801 = load double, double* %800, align 8, !tbaa !2
<   %802 = fadd double %799, %801
<   store double %802, double* %800, align 8, !tbaa !2
<   %803 = load double, double* %127, align 8, !tbaa !2
<   %804 = getelementptr inbounds double, double* %694, i64 %795
<   %805 = load double, double* %804, align 8, !tbaa !2
<   %806 = fadd double %803, %805
<   store double %806, double* %804, align 8, !tbaa !2
<   br label %807
< 
< 807:                                              ; preds = %619, %519
<   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %52) #10
<   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %51) #10
<   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %50) #10
<   call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %49) #10
<   %808 = add nsw i64 %145, 1
<   %809 = add nsw i32 %146, 1
<   %810 = load i32, i32* %18, align 4, !tbaa !12
<   %811 = sext i32 %810 to i64
<   %812 = icmp slt i64 %145, %811
<   br i1 %812, label %144, label %813
< 
< 813:                                              ; preds = %807
<   %814 = load i32, i32* %0, align 4, !tbaa !12
<   br label %815
< 
< 815:                                              ; preds = %813, %36
<   %816 = phi i32 [ %814, %813 ], [ %41, %36 ]
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %816)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %40) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %39) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %38) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %37) #10
<   br label %817
< 
< 817:                                              ; preds = %34, %815
<   %818 = phi i32 [ %35, %34 ], [ %816, %815 ]
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %818)
<   %819 = load i32, i32* %5, align 4, !tbaa !12
<   %820 = icmp sgt i32 %819, 1
<   br i1 %820, label %821, label %936
< 
< 821:                                              ; preds = %817
<   %822 = load i32, i32* %15, align 4, !tbaa !12
<   %823 = add nsw i32 %822, -1
<   %824 = icmp sgt i32 %822, 0
<   br i1 %824, label %825, label %935
< 
< 825:                                              ; preds = %821
<   %826 = bitcast i32* %25 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %826) #10
<   store i32 0, i32* %25, align 4, !tbaa !12
<   %827 = bitcast i32* %26 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %827) #10
<   store i32 %823, i32* %26, align 4, !tbaa !12
<   %828 = bitcast i32* %27 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %828) #10
<   store i32 1, i32* %27, align 4, !tbaa !12
<   %829 = bitcast i32* %28 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %829) #10
<   store i32 0, i32* %28, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %818, i32 34, i32* nonnull %28, i32* nonnull %25, i32* nonnull %26, i32* nonnull %27, i32 1, i32 1) #10
<   %830 = load i32, i32* %26, align 4, !tbaa !12
<   %831 = icmp slt i32 %830, %822
<   %832 = select i1 %831, i32 %830, i32 %823
<   store i32 %832, i32* %26, align 4, !tbaa !12
<   %833 = load i32, i32* %25, align 4, !tbaa !12
<   %834 = icmp sgt i32 %833, %832
<   br i1 %834, label %934, label %835
< 
< 835:                                              ; preds = %825
<   %836 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 92
<   %837 = load i32*, i32** %836, align 8, !tbaa !97
<   %838 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 93
<   %839 = load i32*, i32** %838, align 8, !tbaa !98
<   %840 = load double*, double** %9, align 8
<   %841 = load double*, double** %10, align 8
<   %842 = load double*, double** %11, align 8
<   %843 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 9, i32 0, i32 0, i32 0
<   %844 = load double*, double** %843, align 8, !tbaa !22
<   %845 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 10, i32 0, i32 0, i32 0
<   %846 = load double*, double** %845, align 8, !tbaa !22
<   %847 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 11, i32 0, i32 0, i32 0
<   %848 = load double*, double** %847, align 8, !tbaa !22
<   %849 = sext i32 %833 to i64
<   %850 = add i32 %832, 1
<   %851 = sext i32 %850 to i64
<   %852 = getelementptr inbounds i32, i32* %837, i64 %849
<   %853 = load i32, i32* %852, align 4, !tbaa !12
<   br label %854
< 
< 854:                                              ; preds = %835, %892
<   %855 = phi i32 [ %853, %835 ], [ %859, %892 ]
<   %856 = phi i64 [ %849, %835 ], [ %857, %892 ]
<   %857 = add nsw i64 %856, 1
<   %858 = getelementptr inbounds i32, i32* %837, i64 %857
<   %859 = load i32, i32* %858, align 4, !tbaa !12
<   %860 = sub i32 %859, %855
<   %861 = sext i32 %855 to i64
<   %862 = getelementptr inbounds i32, i32* %839, i64 %861
<   %863 = icmp sgt i32 %860, 0
<   br i1 %863, label %864, label %892
< 
< 864:                                              ; preds = %854
<   %865 = zext i32 %860 to i64
<   %866 = and i64 %865, 1
<   %867 = icmp eq i32 %860, 1
<   br i1 %867, label %870, label %868
< 
< 868:                                              ; preds = %864
<   %869 = and i64 %865, 4294967294
<   br label %900
< 
< 870:                                              ; preds = %900, %864
<   %871 = phi double [ undef, %864 ], [ %924, %900 ]
<   %872 = phi double [ undef, %864 ], [ %927, %900 ]
<   %873 = phi double [ undef, %864 ], [ %930, %900 ]
<   %874 = phi i64 [ 0, %864 ], [ %931, %900 ]
<   %875 = phi double [ 0.000000e+00, %864 ], [ %930, %900 ]
<   %876 = phi double [ 0.000000e+00, %864 ], [ %927, %900 ]
<   %877 = phi double [ 0.000000e+00, %864 ], [ %924, %900 ]
<   %878 = icmp eq i64 %866, 0
<   br i1 %878, label %892, label %879
< 
< 879:                                              ; preds = %870
<   %880 = getelementptr inbounds i32, i32* %862, i64 %874
<   %881 = load i32, i32* %880, align 4, !tbaa !12
<   %882 = sext i32 %881 to i64
<   %883 = getelementptr inbounds double, double* %842, i64 %882
<   %884 = load double, double* %883, align 8, !tbaa !2
<   %885 = fadd double %875, %884
<   %886 = getelementptr inbounds double, double* %841, i64 %882
<   %887 = load double, double* %886, align 8, !tbaa !2
<   %888 = fadd double %876, %887
<   %889 = getelementptr inbounds double, double* %840, i64 %882
<   %890 = load double, double* %889, align 8, !tbaa !2
<   %891 = fadd double %877, %890
<   br label %892
< 
< 892:                                              ; preds = %879, %870, %854
<   %893 = phi double [ 0.000000e+00, %854 ], [ %871, %870 ], [ %891, %879 ]
<   %894 = phi double [ 0.000000e+00, %854 ], [ %872, %870 ], [ %888, %879 ]
<   %895 = phi double [ 0.000000e+00, %854 ], [ %873, %870 ], [ %885, %879 ]
<   %896 = getelementptr inbounds double, double* %844, i64 %856
<   store double %893, double* %896, align 8, !tbaa !2
<   %897 = getelementptr inbounds double, double* %846, i64 %856
<   store double %894, double* %897, align 8, !tbaa !2
<   %898 = getelementptr inbounds double, double* %848, i64 %856
<   store double %895, double* %898, align 8, !tbaa !2
<   %899 = icmp eq i64 %857, %851
<   br i1 %899, label %934, label %854
< 
< 900:                                              ; preds = %900, %868
<   %901 = phi i64 [ 0, %868 ], [ %931, %900 ]
<   %902 = phi double [ 0.000000e+00, %868 ], [ %930, %900 ]
<   %903 = phi double [ 0.000000e+00, %868 ], [ %927, %900 ]
<   %904 = phi double [ 0.000000e+00, %868 ], [ %924, %900 ]
<   %905 = phi i64 [ %869, %868 ], [ %932, %900 ]
<   %906 = getelementptr inbounds i32, i32* %862, i64 %901
<   %907 = load i32, i32* %906, align 4, !tbaa !12
<   %908 = sext i32 %907 to i64
<   %909 = getelementptr inbounds double, double* %840, i64 %908
<   %910 = load double, double* %909, align 8, !tbaa !2
<   %911 = fadd double %904, %910
<   %912 = getelementptr inbounds double, double* %841, i64 %908
<   %913 = load double, double* %912, align 8, !tbaa !2
<   %914 = fadd double %903, %913
<   %915 = getelementptr inbounds double, double* %842, i64 %908
<   %916 = load double, double* %915, align 8, !tbaa !2
<   %917 = fadd double %902, %916
<   %918 = or i64 %901, 1
<   %919 = getelementptr inbounds i32, i32* %862, i64 %918
<   %920 = load i32, i32* %919, align 4, !tbaa !12
<   %921 = sext i32 %920 to i64
<   %922 = getelementptr inbounds double, double* %840, i64 %921
<   %923 = load double, double* %922, align 8, !tbaa !2
<   %924 = fadd double %911, %923
<   %925 = getelementptr inbounds double, double* %841, i64 %921
<   %926 = load double, double* %925, align 8, !tbaa !2
<   %927 = fadd double %914, %926
<   %928 = getelementptr inbounds double, double* %842, i64 %921
<   %929 = load double, double* %928, align 8, !tbaa !2
<   %930 = fadd double %917, %929
<   %931 = add nuw nsw i64 %901, 2
<   %932 = add i64 %905, -2
<   %933 = icmp eq i64 %932, 0
<   br i1 %933, label %870, label %900, !llvm.loop !99
< 
< 934:                                              ; preds = %892, %825
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %818)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %829) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %828) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %827) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %826) #10
<   br label %935
< 
< 935:                                              ; preds = %934, %821
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %818)
<   br label %936
< 
< 936:                                              ; preds = %935, %817
<   %937 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL23IntegrateStressForElemsR6DomainPdS1_S1_S1_iiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %937)
<           to label %938 unwind label %939
---
> define internal void @.omp_outlined..22(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture nonnull align 4 dereferenceable(4) %numthreads, double** nocapture nonnull align 8 dereferenceable(8) %fx_elem, i32* nocapture nonnull readonly align 4 dereferenceable(4) %numElem8, double** nocapture nonnull align 8 dereferenceable(8) %fy_elem, double** nocapture nonnull align 8 dereferenceable(8) %fz_elem, i32* nocapture nonnull readonly align 4 dereferenceable(4) %numElem, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %domain, double** nocapture nonnull readonly align 8 dereferenceable(8) %determ, double** nocapture nonnull readonly align 8 dereferenceable(8) %sigxx, double** nocapture nonnull readonly align 8 dereferenceable(8) %sigyy, double** nocapture nonnull readonly align 8 dereferenceable(8) %sigzz, [8 x double]* nocapture nonnull align 8 dereferenceable(64) %fx_local, [8 x double]* nocapture nonnull align 8 dereferenceable(64) %fy_local, [8 x double]* nocapture nonnull align 8 dereferenceable(64) %fz_local, i32* nocapture nonnull readonly align 4 dereferenceable(4) %numNode) #6 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
> entry:
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %B = alloca [3 x [8 x double]], align 16
>   %x_local = alloca [8 x double], align 16
>   %y_local = alloca [8 x double], align 16
>   %z_local = alloca [8 x double], align 16
>   %.omp.lb94 = alloca i32, align 4
>   %.omp.ub95 = alloca i32, align 4
>   %.omp.stride96 = alloca i32, align 4
>   %.omp.is_last97 = alloca i32, align 4
>   %0 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   %1 = tail call i32 @__kmpc_master(%struct.ident_t* nonnull @1, i32 %0) #7
>   %.not = icmp eq i32 %1, 0
>   br i1 %.not, label %omp_if.end, label %invoke.cont
> 
> invoke.cont:                                      ; preds = %entry
>   %call = tail call i32 @omp_get_num_threads()
>   store i32 %call, i32* %numthreads, align 4, !tbaa !6
>   %cmp = icmp sgt i32 %call, 1
>   br i1 %cmp, label %if.then, label %if.end
> 
> if.then:                                          ; preds = %invoke.cont
>   %2 = load i32, i32* %numElem8, align 4, !tbaa !6
>   %conv = sext i32 %2 to i64
>   %mul.i = shl nsw i64 %conv, 3
>   %call.i = tail call noalias i8* @malloc(i64 %mul.i) #7
>   %3 = bitcast double** %fx_elem to i8**
>   store i8* %call.i, i8** %3, align 8, !tbaa !41
>   %call.i230 = tail call noalias i8* @malloc(i64 %mul.i) #7
>   %4 = bitcast double** %fy_elem to i8**
>   store i8* %call.i230, i8** %4, align 8, !tbaa !41
>   %call.i232 = tail call noalias i8* @malloc(i64 %mul.i) #7
>   %5 = bitcast double** %fz_elem to i8**
>   store i8* %call.i232, i8** %5, align 8, !tbaa !41
>   br label %if.end
> 
> if.end:                                           ; preds = %if.then, %invoke.cont
>   tail call void @__kmpc_end_master(%struct.ident_t* nonnull @1, i32 %0) #7
>   br label %omp_if.end
> 
> omp_if.end:                                       ; preds = %entry, %if.end
>   tail call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %0) #7
>   %6 = load i32, i32* %numElem, align 4, !tbaa !6
>   %sub9 = add nsw i32 %6, -1
>   %cmp10 = icmp sgt i32 %6, 0
>   br i1 %cmp10, label %omp.precond.then, label %omp.precond.end
> 
> omp.precond.then:                                 ; preds = %omp_if.end
>   %7 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %8 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #7
>   store i32 %sub9, i32* %.omp.ub, align 4, !tbaa !6
>   %9 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %10 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %0, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %11 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp13.not = icmp slt i32 %11, %6
>   %cond = select i1 %cmp13.not, i32 %11, i32 %sub9
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %12 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp14.not345 = icmp sgt i32 %12, %cond
>   br i1 %cmp14.not345, label %omp.loop.exit, label %invoke.cont33.lr.ph
> 
> invoke.cont33.lr.ph:                              ; preds = %omp.precond.then
>   %_M_start.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 21, i32 0, i32 0, i32 0, i32 0
>   %13 = bitcast [3 x [8 x double]]* %B to i8*
>   %14 = bitcast [8 x double]* %x_local to i8*
>   %15 = bitcast [8 x double]* %y_local to i8*
>   %16 = bitcast [8 x double]* %z_local to i8*
>   %arraydecay = getelementptr inbounds [8 x double], [8 x double]* %x_local, i64 0, i64 0
>   %arraydecay16 = getelementptr inbounds [8 x double], [8 x double]* %y_local, i64 0, i64 0
>   %arraydecay17 = getelementptr inbounds [8 x double], [8 x double]* %z_local, i64 0, i64 0
>   %domain.idx = getelementptr %class.Domain, %class.Domain* %domain, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
>   %domain.idx227 = getelementptr %class.Domain, %class.Domain* %domain, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
>   %domain.idx228 = getelementptr %class.Domain, %class.Domain* %domain, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
>   %17 = bitcast [8 x double]* %x_local to i64*
>   %arrayidx10.i = getelementptr inbounds [8 x double], [8 x double]* %x_local, i64 0, i64 1
>   %18 = bitcast double* %arrayidx10.i to i64*
>   %arrayidx12.i = getelementptr inbounds [8 x double], [8 x double]* %x_local, i64 0, i64 2
>   %19 = bitcast double* %arrayidx12.i to i64*
>   %arrayidx14.i = getelementptr inbounds [8 x double], [8 x double]* %x_local, i64 0, i64 3
>   %20 = bitcast double* %arrayidx14.i to i64*
>   %arrayidx16.i = getelementptr inbounds [8 x double], [8 x double]* %x_local, i64 0, i64 4
>   %21 = bitcast double* %arrayidx16.i to i64*
>   %arrayidx18.i = getelementptr inbounds [8 x double], [8 x double]* %x_local, i64 0, i64 5
>   %22 = bitcast double* %arrayidx18.i to i64*
>   %arrayidx20.i = getelementptr inbounds [8 x double], [8 x double]* %x_local, i64 0, i64 6
>   %23 = bitcast double* %arrayidx20.i to i64*
>   %arrayidx22.i = getelementptr inbounds [8 x double], [8 x double]* %x_local, i64 0, i64 7
>   %24 = bitcast double* %arrayidx22.i to i64*
>   %25 = bitcast [8 x double]* %y_local to i64*
>   %arrayidx26.i = getelementptr inbounds [8 x double], [8 x double]* %y_local, i64 0, i64 1
>   %26 = bitcast double* %arrayidx26.i to i64*
>   %arrayidx28.i = getelementptr inbounds [8 x double], [8 x double]* %y_local, i64 0, i64 2
>   %27 = bitcast double* %arrayidx28.i to i64*
>   %arrayidx30.i = getelementptr inbounds [8 x double], [8 x double]* %y_local, i64 0, i64 3
>   %28 = bitcast double* %arrayidx30.i to i64*
>   %arrayidx32.i = getelementptr inbounds [8 x double], [8 x double]* %y_local, i64 0, i64 4
>   %29 = bitcast double* %arrayidx32.i to i64*
>   %arrayidx34.i = getelementptr inbounds [8 x double], [8 x double]* %y_local, i64 0, i64 5
>   %30 = bitcast double* %arrayidx34.i to i64*
>   %arrayidx36.i = getelementptr inbounds [8 x double], [8 x double]* %y_local, i64 0, i64 6
>   %31 = bitcast double* %arrayidx36.i to i64*
>   %arrayidx38.i = getelementptr inbounds [8 x double], [8 x double]* %y_local, i64 0, i64 7
>   %32 = bitcast double* %arrayidx38.i to i64*
>   %33 = bitcast [8 x double]* %z_local to i64*
>   %arrayidx42.i = getelementptr inbounds [8 x double], [8 x double]* %z_local, i64 0, i64 1
>   %34 = bitcast double* %arrayidx42.i to i64*
>   %arrayidx44.i = getelementptr inbounds [8 x double], [8 x double]* %z_local, i64 0, i64 2
>   %35 = bitcast double* %arrayidx44.i to i64*
>   %arrayidx46.i = getelementptr inbounds [8 x double], [8 x double]* %z_local, i64 0, i64 3
>   %36 = bitcast double* %arrayidx46.i to i64*
>   %arrayidx48.i = getelementptr inbounds [8 x double], [8 x double]* %z_local, i64 0, i64 4
>   %37 = bitcast double* %arrayidx48.i to i64*
>   %arrayidx50.i = getelementptr inbounds [8 x double], [8 x double]* %z_local, i64 0, i64 5
>   %38 = bitcast double* %arrayidx50.i to i64*
>   %arrayidx52.i = getelementptr inbounds [8 x double], [8 x double]* %z_local, i64 0, i64 6
>   %39 = bitcast double* %arrayidx52.i to i64*
>   %arrayidx54.i = getelementptr inbounds [8 x double], [8 x double]* %z_local, i64 0, i64 7
>   %40 = bitcast double* %arrayidx54.i to i64*
>   %arraydecay23 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 0
>   %arraydecay25 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 0, i64 0
>   %arraydecay27 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 1, i64 0
>   %arraydecay29 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 2, i64 0
>   %arrayidx.1.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 0, i64 1
>   %arrayidx2.1.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 1, i64 1
>   %arrayidx4.1.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 2, i64 1
>   %arrayidx.2.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 0, i64 2
>   %arrayidx2.2.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 1, i64 2
>   %arrayidx4.2.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 2, i64 2
>   %arrayidx.3.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 0, i64 3
>   %arrayidx2.3.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 1, i64 3
>   %arrayidx4.3.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 2, i64 3
>   %arrayidx.4.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 0, i64 4
>   %arrayidx2.4.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 1, i64 4
>   %arrayidx4.4.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 2, i64 4
>   %arrayidx.5.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 0, i64 5
>   %arrayidx2.5.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 1, i64 5
>   %arrayidx4.5.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 2, i64 5
>   %arrayidx.6.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 0, i64 6
>   %arrayidx2.6.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 1, i64 6
>   %arrayidx4.6.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 2, i64 6
>   %arrayidx.7.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 0, i64 7
>   %arrayidx2.7.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 1, i64 7
>   %arrayidx4.7.i = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 2, i64 7
>   %arraydecay60 = getelementptr inbounds [8 x double], [8 x double]* %fx_local, i64 0, i64 0
>   %arraydecay61 = getelementptr inbounds [8 x double], [8 x double]* %fy_local, i64 0, i64 0
>   %arraydecay62 = getelementptr inbounds [8 x double], [8 x double]* %fz_local, i64 0, i64 0
>   %arrayidx3.1.i = getelementptr inbounds [8 x double], [8 x double]* %fx_local, i64 0, i64 1
>   %arrayidx10.1.i = getelementptr inbounds [8 x double], [8 x double]* %fy_local, i64 0, i64 1
>   %arrayidx17.1.i = getelementptr inbounds [8 x double], [8 x double]* %fz_local, i64 0, i64 1
>   %arrayidx3.2.i = getelementptr inbounds [8 x double], [8 x double]* %fx_local, i64 0, i64 2
>   %arrayidx10.2.i = getelementptr inbounds [8 x double], [8 x double]* %fy_local, i64 0, i64 2
>   %arrayidx17.2.i = getelementptr inbounds [8 x double], [8 x double]* %fz_local, i64 0, i64 2
>   %arrayidx3.3.i = getelementptr inbounds [8 x double], [8 x double]* %fx_local, i64 0, i64 3
>   %arrayidx10.3.i = getelementptr inbounds [8 x double], [8 x double]* %fy_local, i64 0, i64 3
>   %arrayidx17.3.i = getelementptr inbounds [8 x double], [8 x double]* %fz_local, i64 0, i64 3
>   %arrayidx3.4.i = getelementptr inbounds [8 x double], [8 x double]* %fx_local, i64 0, i64 4
>   %arrayidx10.4.i = getelementptr inbounds [8 x double], [8 x double]* %fy_local, i64 0, i64 4
>   %arrayidx17.4.i = getelementptr inbounds [8 x double], [8 x double]* %fz_local, i64 0, i64 4
>   %arrayidx3.5.i = getelementptr inbounds [8 x double], [8 x double]* %fx_local, i64 0, i64 5
>   %arrayidx10.5.i = getelementptr inbounds [8 x double], [8 x double]* %fy_local, i64 0, i64 5
>   %arrayidx17.5.i = getelementptr inbounds [8 x double], [8 x double]* %fz_local, i64 0, i64 5
>   %arrayidx3.6.i = getelementptr inbounds [8 x double], [8 x double]* %fx_local, i64 0, i64 6
>   %arrayidx10.6.i = getelementptr inbounds [8 x double], [8 x double]* %fy_local, i64 0, i64 6
>   %arrayidx17.6.i = getelementptr inbounds [8 x double], [8 x double]* %fz_local, i64 0, i64 6
>   %arrayidx3.7.i = getelementptr inbounds [8 x double], [8 x double]* %fx_local, i64 0, i64 7
>   %arrayidx10.7.i = getelementptr inbounds [8 x double], [8 x double]* %fy_local, i64 0, i64 7
>   %arrayidx17.7.i = getelementptr inbounds [8 x double], [8 x double]* %fz_local, i64 0, i64 7
>   %_M_start.i.i255 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 9, i32 0, i32 0, i32 0, i32 0
>   %_M_start.i.i252 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 10, i32 0, i32 0, i32 0, i32 0
>   %_M_start.i.i249 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 11, i32 0, i32 0, i32 0, i32 0
>   %41 = sext i32 %12 to i64
>   %42 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i64 0, i64 0, i64 4
>   %43 = bitcast double* %42 to i8*
>   %44 = bitcast double* %arrayidx10.i to <2 x double>*
>   %45 = bitcast double* %arrayidx34.i to <2 x double>*
>   %46 = bitcast double* %arrayidx50.i to <2 x double>*
>   %47 = bitcast double* %arrayidx.3.i to <2 x double>*
>   %48 = bitcast double* %arrayidx4.3.i to <2 x double>*
>   %49 = bitcast double* %arrayidx20.i to <2 x double>*
>   %50 = bitcast double* %arrayidx.5.i to <2 x double>*
>   %51 = bitcast double* %arrayidx4.5.i to <2 x double>*
>   br label %invoke.cont33
> 
> invoke.cont33:                                    ; preds = %if.end79, %invoke.cont33.lr.ph
>   %indvars.iv354 = phi i64 [ %indvars.iv.next355, %if.end79 ], [ %41, %invoke.cont33.lr.ph ]
>   %.omp.iv.0346 = phi i32 [ %add80, %if.end79 ], [ %12, %invoke.cont33.lr.ph ]
>   %mul.i233 = shl nsw i32 %.omp.iv.0346, 3
>   %conv.i = sext i32 %mul.i233 to i64
>   %52 = load i32*, i32** %_M_start.i.i, align 8, !tbaa !8
>   %add.ptr.i.i = getelementptr inbounds i32, i32* %52, i64 %conv.i
>   call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %13) #7
>   call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %14) #7
>   call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %15) #7
>   call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %16) #7
>   %domain.idx.val = load double*, double** %domain.idx, align 8, !tbaa !11
>   %domain.idx227.val = load double*, double** %domain.idx227, align 8, !tbaa !11
>   %domain.idx228.val = load double*, double** %domain.idx228, align 8, !tbaa !11
>   %53 = load i32, i32* %add.ptr.i.i, align 4, !tbaa !6
>   %arrayidx1.i = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 1
>   %54 = load i32, i32* %arrayidx1.i, align 4, !tbaa !6
>   %arrayidx2.i = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 2
>   %55 = load i32, i32* %arrayidx2.i, align 4, !tbaa !6
>   %arrayidx3.i = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 3
>   %56 = load i32, i32* %arrayidx3.i, align 4, !tbaa !6
>   %arrayidx4.i = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 4
>   %57 = load i32, i32* %arrayidx4.i, align 4, !tbaa !6
>   %arrayidx5.i = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 5
>   %58 = load i32, i32* %arrayidx5.i, align 4, !tbaa !6
>   %arrayidx6.i = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 6
>   %59 = load i32, i32* %arrayidx6.i, align 4, !tbaa !6
>   %arrayidx7.i = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 7
>   %60 = load i32, i32* %arrayidx7.i, align 4, !tbaa !6
>   %conv.i.i = sext i32 %53 to i64
>   %add.ptr.i.i.i = getelementptr inbounds double, double* %domain.idx.val, i64 %conv.i.i
>   %61 = bitcast double* %add.ptr.i.i.i to i64*
>   %62 = load i64, i64* %61, align 8, !tbaa !2
>   store i64 %62, i64* %17, align 16, !tbaa !2
>   %conv.i196.i = sext i32 %54 to i64
>   %add.ptr.i.i198.i = getelementptr inbounds double, double* %domain.idx.val, i64 %conv.i196.i
>   %63 = bitcast double* %add.ptr.i.i198.i to i64*
>   %64 = load i64, i64* %63, align 8, !tbaa !2
>   store i64 %64, i64* %18, align 8, !tbaa !2
>   %conv.i193.i = sext i32 %55 to i64
>   %add.ptr.i.i195.i = getelementptr inbounds double, double* %domain.idx.val, i64 %conv.i193.i
>   %65 = bitcast double* %add.ptr.i.i195.i to i64*
>   %66 = load i64, i64* %65, align 8, !tbaa !2
>   store i64 %66, i64* %19, align 16, !tbaa !2
>   %conv.i190.i = sext i32 %56 to i64
>   %add.ptr.i.i192.i = getelementptr inbounds double, double* %domain.idx.val, i64 %conv.i190.i
>   %67 = bitcast double* %add.ptr.i.i192.i to i64*
>   %68 = load i64, i64* %67, align 8, !tbaa !2
>   store i64 %68, i64* %20, align 8, !tbaa !2
>   %conv.i187.i = sext i32 %57 to i64
>   %add.ptr.i.i189.i = getelementptr inbounds double, double* %domain.idx.val, i64 %conv.i187.i
>   %69 = bitcast double* %add.ptr.i.i189.i to i64*
>   %70 = load i64, i64* %69, align 8, !tbaa !2
>   store i64 %70, i64* %21, align 16, !tbaa !2
>   %conv.i184.i = sext i32 %58 to i64
>   %add.ptr.i.i186.i = getelementptr inbounds double, double* %domain.idx.val, i64 %conv.i184.i
>   %71 = bitcast double* %add.ptr.i.i186.i to i64*
>   %72 = load i64, i64* %71, align 8, !tbaa !2
>   store i64 %72, i64* %22, align 8, !tbaa !2
>   %conv.i181.i = sext i32 %59 to i64
>   %add.ptr.i.i183.i = getelementptr inbounds double, double* %domain.idx.val, i64 %conv.i181.i
>   %73 = bitcast double* %add.ptr.i.i183.i to i64*
>   %74 = load i64, i64* %73, align 8, !tbaa !2
>   store i64 %74, i64* %23, align 16, !tbaa !2
>   %conv.i178.i = sext i32 %60 to i64
>   %add.ptr.i.i180.i = getelementptr inbounds double, double* %domain.idx.val, i64 %conv.i178.i
>   %75 = bitcast double* %add.ptr.i.i180.i to i64*
>   %76 = load i64, i64* %75, align 8, !tbaa !2
>   store i64 %76, i64* %24, align 8, !tbaa !2
>   %add.ptr.i.i177.i = getelementptr inbounds double, double* %domain.idx227.val, i64 %conv.i.i
>   %77 = bitcast double* %add.ptr.i.i177.i to i64*
>   %78 = load i64, i64* %77, align 8, !tbaa !2
>   store i64 %78, i64* %25, align 16, !tbaa !2
>   %add.ptr.i.i174.i = getelementptr inbounds double, double* %domain.idx227.val, i64 %conv.i196.i
>   %79 = bitcast double* %add.ptr.i.i174.i to i64*
>   %80 = load i64, i64* %79, align 8, !tbaa !2
>   store i64 %80, i64* %26, align 8, !tbaa !2
>   %add.ptr.i.i171.i = getelementptr inbounds double, double* %domain.idx227.val, i64 %conv.i193.i
>   %81 = bitcast double* %add.ptr.i.i171.i to i64*
>   %82 = load i64, i64* %81, align 8, !tbaa !2
>   store i64 %82, i64* %27, align 16, !tbaa !2
>   %add.ptr.i.i168.i = getelementptr inbounds double, double* %domain.idx227.val, i64 %conv.i190.i
>   %83 = bitcast double* %add.ptr.i.i168.i to i64*
>   %84 = load i64, i64* %83, align 8, !tbaa !2
>   store i64 %84, i64* %28, align 8, !tbaa !2
>   %add.ptr.i.i165.i = getelementptr inbounds double, double* %domain.idx227.val, i64 %conv.i187.i
>   %85 = bitcast double* %add.ptr.i.i165.i to i64*
>   %86 = load i64, i64* %85, align 8, !tbaa !2
>   store i64 %86, i64* %29, align 16, !tbaa !2
>   %add.ptr.i.i162.i = getelementptr inbounds double, double* %domain.idx227.val, i64 %conv.i184.i
>   %87 = bitcast double* %add.ptr.i.i162.i to i64*
>   %88 = load i64, i64* %87, align 8, !tbaa !2
>   store i64 %88, i64* %30, align 8, !tbaa !2
>   %add.ptr.i.i159.i = getelementptr inbounds double, double* %domain.idx227.val, i64 %conv.i181.i
>   %89 = bitcast double* %add.ptr.i.i159.i to i64*
>   %90 = load i64, i64* %89, align 8, !tbaa !2
>   store i64 %90, i64* %31, align 16, !tbaa !2
>   %add.ptr.i.i156.i = getelementptr inbounds double, double* %domain.idx227.val, i64 %conv.i178.i
>   %91 = bitcast double* %add.ptr.i.i156.i to i64*
>   %92 = load i64, i64* %91, align 8, !tbaa !2
>   store i64 %92, i64* %32, align 8, !tbaa !2
>   %add.ptr.i.i153.i = getelementptr inbounds double, double* %domain.idx228.val, i64 %conv.i.i
>   %93 = bitcast double* %add.ptr.i.i153.i to i64*
>   %94 = load i64, i64* %93, align 8, !tbaa !2
>   store i64 %94, i64* %33, align 16, !tbaa !2
>   %add.ptr.i.i150.i = getelementptr inbounds double, double* %domain.idx228.val, i64 %conv.i196.i
>   %95 = bitcast double* %add.ptr.i.i150.i to i64*
>   %96 = load i64, i64* %95, align 8, !tbaa !2
>   store i64 %96, i64* %34, align 8, !tbaa !2
>   %add.ptr.i.i147.i = getelementptr inbounds double, double* %domain.idx228.val, i64 %conv.i193.i
>   %97 = bitcast double* %add.ptr.i.i147.i to i64*
>   %98 = load i64, i64* %97, align 8, !tbaa !2
>   store i64 %98, i64* %35, align 16, !tbaa !2
>   %add.ptr.i.i144.i = getelementptr inbounds double, double* %domain.idx228.val, i64 %conv.i190.i
>   %99 = bitcast double* %add.ptr.i.i144.i to i64*
>   %100 = load i64, i64* %99, align 8, !tbaa !2
>   store i64 %100, i64* %36, align 8, !tbaa !2
>   %add.ptr.i.i141.i = getelementptr inbounds double, double* %domain.idx228.val, i64 %conv.i187.i
>   %101 = bitcast double* %add.ptr.i.i141.i to i64*
>   %102 = load i64, i64* %101, align 8, !tbaa !2
>   store i64 %102, i64* %37, align 16, !tbaa !2
>   %add.ptr.i.i138.i = getelementptr inbounds double, double* %domain.idx228.val, i64 %conv.i184.i
>   %103 = bitcast double* %add.ptr.i.i138.i to i64*
>   %104 = load i64, i64* %103, align 8, !tbaa !2
>   store i64 %104, i64* %38, align 8, !tbaa !2
>   %add.ptr.i.i135.i = getelementptr inbounds double, double* %domain.idx228.val, i64 %conv.i181.i
>   %105 = bitcast double* %add.ptr.i.i135.i to i64*
>   %106 = load i64, i64* %105, align 8, !tbaa !2
>   store i64 %106, i64* %39, align 16, !tbaa !2
>   %add.ptr.i.i132.i = getelementptr inbounds double, double* %domain.idx228.val, i64 %conv.i178.i
>   %107 = bitcast double* %add.ptr.i.i132.i to i64*
>   %108 = load i64, i64* %107, align 8, !tbaa !2
>   store i64 %108, i64* %40, align 8, !tbaa !2
>   %109 = load double*, double** %determ, align 8, !tbaa !41
>   %arrayidx = getelementptr inbounds double, double* %109, i64 %indvars.iv354
>   call fastcc void @_ZL32CalcElemShapeFunctionDerivativesPKdS0_S0_PA8_dPd(double* nonnull %arraydecay, double* nonnull %arraydecay16, double* nonnull %arraydecay17, [8 x double]* nonnull %arraydecay23, double* %arrayidx)
>   call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(192) %43, i8 0, i64 160, i1 false)
>   %110 = load double, double* %arraydecay, align 16, !tbaa !2
>   %111 = bitcast i64 %78 to double
>   %112 = bitcast i64 %94 to double
>   %113 = bitcast i64 %80 to double
>   %114 = bitcast i64 %96 to double
>   %115 = load <2 x double>, <2 x double>* %44, align 8, !tbaa !2
>   %reorder_shuffle = shufflevector <2 x double> %115, <2 x double> undef, <2 x i32> <i32 1, i32 0>
>   %116 = load double, double* %arrayidx14.i, align 8, !tbaa !2
>   %117 = insertelement <2 x i64> undef, i64 %82, i32 0
>   %118 = insertelement <2 x i64> %117, i64 %84, i32 1
>   %119 = bitcast <2 x i64> %118 to <2 x double>
>   %120 = insertelement <2 x i64> undef, i64 %98, i32 0
>   %121 = insertelement <2 x i64> %120, i64 %100, i32 1
>   %122 = bitcast <2 x i64> %121 to <2 x double>
>   %123 = load double, double* %arrayidx32.i, align 16, !tbaa !2
>   %124 = load <2 x double>, <2 x double>* %45, align 8, !tbaa !2
>   %125 = bitcast i64 %82 to double
>   %126 = insertelement <2 x double> undef, double %125, i32 0
>   %127 = shufflevector <2 x double> %126, <2 x double> %124, <2 x i32> <i32 0, i32 2>
>   %128 = bitcast i64 %84 to double
>   %129 = insertelement <2 x double> undef, double %128, i32 0
>   %130 = insertelement <2 x double> %129, double %113, i32 1
>   %131 = fadd <2 x double> %127, %130
>   %132 = insertelement <2 x double> undef, double %113, i32 0
>   %133 = insertelement <2 x double> %132, double %123, i32 1
>   %134 = fsub <2 x double> %131, %133
>   %135 = insertelement <2 x double> undef, double %111, i32 0
>   %136 = shufflevector <2 x double> %135, <2 x double> undef, <2 x i32> zeroinitializer
>   %137 = fsub <2 x double> %134, %136
>   %138 = fmul <2 x double> %137, <double 5.000000e-01, double 5.000000e-01>
>   %139 = fadd <2 x double> %133, %127
>   %140 = fsub <2 x double> %139, %130
>   %141 = fsub <2 x double> %140, %136
>   %142 = fmul <2 x double> %141, <double 5.000000e-01, double 5.000000e-01>
>   %143 = load double, double* %arrayidx16.i, align 16, !tbaa !2
>   %144 = load double, double* %arrayidx18.i, align 8, !tbaa !2
>   %145 = extractelement <2 x double> %115, i32 0
>   %146 = insertelement <2 x double> undef, double %145, i32 0
>   %147 = insertelement <2 x double> %146, double %143, i32 1
>   %148 = shufflevector <2 x double> %115, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
>   %149 = insertelement <2 x double> %148, double %144, i32 1
>   %150 = fadd <2 x double> %147, %149
>   %151 = insertelement <2 x double> undef, double %116, i32 0
>   %152 = shufflevector <2 x double> %151, <2 x double> %115, <2 x i32> <i32 0, i32 2>
>   %153 = fsub <2 x double> %150, %152
>   %154 = insertelement <2 x double> undef, double %110, i32 0
>   %155 = shufflevector <2 x double> %154, <2 x double> undef, <2 x i32> zeroinitializer
>   %156 = fsub <2 x double> %153, %155
>   %157 = fmul <2 x double> %156, <double 5.000000e-01, double 5.000000e-01>
>   %158 = load double, double* %arrayidx48.i, align 16, !tbaa !2
>   %159 = load <2 x double>, <2 x double>* %46, align 8, !tbaa !2
>   %160 = bitcast i64 %98 to double
>   %161 = insertelement <2 x double> undef, double %160, i32 0
>   %162 = shufflevector <2 x double> %161, <2 x double> %159, <2 x i32> <i32 0, i32 2>
>   %163 = bitcast i64 %100 to double
>   %164 = insertelement <2 x double> undef, double %163, i32 0
>   %165 = insertelement <2 x double> %164, double %114, i32 1
>   %166 = fadd <2 x double> %162, %165
>   %167 = insertelement <2 x double> undef, double %114, i32 0
>   %168 = insertelement <2 x double> %167, double %158, i32 1
>   %169 = fsub <2 x double> %166, %168
>   %170 = insertelement <2 x double> undef, double %112, i32 0
>   %171 = shufflevector <2 x double> %170, <2 x double> undef, <2 x i32> zeroinitializer
>   %172 = fsub <2 x double> %169, %171
>   %173 = fmul <2 x double> %172, <double 5.000000e-01, double 5.000000e-01>
>   %174 = fmul <2 x double> %157, %173
>   %175 = insertelement <2 x double> %151, double %144, i32 1
>   %176 = fadd <2 x double> %reorder_shuffle, %175
>   %177 = fsub <2 x double> %176, %147
>   %178 = fsub <2 x double> %177, %155
>   %179 = fmul <2 x double> %178, <double 5.000000e-01, double 5.000000e-01>
>   %180 = fadd <2 x double> %168, %162
>   %181 = fsub <2 x double> %180, %165
>   %182 = fsub <2 x double> %181, %171
>   %183 = fmul <2 x double> %182, <double 5.000000e-01, double 5.000000e-01>
>   %184 = fmul <2 x double> %179, %183
>   %185 = fsub <2 x double> %174, %184
>   %sub28.i.i = extractelement <2 x double> %185, i32 0
>   %mul29.i.i = fmul double %sub28.i.i, 2.500000e-01
>   %186 = fmul <2 x double> %138, %183
>   %187 = fmul <2 x double> %142, %173
>   %188 = fsub <2 x double> %186, %187
>   %189 = fmul <2 x double> %188, <double 2.500000e-01, double 2.500000e-01>
>   %190 = fadd <2 x double> %189, zeroinitializer
>   %191 = extractelement <2 x double> %190, i32 0
>   store double %191, double* %arrayidx.2.i, align 16, !tbaa !2
>   %add38.i.i = fadd double %mul29.i.i, 0.000000e+00
>   store double %add38.i.i, double* %arrayidx2.2.i, align 16, !tbaa !2
>   store double %add38.i.i, double* %arrayidx2.3.i, align 8, !tbaa !2
>   %192 = fmul <2 x double> %179, %142
>   %193 = fmul <2 x double> %157, %138
>   %194 = fsub <2 x double> %192, %193
>   %195 = fmul <2 x double> %194, <double 2.500000e-01, double 2.500000e-01>
>   %196 = fadd <2 x double> %195, zeroinitializer
>   %197 = extractelement <2 x double> %196, i32 0
>   store double %197, double* %arrayidx4.2.i, align 16, !tbaa !2
>   %198 = fmul <2 x double> %157, %173
>   %199 = fmul <2 x double> %179, %183
>   %200 = fsub <2 x double> %198, %199
>   %sub28.i517.i = extractelement <2 x double> %200, i32 1
>   %mul29.i518.i = fmul double %sub28.i517.i, 2.500000e-01
>   %shift = shufflevector <2 x double> %189, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
>   %201 = fadd <2 x double> %190, %shift
>   %add34.i523.i = extractelement <2 x double> %201, i32 0
>   store double %add34.i523.i, double* %arraydecay25, align 16, !tbaa !2
>   store <2 x double> %190, <2 x double>* %47, align 8, !tbaa !2
>   %add38.i527.i = fadd double %add38.i.i, %mul29.i518.i
>   store double %add38.i527.i, double* %arraydecay27, align 16, !tbaa !2
>   %add39.i528.i = fadd double %mul29.i518.i, 0.000000e+00
>   store double %add39.i528.i, double* %arrayidx2.4.i, align 16, !tbaa !2
>   %shift359 = shufflevector <2 x double> %195, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
>   %202 = fadd <2 x double> %196, %shift359
>   %add42.i531.i = extractelement <2 x double> %202, i32 0
>   store double %add42.i531.i, double* %arraydecay29, align 16, !tbaa !2
>   store <2 x double> %196, <2 x double>* %48, align 8, !tbaa !2
>   %203 = load double, double* %arrayidx38.i, align 8, !tbaa !2
>   %204 = extractelement <2 x double> %124, i32 1
>   %205 = insertelement <2 x double> undef, double %204, i32 0
>   %206 = insertelement <2 x double> %205, double %203, i32 1
>   %207 = fadd <2 x double> %206, %119
>   %208 = fsub <2 x double> %207, %124
>   %209 = insertelement <2 x double> %132, double %125, i32 1
>   %210 = fsub <2 x double> %208, %209
>   %211 = fmul <2 x double> %210, <double 5.000000e-01, double 5.000000e-01>
>   %212 = fadd <2 x double> %124, %206
>   %213 = fsub <2 x double> %212, %119
>   %214 = fsub <2 x double> %213, %209
>   %215 = fmul <2 x double> %214, <double 5.000000e-01, double 5.000000e-01>
>   %216 = load <2 x double>, <2 x double>* %49, align 16, !tbaa !2
>   %217 = insertelement <2 x double> undef, double %144, i32 0
>   %218 = shufflevector <2 x double> %217, <2 x double> %216, <2 x i32> <i32 0, i32 2>
>   %219 = fadd <2 x double> %218, %216
>   %220 = insertelement <2 x double> %148, double %116, i32 1
>   %221 = fsub <2 x double> %219, %220
>   %222 = fsub <2 x double> %221, %115
>   %223 = fmul <2 x double> %222, <double 5.000000e-01, double 5.000000e-01>
>   %224 = load double, double* %arrayidx54.i, align 8, !tbaa !2
>   %225 = extractelement <2 x double> %159, i32 1
>   %226 = insertelement <2 x double> undef, double %225, i32 0
>   %227 = insertelement <2 x double> %226, double %224, i32 1
>   %228 = fadd <2 x double> %227, %122
>   %229 = fsub <2 x double> %228, %159
>   %230 = insertelement <2 x double> %167, double %160, i32 1
>   %231 = fsub <2 x double> %229, %230
>   %232 = fmul <2 x double> %231, <double 5.000000e-01, double 5.000000e-01>
>   %233 = fmul <2 x double> %223, %232
>   %234 = fadd <2 x double> %220, %216
>   %235 = fsub <2 x double> %234, %218
>   %236 = fsub <2 x double> %235, %115
>   %237 = fmul <2 x double> %236, <double 5.000000e-01, double 5.000000e-01>
>   %238 = fadd <2 x double> %159, %227
>   %239 = fsub <2 x double> %238, %122
>   %240 = fsub <2 x double> %239, %230
>   %241 = fmul <2 x double> %240, <double 5.000000e-01, double 5.000000e-01>
>   %242 = fmul <2 x double> %237, %241
>   %243 = fsub <2 x double> %233, %242
>   %sub28.i469.i = extractelement <2 x double> %243, i32 0
>   %mul29.i470.i = fmul double %sub28.i469.i, 2.500000e-01
>   %244 = fmul <2 x double> %211, %241
>   %245 = fmul <2 x double> %215, %232
>   %246 = fsub <2 x double> %244, %245
>   %247 = fmul <2 x double> %246, <double 2.500000e-01, double 2.500000e-01>
>   %248 = extractelement <2 x double> %247, i32 0
>   %249 = fadd <2 x double> %201, %247
>   %add34.i475.i = extractelement <2 x double> %249, i32 0
>   store double %add34.i475.i, double* %arrayidx.1.i, align 8, !tbaa !2
>   %250 = extractelement <2 x double> %190, i32 1
>   %add36.i477.i = fadd double %248, 0.000000e+00
>   %251 = fadd <2 x double> %190, %247
>   %add37.i478.i = extractelement <2 x double> %251, i32 0
>   %add38.i479.i = fadd double %add38.i527.i, %mul29.i470.i
>   store double %add38.i479.i, double* %arrayidx2.1.i, align 8, !tbaa !2
>   %add39.i480.i = fadd double %add39.i528.i, %mul29.i470.i
>   store double %add39.i480.i, double* %arrayidx2.5.i, align 8, !tbaa !2
>   %add40.i481.i = fadd double %mul29.i470.i, 0.000000e+00
>   %add41.i482.i = fadd double %add38.i.i, %mul29.i470.i
>   %252 = fmul <2 x double> %237, %215
>   %253 = fmul <2 x double> %223, %211
>   %254 = fsub <2 x double> %252, %253
>   %255 = fmul <2 x double> %254, <double 2.500000e-01, double 2.500000e-01>
>   %256 = extractelement <2 x double> %255, i32 0
>   %257 = fadd <2 x double> %202, %255
>   %add42.i483.i = extractelement <2 x double> %257, i32 0
>   store double %add42.i483.i, double* %arrayidx4.1.i, align 8, !tbaa !2
>   %258 = extractelement <2 x double> %196, i32 1
>   %add44.i485.i = fadd double %256, 0.000000e+00
>   %259 = fadd <2 x double> %196, %255
>   %add45.i486.i = extractelement <2 x double> %259, i32 0
>   %260 = fmul <2 x double> %223, %232
>   %261 = fmul <2 x double> %237, %241
>   %262 = fsub <2 x double> %260, %261
>   %sub28.i421.i = extractelement <2 x double> %262, i32 1
>   %mul29.i422.i = fmul double %sub28.i421.i, 2.500000e-01
>   %263 = extractelement <2 x double> %247, i32 1
>   %add34.i427.i = fadd double %add37.i478.i, %263
>   store double %add34.i427.i, double* %arrayidx.2.i, align 16, !tbaa !2
>   %264 = insertelement <2 x double> undef, double %250, i32 0
>   %265 = insertelement <2 x double> %264, double %add36.i477.i, i32 1
>   %266 = fadd <2 x double> %265, %247
>   store <2 x double> %266, <2 x double>* %50, align 8, !tbaa !2
>   %add36.i429.i = fadd double %263, 0.000000e+00
>   %add37.i430.i = fadd double %191, %263
>   %add38.i431.i = fadd double %add41.i482.i, %mul29.i422.i
>   store double %add38.i431.i, double* %arrayidx2.2.i, align 16, !tbaa !2
>   %add39.i432.i = fadd double %add40.i481.i, %mul29.i422.i
>   store double %add39.i432.i, double* %arrayidx2.6.i, align 16, !tbaa !2
>   %add40.i433.i = fadd double %mul29.i422.i, 0.000000e+00
>   %add41.i434.i = fadd double %add38.i.i, %mul29.i422.i
>   %267 = extractelement <2 x double> %255, i32 1
>   %add42.i435.i = fadd double %add45.i486.i, %267
>   store double %add42.i435.i, double* %arrayidx4.2.i, align 16, !tbaa !2
>   %268 = insertelement <2 x double> undef, double %258, i32 0
>   %269 = insertelement <2 x double> %268, double %add44.i485.i, i32 1
>   %270 = fadd <2 x double> %269, %255
>   store <2 x double> %270, <2 x double>* %51, align 8, !tbaa !2
>   %add44.i437.i = fadd double %267, 0.000000e+00
>   %add45.i438.i = fadd double %197, %267
>   %add.i343.i = fadd double %110, %143
>   %271 = extractelement <2 x double> %216, i32 1
>   %sub.i344.i = fsub double %add.i343.i, %271
>   %sub1.i345.i = fsub double %sub.i344.i, %116
>   %mul.i346.i = fmul double %sub1.i345.i, 5.000000e-01
>   %add2.i347.i = fadd double %123, %111
>   %sub3.i348.i = fsub double %add2.i347.i, %203
>   %sub4.i349.i = fsub double %sub3.i348.i, %128
>   %mul5.i350.i = fmul double %sub4.i349.i, 5.000000e-01
>   %add6.i351.i = fadd double %158, %112
>   %sub7.i352.i = fsub double %add6.i351.i, %224
>   %sub8.i353.i = fsub double %sub7.i352.i, %163
>   %mul9.i354.i = fmul double %sub8.i353.i, 5.000000e-01
>   %add10.i355.i = fadd double %143, %271
>   %sub11.i356.i = fsub double %add10.i355.i, %110
>   %sub12.i357.i = fsub double %sub11.i356.i, %116
>   %mul13.i358.i = fmul double %sub12.i357.i, 5.000000e-01
>   %add14.i359.i = fadd double %123, %203
>   %sub15.i360.i = fsub double %add14.i359.i, %111
>   %sub16.i361.i = fsub double %sub15.i360.i, %128
>   %mul17.i362.i = fmul double %sub16.i361.i, 5.000000e-01
>   %add18.i363.i = fadd double %158, %224
>   %sub19.i364.i = fsub double %add18.i363.i, %112
>   %sub20.i365.i = fsub double %sub19.i364.i, %163
>   %mul21.i366.i = fmul double %sub20.i365.i, 5.000000e-01
>   %mul22.i367.i = fmul double %mul5.i350.i, %mul21.i366.i
>   %mul23.i368.i = fmul double %mul17.i362.i, %mul9.i354.i
>   %sub24.i369.i = fsub double %mul22.i367.i, %mul23.i368.i
>   %mul25.i370.i = fmul double %sub24.i369.i, 2.500000e-01
>   %mul26.i371.i = fmul double %mul13.i358.i, %mul9.i354.i
>   %mul27.i372.i = fmul double %mul.i346.i, %mul21.i366.i
>   %sub28.i373.i = fsub double %mul26.i371.i, %mul27.i372.i
>   %mul29.i374.i = fmul double %sub28.i373.i, 2.500000e-01
>   %mul30.i375.i = fmul double %mul.i346.i, %mul17.i362.i
>   %mul31.i376.i = fmul double %mul13.i358.i, %mul5.i350.i
>   %sub32.i377.i = fsub double %mul30.i375.i, %mul31.i376.i
>   %mul33.i378.i = fmul double %sub32.i377.i, 2.500000e-01
>   %add34.i379.i = fadd double %mul25.i370.i, %add37.i430.i
>   store double %add34.i379.i, double* %arrayidx.3.i, align 8, !tbaa !2
>   %add35.i380.i = fadd double %mul25.i370.i, %add36.i429.i
>   %add36.i381.i = fadd double %250, %mul25.i370.i
>   %add37.i382.i = fadd double %add34.i523.i, %mul25.i370.i
>   store double %add37.i382.i, double* %arraydecay25, align 16, !tbaa !2
>   %add38.i383.i = fadd double %mul29.i374.i, %add41.i434.i
>   store double %add38.i383.i, double* %arrayidx2.3.i, align 8, !tbaa !2
>   %add39.i384.i = fadd double %mul29.i374.i, %add40.i433.i
>   %add40.i385.i = fadd double %add39.i528.i, %mul29.i374.i
>   %add41.i386.i = fadd double %add38.i527.i, %mul29.i374.i
>   store double %add41.i386.i, double* %arraydecay27, align 16, !tbaa !2
>   %add42.i387.i = fadd double %mul33.i378.i, %add45.i438.i
>   store double %add42.i387.i, double* %arrayidx4.3.i, align 8, !tbaa !2
>   %add43.i388.i = fadd double %mul33.i378.i, %add44.i437.i
>   %add44.i389.i = fadd double %258, %mul33.i378.i
>   %add45.i390.i = fadd double %add42.i531.i, %mul33.i378.i
>   store double %add45.i390.i, double* %arraydecay29, align 16, !tbaa !2
>   %272 = extractelement <2 x double> %219, i32 0
>   %sub.i296.i = fsub double %272, %271
>   %sub1.i297.i = fsub double %sub.i296.i, %143
>   %mul.i298.i = fmul double %sub1.i297.i, 5.000000e-01
>   %273 = extractelement <2 x double> %212, i32 0
>   %sub3.i300.i = fsub double %273, %203
>   %sub4.i301.i = fsub double %sub3.i300.i, %123
>   %mul5.i302.i = fmul double %sub4.i301.i, 5.000000e-01
>   %274 = extractelement <2 x double> %238, i32 0
>   %sub7.i304.i = fsub double %274, %224
>   %sub8.i305.i = fsub double %sub7.i304.i, %158
>   %mul9.i306.i = fmul double %sub8.i305.i, 5.000000e-01
>   %275 = extractelement <2 x double> %219, i32 1
>   %sub11.i308.i = fsub double %275, %144
>   %sub12.i309.i = fsub double %sub11.i308.i, %143
>   %mul13.i310.i = fmul double %sub12.i309.i, 5.000000e-01
>   %shift360 = shufflevector <2 x double> %212, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
>   %276 = fsub <2 x double> %shift360, %124
>   %sub15.i312.i = extractelement <2 x double> %276, i64 0
>   %sub16.i313.i = fsub double %sub15.i312.i, %123
>   %mul17.i314.i = fmul double %sub16.i313.i, 5.000000e-01
>   %shift361 = shufflevector <2 x double> %238, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
>   %277 = fsub <2 x double> %shift361, %159
>   %sub19.i316.i = extractelement <2 x double> %277, i64 0
>   %sub20.i317.i = fsub double %sub19.i316.i, %158
>   %mul21.i318.i = fmul double %sub20.i317.i, 5.000000e-01
>   %mul22.i319.i = fmul double %mul5.i302.i, %mul21.i318.i
>   %mul23.i320.i = fmul double %mul17.i314.i, %mul9.i306.i
>   %sub24.i321.i = fsub double %mul22.i319.i, %mul23.i320.i
>   %mul25.i322.i = fmul double %sub24.i321.i, 2.500000e-01
>   %mul26.i323.i = fmul double %mul13.i310.i, %mul9.i306.i
>   %mul27.i324.i = fmul double %mul.i298.i, %mul21.i318.i
>   %sub28.i325.i = fsub double %mul26.i323.i, %mul27.i324.i
>   %mul29.i326.i = fmul double %sub28.i325.i, 2.500000e-01
>   %mul30.i327.i = fmul double %mul.i298.i, %mul17.i314.i
>   %mul31.i328.i = fmul double %mul13.i310.i, %mul5.i302.i
>   %sub32.i329.i = fsub double %mul30.i327.i, %mul31.i328.i
>   %mul33.i330.i = fmul double %sub32.i329.i, 2.500000e-01
>   %add34.i331.i = fadd double %mul25.i322.i, %add36.i381.i
>   store double %add34.i331.i, double* %arrayidx.4.i, align 16, !tbaa !2
>   %add35.i332.i = fadd double %mul25.i322.i, %add35.i380.i
>   store double %add35.i332.i, double* %arrayidx.7.i, align 8, !tbaa !2
>   %278 = extractelement <2 x double> %266, i32 1
>   %add36.i333.i = fadd double %mul25.i322.i, %278
>   store double %add36.i333.i, double* %arrayidx.6.i, align 16, !tbaa !2
>   %279 = extractelement <2 x double> %266, i32 0
>   %add37.i334.i = fadd double %279, %mul25.i322.i
>   store double %add37.i334.i, double* %arrayidx.5.i, align 8, !tbaa !2
>   %add38.i335.i = fadd double %mul29.i326.i, %add40.i385.i
>   store double %add38.i335.i, double* %arrayidx2.4.i, align 16, !tbaa !2
>   %add39.i336.i = fadd double %mul29.i326.i, %add39.i384.i
>   store double %add39.i336.i, double* %arrayidx2.7.i, align 8, !tbaa !2
>   %add40.i337.i = fadd double %mul29.i326.i, %add39.i432.i
>   store double %add40.i337.i, double* %arrayidx2.6.i, align 16, !tbaa !2
>   %add41.i338.i = fadd double %add39.i480.i, %mul29.i326.i
>   store double %add41.i338.i, double* %arrayidx2.5.i, align 8, !tbaa !2
>   %add42.i339.i = fadd double %mul33.i330.i, %add44.i389.i
>   store double %add42.i339.i, double* %arrayidx4.4.i, align 16, !tbaa !2
>   %add43.i340.i = fadd double %mul33.i330.i, %add43.i388.i
>   store double %add43.i340.i, double* %arrayidx4.7.i, align 8, !tbaa !2
>   %280 = extractelement <2 x double> %270, i32 1
>   %add44.i341.i = fadd double %mul33.i330.i, %280
>   store double %add44.i341.i, double* %arrayidx4.6.i, align 16, !tbaa !2
>   %281 = extractelement <2 x double> %270, i32 0
>   %add45.i342.i = fadd double %281, %mul33.i330.i
>   store double %add45.i342.i, double* %arrayidx4.5.i, align 8, !tbaa !2
>   %282 = load i32, i32* %numthreads, align 4, !tbaa !6
>   %cmp34 = icmp sgt i32 %282, 1
>   %283 = load double*, double** %sigxx, align 8, !tbaa !41
>   %arrayidx38 = getelementptr inbounds double, double* %283, i64 %indvars.iv354
>   %284 = load double, double* %arrayidx38, align 8, !tbaa !2
>   %285 = load double*, double** %sigyy, align 8, !tbaa !41
>   %arrayidx40 = getelementptr inbounds double, double* %285, i64 %indvars.iv354
>   %286 = load double, double* %arrayidx40, align 8, !tbaa !2
>   %287 = load double*, double** %sigzz, align 8, !tbaa !41
>   %arrayidx42 = getelementptr inbounds double, double* %287, i64 %indvars.iv354
>   %288 = load double, double* %arrayidx42, align 8, !tbaa !2
>   br i1 %cmp34, label %if.then35, label %if.else
> 
> if.then35:                                        ; preds = %invoke.cont33
>   %289 = load double*, double** %fx_elem, align 8, !tbaa !41
>   %arrayidx45 = getelementptr inbounds double, double* %289, i64 %conv.i
>   %290 = load double*, double** %fy_elem, align 8, !tbaa !41
>   %arrayidx48 = getelementptr inbounds double, double* %290, i64 %conv.i
>   %291 = load double*, double** %fz_elem, align 8, !tbaa !41
>   %arrayidx51 = getelementptr inbounds double, double* %291, i64 %conv.i
>   %292 = fneg double %add37.i382.i
>   %fneg.i260 = fmul double %284, %292
>   store double %fneg.i260, double* %arrayidx45, align 8, !tbaa !2
>   %293 = load double, double* %arraydecay27, align 16, !tbaa !2
>   %294 = fneg double %293
>   %fneg8.i262 = fmul double %286, %294
>   store double %fneg8.i262, double* %arrayidx48, align 8, !tbaa !2
>   %295 = load double, double* %arraydecay29, align 16, !tbaa !2
>   %296 = fneg double %295
>   %fneg15.i264 = fmul double %288, %296
>   store double %fneg15.i264, double* %arrayidx51, align 8, !tbaa !2
>   %297 = load double, double* %arrayidx.1.i, align 8, !tbaa !2
>   %298 = fneg double %297
>   %fneg.1.i266 = fmul double %284, %298
>   %arrayidx3.1.i267 = getelementptr inbounds double, double* %arrayidx45, i64 1
>   store double %fneg.1.i266, double* %arrayidx3.1.i267, align 8, !tbaa !2
>   %299 = load double, double* %arrayidx2.1.i, align 8, !tbaa !2
>   %300 = fneg double %299
>   %fneg8.1.i269 = fmul double %286, %300
>   %arrayidx10.1.i270 = getelementptr inbounds double, double* %arrayidx48, i64 1
>   store double %fneg8.1.i269, double* %arrayidx10.1.i270, align 8, !tbaa !2
>   %301 = load double, double* %arrayidx4.1.i, align 8, !tbaa !2
>   %302 = fneg double %301
>   %fneg15.1.i272 = fmul double %288, %302
>   %arrayidx17.1.i273 = getelementptr inbounds double, double* %arrayidx51, i64 1
>   store double %fneg15.1.i272, double* %arrayidx17.1.i273, align 8, !tbaa !2
>   %303 = load double, double* %arrayidx.2.i, align 16, !tbaa !2
>   %304 = fneg double %303
>   %fneg.2.i275 = fmul double %284, %304
>   %arrayidx3.2.i276 = getelementptr inbounds double, double* %arrayidx45, i64 2
>   store double %fneg.2.i275, double* %arrayidx3.2.i276, align 8, !tbaa !2
>   %305 = load double, double* %arrayidx2.2.i, align 16, !tbaa !2
>   %306 = fneg double %305
>   %fneg8.2.i278 = fmul double %286, %306
>   %arrayidx10.2.i279 = getelementptr inbounds double, double* %arrayidx48, i64 2
>   store double %fneg8.2.i278, double* %arrayidx10.2.i279, align 8, !tbaa !2
>   %307 = load double, double* %arrayidx4.2.i, align 16, !tbaa !2
>   %308 = fneg double %307
>   %fneg15.2.i281 = fmul double %288, %308
>   %arrayidx17.2.i282 = getelementptr inbounds double, double* %arrayidx51, i64 2
>   store double %fneg15.2.i281, double* %arrayidx17.2.i282, align 8, !tbaa !2
>   %309 = load double, double* %arrayidx.3.i, align 8, !tbaa !2
>   %310 = fneg double %309
>   %fneg.3.i284 = fmul double %284, %310
>   %arrayidx3.3.i285 = getelementptr inbounds double, double* %arrayidx45, i64 3
>   store double %fneg.3.i284, double* %arrayidx3.3.i285, align 8, !tbaa !2
>   %311 = load double, double* %arrayidx2.3.i, align 8, !tbaa !2
>   %312 = fneg double %311
>   %fneg8.3.i287 = fmul double %286, %312
>   %arrayidx10.3.i288 = getelementptr inbounds double, double* %arrayidx48, i64 3
>   store double %fneg8.3.i287, double* %arrayidx10.3.i288, align 8, !tbaa !2
>   %313 = load double, double* %arrayidx4.3.i, align 8, !tbaa !2
>   %314 = fneg double %313
>   %fneg15.3.i290 = fmul double %288, %314
>   %arrayidx17.3.i291 = getelementptr inbounds double, double* %arrayidx51, i64 3
>   store double %fneg15.3.i290, double* %arrayidx17.3.i291, align 8, !tbaa !2
>   %315 = load double, double* %arrayidx.4.i, align 16, !tbaa !2
>   %316 = fneg double %315
>   %fneg.4.i293 = fmul double %284, %316
>   %arrayidx3.4.i294 = getelementptr inbounds double, double* %arrayidx45, i64 4
>   store double %fneg.4.i293, double* %arrayidx3.4.i294, align 8, !tbaa !2
>   %317 = load double, double* %arrayidx2.4.i, align 16, !tbaa !2
>   %318 = fneg double %317
>   %fneg8.4.i296 = fmul double %286, %318
>   %arrayidx10.4.i297 = getelementptr inbounds double, double* %arrayidx48, i64 4
>   store double %fneg8.4.i296, double* %arrayidx10.4.i297, align 8, !tbaa !2
>   %319 = load double, double* %arrayidx4.4.i, align 16, !tbaa !2
>   %320 = fneg double %319
>   %fneg15.4.i299 = fmul double %288, %320
>   %arrayidx17.4.i300 = getelementptr inbounds double, double* %arrayidx51, i64 4
>   store double %fneg15.4.i299, double* %arrayidx17.4.i300, align 8, !tbaa !2
>   %321 = load double, double* %arrayidx.5.i, align 8, !tbaa !2
>   %322 = fneg double %321
>   %fneg.5.i302 = fmul double %284, %322
>   %arrayidx3.5.i303 = getelementptr inbounds double, double* %arrayidx45, i64 5
>   store double %fneg.5.i302, double* %arrayidx3.5.i303, align 8, !tbaa !2
>   %323 = load double, double* %arrayidx2.5.i, align 8, !tbaa !2
>   %324 = fneg double %323
>   %fneg8.5.i305 = fmul double %286, %324
>   %arrayidx10.5.i306 = getelementptr inbounds double, double* %arrayidx48, i64 5
>   store double %fneg8.5.i305, double* %arrayidx10.5.i306, align 8, !tbaa !2
>   %325 = load double, double* %arrayidx4.5.i, align 8, !tbaa !2
>   %326 = fneg double %325
>   %fneg15.5.i308 = fmul double %288, %326
>   %arrayidx17.5.i309 = getelementptr inbounds double, double* %arrayidx51, i64 5
>   store double %fneg15.5.i308, double* %arrayidx17.5.i309, align 8, !tbaa !2
>   %327 = load double, double* %arrayidx.6.i, align 16, !tbaa !2
>   %328 = fneg double %327
>   %fneg.6.i311 = fmul double %284, %328
>   %arrayidx3.6.i312 = getelementptr inbounds double, double* %arrayidx45, i64 6
>   store double %fneg.6.i311, double* %arrayidx3.6.i312, align 8, !tbaa !2
>   %329 = load double, double* %arrayidx2.6.i, align 16, !tbaa !2
>   %330 = fneg double %329
>   %fneg8.6.i314 = fmul double %286, %330
>   %arrayidx10.6.i315 = getelementptr inbounds double, double* %arrayidx48, i64 6
>   store double %fneg8.6.i314, double* %arrayidx10.6.i315, align 8, !tbaa !2
>   %331 = load double, double* %arrayidx4.6.i, align 16, !tbaa !2
>   %332 = fneg double %331
>   %fneg15.6.i317 = fmul double %288, %332
>   %arrayidx17.6.i318 = getelementptr inbounds double, double* %arrayidx51, i64 6
>   store double %fneg15.6.i317, double* %arrayidx17.6.i318, align 8, !tbaa !2
>   %333 = load double, double* %arrayidx.7.i, align 8, !tbaa !2
>   %334 = fneg double %333
>   %fneg.7.i320 = fmul double %284, %334
>   %arrayidx3.7.i321 = getelementptr inbounds double, double* %arrayidx45, i64 7
>   store double %fneg.7.i320, double* %arrayidx3.7.i321, align 8, !tbaa !2
>   %335 = load double, double* %arrayidx2.7.i, align 8, !tbaa !2
>   %336 = fneg double %335
>   %fneg8.7.i323 = fmul double %286, %336
>   %arrayidx10.7.i324 = getelementptr inbounds double, double* %arrayidx48, i64 7
>   store double %fneg8.7.i323, double* %arrayidx10.7.i324, align 8, !tbaa !2
>   %337 = load double, double* %arrayidx4.7.i, align 8, !tbaa !2
>   %338 = fneg double %337
>   %fneg15.7.i326 = fmul double %288, %338
>   %arrayidx17.7.i327 = getelementptr inbounds double, double* %arrayidx51, i64 7
>   store double %fneg15.7.i326, double* %arrayidx17.7.i327, align 8, !tbaa !2
>   br label %if.end79
> 
> if.else:                                          ; preds = %invoke.cont33
>   %339 = fneg double %add37.i382.i
>   %fneg.i = fmul double %284, %339
>   store double %fneg.i, double* %arraydecay60, align 8, !tbaa !2
>   %340 = fneg double %add41.i386.i
>   %fneg8.i = fmul double %286, %340
>   store double %fneg8.i, double* %arraydecay61, align 8, !tbaa !2
>   %341 = fneg double %add45.i390.i
>   %fneg15.i = fmul double %288, %341
>   store double %fneg15.i, double* %arraydecay62, align 8, !tbaa !2
>   %342 = load double, double* %arrayidx.1.i, align 8, !tbaa !2
>   %343 = fneg double %342
>   %fneg.1.i = fmul double %284, %343
>   store double %fneg.1.i, double* %arrayidx3.1.i, align 8, !tbaa !2
>   %344 = load double, double* %arrayidx2.1.i, align 8, !tbaa !2
>   %345 = fneg double %344
>   %fneg8.1.i = fmul double %286, %345
>   store double %fneg8.1.i, double* %arrayidx10.1.i, align 8, !tbaa !2
>   %346 = load double, double* %arrayidx4.1.i, align 8, !tbaa !2
>   %347 = fneg double %346
>   %fneg15.1.i = fmul double %288, %347
>   store double %fneg15.1.i, double* %arrayidx17.1.i, align 8, !tbaa !2
>   %348 = load double, double* %arrayidx.2.i, align 16, !tbaa !2
>   %349 = fneg double %348
>   %fneg.2.i = fmul double %284, %349
>   store double %fneg.2.i, double* %arrayidx3.2.i, align 8, !tbaa !2
>   %350 = load double, double* %arrayidx2.2.i, align 16, !tbaa !2
>   %351 = fneg double %350
>   %fneg8.2.i = fmul double %286, %351
>   store double %fneg8.2.i, double* %arrayidx10.2.i, align 8, !tbaa !2
>   %352 = load double, double* %arrayidx4.2.i, align 16, !tbaa !2
>   %353 = fneg double %352
>   %fneg15.2.i = fmul double %288, %353
>   store double %fneg15.2.i, double* %arrayidx17.2.i, align 8, !tbaa !2
>   %354 = fneg double %add34.i379.i
>   %fneg.3.i = fmul double %284, %354
>   store double %fneg.3.i, double* %arrayidx3.3.i, align 8, !tbaa !2
>   %355 = fneg double %add38.i383.i
>   %fneg8.3.i = fmul double %286, %355
>   store double %fneg8.3.i, double* %arrayidx10.3.i, align 8, !tbaa !2
>   %356 = fneg double %add42.i387.i
>   %fneg15.3.i = fmul double %288, %356
>   store double %fneg15.3.i, double* %arrayidx17.3.i, align 8, !tbaa !2
>   %357 = fneg double %add34.i331.i
>   %fneg.4.i = fmul double %284, %357
>   store double %fneg.4.i, double* %arrayidx3.4.i, align 8, !tbaa !2
>   %358 = fneg double %add38.i335.i
>   %fneg8.4.i = fmul double %286, %358
>   store double %fneg8.4.i, double* %arrayidx10.4.i, align 8, !tbaa !2
>   %359 = fneg double %add42.i339.i
>   %fneg15.4.i = fmul double %288, %359
>   store double %fneg15.4.i, double* %arrayidx17.4.i, align 8, !tbaa !2
>   %360 = fneg double %add37.i334.i
>   %fneg.5.i = fmul double %284, %360
>   store double %fneg.5.i, double* %arrayidx3.5.i, align 8, !tbaa !2
>   %361 = fneg double %add41.i338.i
>   %fneg8.5.i = fmul double %286, %361
>   store double %fneg8.5.i, double* %arrayidx10.5.i, align 8, !tbaa !2
>   %362 = fneg double %add45.i342.i
>   %fneg15.5.i = fmul double %288, %362
>   store double %fneg15.5.i, double* %arrayidx17.5.i, align 8, !tbaa !2
>   %363 = fneg double %add36.i333.i
>   %fneg.6.i = fmul double %284, %363
>   store double %fneg.6.i, double* %arrayidx3.6.i, align 8, !tbaa !2
>   %364 = fneg double %add40.i337.i
>   %fneg8.6.i = fmul double %286, %364
>   store double %fneg8.6.i, double* %arrayidx10.6.i, align 8, !tbaa !2
>   %365 = fneg double %add44.i341.i
>   %fneg15.6.i = fmul double %288, %365
>   store double %fneg15.6.i, double* %arrayidx17.6.i, align 8, !tbaa !2
>   %366 = fneg double %add35.i332.i
>   %fneg.7.i = fmul double %284, %366
>   store double %fneg.7.i, double* %arrayidx3.7.i, align 8, !tbaa !2
>   %367 = fneg double %add39.i336.i
>   %fneg8.7.i = fmul double %286, %367
>   store double %fneg8.7.i, double* %arrayidx10.7.i, align 8, !tbaa !2
>   %368 = fneg double %add43.i340.i
>   %fneg15.7.i = fmul double %288, %368
>   store double %fneg15.7.i, double* %arrayidx17.7.i, align 8, !tbaa !2
>   %369 = load double*, double** %_M_start.i.i255, align 8, !tbaa !11
>   %370 = load double*, double** %_M_start.i.i252, align 8, !tbaa !11
>   %371 = load double*, double** %_M_start.i.i249, align 8, !tbaa !11
>   %372 = load i32, i32* %add.ptr.i.i, align 4, !tbaa !6
>   %373 = load double, double* %arraydecay60, align 8, !tbaa !2
>   %conv.i254 = sext i32 %372 to i64
>   %add.ptr.i.i256 = getelementptr inbounds double, double* %369, i64 %conv.i254
>   %374 = load double, double* %add.ptr.i.i256, align 8, !tbaa !2
>   %add70 = fadd double %373, %374
>   store double %add70, double* %add.ptr.i.i256, align 8, !tbaa !2
>   %375 = load double, double* %arraydecay61, align 8, !tbaa !2
>   %add.ptr.i.i253 = getelementptr inbounds double, double* %370, i64 %conv.i254
>   %376 = load double, double* %add.ptr.i.i253, align 8, !tbaa !2
>   %add74 = fadd double %375, %376
>   store double %add74, double* %add.ptr.i.i253, align 8, !tbaa !2
>   %377 = load double, double* %arraydecay62, align 8, !tbaa !2
>   %add.ptr.i.i250 = getelementptr inbounds double, double* %371, i64 %conv.i254
>   %378 = load double, double* %add.ptr.i.i250, align 8, !tbaa !2
>   %add78 = fadd double %377, %378
>   store double %add78, double* %add.ptr.i.i250, align 8, !tbaa !2
>   %379 = load i32, i32* %arrayidx1.i, align 4, !tbaa !6
>   %380 = load double, double* %arrayidx3.1.i, align 8, !tbaa !2
>   %conv.i254.1 = sext i32 %379 to i64
>   %add.ptr.i.i256.1 = getelementptr inbounds double, double* %369, i64 %conv.i254.1
>   %381 = load double, double* %add.ptr.i.i256.1, align 8, !tbaa !2
>   %add70.1 = fadd double %380, %381
>   store double %add70.1, double* %add.ptr.i.i256.1, align 8, !tbaa !2
>   %382 = load double, double* %arrayidx10.1.i, align 8, !tbaa !2
>   %add.ptr.i.i253.1 = getelementptr inbounds double, double* %370, i64 %conv.i254.1
>   %383 = load double, double* %add.ptr.i.i253.1, align 8, !tbaa !2
>   %add74.1 = fadd double %382, %383
>   store double %add74.1, double* %add.ptr.i.i253.1, align 8, !tbaa !2
>   %384 = load double, double* %arrayidx17.1.i, align 8, !tbaa !2
>   %add.ptr.i.i250.1 = getelementptr inbounds double, double* %371, i64 %conv.i254.1
>   %385 = load double, double* %add.ptr.i.i250.1, align 8, !tbaa !2
>   %add78.1 = fadd double %384, %385
>   store double %add78.1, double* %add.ptr.i.i250.1, align 8, !tbaa !2
>   %386 = load i32, i32* %arrayidx2.i, align 4, !tbaa !6
>   %387 = load double, double* %arrayidx3.2.i, align 8, !tbaa !2
>   %conv.i254.2 = sext i32 %386 to i64
>   %add.ptr.i.i256.2 = getelementptr inbounds double, double* %369, i64 %conv.i254.2
>   %388 = load double, double* %add.ptr.i.i256.2, align 8, !tbaa !2
>   %add70.2 = fadd double %387, %388
>   store double %add70.2, double* %add.ptr.i.i256.2, align 8, !tbaa !2
>   %389 = load double, double* %arrayidx10.2.i, align 8, !tbaa !2
>   %add.ptr.i.i253.2 = getelementptr inbounds double, double* %370, i64 %conv.i254.2
>   %390 = load double, double* %add.ptr.i.i253.2, align 8, !tbaa !2
>   %add74.2 = fadd double %389, %390
>   store double %add74.2, double* %add.ptr.i.i253.2, align 8, !tbaa !2
>   %391 = load double, double* %arrayidx17.2.i, align 8, !tbaa !2
>   %add.ptr.i.i250.2 = getelementptr inbounds double, double* %371, i64 %conv.i254.2
>   %392 = load double, double* %add.ptr.i.i250.2, align 8, !tbaa !2
>   %add78.2 = fadd double %391, %392
>   store double %add78.2, double* %add.ptr.i.i250.2, align 8, !tbaa !2
>   %393 = load i32, i32* %arrayidx3.i, align 4, !tbaa !6
>   %394 = load double, double* %arrayidx3.3.i, align 8, !tbaa !2
>   %conv.i254.3 = sext i32 %393 to i64
>   %add.ptr.i.i256.3 = getelementptr inbounds double, double* %369, i64 %conv.i254.3
>   %395 = load double, double* %add.ptr.i.i256.3, align 8, !tbaa !2
>   %add70.3 = fadd double %394, %395
>   store double %add70.3, double* %add.ptr.i.i256.3, align 8, !tbaa !2
>   %396 = load double, double* %arrayidx10.3.i, align 8, !tbaa !2
>   %add.ptr.i.i253.3 = getelementptr inbounds double, double* %370, i64 %conv.i254.3
>   %397 = load double, double* %add.ptr.i.i253.3, align 8, !tbaa !2
>   %add74.3 = fadd double %396, %397
>   store double %add74.3, double* %add.ptr.i.i253.3, align 8, !tbaa !2
>   %398 = load double, double* %arrayidx17.3.i, align 8, !tbaa !2
>   %add.ptr.i.i250.3 = getelementptr inbounds double, double* %371, i64 %conv.i254.3
>   %399 = load double, double* %add.ptr.i.i250.3, align 8, !tbaa !2
>   %add78.3 = fadd double %398, %399
>   store double %add78.3, double* %add.ptr.i.i250.3, align 8, !tbaa !2
>   %400 = load i32, i32* %arrayidx4.i, align 4, !tbaa !6
>   %401 = load double, double* %arrayidx3.4.i, align 8, !tbaa !2
>   %conv.i254.4 = sext i32 %400 to i64
>   %add.ptr.i.i256.4 = getelementptr inbounds double, double* %369, i64 %conv.i254.4
>   %402 = load double, double* %add.ptr.i.i256.4, align 8, !tbaa !2
>   %add70.4 = fadd double %401, %402
>   store double %add70.4, double* %add.ptr.i.i256.4, align 8, !tbaa !2
>   %403 = load double, double* %arrayidx10.4.i, align 8, !tbaa !2
>   %add.ptr.i.i253.4 = getelementptr inbounds double, double* %370, i64 %conv.i254.4
>   %404 = load double, double* %add.ptr.i.i253.4, align 8, !tbaa !2
>   %add74.4 = fadd double %403, %404
>   store double %add74.4, double* %add.ptr.i.i253.4, align 8, !tbaa !2
>   %405 = load double, double* %arrayidx17.4.i, align 8, !tbaa !2
>   %add.ptr.i.i250.4 = getelementptr inbounds double, double* %371, i64 %conv.i254.4
>   %406 = load double, double* %add.ptr.i.i250.4, align 8, !tbaa !2
>   %add78.4 = fadd double %405, %406
>   store double %add78.4, double* %add.ptr.i.i250.4, align 8, !tbaa !2
>   %407 = load i32, i32* %arrayidx5.i, align 4, !tbaa !6
>   %408 = load double, double* %arrayidx3.5.i, align 8, !tbaa !2
>   %conv.i254.5 = sext i32 %407 to i64
>   %add.ptr.i.i256.5 = getelementptr inbounds double, double* %369, i64 %conv.i254.5
>   %409 = load double, double* %add.ptr.i.i256.5, align 8, !tbaa !2
>   %add70.5 = fadd double %408, %409
>   store double %add70.5, double* %add.ptr.i.i256.5, align 8, !tbaa !2
>   %410 = load double, double* %arrayidx10.5.i, align 8, !tbaa !2
>   %add.ptr.i.i253.5 = getelementptr inbounds double, double* %370, i64 %conv.i254.5
>   %411 = load double, double* %add.ptr.i.i253.5, align 8, !tbaa !2
>   %add74.5 = fadd double %410, %411
>   store double %add74.5, double* %add.ptr.i.i253.5, align 8, !tbaa !2
>   %412 = load double, double* %arrayidx17.5.i, align 8, !tbaa !2
>   %add.ptr.i.i250.5 = getelementptr inbounds double, double* %371, i64 %conv.i254.5
>   %413 = load double, double* %add.ptr.i.i250.5, align 8, !tbaa !2
>   %add78.5 = fadd double %412, %413
>   store double %add78.5, double* %add.ptr.i.i250.5, align 8, !tbaa !2
>   %414 = load i32, i32* %arrayidx6.i, align 4, !tbaa !6
>   %415 = load double, double* %arrayidx3.6.i, align 8, !tbaa !2
>   %conv.i254.6 = sext i32 %414 to i64
>   %add.ptr.i.i256.6 = getelementptr inbounds double, double* %369, i64 %conv.i254.6
>   %416 = load double, double* %add.ptr.i.i256.6, align 8, !tbaa !2
>   %add70.6 = fadd double %415, %416
>   store double %add70.6, double* %add.ptr.i.i256.6, align 8, !tbaa !2
>   %417 = load double, double* %arrayidx10.6.i, align 8, !tbaa !2
>   %add.ptr.i.i253.6 = getelementptr inbounds double, double* %370, i64 %conv.i254.6
>   %418 = load double, double* %add.ptr.i.i253.6, align 8, !tbaa !2
>   %add74.6 = fadd double %417, %418
>   store double %add74.6, double* %add.ptr.i.i253.6, align 8, !tbaa !2
>   %419 = load double, double* %arrayidx17.6.i, align 8, !tbaa !2
>   %add.ptr.i.i250.6 = getelementptr inbounds double, double* %371, i64 %conv.i254.6
>   %420 = load double, double* %add.ptr.i.i250.6, align 8, !tbaa !2
>   %add78.6 = fadd double %419, %420
>   store double %add78.6, double* %add.ptr.i.i250.6, align 8, !tbaa !2
>   %421 = load i32, i32* %arrayidx7.i, align 4, !tbaa !6
>   %422 = load double, double* %arrayidx3.7.i, align 8, !tbaa !2
>   %conv.i254.7 = sext i32 %421 to i64
>   %add.ptr.i.i256.7 = getelementptr inbounds double, double* %369, i64 %conv.i254.7
>   %423 = load double, double* %add.ptr.i.i256.7, align 8, !tbaa !2
>   %add70.7 = fadd double %422, %423
>   store double %add70.7, double* %add.ptr.i.i256.7, align 8, !tbaa !2
>   %424 = load double, double* %arrayidx10.7.i, align 8, !tbaa !2
>   %add.ptr.i.i253.7 = getelementptr inbounds double, double* %370, i64 %conv.i254.7
>   %425 = load double, double* %add.ptr.i.i253.7, align 8, !tbaa !2
>   %add74.7 = fadd double %424, %425
>   store double %add74.7, double* %add.ptr.i.i253.7, align 8, !tbaa !2
>   %426 = load double, double* %arrayidx17.7.i, align 8, !tbaa !2
>   %add.ptr.i.i250.7 = getelementptr inbounds double, double* %371, i64 %conv.i254.7
>   %427 = load double, double* %add.ptr.i.i250.7, align 8, !tbaa !2
>   %add78.7 = fadd double %426, %427
>   store double %add78.7, double* %add.ptr.i.i250.7, align 8, !tbaa !2
>   br label %if.end79
> 
> if.end79:                                         ; preds = %if.else, %if.then35
>   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %16) #7
>   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %15) #7
>   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %14) #7
>   call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %13) #7
>   %indvars.iv.next355 = add nsw i64 %indvars.iv354, 1
>   %add80 = add nsw i32 %.omp.iv.0346, 1
>   %428 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %429 = sext i32 %428 to i64
>   %cmp14.not.not = icmp slt i64 %indvars.iv354, %429
>   br i1 %cmp14.not.not, label %invoke.cont33, label %omp.loop.exit
> 
> omp.loop.exit:                                    ; preds = %if.end79, %omp.precond.then
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %0)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #7
>   br label %omp.precond.end
> 
> omp.precond.end:                                  ; preds = %omp.loop.exit, %omp_if.end
>   call void @__kmpc_barrier(%struct.ident_t* nonnull @3, i32 %0) #7
>   %430 = load i32, i32* %numthreads, align 4, !tbaa !6
>   %cmp81 = icmp sgt i32 %430, 1
>   br i1 %cmp81, label %if.then82, label %if.end153
> 
> if.then82:                                        ; preds = %omp.precond.end
>   %431 = load i32, i32* %numNode, align 4, !tbaa !6
>   %sub90 = add nsw i32 %431, -1
>   %cmp92 = icmp sgt i32 %431, 0
>   br i1 %cmp92, label %omp.precond.then93, label %omp.precond.end149
> 
> omp.precond.then93:                               ; preds = %if.then82
>   %432 = bitcast i32* %.omp.lb94 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %432) #7
>   store i32 0, i32* %.omp.lb94, align 4, !tbaa !6
>   %433 = bitcast i32* %.omp.ub95 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %433) #7
>   store i32 %sub90, i32* %.omp.ub95, align 4, !tbaa !6
>   %434 = bitcast i32* %.omp.stride96 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %434) #7
>   store i32 1, i32* %.omp.stride96, align 4, !tbaa !6
>   %435 = bitcast i32* %.omp.is_last97 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %435) #7
>   store i32 0, i32* %.omp.is_last97, align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %0, i32 34, i32* nonnull %.omp.is_last97, i32* nonnull %.omp.lb94, i32* nonnull %.omp.ub95, i32* nonnull %.omp.stride96, i32 1, i32 1) #7
>   %436 = load i32, i32* %.omp.ub95, align 4, !tbaa !6
>   %cmp100.not = icmp slt i32 %436, %431
>   %cond104 = select i1 %cmp100.not, i32 %436, i32 %sub90
>   store i32 %cond104, i32* %.omp.ub95, align 4, !tbaa !6
>   %437 = load i32, i32* %.omp.lb94, align 4, !tbaa !6
>   %cmp106.not342 = icmp sgt i32 %437, %cond104
>   br i1 %cmp106.not342, label %omp.loop.exit142, label %omp.inner.for.body108.lr.ph
> 
> omp.inner.for.body108.lr.ph:                      ; preds = %omp.precond.then93
>   %m_nodeElemStart.i244 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 92
>   %438 = load i32*, i32** %m_nodeElemStart.i244, align 8, !tbaa !81
>   %m_nodeElemCornerList.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 93
>   %439 = load i32*, i32** %m_nodeElemCornerList.i, align 8, !tbaa !82
>   %440 = load double*, double** %fx_elem, align 8
>   %441 = load double*, double** %fy_elem, align 8
>   %442 = load double*, double** %fz_elem, align 8
>   %_M_start.i.i241 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 9, i32 0, i32 0, i32 0, i32 0
>   %443 = load double*, double** %_M_start.i.i241, align 8, !tbaa !11
>   %_M_start.i.i238 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 10, i32 0, i32 0, i32 0, i32 0
>   %444 = load double*, double** %_M_start.i.i238, align 8, !tbaa !11
>   %_M_start.i.i235 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 11, i32 0, i32 0, i32 0, i32 0
>   %445 = load double*, double** %_M_start.i.i235, align 8, !tbaa !11
>   %446 = sext i32 %437 to i64
>   %447 = icmp sgt i32 %cond104, %437
>   %smax = select i1 %447, i32 %cond104, i32 %437
>   %448 = add i32 %smax, 1
>   %wide.trip.count349 = sext i32 %448 to i64
>   %arrayidx4.i247.phi.trans.insert = getelementptr inbounds i32, i32* %438, i64 %446
>   %.pre = load i32, i32* %arrayidx4.i247.phi.trans.insert, align 4, !tbaa !6
>   br label %omp.inner.for.body108
> 
> omp.inner.for.body108:                            ; preds = %for.cond.cleanup119, %omp.inner.for.body108.lr.ph
>   %449 = phi i32 [ %450, %for.cond.cleanup119 ], [ %.pre, %omp.inner.for.body108.lr.ph ]
>   %indvars.iv347 = phi i64 [ %indvars.iv.next348, %for.cond.cleanup119 ], [ %446, %omp.inner.for.body108.lr.ph ]
>   %indvars.iv.next348 = add nsw i64 %indvars.iv347, 1
>   %arrayidx.i246 = getelementptr inbounds i32, i32* %438, i64 %indvars.iv.next348
>   %450 = load i32, i32* %arrayidx.i246, align 4, !tbaa !6
>   %sub.i = sub i32 %450, %449
>   %idxprom2.i = sext i32 %449 to i64
>   %arrayidx3.i243 = getelementptr inbounds i32, i32* %439, i64 %idxprom2.i
>   %cmp118335 = icmp sgt i32 %sub.i, 0
>   br i1 %cmp118335, label %for.body120.preheader, label %for.cond.cleanup119
> 
> for.body120.preheader:                            ; preds = %omp.inner.for.body108
>   %wide.trip.count = zext i32 %sub.i to i64
>   %451 = add nsw i64 %wide.trip.count, -1
>   %xtraiter = and i64 %wide.trip.count, 3
>   %452 = icmp ult i64 %451, 3
>   br i1 %452, label %for.cond.cleanup119.loopexit.unr-lcssa, label %for.body120.preheader.new
> 
> for.body120.preheader.new:                        ; preds = %for.body120.preheader
>   %unroll_iter = and i64 %wide.trip.count, 4294967292
>   br label %for.body120
> 
> for.cond.cleanup119.loopexit.unr-lcssa:           ; preds = %for.body120, %for.body120.preheader
>   %add125.lcssa.ph = phi double [ undef, %for.body120.preheader ], [ %add125.3, %for.body120 ]
>   %add128.lcssa.ph = phi double [ undef, %for.body120.preheader ], [ %add128.3, %for.body120 ]
>   %add131.lcssa.ph = phi double [ undef, %for.body120.preheader ], [ %add131.3, %for.body120 ]
>   %indvars.iv.unr = phi i64 [ 0, %for.body120.preheader ], [ %indvars.iv.next.3, %for.body120 ]
>   %fz_tmp.0338.unr = phi double [ 0.000000e+00, %for.body120.preheader ], [ %add131.3, %for.body120 ]
>   %fy_tmp.0337.unr = phi double [ 0.000000e+00, %for.body120.preheader ], [ %add128.3, %for.body120 ]
>   %fx_tmp.0336.unr = phi double [ 0.000000e+00, %for.body120.preheader ], [ %add125.3, %for.body120 ]
>   %lcmp.mod.not = icmp eq i64 %xtraiter, 0
>   br i1 %lcmp.mod.not, label %for.cond.cleanup119, label %for.body120.epil
> 
> for.body120.epil:                                 ; preds = %for.cond.cleanup119.loopexit.unr-lcssa, %for.body120.epil
>   %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body120.epil ], [ %indvars.iv.unr, %for.cond.cleanup119.loopexit.unr-lcssa ]
>   %fz_tmp.0338.epil = phi double [ %add131.epil, %for.body120.epil ], [ %fz_tmp.0338.unr, %for.cond.cleanup119.loopexit.unr-lcssa ]
>   %fy_tmp.0337.epil = phi double [ %add128.epil, %for.body120.epil ], [ %fy_tmp.0337.unr, %for.cond.cleanup119.loopexit.unr-lcssa ]
>   %fx_tmp.0336.epil = phi double [ %add125.epil, %for.body120.epil ], [ %fx_tmp.0336.unr, %for.cond.cleanup119.loopexit.unr-lcssa ]
>   %epil.iter = phi i64 [ %epil.iter.sub, %for.body120.epil ], [ %xtraiter, %for.cond.cleanup119.loopexit.unr-lcssa ]
>   %arrayidx122.epil = getelementptr inbounds i32, i32* %arrayidx3.i243, i64 %indvars.iv.epil
>   %453 = load i32, i32* %arrayidx122.epil, align 4, !tbaa !6
>   %idxprom123.epil = sext i32 %453 to i64
>   %arrayidx124.epil = getelementptr inbounds double, double* %440, i64 %idxprom123.epil
>   %454 = load double, double* %arrayidx124.epil, align 8, !tbaa !2
>   %add125.epil = fadd double %fx_tmp.0336.epil, %454
>   %arrayidx127.epil = getelementptr inbounds double, double* %441, i64 %idxprom123.epil
>   %455 = load double, double* %arrayidx127.epil, align 8, !tbaa !2
>   %add128.epil = fadd double %fy_tmp.0337.epil, %455
>   %arrayidx130.epil = getelementptr inbounds double, double* %442, i64 %idxprom123.epil
>   %456 = load double, double* %arrayidx130.epil, align 8, !tbaa !2
>   %add131.epil = fadd double %fz_tmp.0338.epil, %456
>   %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
>   %epil.iter.sub = add i64 %epil.iter, -1
>   %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
>   br i1 %epil.iter.cmp.not, label %for.cond.cleanup119, label %for.body120.epil, !llvm.loop !83
> 
> for.cond.cleanup119:                              ; preds = %for.cond.cleanup119.loopexit.unr-lcssa, %for.body120.epil, %omp.inner.for.body108
>   %fx_tmp.0.lcssa = phi double [ 0.000000e+00, %omp.inner.for.body108 ], [ %add125.lcssa.ph, %for.cond.cleanup119.loopexit.unr-lcssa ], [ %add125.epil, %for.body120.epil ]
>   %fy_tmp.0.lcssa = phi double [ 0.000000e+00, %omp.inner.for.body108 ], [ %add128.lcssa.ph, %for.cond.cleanup119.loopexit.unr-lcssa ], [ %add128.epil, %for.body120.epil ]
>   %fz_tmp.0.lcssa = phi double [ 0.000000e+00, %omp.inner.for.body108 ], [ %add131.lcssa.ph, %for.cond.cleanup119.loopexit.unr-lcssa ], [ %add131.epil, %for.body120.epil ]
>   %add.ptr.i.i242 = getelementptr inbounds double, double* %443, i64 %indvars.iv347
>   store double %fx_tmp.0.lcssa, double* %add.ptr.i.i242, align 8, !tbaa !2
>   %add.ptr.i.i239 = getelementptr inbounds double, double* %444, i64 %indvars.iv347
>   store double %fy_tmp.0.lcssa, double* %add.ptr.i.i239, align 8, !tbaa !2
>   %add.ptr.i.i236 = getelementptr inbounds double, double* %445, i64 %indvars.iv347
>   store double %fz_tmp.0.lcssa, double* %add.ptr.i.i236, align 8, !tbaa !2
>   %exitcond350.not = icmp eq i64 %indvars.iv.next348, %wide.trip.count349
>   br i1 %exitcond350.not, label %omp.loop.exit142, label %omp.inner.for.body108
> 
> for.body120:                                      ; preds = %for.body120, %for.body120.preheader.new
>   %indvars.iv = phi i64 [ 0, %for.body120.preheader.new ], [ %indvars.iv.next.3, %for.body120 ]
>   %fz_tmp.0338 = phi double [ 0.000000e+00, %for.body120.preheader.new ], [ %add131.3, %for.body120 ]
>   %fy_tmp.0337 = phi double [ 0.000000e+00, %for.body120.preheader.new ], [ %add128.3, %for.body120 ]
>   %fx_tmp.0336 = phi double [ 0.000000e+00, %for.body120.preheader.new ], [ %add125.3, %for.body120 ]
>   %niter = phi i64 [ %unroll_iter, %for.body120.preheader.new ], [ %niter.nsub.3, %for.body120 ]
>   %arrayidx122 = getelementptr inbounds i32, i32* %arrayidx3.i243, i64 %indvars.iv
>   %457 = load i32, i32* %arrayidx122, align 4, !tbaa !6
>   %idxprom123 = sext i32 %457 to i64
>   %arrayidx124 = getelementptr inbounds double, double* %440, i64 %idxprom123
>   %458 = load double, double* %arrayidx124, align 8, !tbaa !2
>   %add125 = fadd double %fx_tmp.0336, %458
>   %arrayidx127 = getelementptr inbounds double, double* %441, i64 %idxprom123
>   %459 = load double, double* %arrayidx127, align 8, !tbaa !2
>   %add128 = fadd double %fy_tmp.0337, %459
>   %arrayidx130 = getelementptr inbounds double, double* %442, i64 %idxprom123
>   %460 = load double, double* %arrayidx130, align 8, !tbaa !2
>   %add131 = fadd double %fz_tmp.0338, %460
>   %indvars.iv.next = or i64 %indvars.iv, 1
>   %arrayidx122.1 = getelementptr inbounds i32, i32* %arrayidx3.i243, i64 %indvars.iv.next
>   %461 = load i32, i32* %arrayidx122.1, align 4, !tbaa !6
>   %idxprom123.1 = sext i32 %461 to i64
>   %arrayidx124.1 = getelementptr inbounds double, double* %440, i64 %idxprom123.1
>   %462 = load double, double* %arrayidx124.1, align 8, !tbaa !2
>   %add125.1 = fadd double %add125, %462
>   %arrayidx127.1 = getelementptr inbounds double, double* %441, i64 %idxprom123.1
>   %463 = load double, double* %arrayidx127.1, align 8, !tbaa !2
>   %add128.1 = fadd double %add128, %463
>   %arrayidx130.1 = getelementptr inbounds double, double* %442, i64 %idxprom123.1
>   %464 = load double, double* %arrayidx130.1, align 8, !tbaa !2
>   %add131.1 = fadd double %add131, %464
>   %indvars.iv.next.1 = or i64 %indvars.iv, 2
>   %arrayidx122.2 = getelementptr inbounds i32, i32* %arrayidx3.i243, i64 %indvars.iv.next.1
>   %465 = load i32, i32* %arrayidx122.2, align 4, !tbaa !6
>   %idxprom123.2 = sext i32 %465 to i64
>   %arrayidx124.2 = getelementptr inbounds double, double* %440, i64 %idxprom123.2
>   %466 = load double, double* %arrayidx124.2, align 8, !tbaa !2
>   %add125.2 = fadd double %add125.1, %466
>   %arrayidx127.2 = getelementptr inbounds double, double* %441, i64 %idxprom123.2
>   %467 = load double, double* %arrayidx127.2, align 8, !tbaa !2
>   %add128.2 = fadd double %add128.1, %467
>   %arrayidx130.2 = getelementptr inbounds double, double* %442, i64 %idxprom123.2
>   %468 = load double, double* %arrayidx130.2, align 8, !tbaa !2
>   %add131.2 = fadd double %add131.1, %468
>   %indvars.iv.next.2 = or i64 %indvars.iv, 3
>   %arrayidx122.3 = getelementptr inbounds i32, i32* %arrayidx3.i243, i64 %indvars.iv.next.2
>   %469 = load i32, i32* %arrayidx122.3, align 4, !tbaa !6
>   %idxprom123.3 = sext i32 %469 to i64
>   %arrayidx124.3 = getelementptr inbounds double, double* %440, i64 %idxprom123.3
>   %470 = load double, double* %arrayidx124.3, align 8, !tbaa !2
>   %add125.3 = fadd double %add125.2, %470
>   %arrayidx127.3 = getelementptr inbounds double, double* %441, i64 %idxprom123.3
>   %471 = load double, double* %arrayidx127.3, align 8, !tbaa !2
>   %add128.3 = fadd double %add128.2, %471
>   %arrayidx130.3 = getelementptr inbounds double, double* %442, i64 %idxprom123.3
>   %472 = load double, double* %arrayidx130.3, align 8, !tbaa !2
>   %add131.3 = fadd double %add131.2, %472
>   %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
>   %niter.nsub.3 = add i64 %niter, -4
>   %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
>   br i1 %niter.ncmp.3, label %for.cond.cleanup119.loopexit.unr-lcssa, label %for.body120
> 
> omp.loop.exit142:                                 ; preds = %for.cond.cleanup119, %omp.precond.then93
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %0)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %435) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %434) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %433) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %432) #7
>   br label %omp.precond.end149
> 
> omp.precond.end149:                               ; preds = %omp.loop.exit142, %if.then82
>   call void @__kmpc_barrier(%struct.ident_t* nonnull @3, i32 %0) #7
>   br label %if.end153
9583c5928
< 938:                                              ; preds = %936
---
> if.end153:                                        ; preds = %omp.precond.end149, %omp.precond.end
9585,9591d5929
< 
< 939:                                              ; preds = %936, %16
<   %940 = landingpad { i8*, i32 }
<           catch i8* null
<   %941 = extractvalue { i8*, i32 } %940, 0
<   call void @__clang_call_terminate(i8* %941) #29
<   unreachable
9593a5932,5942
> ; Function Attrs: inaccessiblemem_or_argmemonly
> declare void @__kmpc_end_master(%struct.ident_t*, i32) local_unnamed_addr #16
> 
> ; Function Attrs: inaccessiblemem_or_argmemonly
> declare i32 @__kmpc_master(%struct.ident_t*, i32) local_unnamed_addr #16
> 
> ; Function Attrs: nounwind
> declare dso_local i32 @omp_get_num_threads() local_unnamed_addr #7
> 
> declare void @__kmpc_barrier(%struct.ident_t*, i32) local_unnamed_addr
> 
9595,10170c5944,6826
< define internal void @.omp_outlined..29(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, i64 %2, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %3, double** nocapture nonnull readonly align 8 dereferenceable(8) %4, double** nocapture nonnull readonly align 8 dereferenceable(8) %5, double** nocapture nonnull readonly align 8 dereferenceable(8) %6, double** nocapture nonnull readonly align 8 dereferenceable(8) %7, double** nocapture nonnull readonly align 8 dereferenceable(8) %8, double** nocapture nonnull readonly align 8 dereferenceable(8) %9, double** nocapture nonnull readonly align 8 dereferenceable(8) %10) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %12 = alloca i32, align 4
<   %13 = alloca i32, align 4
<   %14 = alloca i32, align 4
<   %15 = alloca i32, align 4
<   %16 = trunc i64 %2 to i32
<   %17 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL28CalcHourglassControlForElemsR6DomainPddE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %17)
<           to label %18 unwind label %529
< 
< 18:                                               ; preds = %11
<   %19 = add nsw i32 %16, -1
<   %20 = icmp sgt i32 %16, 0
<   br i1 %20, label %21, label %525
< 
< 21:                                               ; preds = %18
<   %22 = bitcast i32* %12 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22) #10
<   store i32 0, i32* %12, align 4, !tbaa !12
<   %23 = bitcast i32* %13 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %23) #10
<   store i32 %19, i32* %13, align 4, !tbaa !12
<   %24 = bitcast i32* %14 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #10
<   store i32 1, i32* %14, align 4, !tbaa !12
<   %25 = bitcast i32* %15 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %25) #10
<   store i32 0, i32* %15, align 4, !tbaa !12
<   %26 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %26, i32 34, i32* nonnull %15, i32* nonnull %12, i32* nonnull %13, i32* nonnull %14, i32 1, i32 1) #10
<   %27 = load i32, i32* %13, align 4, !tbaa !12
<   %28 = icmp slt i32 %27, %16
<   %29 = select i1 %28, i32 %27, i32 %19
<   store i32 %29, i32* %13, align 4, !tbaa !12
<   %30 = load i32, i32* %12, align 4, !tbaa !12
<   %31 = icmp sgt i32 %30, %29
<   br i1 %31, label %524, label %32
< 
< 32:                                               ; preds = %21
<   %33 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 21, i32 0, i32 0, i32 0
<   %34 = getelementptr %class.Domain, %class.Domain* %3, i64 0, i32 0, i32 0, i32 0, i32 0
<   %35 = getelementptr %class.Domain, %class.Domain* %3, i64 0, i32 1, i32 0, i32 0, i32 0
<   %36 = getelementptr %class.Domain, %class.Domain* %3, i64 0, i32 2, i32 0, i32 0, i32 0
<   %37 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 44, i32 0, i32 0, i32 0
<   %38 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 43, i32 0, i32 0, i32 0
<   %39 = sext i32 %30 to i64
<   %40 = add i32 %29, 1
<   %41 = load i32*, i32** %33, align 8, !tbaa !19
<   %42 = load double*, double** %34, align 8, !tbaa !22
<   %43 = load double*, double** %35, align 8, !tbaa !22
<   %44 = load double*, double** %36, align 8, !tbaa !22
<   %45 = load double*, double** %4, align 8, !tbaa !6
<   %46 = load double*, double** %5, align 8, !tbaa !6
<   %47 = load double*, double** %6, align 8, !tbaa !6
<   %48 = load double*, double** %7, align 8, !tbaa !6
<   %49 = load double*, double** %8, align 8, !tbaa !6
<   %50 = load double*, double** %9, align 8, !tbaa !6
<   %51 = load double*, double** %37, align 8, !tbaa !22
<   %52 = load double*, double** %38, align 8, !tbaa !22
<   %53 = load double*, double** %10, align 8, !tbaa !6
<   br label %54
< 
< 54:                                               ; preds = %32, %519
<   %55 = phi i64 [ %39, %32 ], [ %520, %519 ]
<   %56 = phi i32 [ %30, %32 ], [ %521, %519 ]
<   %57 = shl nsw i32 %56, 3
<   %58 = sext i32 %57 to i64
<   %59 = getelementptr inbounds i32, i32* %41, i64 %58
<   %60 = load i32, i32* %59, align 4, !tbaa !12
<   %61 = getelementptr inbounds i32, i32* %59, i64 1
<   %62 = load i32, i32* %61, align 4, !tbaa !12
<   %63 = getelementptr inbounds i32, i32* %59, i64 2
<   %64 = load i32, i32* %63, align 4, !tbaa !12
<   %65 = getelementptr inbounds i32, i32* %59, i64 3
<   %66 = load i32, i32* %65, align 4, !tbaa !12
<   %67 = getelementptr inbounds i32, i32* %59, i64 4
<   %68 = load i32, i32* %67, align 4, !tbaa !12
<   %69 = getelementptr inbounds i32, i32* %59, i64 5
<   %70 = load i32, i32* %69, align 4, !tbaa !12
<   %71 = getelementptr inbounds i32, i32* %59, i64 6
<   %72 = load i32, i32* %71, align 4, !tbaa !12
<   %73 = getelementptr inbounds i32, i32* %59, i64 7
<   %74 = load i32, i32* %73, align 4, !tbaa !12
<   %75 = sext i32 %60 to i64
<   %76 = getelementptr inbounds double, double* %42, i64 %75
<   %77 = load double, double* %76, align 8, !tbaa !2
<   %78 = sext i32 %62 to i64
<   %79 = getelementptr inbounds double, double* %42, i64 %78
<   %80 = load double, double* %79, align 8, !tbaa !2
<   %81 = sext i32 %64 to i64
<   %82 = getelementptr inbounds double, double* %42, i64 %81
<   %83 = load double, double* %82, align 8, !tbaa !2
<   %84 = sext i32 %66 to i64
<   %85 = getelementptr inbounds double, double* %42, i64 %84
<   %86 = load double, double* %85, align 8, !tbaa !2
<   %87 = sext i32 %68 to i64
<   %88 = getelementptr inbounds double, double* %42, i64 %87
<   %89 = load double, double* %88, align 8, !tbaa !2
<   %90 = sext i32 %70 to i64
<   %91 = getelementptr inbounds double, double* %42, i64 %90
<   %92 = load double, double* %91, align 8, !tbaa !2
<   %93 = sext i32 %72 to i64
<   %94 = getelementptr inbounds double, double* %42, i64 %93
<   %95 = load double, double* %94, align 8, !tbaa !2
<   %96 = sext i32 %74 to i64
<   %97 = getelementptr inbounds double, double* %42, i64 %96
<   %98 = load double, double* %97, align 8, !tbaa !2
<   %99 = getelementptr inbounds double, double* %43, i64 %75
<   %100 = load double, double* %99, align 8, !tbaa !2
<   %101 = getelementptr inbounds double, double* %43, i64 %78
<   %102 = load double, double* %101, align 8, !tbaa !2
<   %103 = getelementptr inbounds double, double* %43, i64 %81
<   %104 = load double, double* %103, align 8, !tbaa !2
<   %105 = getelementptr inbounds double, double* %43, i64 %84
<   %106 = load double, double* %105, align 8, !tbaa !2
<   %107 = getelementptr inbounds double, double* %43, i64 %87
<   %108 = load double, double* %107, align 8, !tbaa !2
<   %109 = getelementptr inbounds double, double* %43, i64 %90
<   %110 = load double, double* %109, align 8, !tbaa !2
<   %111 = getelementptr inbounds double, double* %43, i64 %93
<   %112 = load double, double* %111, align 8, !tbaa !2
<   %113 = getelementptr inbounds double, double* %43, i64 %96
<   %114 = load double, double* %113, align 8, !tbaa !2
<   %115 = getelementptr inbounds double, double* %44, i64 %75
<   %116 = load double, double* %115, align 8, !tbaa !2
<   %117 = getelementptr inbounds double, double* %44, i64 %78
<   %118 = load double, double* %117, align 8, !tbaa !2
<   %119 = getelementptr inbounds double, double* %44, i64 %81
<   %120 = load double, double* %119, align 8, !tbaa !2
<   %121 = getelementptr inbounds double, double* %44, i64 %84
<   %122 = load double, double* %121, align 8, !tbaa !2
<   %123 = getelementptr inbounds double, double* %44, i64 %87
<   %124 = load double, double* %123, align 8, !tbaa !2
<   %125 = getelementptr inbounds double, double* %44, i64 %90
<   %126 = load double, double* %125, align 8, !tbaa !2
<   %127 = getelementptr inbounds double, double* %44, i64 %93
<   %128 = load double, double* %127, align 8, !tbaa !2
<   %129 = getelementptr inbounds double, double* %44, i64 %96
<   %130 = load double, double* %129, align 8, !tbaa !2
<   %131 = fadd double %104, %106
<   %132 = fadd double %118, %120
<   %133 = fmul double %131, %132
<   %134 = fadd double %102, %104
<   %135 = fadd double %120, %122
<   %136 = fmul double %134, %135
<   %137 = fsub double %133, %136
<   %138 = fadd double %102, %110
<   %139 = fadd double %124, %126
<   %140 = fmul double %138, %139
<   %141 = fadd double %137, %140
<   %142 = fadd double %108, %110
<   %143 = fadd double %118, %126
<   %144 = fmul double %142, %143
<   %145 = fsub double %141, %144
<   %146 = fadd double %106, %114
<   %147 = fadd double %124, %130
<   %148 = fmul double %146, %147
<   %149 = fsub double %145, %148
<   %150 = fadd double %108, %114
<   %151 = fadd double %122, %130
<   %152 = fmul double %150, %151
<   %153 = fadd double %152, %149
<   %154 = fadd double %83, %86
<   %155 = fadd double %80, %83
<   %156 = fmul double %155, %135
<   %157 = fmul double %154, %132
<   %158 = fsub double %156, %157
<   %159 = fadd double %80, %92
<   %160 = fmul double %159, %139
<   %161 = fsub double %158, %160
<   %162 = fadd double %89, %92
<   %163 = fmul double %162, %143
<   %164 = fadd double %163, %161
<   %165 = fadd double %86, %98
<   %166 = fmul double %165, %147
<   %167 = fadd double %164, %166
<   %168 = fadd double %89, %98
<   %169 = fmul double %168, %151
<   %170 = fsub double %167, %169
<   %171 = fmul double %154, %134
<   %172 = fmul double %155, %131
<   %173 = fsub double %171, %172
<   %174 = fmul double %162, %138
<   %175 = fsub double %173, %174
<   %176 = fmul double %159, %142
<   %177 = fadd double %176, %175
<   %178 = fmul double %168, %146
<   %179 = fadd double %177, %178
<   %180 = fmul double %165, %150
<   %181 = fsub double %179, %180
<   %182 = fmul double %153, 0x3FB5555555555555
<   %183 = fmul double %170, 0x3FB5555555555555
<   %184 = fmul double %181, 0x3FB5555555555555
<   %185 = fadd double %116, %118
<   %186 = fmul double %134, %185
<   %187 = fadd double %100, %102
<   %188 = fmul double %187, %132
<   %189 = fsub double %186, %188
<   %190 = fadd double %100, %108
<   %191 = fmul double %190, %147
<   %192 = fadd double %189, %191
<   %193 = fadd double %116, %124
<   %194 = fmul double %150, %193
<   %195 = fsub double %192, %194
<   %196 = fadd double %104, %112
<   %197 = fadd double %128, %130
<   %198 = fmul double %196, %197
<   %199 = fsub double %195, %198
<   %200 = fadd double %112, %114
<   %201 = fadd double %120, %128
<   %202 = fmul double %200, %201
<   %203 = fadd double %202, %199
<   %204 = fadd double %77, %80
<   %205 = fmul double %204, %132
<   %206 = fmul double %155, %185
<   %207 = fsub double %205, %206
<   %208 = fadd double %77, %89
<   %209 = fmul double %208, %147
<   %210 = fsub double %207, %209
<   %211 = fmul double %168, %193
<   %212 = fadd double %211, %210
<   %213 = fadd double %83, %95
<   %214 = fmul double %213, %197
<   %215 = fadd double %214, %212
<   %216 = fadd double %95, %98
<   %217 = fmul double %216, %201
<   %218 = fsub double %215, %217
<   %219 = fmul double %155, %187
<   %220 = fmul double %204, %134
<   %221 = fsub double %219, %220
<   %222 = fmul double %168, %190
<   %223 = fsub double %221, %222
<   %224 = fmul double %208, %150
<   %225 = fadd double %223, %224
<   %226 = fmul double %216, %196
<   %227 = fadd double %226, %225
<   %228 = fmul double %213, %200
<   %229 = fsub double %227, %228
<   %230 = fmul double %203, 0x3FB5555555555555
<   %231 = fmul double %218, 0x3FB5555555555555
<   %232 = fmul double %229, 0x3FB5555555555555
<   %233 = fadd double %116, %122
<   %234 = fmul double %187, %233
<   %235 = fadd double %100, %106
<   %236 = fmul double %235, %185
<   %237 = fsub double %234, %236
<   %238 = fmul double %146, %197
<   %239 = fadd double %237, %238
<   %240 = fmul double %200, %151
<   %241 = fsub double %239, %240
<   %242 = fadd double %126, %128
<   %243 = fmul double %138, %242
<   %244 = fsub double %241, %243
<   %245 = fadd double %110, %112
<   %246 = fmul double %245, %143
<   %247 = fadd double %246, %244
<   %248 = fadd double %77, %86
<   %249 = fmul double %248, %185
<   %250 = fmul double %204, %233
<   %251 = fsub double %249, %250
<   %252 = fmul double %165, %197
<   %253 = fsub double %251, %252
<   %254 = fmul double %216, %151
<   %255 = fadd double %254, %253
<   %256 = fmul double %159, %242
<   %257 = fadd double %256, %255
<   %258 = fadd double %92, %95
<   %259 = fmul double %258, %143
<   %260 = fsub double %257, %259
<   %261 = fmul double %204, %235
<   %262 = fmul double %248, %187
<   %263 = fsub double %261, %262
<   %264 = fmul double %216, %146
<   %265 = fsub double %263, %264
<   %266 = fmul double %165, %200
<   %267 = fadd double %266, %265
<   %268 = fmul double %258, %138
<   %269 = fadd double %268, %267
<   %270 = fmul double %159, %245
<   %271 = fsub double %269, %270
<   %272 = fmul double %247, 0x3FB5555555555555
<   %273 = fmul double %260, 0x3FB5555555555555
<   %274 = fmul double %271, 0x3FB5555555555555
<   %275 = fmul double %235, %135
<   %276 = fmul double %131, %233
<   %277 = fsub double %275, %276
<   %278 = fmul double %196, %242
<   %279 = fadd double %277, %278
<   %280 = fmul double %245, %201
<   %281 = fsub double %279, %280
<   %282 = fmul double %190, %139
<   %283 = fsub double %281, %282
<   %284 = fmul double %142, %193
<   %285 = fadd double %284, %283
<   %286 = fmul double %154, %233
<   %287 = fmul double %248, %135
<   %288 = fsub double %286, %287
<   %289 = fmul double %213, %242
<   %290 = fsub double %288, %289
<   %291 = fmul double %258, %201
<   %292 = fadd double %291, %290
<   %293 = fmul double %208, %139
<   %294 = fadd double %293, %292
<   %295 = fmul double %162, %193
<   %296 = fsub double %294, %295
<   %297 = fmul double %248, %131
<   %298 = fmul double %154, %235
<   %299 = fsub double %297, %298
<   %300 = fmul double %258, %196
<   %301 = fsub double %299, %300
<   %302 = fmul double %213, %245
<   %303 = fadd double %302, %301
<   %304 = fmul double %162, %190
<   %305 = fadd double %304, %303
<   %306 = fmul double %208, %142
<   %307 = fsub double %305, %306
<   %308 = fmul double %285, 0x3FB5555555555555
<   %309 = fmul double %296, 0x3FB5555555555555
<   %310 = fmul double %307, 0x3FB5555555555555
<   %311 = fmul double %245, %197
<   %312 = fmul double %200, %242
<   %313 = fsub double %311, %312
<   %314 = fmul double %146, %233
<   %315 = fadd double %314, %313
<   %316 = fmul double %235, %151
<   %317 = fsub double %315, %316
<   %318 = fmul double %138, %185
<   %319 = fsub double %317, %318
<   %320 = fmul double %187, %143
<   %321 = fadd double %320, %319
<   %322 = fmul double %216, %242
<   %323 = fmul double %258, %197
<   %324 = fsub double %322, %323
<   %325 = fmul double %165, %233
<   %326 = fsub double %324, %325
<   %327 = fmul double %248, %151
<   %328 = fadd double %327, %326
<   %329 = fmul double %159, %185
<   %330 = fadd double %329, %328
<   %331 = fmul double %204, %143
<   %332 = fsub double %330, %331
<   %333 = fmul double %258, %200
<   %334 = fmul double %216, %245
<   %335 = fsub double %333, %334
<   %336 = fmul double %248, %146
<   %337 = fsub double %335, %336
<   %338 = fmul double %165, %235
<   %339 = fadd double %338, %337
<   %340 = fmul double %204, %138
<   %341 = fadd double %340, %339
<   %342 = fmul double %159, %187
<   %343 = fsub double %341, %342
<   %344 = fmul double %321, 0x3FB5555555555555
<   %345 = fmul double %332, 0x3FB5555555555555
<   %346 = fmul double %343, 0x3FB5555555555555
<   %347 = fmul double %200, %147
<   %348 = fmul double %150, %197
<   %349 = fsub double %347, %348
<   %350 = fmul double %190, %185
<   %351 = fadd double %350, %349
<   %352 = fmul double %187, %193
<   %353 = fsub double %351, %352
<   %354 = fmul double %196, %132
<   %355 = fsub double %353, %354
<   %356 = fmul double %134, %201
<   %357 = fadd double %356, %355
<   %358 = fmul double %168, %197
<   %359 = fmul double %216, %147
<   %360 = fsub double %358, %359
<   %361 = fmul double %208, %185
<   %362 = fsub double %360, %361
<   %363 = fmul double %204, %193
<   %364 = fadd double %363, %362
<   %365 = fmul double %213, %132
<   %366 = fadd double %365, %364
<   %367 = fmul double %155, %201
<   %368 = fsub double %366, %367
<   %369 = fmul double %216, %150
<   %370 = fmul double %168, %200
<   %371 = fsub double %369, %370
<   %372 = fmul double %204, %190
<   %373 = fsub double %371, %372
<   %374 = fmul double %208, %187
<   %375 = fadd double %374, %373
<   %376 = fmul double %155, %196
<   %377 = fadd double %376, %375
<   %378 = fmul double %213, %134
<   %379 = fsub double %377, %378
<   %380 = fmul double %357, 0x3FB5555555555555
<   %381 = fmul double %368, 0x3FB5555555555555
<   %382 = fmul double %379, 0x3FB5555555555555
<   %383 = fmul double %150, %139
<   %384 = fmul double %142, %147
<   %385 = fsub double %383, %384
<   %386 = fmul double %138, %132
<   %387 = fadd double %386, %385
<   %388 = fmul double %134, %143
<   %389 = fsub double %387, %388
<   %390 = fmul double %146, %135
<   %391 = fsub double %389, %390
<   %392 = fmul double %131, %151
<   %393 = fadd double %392, %391
<   %394 = fmul double %162, %147
<   %395 = fmul double %168, %139
<   %396 = fsub double %394, %395
<   %397 = fmul double %159, %132
<   %398 = fsub double %396, %397
<   %399 = fmul double %155, %143
<   %400 = fadd double %399, %398
<   %401 = fmul double %165, %135
<   %402 = fadd double %401, %400
<   %403 = fmul double %154, %151
<   %404 = fsub double %402, %403
<   %405 = fmul double %168, %142
<   %406 = fmul double %162, %150
<   %407 = fsub double %405, %406
<   %408 = fmul double %155, %138
<   %409 = fsub double %407, %408
<   %410 = fmul double %159, %134
<   %411 = fadd double %410, %409
<   %412 = fmul double %154, %146
<   %413 = fadd double %412, %411
<   %414 = fmul double %165, %131
<   %415 = fsub double %413, %414
<   %416 = fmul double %393, 0x3FB5555555555555
<   %417 = fmul double %404, 0x3FB5555555555555
<   %418 = fmul double %415, 0x3FB5555555555555
<   %419 = fmul double %142, %242
<   %420 = fmul double %245, %139
<   %421 = fsub double %419, %420
<   %422 = fmul double %196, %135
<   %423 = fadd double %422, %421
<   %424 = fmul double %131, %201
<   %425 = fsub double %423, %424
<   %426 = fmul double %190, %233
<   %427 = fsub double %425, %426
<   %428 = fmul double %235, %193
<   %429 = fadd double %428, %427
<   %430 = fmul double %258, %139
<   %431 = fmul double %162, %242
<   %432 = fsub double %430, %431
<   %433 = fmul double %213, %135
<   %434 = fsub double %432, %433
<   %435 = fmul double %154, %201
<   %436 = fadd double %435, %434
<   %437 = fmul double %208, %233
<   %438 = fadd double %437, %436
<   %439 = fmul double %248, %193
<   %440 = fsub double %438, %439
<   %441 = fmul double %162, %245
<   %442 = fmul double %258, %142
<   %443 = fsub double %441, %442
<   %444 = fmul double %154, %196
<   %445 = fsub double %443, %444
<   %446 = fmul double %213, %131
<   %447 = fadd double %446, %445
<   %448 = fmul double %248, %190
<   %449 = fadd double %448, %447
<   %450 = fmul double %208, %235
<   %451 = fsub double %449, %450
<   %452 = fmul double %429, 0x3FB5555555555555
<   %453 = fmul double %440, 0x3FB5555555555555
<   %454 = fmul double %451, 0x3FB5555555555555
<   %455 = getelementptr inbounds double, double* %45, i64 %58
<   store double %182, double* %455, align 8, !tbaa !2
<   %456 = getelementptr inbounds double, double* %46, i64 %58
<   store double %183, double* %456, align 8, !tbaa !2
<   %457 = getelementptr inbounds double, double* %47, i64 %58
<   store double %184, double* %457, align 8, !tbaa !2
<   %458 = getelementptr inbounds double, double* %48, i64 %58
<   store double %77, double* %458, align 8, !tbaa !2
<   %459 = getelementptr inbounds double, double* %49, i64 %58
<   store double %100, double* %459, align 8, !tbaa !2
<   %460 = getelementptr inbounds double, double* %50, i64 %58
<   store double %116, double* %460, align 8, !tbaa !2
<   %461 = or i64 %58, 1
<   %462 = getelementptr inbounds double, double* %45, i64 %461
<   store double %308, double* %462, align 8, !tbaa !2
<   %463 = getelementptr inbounds double, double* %46, i64 %461
<   store double %309, double* %463, align 8, !tbaa !2
<   %464 = getelementptr inbounds double, double* %47, i64 %461
<   store double %310, double* %464, align 8, !tbaa !2
<   %465 = getelementptr inbounds double, double* %48, i64 %461
<   store double %80, double* %465, align 8, !tbaa !2
<   %466 = getelementptr inbounds double, double* %49, i64 %461
<   store double %102, double* %466, align 8, !tbaa !2
<   %467 = getelementptr inbounds double, double* %50, i64 %461
<   store double %118, double* %467, align 8, !tbaa !2
<   %468 = or i64 %58, 2
<   %469 = getelementptr inbounds double, double* %45, i64 %468
<   store double %272, double* %469, align 8, !tbaa !2
<   %470 = getelementptr inbounds double, double* %46, i64 %468
<   store double %273, double* %470, align 8, !tbaa !2
<   %471 = getelementptr inbounds double, double* %47, i64 %468
<   store double %274, double* %471, align 8, !tbaa !2
<   %472 = getelementptr inbounds double, double* %48, i64 %468
<   store double %83, double* %472, align 8, !tbaa !2
<   %473 = getelementptr inbounds double, double* %49, i64 %468
<   store double %104, double* %473, align 8, !tbaa !2
<   %474 = getelementptr inbounds double, double* %50, i64 %468
<   store double %120, double* %474, align 8, !tbaa !2
<   %475 = or i64 %58, 3
<   %476 = getelementptr inbounds double, double* %45, i64 %475
<   store double %230, double* %476, align 8, !tbaa !2
<   %477 = getelementptr inbounds double, double* %46, i64 %475
<   store double %231, double* %477, align 8, !tbaa !2
<   %478 = getelementptr inbounds double, double* %47, i64 %475
<   store double %232, double* %478, align 8, !tbaa !2
<   %479 = getelementptr inbounds double, double* %48, i64 %475
<   store double %86, double* %479, align 8, !tbaa !2
<   %480 = getelementptr inbounds double, double* %49, i64 %475
<   store double %106, double* %480, align 8, !tbaa !2
<   %481 = getelementptr inbounds double, double* %50, i64 %475
<   store double %122, double* %481, align 8, !tbaa !2
<   %482 = or i64 %58, 4
<   %483 = getelementptr inbounds double, double* %45, i64 %482
<   store double %344, double* %483, align 8, !tbaa !2
<   %484 = getelementptr inbounds double, double* %46, i64 %482
<   store double %345, double* %484, align 8, !tbaa !2
<   %485 = getelementptr inbounds double, double* %47, i64 %482
<   store double %346, double* %485, align 8, !tbaa !2
<   %486 = getelementptr inbounds double, double* %48, i64 %482
<   store double %89, double* %486, align 8, !tbaa !2
<   %487 = getelementptr inbounds double, double* %49, i64 %482
<   store double %108, double* %487, align 8, !tbaa !2
<   %488 = getelementptr inbounds double, double* %50, i64 %482
<   store double %124, double* %488, align 8, !tbaa !2
<   %489 = or i64 %58, 5
<   %490 = getelementptr inbounds double, double* %45, i64 %489
<   store double %380, double* %490, align 8, !tbaa !2
<   %491 = getelementptr inbounds double, double* %46, i64 %489
<   store double %381, double* %491, align 8, !tbaa !2
<   %492 = getelementptr inbounds double, double* %47, i64 %489
<   store double %382, double* %492, align 8, !tbaa !2
<   %493 = getelementptr inbounds double, double* %48, i64 %489
<   store double %92, double* %493, align 8, !tbaa !2
<   %494 = getelementptr inbounds double, double* %49, i64 %489
<   store double %110, double* %494, align 8, !tbaa !2
<   %495 = getelementptr inbounds double, double* %50, i64 %489
<   store double %126, double* %495, align 8, !tbaa !2
<   %496 = or i64 %58, 6
<   %497 = getelementptr inbounds double, double* %45, i64 %496
<   store double %416, double* %497, align 8, !tbaa !2
<   %498 = getelementptr inbounds double, double* %46, i64 %496
<   store double %417, double* %498, align 8, !tbaa !2
<   %499 = getelementptr inbounds double, double* %47, i64 %496
<   store double %418, double* %499, align 8, !tbaa !2
<   %500 = getelementptr inbounds double, double* %48, i64 %496
<   store double %95, double* %500, align 8, !tbaa !2
<   %501 = getelementptr inbounds double, double* %49, i64 %496
<   store double %112, double* %501, align 8, !tbaa !2
<   %502 = getelementptr inbounds double, double* %50, i64 %496
<   store double %128, double* %502, align 8, !tbaa !2
<   %503 = or i64 %58, 7
<   %504 = getelementptr inbounds double, double* %45, i64 %503
<   store double %452, double* %504, align 8, !tbaa !2
<   %505 = getelementptr inbounds double, double* %46, i64 %503
<   store double %453, double* %505, align 8, !tbaa !2
<   %506 = getelementptr inbounds double, double* %47, i64 %503
<   store double %454, double* %506, align 8, !tbaa !2
<   %507 = getelementptr inbounds double, double* %48, i64 %503
<   store double %98, double* %507, align 8, !tbaa !2
<   %508 = getelementptr inbounds double, double* %49, i64 %503
<   store double %114, double* %508, align 8, !tbaa !2
<   %509 = getelementptr inbounds double, double* %50, i64 %503
<   store double %130, double* %509, align 8, !tbaa !2
<   %510 = getelementptr inbounds double, double* %51, i64 %55
<   %511 = load double, double* %510, align 8, !tbaa !2
<   %512 = getelementptr inbounds double, double* %52, i64 %55
<   %513 = load double, double* %512, align 8, !tbaa !2
<   %514 = fmul double %511, %513
<   %515 = getelementptr inbounds double, double* %53, i64 %55
<   store double %514, double* %515, align 8, !tbaa !2
<   %516 = load double, double* %512, align 8, !tbaa !2
<   %517 = fcmp ugt double %516, 0.000000e+00
<   br i1 %517, label %519, label %518
---
> define internal void @.omp_outlined..23(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i64 %numElem, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %domain, double** nocapture nonnull readonly align 8 dereferenceable(8) %dvdx, double** nocapture nonnull readonly align 8 dereferenceable(8) %dvdy, double** nocapture nonnull readonly align 8 dereferenceable(8) %dvdz, double** nocapture nonnull readonly align 8 dereferenceable(8) %x8n, double** nocapture nonnull readonly align 8 dereferenceable(8) %y8n, double** nocapture nonnull readonly align 8 dereferenceable(8) %z8n, double** nocapture nonnull readonly align 8 dereferenceable(8) %determ) #6 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
> entry:
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %x1 = alloca [8 x double], align 16
>   %y1 = alloca [8 x double], align 16
>   %z1 = alloca [8 x double], align 16
>   %pfx = alloca [8 x double], align 16
>   %pfy = alloca [8 x double], align 16
>   %pfz = alloca [8 x double], align 16
>   %numElem.addr.sroa.0.0.extract.trunc = trunc i64 %numElem to i32
>   %sub3 = add nsw i32 %numElem.addr.sroa.0.0.extract.trunc, -1
>   %cmp = icmp sgt i32 %numElem.addr.sroa.0.0.extract.trunc, 0
>   br i1 %cmp, label %omp.precond.then, label %omp.precond.end
> 
> omp.precond.then:                                 ; preds = %entry
>   %0 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %1 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #7
>   store i32 %sub3, i32* %.omp.ub, align 4, !tbaa !6
>   %2 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %3 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   %4 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %4, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %5 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp5.not = icmp slt i32 %5, %numElem.addr.sroa.0.0.extract.trunc
>   %cond = select i1 %cmp5.not, i32 %5, i32 %sub3
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %6 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp6.not116 = icmp sgt i32 %6, %cond
>   br i1 %cmp6.not116, label %omp.loop.exit, label %invoke.cont.lr.ph
> 
> invoke.cont.lr.ph:                                ; preds = %omp.precond.then
>   %7 = bitcast [8 x double]* %x1 to i8*
>   %8 = bitcast [8 x double]* %y1 to i8*
>   %9 = bitcast [8 x double]* %z1 to i8*
>   %10 = bitcast [8 x double]* %pfx to i8*
>   %11 = bitcast [8 x double]* %pfy to i8*
>   %12 = bitcast [8 x double]* %pfz to i8*
>   %_M_start.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 21, i32 0, i32 0, i32 0, i32 0
>   %arraydecay = getelementptr inbounds [8 x double], [8 x double]* %x1, i64 0, i64 0
>   %arraydecay7 = getelementptr inbounds [8 x double], [8 x double]* %y1, i64 0, i64 0
>   %arraydecay8 = getelementptr inbounds [8 x double], [8 x double]* %z1, i64 0, i64 0
>   %domain.idx = getelementptr %class.Domain, %class.Domain* %domain, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
>   %domain.idx90 = getelementptr %class.Domain, %class.Domain* %domain, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
>   %domain.idx91 = getelementptr %class.Domain, %class.Domain* %domain, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
>   %13 = bitcast [8 x double]* %x1 to i64*
>   %arrayidx10.i108 = getelementptr inbounds [8 x double], [8 x double]* %x1, i64 0, i64 1
>   %14 = bitcast double* %arrayidx10.i108 to i64*
>   %arrayidx12.i109 = getelementptr inbounds [8 x double], [8 x double]* %x1, i64 0, i64 2
>   %15 = bitcast double* %arrayidx12.i109 to i64*
>   %arrayidx14.i110 = getelementptr inbounds [8 x double], [8 x double]* %x1, i64 0, i64 3
>   %16 = bitcast double* %arrayidx14.i110 to i64*
>   %arrayidx16.i111 = getelementptr inbounds [8 x double], [8 x double]* %x1, i64 0, i64 4
>   %17 = bitcast double* %arrayidx16.i111 to i64*
>   %arrayidx18.i = getelementptr inbounds [8 x double], [8 x double]* %x1, i64 0, i64 5
>   %18 = bitcast double* %arrayidx18.i to i64*
>   %arrayidx20.i = getelementptr inbounds [8 x double], [8 x double]* %x1, i64 0, i64 6
>   %19 = bitcast double* %arrayidx20.i to i64*
>   %arrayidx22.i = getelementptr inbounds [8 x double], [8 x double]* %x1, i64 0, i64 7
>   %20 = bitcast double* %arrayidx22.i to i64*
>   %21 = bitcast [8 x double]* %y1 to i64*
>   %arrayidx26.i112 = getelementptr inbounds [8 x double], [8 x double]* %y1, i64 0, i64 1
>   %22 = bitcast double* %arrayidx26.i112 to i64*
>   %arrayidx28.i = getelementptr inbounds [8 x double], [8 x double]* %y1, i64 0, i64 2
>   %23 = bitcast double* %arrayidx28.i to i64*
>   %arrayidx30.i = getelementptr inbounds [8 x double], [8 x double]* %y1, i64 0, i64 3
>   %24 = bitcast double* %arrayidx30.i to i64*
>   %arrayidx32.i113 = getelementptr inbounds [8 x double], [8 x double]* %y1, i64 0, i64 4
>   %25 = bitcast double* %arrayidx32.i113 to i64*
>   %arrayidx34.i = getelementptr inbounds [8 x double], [8 x double]* %y1, i64 0, i64 5
>   %26 = bitcast double* %arrayidx34.i to i64*
>   %arrayidx36.i = getelementptr inbounds [8 x double], [8 x double]* %y1, i64 0, i64 6
>   %27 = bitcast double* %arrayidx36.i to i64*
>   %arrayidx38.i114 = getelementptr inbounds [8 x double], [8 x double]* %y1, i64 0, i64 7
>   %28 = bitcast double* %arrayidx38.i114 to i64*
>   %29 = bitcast [8 x double]* %z1 to i64*
>   %arrayidx42.i = getelementptr inbounds [8 x double], [8 x double]* %z1, i64 0, i64 1
>   %30 = bitcast double* %arrayidx42.i to i64*
>   %arrayidx44.i = getelementptr inbounds [8 x double], [8 x double]* %z1, i64 0, i64 2
>   %31 = bitcast double* %arrayidx44.i to i64*
>   %arrayidx46.i = getelementptr inbounds [8 x double], [8 x double]* %z1, i64 0, i64 3
>   %32 = bitcast double* %arrayidx46.i to i64*
>   %arrayidx48.i = getelementptr inbounds [8 x double], [8 x double]* %z1, i64 0, i64 4
>   %33 = bitcast double* %arrayidx48.i to i64*
>   %arrayidx50.i = getelementptr inbounds [8 x double], [8 x double]* %z1, i64 0, i64 5
>   %34 = bitcast double* %arrayidx50.i to i64*
>   %arrayidx52.i = getelementptr inbounds [8 x double], [8 x double]* %z1, i64 0, i64 6
>   %35 = bitcast double* %arrayidx52.i to i64*
>   %arrayidx54.i = getelementptr inbounds [8 x double], [8 x double]* %z1, i64 0, i64 7
>   %36 = bitcast double* %arrayidx54.i to i64*
>   %arraydecay9 = getelementptr inbounds [8 x double], [8 x double]* %pfx, i64 0, i64 0
>   %arraydecay10 = getelementptr inbounds [8 x double], [8 x double]* %pfy, i64 0, i64 0
>   %arraydecay11 = getelementptr inbounds [8 x double], [8 x double]* %pfz, i64 0, i64 0
>   %arrayidx39.i = getelementptr inbounds [8 x double], [8 x double]* %pfx, i64 0, i64 3
>   %arrayidx40.i = getelementptr inbounds [8 x double], [8 x double]* %pfy, i64 0, i64 3
>   %arrayidx41.i = getelementptr inbounds [8 x double], [8 x double]* %pfz, i64 0, i64 3
>   %arrayidx60.i = getelementptr inbounds [8 x double], [8 x double]* %pfx, i64 0, i64 2
>   %arrayidx61.i = getelementptr inbounds [8 x double], [8 x double]* %pfy, i64 0, i64 2
>   %arrayidx62.i = getelementptr inbounds [8 x double], [8 x double]* %pfz, i64 0, i64 2
>   %arrayidx81.i = getelementptr inbounds [8 x double], [8 x double]* %pfx, i64 0, i64 1
>   %arrayidx82.i = getelementptr inbounds [8 x double], [8 x double]* %pfy, i64 0, i64 1
>   %arrayidx83.i = getelementptr inbounds [8 x double], [8 x double]* %pfz, i64 0, i64 1
>   %arrayidx102.i = getelementptr inbounds [8 x double], [8 x double]* %pfx, i64 0, i64 4
>   %arrayidx103.i = getelementptr inbounds [8 x double], [8 x double]* %pfy, i64 0, i64 4
>   %arrayidx104.i = getelementptr inbounds [8 x double], [8 x double]* %pfz, i64 0, i64 4
>   %arrayidx123.i = getelementptr inbounds [8 x double], [8 x double]* %pfx, i64 0, i64 5
>   %arrayidx124.i = getelementptr inbounds [8 x double], [8 x double]* %pfy, i64 0, i64 5
>   %arrayidx125.i = getelementptr inbounds [8 x double], [8 x double]* %pfz, i64 0, i64 5
>   %arrayidx144.i = getelementptr inbounds [8 x double], [8 x double]* %pfx, i64 0, i64 6
>   %arrayidx145.i = getelementptr inbounds [8 x double], [8 x double]* %pfy, i64 0, i64 6
>   %arrayidx146.i = getelementptr inbounds [8 x double], [8 x double]* %pfz, i64 0, i64 6
>   %arrayidx165.i = getelementptr inbounds [8 x double], [8 x double]* %pfx, i64 0, i64 7
>   %arrayidx166.i = getelementptr inbounds [8 x double], [8 x double]* %pfy, i64 0, i64 7
>   %arrayidx167.i = getelementptr inbounds [8 x double], [8 x double]* %pfz, i64 0, i64 7
>   %_M_start.i.i99 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 44, i32 0, i32 0, i32 0, i32 0
>   %_M_start.i.i96 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 43, i32 0, i32 0, i32 0, i32 0
>   %37 = sext i32 %6 to i64
>   %38 = icmp sgt i32 %cond, %6
>   %smax = select i1 %38, i32 %cond, i32 %6
>   %39 = add i32 %smax, 1
>   %40 = bitcast [8 x double]* %pfx to i64*
>   %41 = bitcast [8 x double]* %pfy to i64*
>   %42 = bitcast [8 x double]* %pfz to i64*
>   %43 = bitcast [8 x double]* %x1 to i64*
>   %44 = bitcast [8 x double]* %y1 to i64*
>   %45 = bitcast [8 x double]* %z1 to i64*
>   %46 = bitcast double* %arrayidx81.i to i64*
>   %47 = bitcast double* %arrayidx82.i to i64*
>   %48 = bitcast double* %arrayidx83.i to i64*
>   %49 = bitcast double* %arrayidx60.i to i64*
>   %50 = bitcast double* %arrayidx61.i to i64*
>   %51 = bitcast double* %arrayidx62.i to i64*
>   %52 = bitcast double* %arrayidx39.i to i64*
>   %53 = bitcast double* %arrayidx40.i to i64*
>   %54 = bitcast double* %arrayidx41.i to i64*
>   %55 = bitcast double* %arrayidx102.i to i64*
>   %56 = bitcast double* %arrayidx103.i to i64*
>   %57 = bitcast double* %arrayidx104.i to i64*
>   %58 = bitcast double* %arrayidx123.i to i64*
>   %59 = bitcast double* %arrayidx124.i to i64*
>   %60 = bitcast double* %arrayidx125.i to i64*
>   %61 = bitcast double* %arrayidx144.i to i64*
>   %62 = bitcast double* %arrayidx145.i to i64*
>   %63 = bitcast double* %arrayidx146.i to i64*
>   %64 = bitcast double* %arrayidx165.i to i64*
>   %65 = bitcast double* %arrayidx166.i to i64*
>   %66 = bitcast double* %arrayidx167.i to i64*
>   br label %invoke.cont
> 
> invoke.cont:                                      ; preds = %if.end, %invoke.cont.lr.ph
>   %indvars.iv = phi i64 [ %indvars.iv.next, %if.end ], [ %37, %invoke.cont.lr.ph ]
>   %.omp.iv.0117 = phi i32 [ %add48, %if.end ], [ %6, %invoke.cont.lr.ph ]
>   call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %7) #7
>   call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #7
>   call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %9) #7
>   call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %10) #7
>   call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %11) #7
>   call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %12) #7
>   %mul.i = shl nsw i32 %.omp.iv.0117, 3
>   %conv.i = sext i32 %mul.i to i64
>   %67 = load i32*, i32** %_M_start.i.i, align 8, !tbaa !8
>   %add.ptr.i.i = getelementptr inbounds i32, i32* %67, i64 %conv.i
>   %domain.idx.val = load double*, double** %domain.idx, align 8, !tbaa !11
>   %domain.idx90.val = load double*, double** %domain.idx90, align 8, !tbaa !11
>   %domain.idx91.val = load double*, double** %domain.idx91, align 8, !tbaa !11
>   %68 = load i32, i32* %add.ptr.i.i, align 4, !tbaa !6
>   %arrayidx1.i101 = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 1
>   %69 = load i32, i32* %arrayidx1.i101, align 4, !tbaa !6
>   %arrayidx2.i102 = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 2
>   %70 = load i32, i32* %arrayidx2.i102, align 4, !tbaa !6
>   %arrayidx3.i103 = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 3
>   %71 = load i32, i32* %arrayidx3.i103, align 4, !tbaa !6
>   %arrayidx4.i104 = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 4
>   %72 = load i32, i32* %arrayidx4.i104, align 4, !tbaa !6
>   %arrayidx5.i105 = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 5
>   %73 = load i32, i32* %arrayidx5.i105, align 4, !tbaa !6
>   %arrayidx6.i106 = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 6
>   %74 = load i32, i32* %arrayidx6.i106, align 4, !tbaa !6
>   %arrayidx7.i107 = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 7
>   %75 = load i32, i32* %arrayidx7.i107, align 4, !tbaa !6
>   %conv.i.i = sext i32 %68 to i64
>   %add.ptr.i.i.i = getelementptr inbounds double, double* %domain.idx.val, i64 %conv.i.i
>   %76 = bitcast double* %add.ptr.i.i.i to i64*
>   %77 = load i64, i64* %76, align 8, !tbaa !2
>   store i64 %77, i64* %13, align 16, !tbaa !2
>   %conv.i196.i = sext i32 %69 to i64
>   %add.ptr.i.i198.i = getelementptr inbounds double, double* %domain.idx.val, i64 %conv.i196.i
>   %78 = bitcast double* %add.ptr.i.i198.i to i64*
>   %79 = load i64, i64* %78, align 8, !tbaa !2
>   store i64 %79, i64* %14, align 8, !tbaa !2
>   %conv.i193.i = sext i32 %70 to i64
>   %add.ptr.i.i195.i = getelementptr inbounds double, double* %domain.idx.val, i64 %conv.i193.i
>   %80 = bitcast double* %add.ptr.i.i195.i to i64*
>   %81 = load i64, i64* %80, align 8, !tbaa !2
>   store i64 %81, i64* %15, align 16, !tbaa !2
>   %conv.i190.i = sext i32 %71 to i64
>   %add.ptr.i.i192.i = getelementptr inbounds double, double* %domain.idx.val, i64 %conv.i190.i
>   %82 = bitcast double* %add.ptr.i.i192.i to i64*
>   %83 = load i64, i64* %82, align 8, !tbaa !2
>   store i64 %83, i64* %16, align 8, !tbaa !2
>   %conv.i187.i = sext i32 %72 to i64
>   %add.ptr.i.i189.i = getelementptr inbounds double, double* %domain.idx.val, i64 %conv.i187.i
>   %84 = bitcast double* %add.ptr.i.i189.i to i64*
>   %85 = load i64, i64* %84, align 8, !tbaa !2
>   store i64 %85, i64* %17, align 16, !tbaa !2
>   %conv.i184.i = sext i32 %73 to i64
>   %add.ptr.i.i186.i = getelementptr inbounds double, double* %domain.idx.val, i64 %conv.i184.i
>   %86 = bitcast double* %add.ptr.i.i186.i to i64*
>   %87 = load i64, i64* %86, align 8, !tbaa !2
>   store i64 %87, i64* %18, align 8, !tbaa !2
>   %conv.i181.i = sext i32 %74 to i64
>   %add.ptr.i.i183.i = getelementptr inbounds double, double* %domain.idx.val, i64 %conv.i181.i
>   %88 = bitcast double* %add.ptr.i.i183.i to i64*
>   %89 = load i64, i64* %88, align 8, !tbaa !2
>   store i64 %89, i64* %19, align 16, !tbaa !2
>   %conv.i178.i = sext i32 %75 to i64
>   %add.ptr.i.i180.i = getelementptr inbounds double, double* %domain.idx.val, i64 %conv.i178.i
>   %90 = bitcast double* %add.ptr.i.i180.i to i64*
>   %91 = load i64, i64* %90, align 8, !tbaa !2
>   store i64 %91, i64* %20, align 8, !tbaa !2
>   %add.ptr.i.i177.i = getelementptr inbounds double, double* %domain.idx90.val, i64 %conv.i.i
>   %92 = bitcast double* %add.ptr.i.i177.i to i64*
>   %93 = load i64, i64* %92, align 8, !tbaa !2
>   store i64 %93, i64* %21, align 16, !tbaa !2
>   %add.ptr.i.i174.i = getelementptr inbounds double, double* %domain.idx90.val, i64 %conv.i196.i
>   %94 = bitcast double* %add.ptr.i.i174.i to i64*
>   %95 = load i64, i64* %94, align 8, !tbaa !2
>   store i64 %95, i64* %22, align 8, !tbaa !2
>   %add.ptr.i.i171.i = getelementptr inbounds double, double* %domain.idx90.val, i64 %conv.i193.i
>   %96 = bitcast double* %add.ptr.i.i171.i to i64*
>   %97 = load i64, i64* %96, align 8, !tbaa !2
>   store i64 %97, i64* %23, align 16, !tbaa !2
>   %add.ptr.i.i168.i = getelementptr inbounds double, double* %domain.idx90.val, i64 %conv.i190.i
>   %98 = bitcast double* %add.ptr.i.i168.i to i64*
>   %99 = load i64, i64* %98, align 8, !tbaa !2
>   store i64 %99, i64* %24, align 8, !tbaa !2
>   %add.ptr.i.i165.i = getelementptr inbounds double, double* %domain.idx90.val, i64 %conv.i187.i
>   %100 = bitcast double* %add.ptr.i.i165.i to i64*
>   %101 = load i64, i64* %100, align 8, !tbaa !2
>   store i64 %101, i64* %25, align 16, !tbaa !2
>   %add.ptr.i.i162.i = getelementptr inbounds double, double* %domain.idx90.val, i64 %conv.i184.i
>   %102 = bitcast double* %add.ptr.i.i162.i to i64*
>   %103 = load i64, i64* %102, align 8, !tbaa !2
>   store i64 %103, i64* %26, align 8, !tbaa !2
>   %add.ptr.i.i159.i = getelementptr inbounds double, double* %domain.idx90.val, i64 %conv.i181.i
>   %104 = bitcast double* %add.ptr.i.i159.i to i64*
>   %105 = load i64, i64* %104, align 8, !tbaa !2
>   store i64 %105, i64* %27, align 16, !tbaa !2
>   %add.ptr.i.i156.i = getelementptr inbounds double, double* %domain.idx90.val, i64 %conv.i178.i
>   %106 = bitcast double* %add.ptr.i.i156.i to i64*
>   %107 = load i64, i64* %106, align 8, !tbaa !2
>   store i64 %107, i64* %28, align 8, !tbaa !2
>   %add.ptr.i.i153.i = getelementptr inbounds double, double* %domain.idx91.val, i64 %conv.i.i
>   %108 = bitcast double* %add.ptr.i.i153.i to i64*
>   %109 = load i64, i64* %108, align 8, !tbaa !2
>   store i64 %109, i64* %29, align 16, !tbaa !2
>   %add.ptr.i.i150.i = getelementptr inbounds double, double* %domain.idx91.val, i64 %conv.i196.i
>   %110 = bitcast double* %add.ptr.i.i150.i to i64*
>   %111 = load i64, i64* %110, align 8, !tbaa !2
>   store i64 %111, i64* %30, align 8, !tbaa !2
>   %add.ptr.i.i147.i = getelementptr inbounds double, double* %domain.idx91.val, i64 %conv.i193.i
>   %112 = bitcast double* %add.ptr.i.i147.i to i64*
>   %113 = load i64, i64* %112, align 8, !tbaa !2
>   store i64 %113, i64* %31, align 16, !tbaa !2
>   %add.ptr.i.i144.i = getelementptr inbounds double, double* %domain.idx91.val, i64 %conv.i190.i
>   %114 = bitcast double* %add.ptr.i.i144.i to i64*
>   %115 = load i64, i64* %114, align 8, !tbaa !2
>   store i64 %115, i64* %32, align 8, !tbaa !2
>   %add.ptr.i.i141.i = getelementptr inbounds double, double* %domain.idx91.val, i64 %conv.i187.i
>   %116 = bitcast double* %add.ptr.i.i141.i to i64*
>   %117 = load i64, i64* %116, align 8, !tbaa !2
>   store i64 %117, i64* %33, align 16, !tbaa !2
>   %add.ptr.i.i138.i = getelementptr inbounds double, double* %domain.idx91.val, i64 %conv.i184.i
>   %118 = bitcast double* %add.ptr.i.i138.i to i64*
>   %119 = load i64, i64* %118, align 8, !tbaa !2
>   store i64 %119, i64* %34, align 8, !tbaa !2
>   %add.ptr.i.i135.i = getelementptr inbounds double, double* %domain.idx91.val, i64 %conv.i181.i
>   %120 = bitcast double* %add.ptr.i.i135.i to i64*
>   %121 = load i64, i64* %120, align 8, !tbaa !2
>   store i64 %121, i64* %35, align 16, !tbaa !2
>   %add.ptr.i.i132.i = getelementptr inbounds double, double* %domain.idx91.val, i64 %conv.i178.i
>   %122 = bitcast double* %add.ptr.i.i132.i to i64*
>   %123 = load i64, i64* %122, align 8, !tbaa !2
>   store i64 %123, i64* %36, align 8, !tbaa !2
>   %124 = bitcast i64 %79 to double
>   %125 = bitcast i64 %81 to double
>   %126 = bitcast i64 %83 to double
>   %127 = bitcast i64 %85 to double
>   %128 = bitcast i64 %87 to double
>   %129 = bitcast i64 %91 to double
>   %130 = bitcast i64 %95 to double
>   %131 = bitcast i64 %97 to double
>   %132 = bitcast i64 %99 to double
>   %133 = bitcast i64 %101 to double
>   %134 = bitcast i64 %103 to double
>   %135 = bitcast i64 %107 to double
>   %136 = bitcast i64 %111 to double
>   %137 = bitcast i64 %113 to double
>   %138 = bitcast i64 %115 to double
>   %139 = bitcast i64 %117 to double
>   %140 = bitcast i64 %119 to double
>   %141 = bitcast i64 %123 to double
>   %add.i.i = fadd double %131, %132
>   %add1.i.i = fadd double %136, %137
>   %mul.i.i = fmul double %add.i.i, %add1.i.i
>   %add2.i.i = fadd double %130, %131
>   %add3.i.i = fadd double %137, %138
>   %mul4.i.i = fmul double %add2.i.i, %add3.i.i
>   %sub.i.i = fsub double %mul.i.i, %mul4.i.i
>   %add5.i.i = fadd double %130, %134
>   %add6.i.i = fadd double %139, %140
>   %mul7.i.i = fmul double %add5.i.i, %add6.i.i
>   %add8.i.i = fadd double %sub.i.i, %mul7.i.i
>   %add9.i.i = fadd double %133, %134
>   %add10.i.i = fadd double %136, %140
>   %mul11.i.i = fmul double %add9.i.i, %add10.i.i
>   %sub12.i.i = fsub double %add8.i.i, %mul11.i.i
>   %add13.i.i = fadd double %132, %135
>   %add14.i.i = fadd double %139, %141
>   %mul15.i.i = fmul double %add13.i.i, %add14.i.i
>   %sub16.i.i = fsub double %sub12.i.i, %mul15.i.i
>   %add17.i.i = fadd double %133, %135
>   %add18.i.i = fadd double %138, %141
>   %mul19.i.i = fmul double %add17.i.i, %add18.i.i
>   %add20.i.i = fadd double %mul19.i.i, %sub16.i.i
>   %add21.i.i = fadd double %125, %126
>   %add24.i.i = fadd double %124, %125
>   %mul26.i.i = fmul double %add24.i.i, %add3.i.i
>   %142 = fmul double %add21.i.i, %add1.i.i
>   %add27.i.i = fsub double %mul26.i.i, %142
>   %add28.i.i = fadd double %124, %128
>   %mul30.i.i = fmul double %add28.i.i, %add6.i.i
>   %sub31.i.i = fsub double %add27.i.i, %mul30.i.i
>   %add32.i.i = fadd double %127, %128
>   %mul34.i.i = fmul double %add32.i.i, %add10.i.i
>   %add35.i.i = fadd double %mul34.i.i, %sub31.i.i
>   %add36.i.i = fadd double %126, %129
>   %mul38.i.i = fmul double %add36.i.i, %add14.i.i
>   %add39.i.i = fadd double %mul38.i.i, %add35.i.i
>   %add40.i.i = fadd double %127, %129
>   %mul42.i.i = fmul double %add40.i.i, %add18.i.i
>   %sub43.i.i = fsub double %add39.i.i, %mul42.i.i
>   %mul50.i.i = fmul double %add21.i.i, %add2.i.i
>   %143 = fmul double %add24.i.i, %add.i.i
>   %add51.i.i = fsub double %mul50.i.i, %143
>   %mul54.i.i = fmul double %add32.i.i, %add5.i.i
>   %sub55.i.i = fsub double %add51.i.i, %mul54.i.i
>   %mul58.i.i = fmul double %add28.i.i, %add9.i.i
>   %add59.i.i = fadd double %mul58.i.i, %sub55.i.i
>   %mul62.i.i = fmul double %add40.i.i, %add13.i.i
>   %add63.i.i = fadd double %mul62.i.i, %add59.i.i
>   %mul66.i.i = fmul double %add36.i.i, %add17.i.i
>   %sub67.i.i = fsub double %add63.i.i, %mul66.i.i
>   %mul68.i.i = fmul double %add20.i.i, 0x3FB5555555555555
>   store double %mul68.i.i, double* %arraydecay9, align 16, !tbaa !2
>   %mul69.i.i = fmul double %sub43.i.i, 0x3FB5555555555555
>   store double %mul69.i.i, double* %arraydecay10, align 16, !tbaa !2
>   %mul70.i.i = fmul double %sub67.i.i, 0x3FB5555555555555
>   store double %mul70.i.i, double* %arraydecay11, align 16, !tbaa !2
>   %144 = load double, double* %arraydecay, align 16, !tbaa !2
>   %145 = load double, double* %arrayidx20.i, align 16, !tbaa !2
>   %146 = load double, double* %arraydecay7, align 16, !tbaa !2
>   %147 = load double, double* %arrayidx36.i, align 16, !tbaa !2
>   %148 = load double, double* %arraydecay8, align 16, !tbaa !2
>   %149 = bitcast i64 %121 to double
>   %add1.i643.i = fadd double %148, %136
>   %mul.i644.i = fmul double %add2.i.i, %add1.i643.i
>   %add2.i645.i = fadd double %146, %130
>   %mul4.i647.i = fmul double %add1.i.i, %add2.i645.i
>   %sub.i648.i = fsub double %mul.i644.i, %mul4.i647.i
>   %add5.i649.i = fadd double %146, %133
>   %mul7.i651.i = fmul double %add14.i.i, %add5.i649.i
>   %add8.i652.i = fadd double %mul7.i651.i, %sub.i648.i
>   %add10.i654.i = fadd double %148, %139
>   %mul11.i655.i = fmul double %add17.i.i, %add10.i654.i
>   %sub12.i656.i = fsub double %add8.i652.i, %mul11.i655.i
>   %add13.i657.i = fadd double %147, %131
>   %add14.i658.i = fadd double %141, %149
>   %mul15.i659.i = fmul double %add13.i657.i, %add14.i658.i
>   %sub16.i660.i = fsub double %sub12.i656.i, %mul15.i659.i
>   %add17.i661.i = fadd double %147, %135
>   %add18.i662.i = fadd double %137, %149
>   %mul19.i663.i = fmul double %add17.i661.i, %add18.i662.i
>   %add20.i664.i = fadd double %mul19.i663.i, %sub16.i660.i
>   %add24.i666.i = fadd double %144, %124
>   %mul26.i667.i = fmul double %add1.i.i, %add24.i666.i
>   %150 = fmul double %add24.i.i, %add1.i643.i
>   %add27.i668.i = fsub double %mul26.i667.i, %150
>   %add28.i669.i = fadd double %144, %127
>   %mul30.i670.i = fmul double %add14.i.i, %add28.i669.i
>   %sub31.i671.i = fsub double %add27.i668.i, %mul30.i670.i
>   %mul34.i673.i = fmul double %add40.i.i, %add10.i654.i
>   %add35.i674.i = fadd double %mul34.i673.i, %sub31.i671.i
>   %add36.i675.i = fadd double %145, %125
>   %mul38.i676.i = fmul double %add36.i675.i, %add14.i658.i
>   %add39.i677.i = fadd double %mul38.i676.i, %add35.i674.i
>   %add40.i678.i = fadd double %145, %129
>   %mul42.i679.i = fmul double %add40.i678.i, %add18.i662.i
>   %sub43.i680.i = fsub double %add39.i677.i, %mul42.i679.i
>   %mul50.i681.i = fmul double %add24.i.i, %add2.i645.i
>   %151 = fmul double %add2.i.i, %add24.i666.i
>   %add51.i682.i = fsub double %mul50.i681.i, %151
>   %mul54.i683.i = fmul double %add40.i.i, %add5.i649.i
>   %sub55.i684.i = fsub double %add51.i682.i, %mul54.i683.i
>   %mul58.i685.i = fmul double %add17.i.i, %add28.i669.i
>   %add59.i686.i = fadd double %mul58.i685.i, %sub55.i684.i
>   %mul62.i687.i = fmul double %add40.i678.i, %add13.i657.i
>   %add63.i688.i = fadd double %mul62.i687.i, %add59.i686.i
>   %mul66.i689.i = fmul double %add36.i675.i, %add17.i661.i
>   %sub67.i690.i = fsub double %add63.i688.i, %mul66.i689.i
>   %mul68.i691.i = fmul double %add20.i664.i, 0x3FB5555555555555
>   store double %mul68.i691.i, double* %arrayidx39.i, align 8, !tbaa !2
>   %mul69.i692.i = fmul double %sub43.i680.i, 0x3FB5555555555555
>   store double %mul69.i692.i, double* %arrayidx40.i, align 8, !tbaa !2
>   %mul70.i693.i = fmul double %sub67.i690.i, 0x3FB5555555555555
>   store double %mul70.i693.i, double* %arrayidx41.i, align 8, !tbaa !2
>   %add1.i591.i = fadd double %148, %138
>   %mul.i592.i = fmul double %add2.i645.i, %add1.i591.i
>   %add2.i593.i = fadd double %146, %132
>   %mul4.i595.i = fmul double %add2.i593.i, %add1.i643.i
>   %sub.i596.i = fsub double %mul.i592.i, %mul4.i595.i
>   %mul7.i599.i = fmul double %add13.i.i, %add14.i658.i
>   %add8.i600.i = fadd double %sub.i596.i, %mul7.i599.i
>   %mul11.i603.i = fmul double %add18.i.i, %add17.i661.i
>   %sub12.i604.i = fsub double %add8.i600.i, %mul11.i603.i
>   %add14.i606.i = fadd double %140, %149
>   %mul15.i607.i = fmul double %add5.i.i, %add14.i606.i
>   %sub16.i608.i = fsub double %sub12.i604.i, %mul15.i607.i
>   %add17.i609.i = fadd double %147, %134
>   %mul19.i611.i = fmul double %add10.i.i, %add17.i609.i
>   %add20.i612.i = fadd double %mul19.i611.i, %sub16.i608.i
>   %add24.i614.i = fadd double %144, %126
>   %mul26.i615.i = fmul double %add24.i614.i, %add1.i643.i
>   %152 = fmul double %add24.i666.i, %add1.i591.i
>   %add27.i616.i = fsub double %mul26.i615.i, %152
>   %mul30.i618.i = fmul double %add36.i.i, %add14.i658.i
>   %sub31.i619.i = fsub double %add27.i616.i, %mul30.i618.i
>   %mul34.i621.i = fmul double %add18.i.i, %add40.i678.i
>   %add35.i622.i = fadd double %mul34.i621.i, %sub31.i619.i
>   %mul38.i624.i = fmul double %add28.i.i, %add14.i606.i
>   %add39.i625.i = fadd double %mul38.i624.i, %add35.i622.i
>   %add40.i626.i = fadd double %145, %128
>   %mul42.i627.i = fmul double %add10.i.i, %add40.i626.i
>   %sub43.i628.i = fsub double %add39.i625.i, %mul42.i627.i
>   %mul50.i629.i = fmul double %add24.i666.i, %add2.i593.i
>   %153 = fmul double %add24.i614.i, %add2.i645.i
>   %add51.i630.i = fsub double %mul50.i629.i, %153
>   %mul54.i631.i = fmul double %add13.i.i, %add40.i678.i
>   %sub55.i632.i = fsub double %add51.i630.i, %mul54.i631.i
>   %mul58.i633.i = fmul double %add36.i.i, %add17.i661.i
>   %add59.i634.i = fadd double %mul58.i633.i, %sub55.i632.i
>   %mul62.i635.i = fmul double %add5.i.i, %add40.i626.i
>   %add63.i636.i = fadd double %mul62.i635.i, %add59.i634.i
>   %mul66.i637.i = fmul double %add28.i.i, %add17.i609.i
>   %sub67.i638.i = fsub double %add63.i636.i, %mul66.i637.i
>   %mul68.i639.i = fmul double %add20.i612.i, 0x3FB5555555555555
>   store double %mul68.i639.i, double* %arrayidx60.i, align 16, !tbaa !2
>   %mul69.i640.i = fmul double %sub43.i628.i, 0x3FB5555555555555
>   store double %mul69.i640.i, double* %arrayidx61.i, align 16, !tbaa !2
>   %mul70.i641.i = fmul double %sub67.i638.i, 0x3FB5555555555555
>   store double %mul70.i641.i, double* %arrayidx62.i, align 16, !tbaa !2
>   %mul.i540.i = fmul double %add3.i.i, %add2.i593.i
>   %mul4.i543.i = fmul double %add.i.i, %add1.i591.i
>   %sub.i544.i = fsub double %mul.i540.i, %mul4.i543.i
>   %mul7.i547.i = fmul double %add13.i657.i, %add14.i606.i
>   %add8.i548.i = fadd double %sub.i544.i, %mul7.i547.i
>   %mul11.i551.i = fmul double %add17.i609.i, %add18.i662.i
>   %sub12.i552.i = fsub double %add8.i548.i, %mul11.i551.i
>   %mul15.i555.i = fmul double %add6.i.i, %add5.i649.i
>   %sub16.i556.i = fsub double %sub12.i552.i, %mul15.i555.i
>   %mul19.i559.i = fmul double %add9.i.i, %add10.i654.i
>   %add20.i560.i = fadd double %mul19.i559.i, %sub16.i556.i
>   %mul26.i563.i = fmul double %add21.i.i, %add1.i591.i
>   %154 = fmul double %add3.i.i, %add24.i614.i
>   %add27.i564.i = fsub double %mul26.i563.i, %154
>   %mul30.i566.i = fmul double %add36.i675.i, %add14.i606.i
>   %sub31.i567.i = fsub double %add27.i564.i, %mul30.i566.i
>   %mul34.i569.i = fmul double %add40.i626.i, %add18.i662.i
>   %add35.i570.i = fadd double %mul34.i569.i, %sub31.i567.i
>   %mul38.i572.i = fmul double %add6.i.i, %add28.i669.i
>   %add39.i573.i = fadd double %mul38.i572.i, %add35.i570.i
>   %mul42.i575.i = fmul double %add32.i.i, %add10.i654.i
>   %sub43.i576.i = fsub double %add39.i573.i, %mul42.i575.i
>   %mul50.i577.i = fmul double %add.i.i, %add24.i614.i
>   %155 = fmul double %add21.i.i, %add2.i593.i
>   %add51.i578.i = fsub double %mul50.i577.i, %155
>   %mul54.i579.i = fmul double %add40.i626.i, %add13.i657.i
>   %sub55.i580.i = fsub double %add51.i578.i, %mul54.i579.i
>   %mul58.i581.i = fmul double %add36.i675.i, %add17.i609.i
>   %add59.i582.i = fadd double %mul58.i581.i, %sub55.i580.i
>   %mul62.i583.i = fmul double %add32.i.i, %add5.i649.i
>   %add63.i584.i = fadd double %mul62.i583.i, %add59.i582.i
>   %mul66.i585.i = fmul double %add9.i.i, %add28.i669.i
>   %sub67.i586.i = fsub double %add63.i584.i, %mul66.i585.i
>   %mul68.i587.i = fmul double %add20.i560.i, 0x3FB5555555555555
>   store double %mul68.i587.i, double* %arrayidx81.i, align 8, !tbaa !2
>   %mul69.i588.i = fmul double %sub43.i576.i, 0x3FB5555555555555
>   store double %mul69.i588.i, double* %arrayidx82.i, align 8, !tbaa !2
>   %mul70.i589.i = fmul double %sub67.i586.i, 0x3FB5555555555555
>   store double %mul70.i589.i, double* %arrayidx83.i, align 8, !tbaa !2
>   %mul.i488.i = fmul double %add17.i609.i, %add14.i658.i
>   %mul4.i491.i = fmul double %add17.i661.i, %add14.i606.i
>   %sub.i492.i = fsub double %mul.i488.i, %mul4.i491.i
>   %mul7.i495.i = fmul double %add13.i.i, %add1.i591.i
>   %add8.i496.i = fadd double %mul7.i495.i, %sub.i492.i
>   %mul11.i499.i = fmul double %add18.i.i, %add2.i593.i
>   %sub12.i500.i = fsub double %add8.i496.i, %mul11.i499.i
>   %mul15.i503.i = fmul double %add5.i.i, %add1.i643.i
>   %sub16.i504.i = fsub double %sub12.i500.i, %mul15.i503.i
>   %mul19.i507.i = fmul double %add10.i.i, %add2.i645.i
>   %add20.i508.i = fadd double %mul19.i507.i, %sub16.i504.i
>   %mul26.i511.i = fmul double %add40.i678.i, %add14.i606.i
>   %156 = fmul double %add40.i626.i, %add14.i658.i
>   %add27.i512.i = fsub double %mul26.i511.i, %156
>   %mul30.i514.i = fmul double %add36.i.i, %add1.i591.i
>   %sub31.i515.i = fsub double %add27.i512.i, %mul30.i514.i
>   %mul34.i517.i = fmul double %add18.i.i, %add24.i614.i
>   %add35.i518.i = fadd double %mul34.i517.i, %sub31.i515.i
>   %mul38.i520.i = fmul double %add28.i.i, %add1.i643.i
>   %add39.i521.i = fadd double %mul38.i520.i, %add35.i518.i
>   %mul42.i523.i = fmul double %add10.i.i, %add24.i666.i
>   %sub43.i524.i = fsub double %add39.i521.i, %mul42.i523.i
>   %mul50.i525.i = fmul double %add40.i626.i, %add17.i661.i
>   %157 = fmul double %add40.i678.i, %add17.i609.i
>   %add51.i526.i = fsub double %mul50.i525.i, %157
>   %mul54.i527.i = fmul double %add13.i.i, %add24.i614.i
>   %sub55.i528.i = fsub double %add51.i526.i, %mul54.i527.i
>   %mul58.i529.i = fmul double %add36.i.i, %add2.i593.i
>   %add59.i530.i = fadd double %mul58.i529.i, %sub55.i528.i
>   %mul62.i531.i = fmul double %add5.i.i, %add24.i666.i
>   %add63.i532.i = fadd double %mul62.i531.i, %add59.i530.i
>   %mul66.i533.i = fmul double %add28.i.i, %add2.i645.i
>   %sub67.i534.i = fsub double %add63.i532.i, %mul66.i533.i
>   %mul68.i535.i = fmul double %add20.i508.i, 0x3FB5555555555555
>   store double %mul68.i535.i, double* %arrayidx102.i, align 16, !tbaa !2
>   %mul69.i536.i = fmul double %sub43.i524.i, 0x3FB5555555555555
>   store double %mul69.i536.i, double* %arrayidx103.i, align 16, !tbaa !2
>   %mul70.i537.i = fmul double %sub67.i534.i, 0x3FB5555555555555
>   store double %mul70.i537.i, double* %arrayidx104.i, align 16, !tbaa !2
>   %mul.i436.i = fmul double %add14.i.i, %add17.i661.i
>   %mul4.i439.i = fmul double %add17.i.i, %add14.i658.i
>   %sub.i440.i = fsub double %mul.i436.i, %mul4.i439.i
>   %mul7.i443.i = fmul double %add5.i649.i, %add1.i643.i
>   %add8.i444.i = fadd double %mul7.i443.i, %sub.i440.i
>   %mul11.i447.i = fmul double %add2.i645.i, %add10.i654.i
>   %sub12.i448.i = fsub double %add8.i444.i, %mul11.i447.i
>   %mul15.i451.i = fmul double %add1.i.i, %add13.i657.i
>   %sub16.i452.i = fsub double %sub12.i448.i, %mul15.i451.i
>   %mul19.i455.i = fmul double %add2.i.i, %add18.i662.i
>   %add20.i456.i = fadd double %mul19.i455.i, %sub16.i452.i
>   %mul26.i459.i = fmul double %add40.i.i, %add14.i658.i
>   %158 = fmul double %add14.i.i, %add40.i678.i
>   %add27.i460.i = fsub double %mul26.i459.i, %158
>   %mul30.i462.i = fmul double %add28.i669.i, %add1.i643.i
>   %sub31.i463.i = fsub double %add27.i460.i, %mul30.i462.i
>   %mul34.i465.i = fmul double %add24.i666.i, %add10.i654.i
>   %add35.i466.i = fadd double %mul34.i465.i, %sub31.i463.i
>   %mul38.i468.i = fmul double %add1.i.i, %add36.i675.i
>   %add39.i469.i = fadd double %mul38.i468.i, %add35.i466.i
>   %mul42.i471.i = fmul double %add24.i.i, %add18.i662.i
>   %sub43.i472.i = fsub double %add39.i469.i, %mul42.i471.i
>   %mul50.i473.i = fmul double %add17.i.i, %add40.i678.i
>   %159 = fmul double %add40.i.i, %add17.i661.i
>   %add51.i474.i = fsub double %mul50.i473.i, %159
>   %mul54.i475.i = fmul double %add24.i666.i, %add5.i649.i
>   %sub55.i476.i = fsub double %add51.i474.i, %mul54.i475.i
>   %mul58.i477.i = fmul double %add28.i669.i, %add2.i645.i
>   %add59.i478.i = fadd double %mul58.i477.i, %sub55.i476.i
>   %mul62.i479.i = fmul double %add24.i.i, %add13.i657.i
>   %add63.i480.i = fadd double %mul62.i479.i, %add59.i478.i
>   %mul66.i481.i = fmul double %add2.i.i, %add36.i675.i
>   %sub67.i482.i = fsub double %add63.i480.i, %mul66.i481.i
>   %mul68.i483.i = fmul double %add20.i456.i, 0x3FB5555555555555
>   store double %mul68.i483.i, double* %arrayidx123.i, align 8, !tbaa !2
>   %mul69.i484.i = fmul double %sub43.i472.i, 0x3FB5555555555555
>   store double %mul69.i484.i, double* %arrayidx124.i, align 8, !tbaa !2
>   %mul70.i485.i = fmul double %sub67.i482.i, 0x3FB5555555555555
>   store double %mul70.i485.i, double* %arrayidx125.i, align 8, !tbaa !2
>   %mul.i384.i = fmul double %add17.i.i, %add6.i.i
>   %mul4.i387.i = fmul double %add9.i.i, %add14.i.i
>   %sub.i388.i = fsub double %mul.i384.i, %mul4.i387.i
>   %mul7.i391.i = fmul double %add5.i.i, %add1.i.i
>   %add8.i392.i = fadd double %mul7.i391.i, %sub.i388.i
>   %mul11.i395.i = fmul double %add2.i.i, %add10.i.i
>   %sub12.i396.i = fsub double %add8.i392.i, %mul11.i395.i
>   %mul15.i399.i = fmul double %add13.i.i, %add3.i.i
>   %sub16.i400.i = fsub double %sub12.i396.i, %mul15.i399.i
>   %mul19.i403.i = fmul double %add.i.i, %add18.i.i
>   %add20.i404.i = fadd double %mul19.i403.i, %sub16.i400.i
>   %mul26.i407.i = fmul double %add32.i.i, %add14.i.i
>   %160 = fmul double %add40.i.i, %add6.i.i
>   %add27.i408.i = fsub double %mul26.i407.i, %160
>   %mul30.i410.i = fmul double %add28.i.i, %add1.i.i
>   %sub31.i411.i = fsub double %add27.i408.i, %mul30.i410.i
>   %mul34.i413.i = fmul double %add24.i.i, %add10.i.i
>   %add35.i414.i = fadd double %mul34.i413.i, %sub31.i411.i
>   %mul38.i416.i = fmul double %add36.i.i, %add3.i.i
>   %add39.i417.i = fadd double %mul38.i416.i, %add35.i414.i
>   %mul42.i419.i = fmul double %add21.i.i, %add18.i.i
>   %sub43.i420.i = fsub double %add39.i417.i, %mul42.i419.i
>   %mul50.i421.i = fmul double %add40.i.i, %add9.i.i
>   %161 = fmul double %add32.i.i, %add17.i.i
>   %add51.i422.i = fsub double %mul50.i421.i, %161
>   %mul54.i423.i = fmul double %add24.i.i, %add5.i.i
>   %sub55.i424.i = fsub double %add51.i422.i, %mul54.i423.i
>   %mul58.i425.i = fmul double %add28.i.i, %add2.i.i
>   %add59.i426.i = fadd double %mul58.i425.i, %sub55.i424.i
>   %mul62.i427.i = fmul double %add21.i.i, %add13.i.i
>   %add63.i428.i = fadd double %mul62.i427.i, %add59.i426.i
>   %mul66.i429.i = fmul double %add36.i.i, %add.i.i
>   %sub67.i430.i = fsub double %add63.i428.i, %mul66.i429.i
>   %mul68.i431.i = fmul double %add20.i404.i, 0x3FB5555555555555
>   store double %mul68.i431.i, double* %arrayidx144.i, align 16, !tbaa !2
>   %mul69.i432.i = fmul double %sub43.i420.i, 0x3FB5555555555555
>   store double %mul69.i432.i, double* %arrayidx145.i, align 16, !tbaa !2
>   %mul70.i433.i = fmul double %sub67.i430.i, 0x3FB5555555555555
>   store double %mul70.i433.i, double* %arrayidx146.i, align 16, !tbaa !2
>   %mul.i332.i = fmul double %add9.i.i, %add14.i606.i
>   %mul4.i335.i = fmul double %add6.i.i, %add17.i609.i
>   %sub.i336.i = fsub double %mul.i332.i, %mul4.i335.i
>   %mul7.i339.i = fmul double %add3.i.i, %add13.i657.i
>   %add8.i340.i = fadd double %mul7.i339.i, %sub.i336.i
>   %mul11.i343.i = fmul double %add.i.i, %add18.i662.i
>   %sub12.i344.i = fsub double %add8.i340.i, %mul11.i343.i
>   %mul15.i347.i = fmul double %add5.i649.i, %add1.i591.i
>   %sub16.i348.i = fsub double %sub12.i344.i, %mul15.i347.i
>   %mul19.i351.i = fmul double %add2.i593.i, %add10.i654.i
>   %add20.i352.i = fadd double %mul19.i351.i, %sub16.i348.i
>   %mul26.i355.i = fmul double %add6.i.i, %add40.i626.i
>   %162 = fmul double %add32.i.i, %add14.i606.i
>   %add27.i356.i = fsub double %mul26.i355.i, %162
>   %mul30.i358.i = fmul double %add3.i.i, %add36.i675.i
>   %sub31.i359.i = fsub double %add27.i356.i, %mul30.i358.i
>   %mul34.i361.i = fmul double %add21.i.i, %add18.i662.i
>   %add35.i362.i = fadd double %mul34.i361.i, %sub31.i359.i
>   %mul38.i364.i = fmul double %add28.i669.i, %add1.i591.i
>   %add39.i365.i = fadd double %mul38.i364.i, %add35.i362.i
>   %mul42.i367.i = fmul double %add24.i614.i, %add10.i654.i
>   %sub43.i368.i = fsub double %add39.i365.i, %mul42.i367.i
>   %mul50.i369.i = fmul double %add32.i.i, %add17.i609.i
>   %163 = fmul double %add9.i.i, %add40.i626.i
>   %add51.i370.i = fsub double %mul50.i369.i, %163
>   %mul54.i371.i = fmul double %add21.i.i, %add13.i657.i
>   %sub55.i372.i = fsub double %add51.i370.i, %mul54.i371.i
>   %mul58.i373.i = fmul double %add.i.i, %add36.i675.i
>   %add59.i374.i = fadd double %mul58.i373.i, %sub55.i372.i
>   %mul62.i375.i = fmul double %add24.i614.i, %add5.i649.i
>   %add63.i376.i = fadd double %mul62.i375.i, %add59.i374.i
>   %mul66.i377.i = fmul double %add28.i669.i, %add2.i593.i
>   %sub67.i378.i = fsub double %add63.i376.i, %mul66.i377.i
>   %mul68.i379.i = fmul double %add20.i352.i, 0x3FB5555555555555
>   store double %mul68.i379.i, double* %arrayidx165.i, align 8, !tbaa !2
>   %mul69.i380.i = fmul double %sub43.i368.i, 0x3FB5555555555555
>   store double %mul69.i380.i, double* %arrayidx166.i, align 8, !tbaa !2
>   %mul70.i381.i = fmul double %sub67.i378.i, 0x3FB5555555555555
>   store double %mul70.i381.i, double* %arrayidx167.i, align 8, !tbaa !2
>   %164 = load double*, double** %dvdx, align 8, !tbaa !41
>   %165 = load double*, double** %dvdy, align 8, !tbaa !41
>   %166 = load double*, double** %dvdz, align 8, !tbaa !41
>   %167 = load double*, double** %x8n, align 8, !tbaa !41
>   %168 = load double*, double** %y8n, align 8, !tbaa !41
>   %169 = load double*, double** %z8n, align 8, !tbaa !41
>   %170 = load i64, i64* %40, align 16, !tbaa !2
>   %arrayidx20 = getelementptr inbounds double, double* %164, i64 %conv.i
>   %171 = bitcast double* %arrayidx20 to i64*
>   store i64 %170, i64* %171, align 8, !tbaa !2
>   %172 = load i64, i64* %41, align 16, !tbaa !2
>   %arrayidx24 = getelementptr inbounds double, double* %165, i64 %conv.i
>   %173 = bitcast double* %arrayidx24 to i64*
>   store i64 %172, i64* %173, align 8, !tbaa !2
>   %174 = load i64, i64* %42, align 16, !tbaa !2
>   %arrayidx28 = getelementptr inbounds double, double* %166, i64 %conv.i
>   %175 = bitcast double* %arrayidx28 to i64*
>   store i64 %174, i64* %175, align 8, !tbaa !2
>   %176 = load i64, i64* %43, align 16, !tbaa !2
>   %arrayidx32 = getelementptr inbounds double, double* %167, i64 %conv.i
>   %177 = bitcast double* %arrayidx32 to i64*
>   store i64 %176, i64* %177, align 8, !tbaa !2
>   %178 = load i64, i64* %44, align 16, !tbaa !2
>   %arrayidx36 = getelementptr inbounds double, double* %168, i64 %conv.i
>   %179 = bitcast double* %arrayidx36 to i64*
>   store i64 %178, i64* %179, align 8, !tbaa !2
>   %180 = load i64, i64* %45, align 16, !tbaa !2
>   %arrayidx40 = getelementptr inbounds double, double* %169, i64 %conv.i
>   %181 = bitcast double* %arrayidx40 to i64*
>   store i64 %180, i64* %181, align 8, !tbaa !2
>   %182 = or i64 %conv.i, 1
>   %183 = load i64, i64* %46, align 8, !tbaa !2
>   %arrayidx20.1 = getelementptr inbounds double, double* %164, i64 %182
>   %184 = bitcast double* %arrayidx20.1 to i64*
>   store i64 %183, i64* %184, align 8, !tbaa !2
>   %185 = load i64, i64* %47, align 8, !tbaa !2
>   %arrayidx24.1 = getelementptr inbounds double, double* %165, i64 %182
>   %186 = bitcast double* %arrayidx24.1 to i64*
>   store i64 %185, i64* %186, align 8, !tbaa !2
>   %187 = load i64, i64* %48, align 8, !tbaa !2
>   %arrayidx28.1 = getelementptr inbounds double, double* %166, i64 %182
>   %188 = bitcast double* %arrayidx28.1 to i64*
>   store i64 %187, i64* %188, align 8, !tbaa !2
>   %189 = load i64, i64* %14, align 8, !tbaa !2
>   %arrayidx32.1 = getelementptr inbounds double, double* %167, i64 %182
>   %190 = bitcast double* %arrayidx32.1 to i64*
>   store i64 %189, i64* %190, align 8, !tbaa !2
>   %191 = load i64, i64* %22, align 8, !tbaa !2
>   %arrayidx36.1 = getelementptr inbounds double, double* %168, i64 %182
>   %192 = bitcast double* %arrayidx36.1 to i64*
>   store i64 %191, i64* %192, align 8, !tbaa !2
>   %193 = load i64, i64* %30, align 8, !tbaa !2
>   %arrayidx40.1 = getelementptr inbounds double, double* %169, i64 %182
>   %194 = bitcast double* %arrayidx40.1 to i64*
>   store i64 %193, i64* %194, align 8, !tbaa !2
>   %195 = or i64 %conv.i, 2
>   %196 = load i64, i64* %49, align 16, !tbaa !2
>   %arrayidx20.2 = getelementptr inbounds double, double* %164, i64 %195
>   %197 = bitcast double* %arrayidx20.2 to i64*
>   store i64 %196, i64* %197, align 8, !tbaa !2
>   %198 = load i64, i64* %50, align 16, !tbaa !2
>   %arrayidx24.2 = getelementptr inbounds double, double* %165, i64 %195
>   %199 = bitcast double* %arrayidx24.2 to i64*
>   store i64 %198, i64* %199, align 8, !tbaa !2
>   %200 = load i64, i64* %51, align 16, !tbaa !2
>   %arrayidx28.2 = getelementptr inbounds double, double* %166, i64 %195
>   %201 = bitcast double* %arrayidx28.2 to i64*
>   store i64 %200, i64* %201, align 8, !tbaa !2
>   %202 = load i64, i64* %15, align 16, !tbaa !2
>   %arrayidx32.2 = getelementptr inbounds double, double* %167, i64 %195
>   %203 = bitcast double* %arrayidx32.2 to i64*
>   store i64 %202, i64* %203, align 8, !tbaa !2
>   %204 = load i64, i64* %23, align 16, !tbaa !2
>   %arrayidx36.2 = getelementptr inbounds double, double* %168, i64 %195
>   %205 = bitcast double* %arrayidx36.2 to i64*
>   store i64 %204, i64* %205, align 8, !tbaa !2
>   %206 = load i64, i64* %31, align 16, !tbaa !2
>   %arrayidx40.2 = getelementptr inbounds double, double* %169, i64 %195
>   %207 = bitcast double* %arrayidx40.2 to i64*
>   store i64 %206, i64* %207, align 8, !tbaa !2
>   %208 = or i64 %conv.i, 3
>   %209 = load i64, i64* %52, align 8, !tbaa !2
>   %arrayidx20.3 = getelementptr inbounds double, double* %164, i64 %208
>   %210 = bitcast double* %arrayidx20.3 to i64*
>   store i64 %209, i64* %210, align 8, !tbaa !2
>   %211 = load i64, i64* %53, align 8, !tbaa !2
>   %arrayidx24.3 = getelementptr inbounds double, double* %165, i64 %208
>   %212 = bitcast double* %arrayidx24.3 to i64*
>   store i64 %211, i64* %212, align 8, !tbaa !2
>   %213 = load i64, i64* %54, align 8, !tbaa !2
>   %arrayidx28.3 = getelementptr inbounds double, double* %166, i64 %208
>   %214 = bitcast double* %arrayidx28.3 to i64*
>   store i64 %213, i64* %214, align 8, !tbaa !2
>   %215 = load i64, i64* %16, align 8, !tbaa !2
>   %arrayidx32.3 = getelementptr inbounds double, double* %167, i64 %208
>   %216 = bitcast double* %arrayidx32.3 to i64*
>   store i64 %215, i64* %216, align 8, !tbaa !2
>   %217 = load i64, i64* %24, align 8, !tbaa !2
>   %arrayidx36.3 = getelementptr inbounds double, double* %168, i64 %208
>   %218 = bitcast double* %arrayidx36.3 to i64*
>   store i64 %217, i64* %218, align 8, !tbaa !2
>   %219 = load i64, i64* %32, align 8, !tbaa !2
>   %arrayidx40.3 = getelementptr inbounds double, double* %169, i64 %208
>   %220 = bitcast double* %arrayidx40.3 to i64*
>   store i64 %219, i64* %220, align 8, !tbaa !2
>   %221 = or i64 %conv.i, 4
>   %222 = load i64, i64* %55, align 16, !tbaa !2
>   %arrayidx20.4 = getelementptr inbounds double, double* %164, i64 %221
>   %223 = bitcast double* %arrayidx20.4 to i64*
>   store i64 %222, i64* %223, align 8, !tbaa !2
>   %224 = load i64, i64* %56, align 16, !tbaa !2
>   %arrayidx24.4 = getelementptr inbounds double, double* %165, i64 %221
>   %225 = bitcast double* %arrayidx24.4 to i64*
>   store i64 %224, i64* %225, align 8, !tbaa !2
>   %226 = load i64, i64* %57, align 16, !tbaa !2
>   %arrayidx28.4 = getelementptr inbounds double, double* %166, i64 %221
>   %227 = bitcast double* %arrayidx28.4 to i64*
>   store i64 %226, i64* %227, align 8, !tbaa !2
>   %228 = load i64, i64* %17, align 16, !tbaa !2
>   %arrayidx32.4 = getelementptr inbounds double, double* %167, i64 %221
>   %229 = bitcast double* %arrayidx32.4 to i64*
>   store i64 %228, i64* %229, align 8, !tbaa !2
>   %230 = load i64, i64* %25, align 16, !tbaa !2
>   %arrayidx36.4 = getelementptr inbounds double, double* %168, i64 %221
>   %231 = bitcast double* %arrayidx36.4 to i64*
>   store i64 %230, i64* %231, align 8, !tbaa !2
>   %232 = load i64, i64* %33, align 16, !tbaa !2
>   %arrayidx40.4 = getelementptr inbounds double, double* %169, i64 %221
>   %233 = bitcast double* %arrayidx40.4 to i64*
>   store i64 %232, i64* %233, align 8, !tbaa !2
>   %234 = or i64 %conv.i, 5
>   %235 = load i64, i64* %58, align 8, !tbaa !2
>   %arrayidx20.5 = getelementptr inbounds double, double* %164, i64 %234
>   %236 = bitcast double* %arrayidx20.5 to i64*
>   store i64 %235, i64* %236, align 8, !tbaa !2
>   %237 = load i64, i64* %59, align 8, !tbaa !2
>   %arrayidx24.5 = getelementptr inbounds double, double* %165, i64 %234
>   %238 = bitcast double* %arrayidx24.5 to i64*
>   store i64 %237, i64* %238, align 8, !tbaa !2
>   %239 = load i64, i64* %60, align 8, !tbaa !2
>   %arrayidx28.5 = getelementptr inbounds double, double* %166, i64 %234
>   %240 = bitcast double* %arrayidx28.5 to i64*
>   store i64 %239, i64* %240, align 8, !tbaa !2
>   %241 = load i64, i64* %18, align 8, !tbaa !2
>   %arrayidx32.5 = getelementptr inbounds double, double* %167, i64 %234
>   %242 = bitcast double* %arrayidx32.5 to i64*
>   store i64 %241, i64* %242, align 8, !tbaa !2
>   %243 = load i64, i64* %26, align 8, !tbaa !2
>   %arrayidx36.5 = getelementptr inbounds double, double* %168, i64 %234
>   %244 = bitcast double* %arrayidx36.5 to i64*
>   store i64 %243, i64* %244, align 8, !tbaa !2
>   %245 = load i64, i64* %34, align 8, !tbaa !2
>   %arrayidx40.5 = getelementptr inbounds double, double* %169, i64 %234
>   %246 = bitcast double* %arrayidx40.5 to i64*
>   store i64 %245, i64* %246, align 8, !tbaa !2
>   %247 = or i64 %conv.i, 6
>   %248 = load i64, i64* %61, align 16, !tbaa !2
>   %arrayidx20.6 = getelementptr inbounds double, double* %164, i64 %247
>   %249 = bitcast double* %arrayidx20.6 to i64*
>   store i64 %248, i64* %249, align 8, !tbaa !2
>   %250 = load i64, i64* %62, align 16, !tbaa !2
>   %arrayidx24.6 = getelementptr inbounds double, double* %165, i64 %247
>   %251 = bitcast double* %arrayidx24.6 to i64*
>   store i64 %250, i64* %251, align 8, !tbaa !2
>   %252 = load i64, i64* %63, align 16, !tbaa !2
>   %arrayidx28.6 = getelementptr inbounds double, double* %166, i64 %247
>   %253 = bitcast double* %arrayidx28.6 to i64*
>   store i64 %252, i64* %253, align 8, !tbaa !2
>   %254 = load i64, i64* %19, align 16, !tbaa !2
>   %arrayidx32.6 = getelementptr inbounds double, double* %167, i64 %247
>   %255 = bitcast double* %arrayidx32.6 to i64*
>   store i64 %254, i64* %255, align 8, !tbaa !2
>   %256 = load i64, i64* %27, align 16, !tbaa !2
>   %arrayidx36.6 = getelementptr inbounds double, double* %168, i64 %247
>   %257 = bitcast double* %arrayidx36.6 to i64*
>   store i64 %256, i64* %257, align 8, !tbaa !2
>   %258 = load i64, i64* %35, align 16, !tbaa !2
>   %arrayidx40.6 = getelementptr inbounds double, double* %169, i64 %247
>   %259 = bitcast double* %arrayidx40.6 to i64*
>   store i64 %258, i64* %259, align 8, !tbaa !2
>   %260 = or i64 %conv.i, 7
>   %261 = load i64, i64* %64, align 8, !tbaa !2
>   %arrayidx20.7 = getelementptr inbounds double, double* %164, i64 %260
>   %262 = bitcast double* %arrayidx20.7 to i64*
>   store i64 %261, i64* %262, align 8, !tbaa !2
>   %263 = load i64, i64* %65, align 8, !tbaa !2
>   %arrayidx24.7 = getelementptr inbounds double, double* %165, i64 %260
>   %264 = bitcast double* %arrayidx24.7 to i64*
>   store i64 %263, i64* %264, align 8, !tbaa !2
>   %265 = load i64, i64* %66, align 8, !tbaa !2
>   %arrayidx28.7 = getelementptr inbounds double, double* %166, i64 %260
>   %266 = bitcast double* %arrayidx28.7 to i64*
>   store i64 %265, i64* %266, align 8, !tbaa !2
>   %267 = load i64, i64* %20, align 8, !tbaa !2
>   %arrayidx32.7 = getelementptr inbounds double, double* %167, i64 %260
>   %268 = bitcast double* %arrayidx32.7 to i64*
>   store i64 %267, i64* %268, align 8, !tbaa !2
>   %269 = load i64, i64* %28, align 8, !tbaa !2
>   %arrayidx36.7 = getelementptr inbounds double, double* %168, i64 %260
>   %270 = bitcast double* %arrayidx36.7 to i64*
>   store i64 %269, i64* %270, align 8, !tbaa !2
>   %271 = load i64, i64* %36, align 8, !tbaa !2
>   %arrayidx40.7 = getelementptr inbounds double, double* %169, i64 %260
>   %272 = bitcast double* %arrayidx40.7 to i64*
>   store i64 %271, i64* %272, align 8, !tbaa !2
>   %273 = load double*, double** %_M_start.i.i99, align 8, !tbaa !11
>   %add.ptr.i.i100 = getelementptr inbounds double, double* %273, i64 %indvars.iv
>   %274 = load double, double* %add.ptr.i.i100, align 8, !tbaa !2
>   %275 = load double*, double** %_M_start.i.i96, align 8, !tbaa !11
>   %add.ptr.i.i97 = getelementptr inbounds double, double* %275, i64 %indvars.iv
>   %276 = load double, double* %add.ptr.i.i97, align 8, !tbaa !2
>   %mul43 = fmul double %274, %276
>   %277 = load double*, double** %determ, align 8, !tbaa !41
>   %arrayidx45 = getelementptr inbounds double, double* %277, i64 %indvars.iv
>   store double %mul43, double* %arrayidx45, align 8, !tbaa !2
>   %278 = load double, double* %add.ptr.i.i97, align 8, !tbaa !2
>   %cmp47 = fcmp ugt double %278, 0.000000e+00
>   br i1 %cmp47, label %if.end, label %if.then
10172,10173c6828,6829
< 518:                                              ; preds = %54
<   call void @exit(i32 -1) #29
---
> if.then:                                          ; preds = %invoke.cont
>   call void @exit(i32 -1) #23
10176,10196c6832,6851
< 519:                                              ; preds = %54
<   %520 = add nsw i64 %55, 1
<   %521 = add nsw i32 %56, 1
<   %522 = trunc i64 %520 to i32
<   %523 = icmp eq i32 %40, %522
<   br i1 %523, label %524, label %54
< 
< 524:                                              ; preds = %519, %21
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %26)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %23) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #10
<   br label %525
< 
< 525:                                              ; preds = %524, %18
<   %526 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %526)
<   %527 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL28CalcHourglassControlForElemsR6DomainPddE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %527)
<           to label %528 unwind label %529
---
> if.end:                                           ; preds = %invoke.cont
>   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %12) #7
>   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %11) #7
>   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %10) #7
>   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #7
>   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #7
>   call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %7) #7
>   %indvars.iv.next = add nsw i64 %indvars.iv, 1
>   %add48 = add nsw i32 %.omp.iv.0117, 1
>   %lftr.wideiv = trunc i64 %indvars.iv.next to i32
>   %exitcond.not = icmp eq i32 %39, %lftr.wideiv
>   br i1 %exitcond.not, label %omp.loop.exit, label %invoke.cont
> 
> omp.loop.exit:                                    ; preds = %if.end, %omp.precond.then
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %4)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #7
>   br label %omp.precond.end
10198c6853
< 528:                                              ; preds = %525
---
> omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
10200,10206d6854
< 
< 529:                                              ; preds = %525, %11
<   %530 = landingpad { i8*, i32 }
<           catch i8* null
<   %531 = extractvalue { i8*, i32 } %530, 0
<   call void @__clang_call_terminate(i8* %531) #29
<   unreachable
10210,11411c6858,8027
< define internal void @.omp_outlined..31(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, i32* nocapture nonnull readonly align 4 dereferenceable(4) %2, double* nocapture nonnull readonly align 8 dereferenceable(8) %3, %class.Domain* nonnull readonly align 8 dereferenceable(1312) %4, double** nocapture nonnull readonly align 8 dereferenceable(8) %5, double** nocapture nonnull readonly align 8 dereferenceable(8) %6, [4 x [8 x double]]* nocapture nonnull readonly align 8 dereferenceable(256) %7, double** nocapture nonnull readonly align 8 dereferenceable(8) %8, double** nocapture nonnull readonly align 8 dereferenceable(8) %9, double** nocapture nonnull readonly align 8 dereferenceable(8) %10, double** nocapture nonnull readonly align 8 dereferenceable(8) %11, double** nocapture nonnull readonly align 8 dereferenceable(8) %12, i32* nocapture nonnull readonly align 4 dereferenceable(4) %13, double** nocapture nonnull readonly align 8 dereferenceable(8) %14, double** nocapture nonnull readonly align 8 dereferenceable(8) %15, double** nocapture nonnull readonly align 8 dereferenceable(8) %16, i32* nocapture nonnull readonly align 4 dereferenceable(4) %17) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %19 = alloca i32, align 4
<   %20 = alloca i32, align 4
<   %21 = alloca i32, align 4
<   %22 = alloca i32, align 4
<   %23 = alloca [8 x [4 x double]], align 16
<   %24 = alloca i32, align 4
<   %25 = alloca i32, align 4
<   %26 = alloca i32, align 4
<   %27 = alloca i32, align 4
<   %28 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL28CalcFBHourglassForceForElemsR6DomainPdS1_S1_S1_S1_S1_S1_diiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %28)
<           to label %29 unwind label %1077
< 
< 29:                                               ; preds = %18
<   %30 = load i32, i32* %2, align 4, !tbaa !12
<   %31 = add nsw i32 %30, -1
<   %32 = icmp sgt i32 %30, 0
<   br i1 %32, label %33, label %949
< 
< 33:                                               ; preds = %29
<   %34 = bitcast i32* %19 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %34) #10
<   store i32 0, i32* %19, align 4, !tbaa !12
<   %35 = bitcast i32* %20 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %35) #10
<   store i32 %31, i32* %20, align 4, !tbaa !12
<   %36 = bitcast i32* %21 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %36) #10
<   store i32 1, i32* %21, align 4, !tbaa !12
<   %37 = bitcast i32* %22 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %37) #10
<   store i32 0, i32* %22, align 4, !tbaa !12
<   %38 = load double, double* %3, align 8, !tbaa !2
<   %39 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %39, i32 34, i32* nonnull %22, i32* nonnull %19, i32* nonnull %20, i32* nonnull %21, i32 1, i32 1) #10
<   %40 = load i32, i32* %20, align 4, !tbaa !12
<   %41 = icmp slt i32 %40, %30
<   %42 = select i1 %41, i32 %40, i32 %31
<   store i32 %42, i32* %20, align 4, !tbaa !12
<   %43 = load i32, i32* %19, align 4, !tbaa !12
<   %44 = icmp sgt i32 %43, %42
<   br i1 %44, label %948, label %45
< 
< 45:                                               ; preds = %33
<   %46 = bitcast [8 x [4 x double]]* %23 to i8*
<   %47 = getelementptr inbounds %class.Domain, %class.Domain* %4, i64 0, i32 21, i32 0, i32 0, i32 0
<   %48 = load i32*, i32** %47, align 8, !tbaa !19
<   %49 = load double*, double** %5, align 8, !tbaa !6
<   %50 = load double*, double** %6, align 8, !tbaa !6
<   %51 = load double*, double** %8, align 8, !tbaa !6
<   %52 = load double*, double** %9, align 8, !tbaa !6
<   %53 = load double*, double** %10, align 8, !tbaa !6
<   %54 = load double*, double** %11, align 8, !tbaa !6
<   %55 = load double*, double** %12, align 8, !tbaa !6
<   %56 = getelementptr inbounds %class.Domain, %class.Domain* %4, i64 0, i32 49, i32 0, i32 0, i32 0
<   %57 = load double*, double** %56, align 8, !tbaa !22
<   %58 = getelementptr inbounds %class.Domain, %class.Domain* %4, i64 0, i32 50, i32 0, i32 0, i32 0
<   %59 = load double*, double** %58, align 8, !tbaa !22
<   %60 = getelementptr inbounds %class.Domain, %class.Domain* %4, i64 0, i32 3, i32 0, i32 0, i32 0
<   %61 = load double*, double** %60, align 8, !tbaa !22
<   %62 = getelementptr inbounds %class.Domain, %class.Domain* %4, i64 0, i32 4, i32 0, i32 0, i32 0
<   %63 = load double*, double** %62, align 8, !tbaa !22
<   %64 = getelementptr inbounds %class.Domain, %class.Domain* %4, i64 0, i32 5, i32 0, i32 0, i32 0
<   %65 = load double*, double** %64, align 8, !tbaa !22
<   %66 = fmul double %38, -1.000000e-02
<   %67 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 0, i64 0
<   %68 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 1, i64 0
<   %69 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 2, i64 0
<   %70 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 3, i64 0
<   %71 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 4, i64 0
<   %72 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 5, i64 0
<   %73 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 6, i64 0
<   %74 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 7, i64 0
<   %75 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 0, i64 1
<   %76 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 1, i64 1
<   %77 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 2, i64 1
<   %78 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 3, i64 1
<   %79 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 4, i64 1
<   %80 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 5, i64 1
<   %81 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 6, i64 1
<   %82 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 7, i64 1
<   %83 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 0, i64 2
<   %84 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 1, i64 2
<   %85 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 2, i64 2
<   %86 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 3, i64 2
<   %87 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 4, i64 2
<   %88 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 5, i64 2
<   %89 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 6, i64 2
<   %90 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 7, i64 2
<   %91 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 0, i64 3
<   %92 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 1, i64 3
<   %93 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 2, i64 3
<   %94 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 3, i64 3
<   %95 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 4, i64 3
<   %96 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 5, i64 3
<   %97 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 6, i64 3
<   %98 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 7, i64 3
<   %99 = load i32, i32* %13, align 4, !tbaa !12
<   %100 = icmp sgt i32 %99, 1
<   %101 = getelementptr inbounds %class.Domain, %class.Domain* %4, i64 0, i32 9, i32 0, i32 0, i32 0
<   %102 = load double*, double** %101, align 8
<   %103 = getelementptr inbounds %class.Domain, %class.Domain* %4, i64 0, i32 10, i32 0, i32 0, i32 0
<   %104 = load double*, double** %103, align 8
<   %105 = getelementptr inbounds %class.Domain, %class.Domain* %4, i64 0, i32 11, i32 0, i32 0, i32 0
<   %106 = load double*, double** %105, align 8
<   %107 = load double*, double** %14, align 8
<   %108 = load double*, double** %15, align 8
<   %109 = load double*, double** %16, align 8
<   %110 = sext i32 %43 to i64
<   %111 = add i32 %42, 1
<   br label %112
< 
< 112:                                              ; preds = %45, %943
<   %113 = phi i64 [ %110, %45 ], [ %944, %943 ]
<   %114 = phi i32 [ %43, %45 ], [ %945, %943 ]
<   call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %46) #10
<   %115 = shl nsw i32 %114, 3
<   %116 = sext i32 %115 to i64
<   %117 = getelementptr inbounds double, double* %49, i64 %113
<   %118 = load double, double* %117, align 8, !tbaa !2
<   %119 = fdiv double 1.000000e+00, %118
<   %120 = getelementptr inbounds double, double* %50, i64 %116
<   %121 = or i32 %115, 1
<   %122 = sext i32 %121 to i64
<   %123 = getelementptr inbounds double, double* %50, i64 %122
<   %124 = or i32 %115, 2
<   %125 = sext i32 %124 to i64
<   %126 = getelementptr inbounds double, double* %50, i64 %125
<   %127 = or i32 %115, 3
<   %128 = sext i32 %127 to i64
<   %129 = getelementptr inbounds double, double* %50, i64 %128
<   %130 = or i32 %115, 4
<   %131 = sext i32 %130 to i64
<   %132 = getelementptr inbounds double, double* %50, i64 %131
<   %133 = or i32 %115, 5
<   %134 = sext i32 %133 to i64
<   %135 = getelementptr inbounds double, double* %50, i64 %134
<   %136 = or i32 %115, 6
<   %137 = sext i32 %136 to i64
<   %138 = getelementptr inbounds double, double* %50, i64 %137
<   %139 = or i32 %115, 7
<   %140 = sext i32 %139 to i64
<   %141 = getelementptr inbounds double, double* %50, i64 %140
<   %142 = getelementptr inbounds double, double* %51, i64 %116
<   %143 = getelementptr inbounds double, double* %51, i64 %122
<   %144 = getelementptr inbounds double, double* %51, i64 %125
<   %145 = getelementptr inbounds double, double* %51, i64 %128
<   %146 = getelementptr inbounds double, double* %51, i64 %131
<   %147 = getelementptr inbounds double, double* %51, i64 %134
<   %148 = getelementptr inbounds double, double* %51, i64 %137
<   %149 = getelementptr inbounds double, double* %51, i64 %140
<   %150 = getelementptr inbounds double, double* %52, i64 %116
<   %151 = getelementptr inbounds double, double* %52, i64 %122
<   %152 = getelementptr inbounds double, double* %52, i64 %125
<   %153 = getelementptr inbounds double, double* %52, i64 %128
<   %154 = getelementptr inbounds double, double* %52, i64 %131
<   %155 = getelementptr inbounds double, double* %52, i64 %134
<   %156 = getelementptr inbounds double, double* %52, i64 %137
<   %157 = getelementptr inbounds double, double* %52, i64 %140
<   %158 = getelementptr inbounds double, double* %53, i64 %116
<   %159 = getelementptr inbounds double, double* %54, i64 %116
<   %160 = getelementptr inbounds double, double* %55, i64 %116
<   %161 = getelementptr inbounds double, double* %53, i64 %122
<   %162 = getelementptr inbounds double, double* %54, i64 %122
<   %163 = getelementptr inbounds double, double* %55, i64 %122
<   %164 = getelementptr inbounds double, double* %53, i64 %125
<   %165 = getelementptr inbounds double, double* %54, i64 %125
<   %166 = getelementptr inbounds double, double* %55, i64 %125
<   %167 = getelementptr inbounds double, double* %53, i64 %128
<   %168 = getelementptr inbounds double, double* %54, i64 %128
<   %169 = getelementptr inbounds double, double* %55, i64 %128
<   %170 = getelementptr inbounds double, double* %53, i64 %131
<   %171 = getelementptr inbounds double, double* %54, i64 %131
<   %172 = getelementptr inbounds double, double* %55, i64 %131
<   %173 = getelementptr inbounds double, double* %53, i64 %134
<   %174 = getelementptr inbounds double, double* %54, i64 %134
<   %175 = getelementptr inbounds double, double* %55, i64 %134
<   %176 = getelementptr inbounds double, double* %53, i64 %137
<   %177 = getelementptr inbounds double, double* %54, i64 %137
<   %178 = getelementptr inbounds double, double* %55, i64 %137
<   %179 = getelementptr inbounds double, double* %53, i64 %140
<   %180 = getelementptr inbounds double, double* %54, i64 %140
<   %181 = getelementptr inbounds double, double* %55, i64 %140
<   br label %668
< 
< 182:                                              ; preds = %668
<   %183 = getelementptr inbounds i32, i32* %48, i64 %116
<   %184 = getelementptr inbounds double, double* %57, i64 %113
<   %185 = load double, double* %184, align 8, !tbaa !2
<   %186 = getelementptr inbounds double, double* %59, i64 %113
<   %187 = load double, double* %186, align 8, !tbaa !2
<   %188 = load double, double* %117, align 8, !tbaa !2
<   %189 = call double @cbrt(double %188) #30
<   %190 = load i32, i32* %183, align 4, !tbaa !12
<   %191 = getelementptr inbounds i32, i32* %183, i64 1
<   %192 = load i32, i32* %191, align 4, !tbaa !12
<   %193 = getelementptr inbounds i32, i32* %183, i64 2
<   %194 = load i32, i32* %193, align 4, !tbaa !12
<   %195 = getelementptr inbounds i32, i32* %183, i64 3
<   %196 = load i32, i32* %195, align 4, !tbaa !12
<   %197 = getelementptr inbounds i32, i32* %183, i64 4
<   %198 = load i32, i32* %197, align 4, !tbaa !12
<   %199 = getelementptr inbounds i32, i32* %183, i64 5
<   %200 = load i32, i32* %199, align 4, !tbaa !12
<   %201 = getelementptr inbounds i32, i32* %183, i64 6
<   %202 = load i32, i32* %201, align 4, !tbaa !12
<   %203 = getelementptr inbounds i32, i32* %183, i64 7
<   %204 = load i32, i32* %203, align 4, !tbaa !12
<   %205 = sext i32 %190 to i64
<   %206 = getelementptr inbounds double, double* %61, i64 %205
<   %207 = load double, double* %206, align 8, !tbaa !2
<   %208 = sext i32 %192 to i64
<   %209 = getelementptr inbounds double, double* %61, i64 %208
<   %210 = load double, double* %209, align 8, !tbaa !2
<   %211 = sext i32 %194 to i64
<   %212 = getelementptr inbounds double, double* %61, i64 %211
<   %213 = load double, double* %212, align 8, !tbaa !2
<   %214 = sext i32 %196 to i64
<   %215 = getelementptr inbounds double, double* %61, i64 %214
<   %216 = load double, double* %215, align 8, !tbaa !2
<   %217 = sext i32 %198 to i64
<   %218 = getelementptr inbounds double, double* %61, i64 %217
<   %219 = load double, double* %218, align 8, !tbaa !2
<   %220 = sext i32 %200 to i64
<   %221 = getelementptr inbounds double, double* %61, i64 %220
<   %222 = load double, double* %221, align 8, !tbaa !2
<   %223 = sext i32 %202 to i64
<   %224 = getelementptr inbounds double, double* %61, i64 %223
<   %225 = load double, double* %224, align 8, !tbaa !2
<   %226 = sext i32 %204 to i64
<   %227 = getelementptr inbounds double, double* %61, i64 %226
<   %228 = load double, double* %227, align 8, !tbaa !2
<   %229 = getelementptr inbounds double, double* %63, i64 %205
<   %230 = load double, double* %229, align 8, !tbaa !2
<   %231 = getelementptr inbounds double, double* %63, i64 %208
<   %232 = load double, double* %231, align 8, !tbaa !2
<   %233 = getelementptr inbounds double, double* %63, i64 %211
<   %234 = load double, double* %233, align 8, !tbaa !2
<   %235 = getelementptr inbounds double, double* %63, i64 %214
<   %236 = load double, double* %235, align 8, !tbaa !2
<   %237 = getelementptr inbounds double, double* %63, i64 %217
<   %238 = load double, double* %237, align 8, !tbaa !2
<   %239 = getelementptr inbounds double, double* %63, i64 %220
<   %240 = load double, double* %239, align 8, !tbaa !2
<   %241 = getelementptr inbounds double, double* %63, i64 %223
<   %242 = load double, double* %241, align 8, !tbaa !2
<   %243 = getelementptr inbounds double, double* %63, i64 %226
<   %244 = load double, double* %243, align 8, !tbaa !2
<   %245 = getelementptr inbounds double, double* %65, i64 %205
<   %246 = load double, double* %245, align 8, !tbaa !2
<   %247 = getelementptr inbounds double, double* %65, i64 %208
<   %248 = load double, double* %247, align 8, !tbaa !2
<   %249 = getelementptr inbounds double, double* %65, i64 %211
<   %250 = load double, double* %249, align 8, !tbaa !2
<   %251 = getelementptr inbounds double, double* %65, i64 %214
<   %252 = load double, double* %251, align 8, !tbaa !2
<   %253 = getelementptr inbounds double, double* %65, i64 %217
<   %254 = load double, double* %253, align 8, !tbaa !2
<   %255 = getelementptr inbounds double, double* %65, i64 %220
<   %256 = load double, double* %255, align 8, !tbaa !2
<   %257 = getelementptr inbounds double, double* %65, i64 %223
<   %258 = load double, double* %257, align 8, !tbaa !2
<   %259 = getelementptr inbounds double, double* %65, i64 %226
<   %260 = load double, double* %259, align 8, !tbaa !2
<   %261 = fmul double %66, %185
<   %262 = fmul double %261, %187
<   %263 = fdiv double %262, %189
<   %264 = load double, double* %67, align 16, !tbaa !2
<   %265 = fmul double %207, %264
<   %266 = load double, double* %68, align 16, !tbaa !2
<   %267 = fmul double %210, %266
<   %268 = fadd double %265, %267
<   %269 = load double, double* %69, align 16, !tbaa !2
<   %270 = fmul double %213, %269
<   %271 = fadd double %268, %270
<   %272 = load double, double* %70, align 16, !tbaa !2
<   %273 = fmul double %216, %272
<   %274 = fadd double %271, %273
<   %275 = load double, double* %71, align 16, !tbaa !2
<   %276 = fmul double %219, %275
<   %277 = fadd double %274, %276
<   %278 = load double, double* %72, align 16, !tbaa !2
<   %279 = fmul double %222, %278
<   %280 = fadd double %277, %279
<   %281 = load double, double* %73, align 16, !tbaa !2
<   %282 = fmul double %225, %281
<   %283 = fadd double %280, %282
<   %284 = load double, double* %74, align 16, !tbaa !2
<   %285 = fmul double %228, %284
<   %286 = fadd double %283, %285
<   %287 = load double, double* %75, align 8, !tbaa !2
<   %288 = fmul double %207, %287
<   %289 = load double, double* %76, align 8, !tbaa !2
<   %290 = fmul double %210, %289
<   %291 = fadd double %288, %290
<   %292 = load double, double* %77, align 8, !tbaa !2
<   %293 = fmul double %213, %292
<   %294 = fadd double %291, %293
<   %295 = load double, double* %78, align 8, !tbaa !2
<   %296 = fmul double %216, %295
<   %297 = fadd double %294, %296
<   %298 = load double, double* %79, align 8, !tbaa !2
<   %299 = fmul double %219, %298
<   %300 = fadd double %297, %299
<   %301 = load double, double* %80, align 8, !tbaa !2
<   %302 = fmul double %222, %301
<   %303 = fadd double %300, %302
<   %304 = load double, double* %81, align 8, !tbaa !2
<   %305 = fmul double %225, %304
<   %306 = fadd double %303, %305
<   %307 = load double, double* %82, align 8, !tbaa !2
<   %308 = fmul double %228, %307
<   %309 = fadd double %306, %308
<   %310 = load double, double* %83, align 16, !tbaa !2
<   %311 = fmul double %207, %310
<   %312 = load double, double* %84, align 16, !tbaa !2
<   %313 = fmul double %210, %312
<   %314 = fadd double %311, %313
<   %315 = load double, double* %85, align 16, !tbaa !2
<   %316 = fmul double %213, %315
<   %317 = fadd double %314, %316
<   %318 = load double, double* %86, align 16, !tbaa !2
<   %319 = fmul double %216, %318
<   %320 = fadd double %317, %319
<   %321 = load double, double* %87, align 16, !tbaa !2
<   %322 = fmul double %219, %321
<   %323 = fadd double %320, %322
<   %324 = load double, double* %88, align 16, !tbaa !2
<   %325 = fmul double %222, %324
<   %326 = fadd double %323, %325
<   %327 = load double, double* %89, align 16, !tbaa !2
<   %328 = fmul double %225, %327
<   %329 = fadd double %326, %328
<   %330 = load double, double* %90, align 16, !tbaa !2
<   %331 = fmul double %228, %330
<   %332 = fadd double %329, %331
<   %333 = load double, double* %91, align 8, !tbaa !2
<   %334 = fmul double %207, %333
<   %335 = load double, double* %92, align 8, !tbaa !2
<   %336 = fmul double %210, %335
<   %337 = fadd double %334, %336
<   %338 = load double, double* %93, align 8, !tbaa !2
<   %339 = fmul double %213, %338
<   %340 = fadd double %337, %339
<   %341 = load double, double* %94, align 8, !tbaa !2
<   %342 = fmul double %216, %341
<   %343 = fadd double %340, %342
<   %344 = load double, double* %95, align 8, !tbaa !2
<   %345 = fmul double %219, %344
<   %346 = fadd double %343, %345
<   %347 = load double, double* %96, align 8, !tbaa !2
<   %348 = fmul double %222, %347
<   %349 = fadd double %346, %348
<   %350 = load double, double* %97, align 8, !tbaa !2
<   %351 = fmul double %225, %350
<   %352 = fadd double %349, %351
<   %353 = load double, double* %98, align 8, !tbaa !2
<   %354 = fmul double %228, %353
<   %355 = fadd double %352, %354
<   %356 = fmul double %264, %286
<   %357 = fmul double %287, %309
<   %358 = fadd double %356, %357
<   %359 = fmul double %310, %332
<   %360 = fadd double %358, %359
<   %361 = fmul double %333, %355
<   %362 = fadd double %360, %361
<   %363 = fmul double %263, %362
<   %364 = fmul double %266, %286
<   %365 = fmul double %289, %309
<   %366 = fadd double %364, %365
<   %367 = fmul double %312, %332
<   %368 = fadd double %366, %367
<   %369 = fmul double %335, %355
<   %370 = fadd double %368, %369
<   %371 = fmul double %263, %370
<   %372 = fmul double %269, %286
<   %373 = fmul double %292, %309
<   %374 = fadd double %372, %373
<   %375 = fmul double %315, %332
<   %376 = fadd double %374, %375
<   %377 = fmul double %338, %355
<   %378 = fadd double %376, %377
<   %379 = fmul double %263, %378
<   %380 = fmul double %272, %286
<   %381 = fmul double %295, %309
<   %382 = fadd double %380, %381
<   %383 = fmul double %318, %332
<   %384 = fadd double %382, %383
<   %385 = fmul double %341, %355
<   %386 = fadd double %384, %385
<   %387 = fmul double %263, %386
<   %388 = fmul double %275, %286
<   %389 = fmul double %298, %309
<   %390 = fadd double %388, %389
<   %391 = fmul double %321, %332
<   %392 = fadd double %390, %391
<   %393 = fmul double %344, %355
<   %394 = fadd double %392, %393
<   %395 = fmul double %263, %394
<   %396 = fmul double %278, %286
<   %397 = fmul double %301, %309
<   %398 = fadd double %396, %397
<   %399 = fmul double %324, %332
<   %400 = fadd double %398, %399
<   %401 = fmul double %347, %355
<   %402 = fadd double %400, %401
<   %403 = fmul double %263, %402
<   %404 = fmul double %281, %286
<   %405 = fmul double %304, %309
<   %406 = fadd double %404, %405
<   %407 = fmul double %327, %332
<   %408 = fadd double %406, %407
<   %409 = fmul double %350, %355
<   %410 = fadd double %408, %409
<   %411 = fmul double %263, %410
<   %412 = fmul double %284, %286
<   %413 = fmul double %307, %309
<   %414 = fadd double %412, %413
<   %415 = fmul double %330, %332
<   %416 = fadd double %414, %415
<   %417 = fmul double %353, %355
<   %418 = fadd double %416, %417
<   %419 = fmul double %263, %418
<   %420 = fmul double %230, %264
<   %421 = fmul double %232, %266
<   %422 = fadd double %420, %421
<   %423 = fmul double %234, %269
<   %424 = fadd double %422, %423
<   %425 = fmul double %236, %272
<   %426 = fadd double %424, %425
<   %427 = fmul double %238, %275
<   %428 = fadd double %426, %427
<   %429 = fmul double %240, %278
<   %430 = fadd double %428, %429
<   %431 = fmul double %242, %281
<   %432 = fadd double %430, %431
<   %433 = fmul double %244, %284
<   %434 = fadd double %432, %433
<   %435 = fmul double %230, %287
<   %436 = fmul double %232, %289
<   %437 = fadd double %435, %436
<   %438 = fmul double %234, %292
<   %439 = fadd double %437, %438
<   %440 = fmul double %236, %295
<   %441 = fadd double %439, %440
<   %442 = fmul double %238, %298
<   %443 = fadd double %441, %442
<   %444 = fmul double %240, %301
<   %445 = fadd double %443, %444
<   %446 = fmul double %242, %304
<   %447 = fadd double %445, %446
<   %448 = fmul double %244, %307
<   %449 = fadd double %447, %448
<   %450 = fmul double %230, %310
<   %451 = fmul double %232, %312
<   %452 = fadd double %450, %451
<   %453 = fmul double %234, %315
<   %454 = fadd double %452, %453
<   %455 = fmul double %236, %318
<   %456 = fadd double %454, %455
<   %457 = fmul double %238, %321
<   %458 = fadd double %456, %457
<   %459 = fmul double %240, %324
<   %460 = fadd double %458, %459
<   %461 = fmul double %242, %327
<   %462 = fadd double %460, %461
<   %463 = fmul double %244, %330
<   %464 = fadd double %462, %463
<   %465 = fmul double %230, %333
<   %466 = fmul double %232, %335
<   %467 = fadd double %465, %466
<   %468 = fmul double %234, %338
<   %469 = fadd double %467, %468
<   %470 = fmul double %236, %341
<   %471 = fadd double %469, %470
<   %472 = fmul double %238, %344
<   %473 = fadd double %471, %472
<   %474 = fmul double %240, %347
<   %475 = fadd double %473, %474
<   %476 = fmul double %242, %350
<   %477 = fadd double %475, %476
<   %478 = fmul double %244, %353
<   %479 = fadd double %477, %478
<   %480 = fmul double %264, %434
<   %481 = fmul double %287, %449
<   %482 = fadd double %480, %481
<   %483 = fmul double %310, %464
<   %484 = fadd double %482, %483
<   %485 = fmul double %333, %479
<   %486 = fadd double %484, %485
<   %487 = fmul double %263, %486
<   %488 = fmul double %266, %434
<   %489 = fmul double %289, %449
<   %490 = fadd double %488, %489
<   %491 = fmul double %312, %464
<   %492 = fadd double %490, %491
<   %493 = fmul double %335, %479
<   %494 = fadd double %492, %493
<   %495 = fmul double %263, %494
<   %496 = fmul double %269, %434
<   %497 = fmul double %292, %449
<   %498 = fadd double %496, %497
<   %499 = fmul double %315, %464
<   %500 = fadd double %498, %499
<   %501 = fmul double %338, %479
<   %502 = fadd double %500, %501
<   %503 = fmul double %263, %502
<   %504 = fmul double %272, %434
<   %505 = fmul double %295, %449
<   %506 = fadd double %504, %505
<   %507 = fmul double %318, %464
<   %508 = fadd double %506, %507
<   %509 = fmul double %341, %479
<   %510 = fadd double %508, %509
<   %511 = fmul double %263, %510
<   %512 = fmul double %275, %434
<   %513 = fmul double %298, %449
<   %514 = fadd double %512, %513
<   %515 = fmul double %321, %464
<   %516 = fadd double %514, %515
<   %517 = fmul double %344, %479
<   %518 = fadd double %516, %517
<   %519 = fmul double %263, %518
<   %520 = fmul double %278, %434
<   %521 = fmul double %301, %449
<   %522 = fadd double %520, %521
<   %523 = fmul double %324, %464
<   %524 = fadd double %522, %523
<   %525 = fmul double %347, %479
<   %526 = fadd double %524, %525
<   %527 = fmul double %263, %526
<   %528 = fmul double %281, %434
<   %529 = fmul double %304, %449
<   %530 = fadd double %528, %529
<   %531 = fmul double %327, %464
<   %532 = fadd double %530, %531
<   %533 = fmul double %350, %479
<   %534 = fadd double %532, %533
<   %535 = fmul double %263, %534
<   %536 = fmul double %284, %434
<   %537 = fmul double %307, %449
<   %538 = fadd double %536, %537
<   %539 = fmul double %330, %464
<   %540 = fadd double %538, %539
<   %541 = fmul double %353, %479
<   %542 = fadd double %540, %541
<   %543 = fmul double %263, %542
<   %544 = fmul double %246, %264
<   %545 = fmul double %248, %266
<   %546 = fadd double %544, %545
<   %547 = fmul double %250, %269
<   %548 = fadd double %546, %547
<   %549 = fmul double %252, %272
<   %550 = fadd double %548, %549
<   %551 = fmul double %254, %275
<   %552 = fadd double %550, %551
<   %553 = fmul double %256, %278
<   %554 = fadd double %552, %553
<   %555 = fmul double %258, %281
<   %556 = fadd double %554, %555
<   %557 = fmul double %260, %284
<   %558 = fadd double %556, %557
<   %559 = fmul double %246, %287
<   %560 = fmul double %248, %289
<   %561 = fadd double %559, %560
<   %562 = fmul double %250, %292
<   %563 = fadd double %561, %562
<   %564 = fmul double %252, %295
<   %565 = fadd double %563, %564
<   %566 = fmul double %254, %298
<   %567 = fadd double %565, %566
<   %568 = fmul double %256, %301
<   %569 = fadd double %567, %568
<   %570 = fmul double %258, %304
<   %571 = fadd double %569, %570
<   %572 = fmul double %260, %307
<   %573 = fadd double %571, %572
<   %574 = fmul double %246, %310
<   %575 = fmul double %248, %312
<   %576 = fadd double %574, %575
<   %577 = fmul double %250, %315
<   %578 = fadd double %576, %577
<   %579 = fmul double %252, %318
<   %580 = fadd double %578, %579
<   %581 = fmul double %254, %321
<   %582 = fadd double %580, %581
<   %583 = fmul double %256, %324
<   %584 = fadd double %582, %583
<   %585 = fmul double %258, %327
<   %586 = fadd double %584, %585
<   %587 = fmul double %260, %330
<   %588 = fadd double %586, %587
<   %589 = fmul double %246, %333
<   %590 = fmul double %248, %335
<   %591 = fadd double %589, %590
<   %592 = fmul double %250, %338
<   %593 = fadd double %591, %592
<   %594 = fmul double %252, %341
<   %595 = fadd double %593, %594
<   %596 = fmul double %254, %344
<   %597 = fadd double %595, %596
<   %598 = fmul double %256, %347
<   %599 = fadd double %597, %598
<   %600 = fmul double %258, %350
<   %601 = fadd double %599, %600
<   %602 = fmul double %260, %353
<   %603 = fadd double %601, %602
<   %604 = fmul double %264, %558
<   %605 = fmul double %287, %573
<   %606 = fadd double %604, %605
<   %607 = fmul double %310, %588
<   %608 = fadd double %606, %607
<   %609 = fmul double %333, %603
<   %610 = fadd double %608, %609
<   %611 = fmul double %263, %610
<   %612 = fmul double %266, %558
<   %613 = fmul double %289, %573
<   %614 = fadd double %612, %613
<   %615 = fmul double %312, %588
<   %616 = fadd double %614, %615
<   %617 = fmul double %335, %603
<   %618 = fadd double %616, %617
<   %619 = fmul double %263, %618
<   %620 = fmul double %269, %558
<   %621 = fmul double %292, %573
<   %622 = fadd double %620, %621
<   %623 = fmul double %315, %588
<   %624 = fadd double %622, %623
<   %625 = fmul double %338, %603
<   %626 = fadd double %624, %625
<   %627 = fmul double %263, %626
<   %628 = fmul double %272, %558
<   %629 = fmul double %295, %573
<   %630 = fadd double %628, %629
<   %631 = fmul double %318, %588
<   %632 = fadd double %630, %631
<   %633 = fmul double %341, %603
<   %634 = fadd double %632, %633
<   %635 = fmul double %263, %634
<   %636 = fmul double %275, %558
<   %637 = fmul double %298, %573
<   %638 = fadd double %636, %637
<   %639 = fmul double %321, %588
<   %640 = fadd double %638, %639
<   %641 = fmul double %344, %603
<   %642 = fadd double %640, %641
<   %643 = fmul double %263, %642
<   %644 = fmul double %278, %558
<   %645 = fmul double %301, %573
<   %646 = fadd double %644, %645
<   %647 = fmul double %324, %588
<   %648 = fadd double %646, %647
<   %649 = fmul double %347, %603
<   %650 = fadd double %648, %649
<   %651 = fmul double %263, %650
<   %652 = fmul double %281, %558
<   %653 = fmul double %304, %573
<   %654 = fadd double %652, %653
<   %655 = fmul double %327, %588
<   %656 = fadd double %654, %655
<   %657 = fmul double %350, %603
<   %658 = fadd double %656, %657
<   %659 = fmul double %263, %658
<   %660 = fmul double %284, %558
<   %661 = fmul double %307, %573
<   %662 = fadd double %660, %661
<   %663 = fmul double %330, %588
<   %664 = fadd double %662, %663
<   %665 = fmul double %353, %603
<   %666 = fadd double %664, %665
<   %667 = fmul double %263, %666
<   br i1 %100, label %845, label %870
< 
< 668:                                              ; preds = %112, %668
<   %669 = phi i64 [ 0, %112 ], [ %843, %668 ]
<   %670 = load double, double* %120, align 8, !tbaa !2
<   %671 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %7, i64 0, i64 %669, i64 0
<   %672 = load double, double* %671, align 16, !tbaa !2
<   %673 = fmul double %670, %672
<   %674 = load double, double* %123, align 8, !tbaa !2
<   %675 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %7, i64 0, i64 %669, i64 1
<   %676 = load double, double* %675, align 8, !tbaa !2
<   %677 = fmul double %674, %676
<   %678 = fadd double %673, %677
<   %679 = load double, double* %126, align 8, !tbaa !2
<   %680 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %7, i64 0, i64 %669, i64 2
<   %681 = load double, double* %680, align 16, !tbaa !2
<   %682 = fmul double %679, %681
<   %683 = fadd double %678, %682
<   %684 = load double, double* %129, align 8, !tbaa !2
<   %685 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %7, i64 0, i64 %669, i64 3
<   %686 = load double, double* %685, align 8, !tbaa !2
<   %687 = fmul double %684, %686
<   %688 = fadd double %683, %687
<   %689 = load double, double* %132, align 8, !tbaa !2
<   %690 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %7, i64 0, i64 %669, i64 4
<   %691 = load double, double* %690, align 16, !tbaa !2
<   %692 = fmul double %689, %691
<   %693 = fadd double %688, %692
<   %694 = load double, double* %135, align 8, !tbaa !2
<   %695 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %7, i64 0, i64 %669, i64 5
<   %696 = load double, double* %695, align 8, !tbaa !2
<   %697 = fmul double %694, %696
<   %698 = fadd double %693, %697
<   %699 = load double, double* %138, align 8, !tbaa !2
<   %700 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %7, i64 0, i64 %669, i64 6
<   %701 = load double, double* %700, align 16, !tbaa !2
<   %702 = fmul double %699, %701
<   %703 = fadd double %698, %702
<   %704 = load double, double* %141, align 8, !tbaa !2
<   %705 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %7, i64 0, i64 %669, i64 7
<   %706 = load double, double* %705, align 8, !tbaa !2
<   %707 = fmul double %704, %706
<   %708 = fadd double %703, %707
<   %709 = load double, double* %142, align 8, !tbaa !2
<   %710 = fmul double %672, %709
<   %711 = load double, double* %143, align 8, !tbaa !2
<   %712 = fmul double %676, %711
<   %713 = fadd double %710, %712
<   %714 = load double, double* %144, align 8, !tbaa !2
<   %715 = fmul double %681, %714
<   %716 = fadd double %713, %715
<   %717 = load double, double* %145, align 8, !tbaa !2
<   %718 = fmul double %686, %717
<   %719 = fadd double %716, %718
<   %720 = load double, double* %146, align 8, !tbaa !2
<   %721 = fmul double %691, %720
<   %722 = fadd double %719, %721
<   %723 = load double, double* %147, align 8, !tbaa !2
<   %724 = fmul double %696, %723
<   %725 = fadd double %722, %724
<   %726 = load double, double* %148, align 8, !tbaa !2
<   %727 = fmul double %701, %726
<   %728 = fadd double %725, %727
<   %729 = load double, double* %149, align 8, !tbaa !2
<   %730 = fmul double %706, %729
<   %731 = fadd double %728, %730
<   %732 = load double, double* %150, align 8, !tbaa !2
<   %733 = fmul double %672, %732
<   %734 = load double, double* %151, align 8, !tbaa !2
<   %735 = fmul double %676, %734
<   %736 = fadd double %733, %735
<   %737 = load double, double* %152, align 8, !tbaa !2
<   %738 = fmul double %681, %737
<   %739 = fadd double %736, %738
<   %740 = load double, double* %153, align 8, !tbaa !2
<   %741 = fmul double %686, %740
<   %742 = fadd double %739, %741
<   %743 = load double, double* %154, align 8, !tbaa !2
<   %744 = fmul double %691, %743
<   %745 = fadd double %742, %744
<   %746 = load double, double* %155, align 8, !tbaa !2
<   %747 = fmul double %696, %746
<   %748 = fadd double %745, %747
<   %749 = load double, double* %156, align 8, !tbaa !2
<   %750 = fmul double %701, %749
<   %751 = fadd double %748, %750
<   %752 = load double, double* %157, align 8, !tbaa !2
<   %753 = fmul double %706, %752
<   %754 = fadd double %751, %753
<   %755 = load double, double* %158, align 8, !tbaa !2
<   %756 = fmul double %708, %755
<   %757 = load double, double* %159, align 8, !tbaa !2
<   %758 = fmul double %731, %757
<   %759 = fadd double %756, %758
<   %760 = load double, double* %160, align 8, !tbaa !2
<   %761 = fmul double %754, %760
<   %762 = fadd double %759, %761
<   %763 = fmul double %119, %762
<   %764 = fsub double %672, %763
<   %765 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 0, i64 %669
<   store double %764, double* %765, align 8, !tbaa !2
<   %766 = load double, double* %161, align 8, !tbaa !2
<   %767 = fmul double %708, %766
<   %768 = load double, double* %162, align 8, !tbaa !2
<   %769 = fmul double %731, %768
<   %770 = fadd double %767, %769
<   %771 = load double, double* %163, align 8, !tbaa !2
<   %772 = fmul double %754, %771
<   %773 = fadd double %770, %772
<   %774 = fmul double %119, %773
<   %775 = fsub double %676, %774
<   %776 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 1, i64 %669
<   store double %775, double* %776, align 8, !tbaa !2
<   %777 = load double, double* %164, align 8, !tbaa !2
<   %778 = fmul double %708, %777
<   %779 = load double, double* %165, align 8, !tbaa !2
<   %780 = fmul double %731, %779
<   %781 = fadd double %778, %780
<   %782 = load double, double* %166, align 8, !tbaa !2
<   %783 = fmul double %754, %782
<   %784 = fadd double %781, %783
<   %785 = fmul double %119, %784
<   %786 = fsub double %681, %785
<   %787 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 2, i64 %669
<   store double %786, double* %787, align 8, !tbaa !2
<   %788 = load double, double* %167, align 8, !tbaa !2
<   %789 = fmul double %708, %788
<   %790 = load double, double* %168, align 8, !tbaa !2
<   %791 = fmul double %731, %790
<   %792 = fadd double %789, %791
<   %793 = load double, double* %169, align 8, !tbaa !2
<   %794 = fmul double %754, %793
<   %795 = fadd double %792, %794
<   %796 = fmul double %119, %795
<   %797 = fsub double %686, %796
<   %798 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 3, i64 %669
<   store double %797, double* %798, align 8, !tbaa !2
<   %799 = load double, double* %170, align 8, !tbaa !2
<   %800 = fmul double %708, %799
<   %801 = load double, double* %171, align 8, !tbaa !2
<   %802 = fmul double %731, %801
<   %803 = fadd double %800, %802
<   %804 = load double, double* %172, align 8, !tbaa !2
<   %805 = fmul double %754, %804
<   %806 = fadd double %803, %805
<   %807 = fmul double %119, %806
<   %808 = fsub double %691, %807
<   %809 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 4, i64 %669
<   store double %808, double* %809, align 8, !tbaa !2
<   %810 = load double, double* %173, align 8, !tbaa !2
<   %811 = fmul double %708, %810
<   %812 = load double, double* %174, align 8, !tbaa !2
<   %813 = fmul double %731, %812
<   %814 = fadd double %811, %813
<   %815 = load double, double* %175, align 8, !tbaa !2
<   %816 = fmul double %754, %815
<   %817 = fadd double %814, %816
<   %818 = fmul double %119, %817
<   %819 = fsub double %696, %818
<   %820 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 5, i64 %669
<   store double %819, double* %820, align 8, !tbaa !2
<   %821 = load double, double* %176, align 8, !tbaa !2
<   %822 = fmul double %708, %821
<   %823 = load double, double* %177, align 8, !tbaa !2
<   %824 = fmul double %731, %823
<   %825 = fadd double %822, %824
<   %826 = load double, double* %178, align 8, !tbaa !2
<   %827 = fmul double %754, %826
<   %828 = fadd double %825, %827
<   %829 = fmul double %119, %828
<   %830 = fsub double %701, %829
<   %831 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 6, i64 %669
<   store double %830, double* %831, align 8, !tbaa !2
<   %832 = load double, double* %179, align 8, !tbaa !2
<   %833 = fmul double %708, %832
<   %834 = load double, double* %180, align 8, !tbaa !2
<   %835 = fmul double %731, %834
<   %836 = fadd double %833, %835
<   %837 = load double, double* %181, align 8, !tbaa !2
<   %838 = fmul double %754, %837
<   %839 = fadd double %836, %838
<   %840 = fmul double %119, %839
<   %841 = fsub double %706, %840
<   %842 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %23, i64 0, i64 7, i64 %669
<   store double %841, double* %842, align 8, !tbaa !2
<   %843 = add nuw nsw i64 %669, 1
<   %844 = icmp eq i64 %843, 4
<   br i1 %844, label %182, label %668, !llvm.loop !100
< 
< 845:                                              ; preds = %182
<   %846 = getelementptr inbounds double, double* %107, i64 %116
<   store double %363, double* %846, align 8, !tbaa !2
<   %847 = getelementptr inbounds double, double* %846, i64 1
<   store double %371, double* %847, align 8, !tbaa !2
<   %848 = getelementptr inbounds double, double* %846, i64 2
<   store double %379, double* %848, align 8, !tbaa !2
<   %849 = getelementptr inbounds double, double* %846, i64 3
<   store double %387, double* %849, align 8, !tbaa !2
<   %850 = getelementptr inbounds double, double* %846, i64 4
<   store double %395, double* %850, align 8, !tbaa !2
<   %851 = getelementptr inbounds double, double* %846, i64 5
<   store double %403, double* %851, align 8, !tbaa !2
<   %852 = getelementptr inbounds double, double* %846, i64 6
<   store double %411, double* %852, align 8, !tbaa !2
<   %853 = getelementptr inbounds double, double* %846, i64 7
<   store double %419, double* %853, align 8, !tbaa !2
<   %854 = getelementptr inbounds double, double* %108, i64 %116
<   store double %487, double* %854, align 8, !tbaa !2
<   %855 = getelementptr inbounds double, double* %854, i64 1
<   store double %495, double* %855, align 8, !tbaa !2
<   %856 = getelementptr inbounds double, double* %854, i64 2
<   store double %503, double* %856, align 8, !tbaa !2
<   %857 = getelementptr inbounds double, double* %854, i64 3
<   store double %511, double* %857, align 8, !tbaa !2
<   %858 = getelementptr inbounds double, double* %854, i64 4
<   store double %519, double* %858, align 8, !tbaa !2
<   %859 = getelementptr inbounds double, double* %854, i64 5
<   store double %527, double* %859, align 8, !tbaa !2
<   %860 = getelementptr inbounds double, double* %854, i64 6
<   store double %535, double* %860, align 8, !tbaa !2
<   %861 = getelementptr inbounds double, double* %854, i64 7
<   store double %543, double* %861, align 8, !tbaa !2
<   %862 = getelementptr inbounds double, double* %109, i64 %116
<   store double %611, double* %862, align 8, !tbaa !2
<   %863 = getelementptr inbounds double, double* %862, i64 1
<   store double %619, double* %863, align 8, !tbaa !2
<   %864 = getelementptr inbounds double, double* %862, i64 2
<   store double %627, double* %864, align 8, !tbaa !2
<   %865 = getelementptr inbounds double, double* %862, i64 3
<   store double %635, double* %865, align 8, !tbaa !2
<   %866 = getelementptr inbounds double, double* %862, i64 4
<   store double %643, double* %866, align 8, !tbaa !2
<   %867 = getelementptr inbounds double, double* %862, i64 5
<   store double %651, double* %867, align 8, !tbaa !2
<   %868 = getelementptr inbounds double, double* %862, i64 6
<   store double %659, double* %868, align 8, !tbaa !2
<   %869 = getelementptr inbounds double, double* %862, i64 7
<   store double %667, double* %869, align 8, !tbaa !2
<   br label %943
< 
< 870:                                              ; preds = %182
<   %871 = getelementptr inbounds double, double* %102, i64 %205
<   %872 = load double, double* %871, align 8, !tbaa !2
<   %873 = fadd double %363, %872
<   store double %873, double* %871, align 8, !tbaa !2
<   %874 = getelementptr inbounds double, double* %104, i64 %205
<   %875 = load double, double* %874, align 8, !tbaa !2
<   %876 = fadd double %487, %875
<   store double %876, double* %874, align 8, !tbaa !2
<   %877 = getelementptr inbounds double, double* %106, i64 %205
<   %878 = load double, double* %877, align 8, !tbaa !2
<   %879 = fadd double %611, %878
<   store double %879, double* %877, align 8, !tbaa !2
<   %880 = getelementptr inbounds double, double* %102, i64 %208
<   %881 = load double, double* %880, align 8, !tbaa !2
<   %882 = fadd double %371, %881
<   store double %882, double* %880, align 8, !tbaa !2
<   %883 = getelementptr inbounds double, double* %104, i64 %208
<   %884 = load double, double* %883, align 8, !tbaa !2
<   %885 = fadd double %495, %884
<   store double %885, double* %883, align 8, !tbaa !2
<   %886 = getelementptr inbounds double, double* %106, i64 %208
<   %887 = load double, double* %886, align 8, !tbaa !2
<   %888 = fadd double %619, %887
<   store double %888, double* %886, align 8, !tbaa !2
<   %889 = getelementptr inbounds double, double* %102, i64 %211
<   %890 = load double, double* %889, align 8, !tbaa !2
<   %891 = fadd double %379, %890
<   store double %891, double* %889, align 8, !tbaa !2
<   %892 = getelementptr inbounds double, double* %104, i64 %211
<   %893 = load double, double* %892, align 8, !tbaa !2
<   %894 = fadd double %503, %893
<   store double %894, double* %892, align 8, !tbaa !2
<   %895 = getelementptr inbounds double, double* %106, i64 %211
<   %896 = load double, double* %895, align 8, !tbaa !2
<   %897 = fadd double %627, %896
<   store double %897, double* %895, align 8, !tbaa !2
<   %898 = getelementptr inbounds double, double* %102, i64 %214
<   %899 = load double, double* %898, align 8, !tbaa !2
<   %900 = fadd double %387, %899
<   store double %900, double* %898, align 8, !tbaa !2
<   %901 = getelementptr inbounds double, double* %104, i64 %214
<   %902 = load double, double* %901, align 8, !tbaa !2
<   %903 = fadd double %511, %902
<   store double %903, double* %901, align 8, !tbaa !2
<   %904 = getelementptr inbounds double, double* %106, i64 %214
<   %905 = load double, double* %904, align 8, !tbaa !2
<   %906 = fadd double %635, %905
<   store double %906, double* %904, align 8, !tbaa !2
<   %907 = getelementptr inbounds double, double* %102, i64 %217
<   %908 = load double, double* %907, align 8, !tbaa !2
<   %909 = fadd double %395, %908
<   store double %909, double* %907, align 8, !tbaa !2
<   %910 = getelementptr inbounds double, double* %104, i64 %217
<   %911 = load double, double* %910, align 8, !tbaa !2
<   %912 = fadd double %519, %911
<   store double %912, double* %910, align 8, !tbaa !2
<   %913 = getelementptr inbounds double, double* %106, i64 %217
<   %914 = load double, double* %913, align 8, !tbaa !2
<   %915 = fadd double %643, %914
<   store double %915, double* %913, align 8, !tbaa !2
<   %916 = getelementptr inbounds double, double* %102, i64 %220
<   %917 = load double, double* %916, align 8, !tbaa !2
<   %918 = fadd double %403, %917
<   store double %918, double* %916, align 8, !tbaa !2
<   %919 = getelementptr inbounds double, double* %104, i64 %220
<   %920 = load double, double* %919, align 8, !tbaa !2
<   %921 = fadd double %527, %920
<   store double %921, double* %919, align 8, !tbaa !2
<   %922 = getelementptr inbounds double, double* %106, i64 %220
<   %923 = load double, double* %922, align 8, !tbaa !2
<   %924 = fadd double %651, %923
<   store double %924, double* %922, align 8, !tbaa !2
<   %925 = getelementptr inbounds double, double* %102, i64 %223
<   %926 = load double, double* %925, align 8, !tbaa !2
<   %927 = fadd double %411, %926
<   store double %927, double* %925, align 8, !tbaa !2
<   %928 = getelementptr inbounds double, double* %104, i64 %223
<   %929 = load double, double* %928, align 8, !tbaa !2
<   %930 = fadd double %535, %929
<   store double %930, double* %928, align 8, !tbaa !2
<   %931 = getelementptr inbounds double, double* %106, i64 %223
<   %932 = load double, double* %931, align 8, !tbaa !2
<   %933 = fadd double %659, %932
<   store double %933, double* %931, align 8, !tbaa !2
<   %934 = getelementptr inbounds double, double* %102, i64 %226
<   %935 = load double, double* %934, align 8, !tbaa !2
<   %936 = fadd double %419, %935
<   store double %936, double* %934, align 8, !tbaa !2
<   %937 = getelementptr inbounds double, double* %104, i64 %226
<   %938 = load double, double* %937, align 8, !tbaa !2
<   %939 = fadd double %543, %938
<   store double %939, double* %937, align 8, !tbaa !2
<   %940 = getelementptr inbounds double, double* %106, i64 %226
<   %941 = load double, double* %940, align 8, !tbaa !2
<   %942 = fadd double %667, %941
<   store double %942, double* %940, align 8, !tbaa !2
<   br label %943
< 
< 943:                                              ; preds = %870, %845
<   call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %46) #10
<   %944 = add nsw i64 %113, 1
<   %945 = add nsw i32 %114, 1
<   %946 = trunc i64 %944 to i32
<   %947 = icmp eq i32 %111, %946
<   br i1 %947, label %948, label %112
< 
< 948:                                              ; preds = %943, %33
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %39)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %37) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %36) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %35) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %34) #10
<   br label %949
< 
< 949:                                              ; preds = %948, %29
<   %950 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %950)
<   %951 = load i32, i32* %13, align 4, !tbaa !12
<   %952 = icmp sgt i32 %951, 1
<   br i1 %952, label %953, label %1074
< 
< 953:                                              ; preds = %949
<   %954 = load i32, i32* %17, align 4, !tbaa !12
<   %955 = add nsw i32 %954, -1
<   %956 = icmp sgt i32 %954, 0
<   br i1 %956, label %957, label %1073
< 
< 957:                                              ; preds = %953
<   %958 = bitcast i32* %24 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %958) #10
<   store i32 0, i32* %24, align 4, !tbaa !12
<   %959 = bitcast i32* %25 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %959) #10
<   store i32 %955, i32* %25, align 4, !tbaa !12
<   %960 = bitcast i32* %26 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %960) #10
<   store i32 1, i32* %26, align 4, !tbaa !12
<   %961 = bitcast i32* %27 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %961) #10
<   store i32 0, i32* %27, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %950, i32 34, i32* nonnull %27, i32* nonnull %24, i32* nonnull %25, i32* nonnull %26, i32 1, i32 1) #10
<   %962 = load i32, i32* %25, align 4, !tbaa !12
<   %963 = icmp slt i32 %962, %954
<   %964 = select i1 %963, i32 %962, i32 %955
<   store i32 %964, i32* %25, align 4, !tbaa !12
<   %965 = load i32, i32* %24, align 4, !tbaa !12
<   %966 = icmp sgt i32 %965, %964
<   br i1 %966, label %1072, label %967
< 
< 967:                                              ; preds = %957
<   %968 = getelementptr inbounds %class.Domain, %class.Domain* %4, i64 0, i32 92
<   %969 = load i32*, i32** %968, align 8, !tbaa !97
<   %970 = getelementptr inbounds %class.Domain, %class.Domain* %4, i64 0, i32 93
<   %971 = load i32*, i32** %970, align 8, !tbaa !98
<   %972 = load double*, double** %14, align 8
<   %973 = load double*, double** %15, align 8
<   %974 = load double*, double** %16, align 8
<   %975 = getelementptr inbounds %class.Domain, %class.Domain* %4, i64 0, i32 9, i32 0, i32 0, i32 0
<   %976 = load double*, double** %975, align 8, !tbaa !22
<   %977 = getelementptr inbounds %class.Domain, %class.Domain* %4, i64 0, i32 10, i32 0, i32 0, i32 0
<   %978 = load double*, double** %977, align 8, !tbaa !22
<   %979 = getelementptr inbounds %class.Domain, %class.Domain* %4, i64 0, i32 11, i32 0, i32 0, i32 0
<   %980 = load double*, double** %979, align 8, !tbaa !22
<   %981 = sext i32 %965 to i64
<   %982 = add i32 %964, 1
<   %983 = sext i32 %982 to i64
<   %984 = getelementptr inbounds i32, i32* %969, i64 %981
<   %985 = load i32, i32* %984, align 4, !tbaa !12
<   br label %986
< 
< 986:                                              ; preds = %967, %1024
<   %987 = phi i32 [ %985, %967 ], [ %991, %1024 ]
<   %988 = phi i64 [ %981, %967 ], [ %989, %1024 ]
<   %989 = add nsw i64 %988, 1
<   %990 = getelementptr inbounds i32, i32* %969, i64 %989
<   %991 = load i32, i32* %990, align 4, !tbaa !12
<   %992 = sub i32 %991, %987
<   %993 = sext i32 %987 to i64
<   %994 = getelementptr inbounds i32, i32* %971, i64 %993
<   %995 = icmp sgt i32 %992, 0
<   br i1 %995, label %996, label %1024
< 
< 996:                                              ; preds = %986
<   %997 = zext i32 %992 to i64
<   %998 = and i64 %997, 1
<   %999 = icmp eq i32 %992, 1
<   br i1 %999, label %1002, label %1000
< 
< 1000:                                             ; preds = %996
<   %1001 = and i64 %997, 4294967294
<   br label %1038
< 
< 1002:                                             ; preds = %1038, %996
<   %1003 = phi double [ undef, %996 ], [ %1062, %1038 ]
<   %1004 = phi double [ undef, %996 ], [ %1065, %1038 ]
<   %1005 = phi double [ undef, %996 ], [ %1068, %1038 ]
<   %1006 = phi i64 [ 0, %996 ], [ %1069, %1038 ]
<   %1007 = phi double [ 0.000000e+00, %996 ], [ %1068, %1038 ]
<   %1008 = phi double [ 0.000000e+00, %996 ], [ %1065, %1038 ]
<   %1009 = phi double [ 0.000000e+00, %996 ], [ %1062, %1038 ]
<   %1010 = icmp eq i64 %998, 0
<   br i1 %1010, label %1024, label %1011
< 
< 1011:                                             ; preds = %1002
<   %1012 = getelementptr inbounds i32, i32* %994, i64 %1006
<   %1013 = load i32, i32* %1012, align 4, !tbaa !12
<   %1014 = sext i32 %1013 to i64
<   %1015 = getelementptr inbounds double, double* %974, i64 %1014
<   %1016 = load double, double* %1015, align 8, !tbaa !2
<   %1017 = fadd double %1007, %1016
<   %1018 = getelementptr inbounds double, double* %973, i64 %1014
<   %1019 = load double, double* %1018, align 8, !tbaa !2
<   %1020 = fadd double %1008, %1019
<   %1021 = getelementptr inbounds double, double* %972, i64 %1014
<   %1022 = load double, double* %1021, align 8, !tbaa !2
<   %1023 = fadd double %1009, %1022
<   br label %1024
< 
< 1024:                                             ; preds = %1011, %1002, %986
<   %1025 = phi double [ 0.000000e+00, %986 ], [ %1003, %1002 ], [ %1023, %1011 ]
<   %1026 = phi double [ 0.000000e+00, %986 ], [ %1004, %1002 ], [ %1020, %1011 ]
<   %1027 = phi double [ 0.000000e+00, %986 ], [ %1005, %1002 ], [ %1017, %1011 ]
<   %1028 = getelementptr inbounds double, double* %976, i64 %988
<   %1029 = load double, double* %1028, align 8, !tbaa !2
<   %1030 = fadd double %1025, %1029
<   store double %1030, double* %1028, align 8, !tbaa !2
<   %1031 = getelementptr inbounds double, double* %978, i64 %988
<   %1032 = load double, double* %1031, align 8, !tbaa !2
<   %1033 = fadd double %1026, %1032
<   store double %1033, double* %1031, align 8, !tbaa !2
<   %1034 = getelementptr inbounds double, double* %980, i64 %988
<   %1035 = load double, double* %1034, align 8, !tbaa !2
<   %1036 = fadd double %1027, %1035
<   store double %1036, double* %1034, align 8, !tbaa !2
<   %1037 = icmp eq i64 %989, %983
<   br i1 %1037, label %1072, label %986
< 
< 1038:                                             ; preds = %1038, %1000
<   %1039 = phi i64 [ 0, %1000 ], [ %1069, %1038 ]
<   %1040 = phi double [ 0.000000e+00, %1000 ], [ %1068, %1038 ]
<   %1041 = phi double [ 0.000000e+00, %1000 ], [ %1065, %1038 ]
<   %1042 = phi double [ 0.000000e+00, %1000 ], [ %1062, %1038 ]
<   %1043 = phi i64 [ %1001, %1000 ], [ %1070, %1038 ]
<   %1044 = getelementptr inbounds i32, i32* %994, i64 %1039
<   %1045 = load i32, i32* %1044, align 4, !tbaa !12
<   %1046 = sext i32 %1045 to i64
<   %1047 = getelementptr inbounds double, double* %972, i64 %1046
<   %1048 = load double, double* %1047, align 8, !tbaa !2
<   %1049 = fadd double %1042, %1048
<   %1050 = getelementptr inbounds double, double* %973, i64 %1046
<   %1051 = load double, double* %1050, align 8, !tbaa !2
<   %1052 = fadd double %1041, %1051
<   %1053 = getelementptr inbounds double, double* %974, i64 %1046
<   %1054 = load double, double* %1053, align 8, !tbaa !2
<   %1055 = fadd double %1040, %1054
<   %1056 = or i64 %1039, 1
<   %1057 = getelementptr inbounds i32, i32* %994, i64 %1056
<   %1058 = load i32, i32* %1057, align 4, !tbaa !12
<   %1059 = sext i32 %1058 to i64
<   %1060 = getelementptr inbounds double, double* %972, i64 %1059
<   %1061 = load double, double* %1060, align 8, !tbaa !2
<   %1062 = fadd double %1049, %1061
<   %1063 = getelementptr inbounds double, double* %973, i64 %1059
<   %1064 = load double, double* %1063, align 8, !tbaa !2
<   %1065 = fadd double %1052, %1064
<   %1066 = getelementptr inbounds double, double* %974, i64 %1059
<   %1067 = load double, double* %1066, align 8, !tbaa !2
<   %1068 = fadd double %1055, %1067
<   %1069 = add nuw nsw i64 %1039, 2
<   %1070 = add i64 %1043, -2
<   %1071 = icmp eq i64 %1070, 0
<   br i1 %1071, label %1002, label %1038, !llvm.loop !101
< 
< 1072:                                             ; preds = %1024, %957
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %950)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %961) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %960) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %959) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %958) #10
<   br label %1073
< 
< 1073:                                             ; preds = %1072, %953
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %950)
<   br label %1074
< 
< 1074:                                             ; preds = %1073, %949
<   %1075 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL28CalcFBHourglassForceForElemsR6DomainPdS1_S1_S1_S1_S1_S1_diiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %1075)
<           to label %1076 unwind label %1077
---
> define internal void @.omp_outlined..24(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture nonnull align 4 dereferenceable(4) %numthreads, double** nocapture nonnull align 8 dereferenceable(8) %fx_elem, i32* nocapture nonnull readonly align 4 dereferenceable(4) %numElem8, double** nocapture nonnull align 8 dereferenceable(8) %fy_elem, double** nocapture nonnull align 8 dereferenceable(8) %fz_elem, i32* nocapture nonnull readonly align 4 dereferenceable(4) %numElem, double* nocapture nonnull readonly align 8 dereferenceable(8) %hourg, %class.Domain* nonnull readonly align 8 dereferenceable(1312) %domain, double** nocapture nonnull readonly align 8 dereferenceable(8) %determ, double** nocapture nonnull readonly align 8 dereferenceable(8) %x8n, [4 x [8 x double]]* nocapture nonnull readonly align 8 dereferenceable(256) %gamma, double** nocapture nonnull readonly align 8 dereferenceable(8) %y8n, double** nocapture nonnull readonly align 8 dereferenceable(8) %z8n, double** nocapture nonnull readonly align 8 dereferenceable(8) %dvdx, double** nocapture nonnull readonly align 8 dereferenceable(8) %dvdy, double** nocapture nonnull readonly align 8 dereferenceable(8) %dvdz, i32* nocapture nonnull readonly align 4 dereferenceable(4) %numNode) #6 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
> entry:
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %hourgam = alloca [8 x [4 x double]], align 16
>   %.omp.lb624 = alloca i32, align 4
>   %.omp.ub625 = alloca i32, align 4
>   %.omp.stride626 = alloca i32, align 4
>   %.omp.is_last627 = alloca i32, align 4
>   %0 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   %1 = tail call i32 @__kmpc_master(%struct.ident_t* nonnull @1, i32 %0) #7
>   %.not = icmp eq i32 %1, 0
>   br i1 %.not, label %omp_if.end, label %invoke.cont
> 
> invoke.cont:                                      ; preds = %entry
>   %call = tail call i32 @omp_get_num_threads()
>   store i32 %call, i32* %numthreads, align 4, !tbaa !6
>   %cmp = icmp sgt i32 %call, 1
>   br i1 %cmp, label %if.then, label %if.end
> 
> if.then:                                          ; preds = %invoke.cont
>   %2 = load i32, i32* %numElem8, align 4, !tbaa !6
>   %conv = sext i32 %2 to i64
>   %mul.i = shl nsw i64 %conv, 3
>   %call.i = tail call noalias i8* @malloc(i64 %mul.i) #7
>   %3 = bitcast double** %fx_elem to i8**
>   store i8* %call.i, i8** %3, align 8, !tbaa !41
>   %call.i985 = tail call noalias i8* @malloc(i64 %mul.i) #7
>   %4 = bitcast double** %fy_elem to i8**
>   store i8* %call.i985, i8** %4, align 8, !tbaa !41
>   %call.i987 = tail call noalias i8* @malloc(i64 %mul.i) #7
>   %5 = bitcast double** %fz_elem to i8**
>   store i8* %call.i987, i8** %5, align 8, !tbaa !41
>   br label %if.end
> 
> if.end:                                           ; preds = %if.then, %invoke.cont
>   tail call void @__kmpc_end_master(%struct.ident_t* nonnull @1, i32 %0) #7
>   br label %omp_if.end
> 
> omp_if.end:                                       ; preds = %entry, %if.end
>   tail call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %0) #7
>   %6 = load i32, i32* %numElem, align 4, !tbaa !6
>   %sub9 = add nsw i32 %6, -1
>   %cmp10 = icmp sgt i32 %6, 0
>   br i1 %cmp10, label %omp.precond.then, label %omp.precond.end
> 
> omp.precond.then:                                 ; preds = %omp_if.end
>   %7 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %8 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #7
>   store i32 %sub9, i32* %.omp.ub, align 4, !tbaa !6
>   %9 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %10 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   %11 = load double, double* %hourg, align 8, !tbaa !2
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %0, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %12 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp14.not = icmp slt i32 %12, %6
>   %cond = select i1 %cmp14.not, i32 %12, i32 %sub9
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %13 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp15.not1237 = icmp sgt i32 %13, %cond
>   br i1 %cmp15.not1237, label %omp.loop.exit, label %omp.inner.for.body.lr.ph
> 
> omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
>   %14 = bitcast [8 x [4 x double]]* %hourgam to i8*
>   %_M_start.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 21, i32 0, i32 0, i32 0, i32 0
>   %15 = load i32*, i32** %_M_start.i.i, align 8, !tbaa !8
>   %16 = load double*, double** %determ, align 8, !tbaa !41
>   %17 = load double*, double** %x8n, align 8, !tbaa !41
>   %18 = load double*, double** %y8n, align 8, !tbaa !41
>   %19 = load double*, double** %z8n, align 8, !tbaa !41
>   %20 = load double*, double** %dvdx, align 8, !tbaa !41
>   %21 = load double*, double** %dvdy, align 8, !tbaa !41
>   %22 = load double*, double** %dvdz, align 8, !tbaa !41
>   %_M_start.i.i1149 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 49, i32 0, i32 0, i32 0, i32 0
>   %23 = load double*, double** %_M_start.i.i1149, align 8, !tbaa !11
>   %_M_start.i.i1152 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 50, i32 0, i32 0, i32 0, i32 0
>   %24 = load double*, double** %_M_start.i.i1152, align 8, !tbaa !11
>   %_M_start.i.i1145 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
>   %25 = load double*, double** %_M_start.i.i1145, align 8, !tbaa !11
>   %_M_start.i.i1121 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
>   %26 = load double*, double** %_M_start.i.i1121, align 8, !tbaa !11
>   %_M_start.i.i1097 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
>   %27 = load double*, double** %_M_start.i.i1097, align 8, !tbaa !11
>   %mul444 = fmul double %11, -1.000000e-02
>   %arrayidx1.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 0, i64 0
>   %arrayidx5.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 1, i64 0
>   %arrayidx10.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 2, i64 0
>   %arrayidx16.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 3, i64 0
>   %arrayidx22.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 4, i64 0
>   %arrayidx28.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 5, i64 0
>   %arrayidx34.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 6, i64 0
>   %arrayidx40.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 7, i64 0
>   %arrayidx1.1.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 0, i64 1
>   %arrayidx5.1.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 1, i64 1
>   %arrayidx10.1.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 2, i64 1
>   %arrayidx16.1.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 3, i64 1
>   %arrayidx22.1.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 4, i64 1
>   %arrayidx28.1.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 5, i64 1
>   %arrayidx34.1.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 6, i64 1
>   %arrayidx40.1.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 7, i64 1
>   %arrayidx1.2.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 0, i64 2
>   %arrayidx5.2.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 1, i64 2
>   %arrayidx10.2.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 2, i64 2
>   %arrayidx16.2.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 3, i64 2
>   %arrayidx22.2.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 4, i64 2
>   %arrayidx28.2.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 5, i64 2
>   %arrayidx34.2.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 6, i64 2
>   %arrayidx40.2.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 7, i64 2
>   %arrayidx1.3.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 0, i64 3
>   %arrayidx5.3.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 1, i64 3
>   %arrayidx10.3.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 2, i64 3
>   %arrayidx16.3.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 3, i64 3
>   %arrayidx22.3.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 4, i64 3
>   %arrayidx28.3.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 5, i64 3
>   %arrayidx34.3.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 6, i64 3
>   %arrayidx40.3.i = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 7, i64 3
>   %28 = load i32, i32* %numthreads, align 4, !tbaa !6
>   %cmp456 = icmp sgt i32 %28, 1
>   %_M_start.i.i1071 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 9, i32 0, i32 0, i32 0, i32 0
>   %29 = load double*, double** %_M_start.i.i1071, align 8
>   %_M_start.i.i1068 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 10, i32 0, i32 0, i32 0, i32 0
>   %30 = load double*, double** %_M_start.i.i1068, align 8
>   %_M_start.i.i1065 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 11, i32 0, i32 0, i32 0, i32 0
>   %31 = load double*, double** %_M_start.i.i1065, align 8
>   %32 = load double*, double** %fx_elem, align 8
>   %33 = load double*, double** %fy_elem, align 8
>   %34 = load double*, double** %fz_elem, align 8
>   %35 = sext i32 %13 to i64
>   %36 = icmp sgt i32 %cond, %13
>   %smax1249 = select i1 %36, i32 %cond, i32 %13
>   %37 = add i32 %smax1249, 1
>   br label %omp.inner.for.body
> 
> omp.inner.for.body:                               ; preds = %if.end584, %omp.inner.for.body.lr.ph
>   %indvars.iv1246 = phi i64 [ %indvars.iv.next1247, %if.end584 ], [ %35, %omp.inner.for.body.lr.ph ]
>   %.omp.iv.01238 = phi i32 [ %add601, %if.end584 ], [ %13, %omp.inner.for.body.lr.ph ]
>   call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %14) #7
>   %mul.i988 = shl nsw i32 %.omp.iv.01238, 3
>   %conv.i = sext i32 %mul.i988 to i64
>   %arrayidx = getelementptr inbounds double, double* %16, i64 %indvars.iv1246
>   %38 = load double, double* %arrayidx, align 8, !tbaa !2
>   %div18 = fdiv double 1.000000e+00, %38
>   %arrayidx21 = getelementptr inbounds double, double* %17, i64 %conv.i
>   %add26 = or i32 %mul.i988, 1
>   %idxprom27 = sext i32 %add26 to i64
>   %arrayidx28 = getelementptr inbounds double, double* %17, i64 %idxprom27
>   %add34 = or i32 %mul.i988, 2
>   %idxprom35 = sext i32 %add34 to i64
>   %arrayidx36 = getelementptr inbounds double, double* %17, i64 %idxprom35
>   %add42 = or i32 %mul.i988, 3
>   %idxprom43 = sext i32 %add42 to i64
>   %arrayidx44 = getelementptr inbounds double, double* %17, i64 %idxprom43
>   %add50 = or i32 %mul.i988, 4
>   %idxprom51 = sext i32 %add50 to i64
>   %arrayidx52 = getelementptr inbounds double, double* %17, i64 %idxprom51
>   %add58 = or i32 %mul.i988, 5
>   %idxprom59 = sext i32 %add58 to i64
>   %arrayidx60 = getelementptr inbounds double, double* %17, i64 %idxprom59
>   %add66 = or i32 %mul.i988, 6
>   %idxprom67 = sext i32 %add66 to i64
>   %arrayidx68 = getelementptr inbounds double, double* %17, i64 %idxprom67
>   %add74 = or i32 %mul.i988, 7
>   %idxprom75 = sext i32 %add74 to i64
>   %arrayidx76 = getelementptr inbounds double, double* %17, i64 %idxprom75
>   %arrayidx83 = getelementptr inbounds double, double* %18, i64 %conv.i
>   %arrayidx90 = getelementptr inbounds double, double* %18, i64 %idxprom27
>   %arrayidx98 = getelementptr inbounds double, double* %18, i64 %idxprom35
>   %arrayidx106 = getelementptr inbounds double, double* %18, i64 %idxprom43
>   %arrayidx114 = getelementptr inbounds double, double* %18, i64 %idxprom51
>   %arrayidx122 = getelementptr inbounds double, double* %18, i64 %idxprom59
>   %arrayidx130 = getelementptr inbounds double, double* %18, i64 %idxprom67
>   %arrayidx138 = getelementptr inbounds double, double* %18, i64 %idxprom75
>   %arrayidx145 = getelementptr inbounds double, double* %19, i64 %conv.i
>   %arrayidx152 = getelementptr inbounds double, double* %19, i64 %idxprom27
>   %arrayidx160 = getelementptr inbounds double, double* %19, i64 %idxprom35
>   %arrayidx168 = getelementptr inbounds double, double* %19, i64 %idxprom43
>   %arrayidx176 = getelementptr inbounds double, double* %19, i64 %idxprom51
>   %arrayidx184 = getelementptr inbounds double, double* %19, i64 %idxprom59
>   %arrayidx192 = getelementptr inbounds double, double* %19, i64 %idxprom67
>   %arrayidx200 = getelementptr inbounds double, double* %19, i64 %idxprom75
>   %arrayidx210 = getelementptr inbounds double, double* %20, i64 %conv.i
>   %arrayidx213 = getelementptr inbounds double, double* %21, i64 %conv.i
>   %arrayidx217 = getelementptr inbounds double, double* %22, i64 %conv.i
>   %arrayidx230 = getelementptr inbounds double, double* %20, i64 %idxprom27
>   %arrayidx234 = getelementptr inbounds double, double* %21, i64 %idxprom27
>   %arrayidx239 = getelementptr inbounds double, double* %22, i64 %idxprom27
>   %arrayidx252 = getelementptr inbounds double, double* %20, i64 %idxprom35
>   %arrayidx256 = getelementptr inbounds double, double* %21, i64 %idxprom35
>   %arrayidx261 = getelementptr inbounds double, double* %22, i64 %idxprom35
>   %arrayidx274 = getelementptr inbounds double, double* %20, i64 %idxprom43
>   %arrayidx278 = getelementptr inbounds double, double* %21, i64 %idxprom43
>   %arrayidx283 = getelementptr inbounds double, double* %22, i64 %idxprom43
>   %arrayidx296 = getelementptr inbounds double, double* %20, i64 %idxprom51
>   %arrayidx300 = getelementptr inbounds double, double* %21, i64 %idxprom51
>   %arrayidx305 = getelementptr inbounds double, double* %22, i64 %idxprom51
>   %arrayidx318 = getelementptr inbounds double, double* %20, i64 %idxprom59
>   %arrayidx322 = getelementptr inbounds double, double* %21, i64 %idxprom59
>   %arrayidx327 = getelementptr inbounds double, double* %22, i64 %idxprom59
>   %arrayidx340 = getelementptr inbounds double, double* %20, i64 %idxprom67
>   %arrayidx344 = getelementptr inbounds double, double* %21, i64 %idxprom67
>   %arrayidx349 = getelementptr inbounds double, double* %22, i64 %idxprom67
>   %arrayidx362 = getelementptr inbounds double, double* %20, i64 %idxprom75
>   %arrayidx366 = getelementptr inbounds double, double* %21, i64 %idxprom75
>   %arrayidx371 = getelementptr inbounds double, double* %22, i64 %idxprom75
>   br label %for.body
> 
> for.cond.cleanup:                                 ; preds = %for.body
>   %add.ptr.i.i = getelementptr inbounds i32, i32* %15, i64 %conv.i
>   %add.ptr.i.i1150 = getelementptr inbounds double, double* %23, i64 %indvars.iv1246
>   %39 = load double, double* %add.ptr.i.i1150, align 8, !tbaa !2
>   %add.ptr.i.i1153 = getelementptr inbounds double, double* %24, i64 %indvars.iv1246
>   %40 = load double, double* %add.ptr.i.i1153, align 8, !tbaa !2
>   %41 = load double, double* %arrayidx, align 8, !tbaa !2
>   %call.i1147 = call double @cbrt(double %41) #26
>   %42 = load i32, i32* %add.ptr.i.i, align 4, !tbaa !6
>   %arrayidx389 = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 1
>   %43 = load i32, i32* %arrayidx389, align 4, !tbaa !6
>   %arrayidx390 = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 2
>   %44 = load i32, i32* %arrayidx390, align 4, !tbaa !6
>   %arrayidx391 = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 3
>   %45 = load i32, i32* %arrayidx391, align 4, !tbaa !6
>   %arrayidx392 = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 4
>   %46 = load i32, i32* %arrayidx392, align 4, !tbaa !6
>   %arrayidx393 = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 5
>   %47 = load i32, i32* %arrayidx393, align 4, !tbaa !6
>   %arrayidx394 = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 6
>   %48 = load i32, i32* %arrayidx394, align 4, !tbaa !6
>   %arrayidx395 = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 7
>   %49 = load i32, i32* %arrayidx395, align 4, !tbaa !6
>   %conv.i1144 = sext i32 %42 to i64
>   %add.ptr.i.i1146 = getelementptr inbounds double, double* %25, i64 %conv.i1144
>   %50 = load double, double* %add.ptr.i.i1146, align 8, !tbaa !2
>   %conv.i1141 = sext i32 %43 to i64
>   %add.ptr.i.i1143 = getelementptr inbounds double, double* %25, i64 %conv.i1141
>   %51 = load double, double* %add.ptr.i.i1143, align 8, !tbaa !2
>   %conv.i1138 = sext i32 %44 to i64
>   %add.ptr.i.i1140 = getelementptr inbounds double, double* %25, i64 %conv.i1138
>   %52 = load double, double* %add.ptr.i.i1140, align 8, !tbaa !2
>   %conv.i1135 = sext i32 %45 to i64
>   %add.ptr.i.i1137 = getelementptr inbounds double, double* %25, i64 %conv.i1135
>   %53 = load double, double* %add.ptr.i.i1137, align 8, !tbaa !2
>   %conv.i1132 = sext i32 %46 to i64
>   %add.ptr.i.i1134 = getelementptr inbounds double, double* %25, i64 %conv.i1132
>   %54 = load double, double* %add.ptr.i.i1134, align 8, !tbaa !2
>   %conv.i1129 = sext i32 %47 to i64
>   %add.ptr.i.i1131 = getelementptr inbounds double, double* %25, i64 %conv.i1129
>   %55 = load double, double* %add.ptr.i.i1131, align 8, !tbaa !2
>   %conv.i1126 = sext i32 %48 to i64
>   %add.ptr.i.i1128 = getelementptr inbounds double, double* %25, i64 %conv.i1126
>   %56 = load double, double* %add.ptr.i.i1128, align 8, !tbaa !2
>   %conv.i1123 = sext i32 %49 to i64
>   %add.ptr.i.i1125 = getelementptr inbounds double, double* %25, i64 %conv.i1123
>   %57 = load double, double* %add.ptr.i.i1125, align 8, !tbaa !2
>   %add.ptr.i.i1122 = getelementptr inbounds double, double* %26, i64 %conv.i1144
>   %58 = load double, double* %add.ptr.i.i1122, align 8, !tbaa !2
>   %add.ptr.i.i1119 = getelementptr inbounds double, double* %26, i64 %conv.i1141
>   %59 = load double, double* %add.ptr.i.i1119, align 8, !tbaa !2
>   %add.ptr.i.i1116 = getelementptr inbounds double, double* %26, i64 %conv.i1138
>   %60 = load double, double* %add.ptr.i.i1116, align 8, !tbaa !2
>   %add.ptr.i.i1113 = getelementptr inbounds double, double* %26, i64 %conv.i1135
>   %61 = load double, double* %add.ptr.i.i1113, align 8, !tbaa !2
>   %add.ptr.i.i1110 = getelementptr inbounds double, double* %26, i64 %conv.i1132
>   %62 = load double, double* %add.ptr.i.i1110, align 8, !tbaa !2
>   %add.ptr.i.i1107 = getelementptr inbounds double, double* %26, i64 %conv.i1129
>   %63 = load double, double* %add.ptr.i.i1107, align 8, !tbaa !2
>   %add.ptr.i.i1104 = getelementptr inbounds double, double* %26, i64 %conv.i1126
>   %64 = load double, double* %add.ptr.i.i1104, align 8, !tbaa !2
>   %add.ptr.i.i1101 = getelementptr inbounds double, double* %26, i64 %conv.i1123
>   %65 = load double, double* %add.ptr.i.i1101, align 8, !tbaa !2
>   %add.ptr.i.i1098 = getelementptr inbounds double, double* %27, i64 %conv.i1144
>   %66 = load double, double* %add.ptr.i.i1098, align 8, !tbaa !2
>   %add.ptr.i.i1095 = getelementptr inbounds double, double* %27, i64 %conv.i1141
>   %67 = load double, double* %add.ptr.i.i1095, align 8, !tbaa !2
>   %add.ptr.i.i1092 = getelementptr inbounds double, double* %27, i64 %conv.i1138
>   %68 = load double, double* %add.ptr.i.i1092, align 8, !tbaa !2
>   %add.ptr.i.i1089 = getelementptr inbounds double, double* %27, i64 %conv.i1135
>   %69 = load double, double* %add.ptr.i.i1089, align 8, !tbaa !2
>   %add.ptr.i.i1086 = getelementptr inbounds double, double* %27, i64 %conv.i1132
>   %70 = load double, double* %add.ptr.i.i1086, align 8, !tbaa !2
>   %add.ptr.i.i1083 = getelementptr inbounds double, double* %27, i64 %conv.i1129
>   %71 = load double, double* %add.ptr.i.i1083, align 8, !tbaa !2
>   %add.ptr.i.i1080 = getelementptr inbounds double, double* %27, i64 %conv.i1126
>   %72 = load double, double* %add.ptr.i.i1080, align 8, !tbaa !2
>   %add.ptr.i.i1077 = getelementptr inbounds double, double* %27, i64 %conv.i1123
>   %73 = load double, double* %add.ptr.i.i1077, align 8, !tbaa !2
>   %mul445 = fmul double %mul444, %39
>   %mul446 = fmul double %mul445, %40
>   %div447 = fdiv double %mul446, %call.i1147
>   %74 = load double, double* %arrayidx1.i, align 16, !tbaa !2
>   %mul.i1073 = fmul double %50, %74
>   %75 = load double, double* %arrayidx5.i, align 16, !tbaa !2
>   %mul7.i = fmul double %51, %75
>   %add.i1074 = fadd double %mul.i1073, %mul7.i
>   %76 = load double, double* %arrayidx10.i, align 16, !tbaa !2
>   %mul12.i = fmul double %52, %76
>   %add13.i = fadd double %add.i1074, %mul12.i
>   %77 = load double, double* %arrayidx16.i, align 16, !tbaa !2
>   %mul18.i = fmul double %53, %77
>   %add19.i = fadd double %add13.i, %mul18.i
>   %78 = load double, double* %arrayidx22.i, align 16, !tbaa !2
>   %mul24.i = fmul double %54, %78
>   %add25.i = fadd double %add19.i, %mul24.i
>   %79 = load double, double* %arrayidx28.i, align 16, !tbaa !2
>   %mul30.i = fmul double %55, %79
>   %add31.i = fadd double %add25.i, %mul30.i
>   %80 = load double, double* %arrayidx34.i, align 16, !tbaa !2
>   %mul36.i = fmul double %56, %80
>   %add37.i = fadd double %add31.i, %mul36.i
>   %81 = load double, double* %arrayidx40.i, align 16, !tbaa !2
>   %mul42.i = fmul double %57, %81
>   %add43.i = fadd double %add37.i, %mul42.i
>   %82 = load double, double* %arrayidx1.1.i, align 8, !tbaa !2
>   %mul.1.i = fmul double %50, %82
>   %83 = load double, double* %arrayidx5.1.i, align 8, !tbaa !2
>   %mul7.1.i = fmul double %51, %83
>   %add.1.i = fadd double %mul.1.i, %mul7.1.i
>   %84 = load double, double* %arrayidx10.1.i, align 8, !tbaa !2
>   %mul12.1.i = fmul double %52, %84
>   %add13.1.i = fadd double %add.1.i, %mul12.1.i
>   %85 = load double, double* %arrayidx16.1.i, align 8, !tbaa !2
>   %mul18.1.i = fmul double %53, %85
>   %add19.1.i = fadd double %add13.1.i, %mul18.1.i
>   %86 = load double, double* %arrayidx22.1.i, align 8, !tbaa !2
>   %mul24.1.i = fmul double %54, %86
>   %add25.1.i = fadd double %add19.1.i, %mul24.1.i
>   %87 = load double, double* %arrayidx28.1.i, align 8, !tbaa !2
>   %mul30.1.i = fmul double %55, %87
>   %add31.1.i = fadd double %add25.1.i, %mul30.1.i
>   %88 = load double, double* %arrayidx34.1.i, align 8, !tbaa !2
>   %mul36.1.i = fmul double %56, %88
>   %add37.1.i = fadd double %add31.1.i, %mul36.1.i
>   %89 = load double, double* %arrayidx40.1.i, align 8, !tbaa !2
>   %mul42.1.i = fmul double %57, %89
>   %add43.1.i = fadd double %add37.1.i, %mul42.1.i
>   %90 = load double, double* %arrayidx1.2.i, align 16, !tbaa !2
>   %mul.2.i = fmul double %50, %90
>   %91 = load double, double* %arrayidx5.2.i, align 16, !tbaa !2
>   %mul7.2.i = fmul double %51, %91
>   %add.2.i = fadd double %mul.2.i, %mul7.2.i
>   %92 = load double, double* %arrayidx10.2.i, align 16, !tbaa !2
>   %mul12.2.i = fmul double %52, %92
>   %add13.2.i = fadd double %add.2.i, %mul12.2.i
>   %93 = load double, double* %arrayidx16.2.i, align 16, !tbaa !2
>   %mul18.2.i = fmul double %53, %93
>   %add19.2.i = fadd double %add13.2.i, %mul18.2.i
>   %94 = load double, double* %arrayidx22.2.i, align 16, !tbaa !2
>   %mul24.2.i = fmul double %54, %94
>   %add25.2.i = fadd double %add19.2.i, %mul24.2.i
>   %95 = load double, double* %arrayidx28.2.i, align 16, !tbaa !2
>   %mul30.2.i = fmul double %55, %95
>   %add31.2.i = fadd double %add25.2.i, %mul30.2.i
>   %96 = load double, double* %arrayidx34.2.i, align 16, !tbaa !2
>   %mul36.2.i = fmul double %56, %96
>   %add37.2.i = fadd double %add31.2.i, %mul36.2.i
>   %97 = load double, double* %arrayidx40.2.i, align 16, !tbaa !2
>   %mul42.2.i = fmul double %57, %97
>   %add43.2.i = fadd double %add37.2.i, %mul42.2.i
>   %98 = load double, double* %arrayidx1.3.i, align 8, !tbaa !2
>   %mul.3.i = fmul double %50, %98
>   %99 = load double, double* %arrayidx5.3.i, align 8, !tbaa !2
>   %mul7.3.i = fmul double %51, %99
>   %add.3.i = fadd double %mul.3.i, %mul7.3.i
>   %100 = load double, double* %arrayidx10.3.i, align 8, !tbaa !2
>   %mul12.3.i = fmul double %52, %100
>   %add13.3.i = fadd double %add.3.i, %mul12.3.i
>   %101 = load double, double* %arrayidx16.3.i, align 8, !tbaa !2
>   %mul18.3.i = fmul double %53, %101
>   %add19.3.i = fadd double %add13.3.i, %mul18.3.i
>   %102 = load double, double* %arrayidx22.3.i, align 8, !tbaa !2
>   %mul24.3.i = fmul double %54, %102
>   %add25.3.i = fadd double %add19.3.i, %mul24.3.i
>   %103 = load double, double* %arrayidx28.3.i, align 8, !tbaa !2
>   %mul30.3.i = fmul double %55, %103
>   %add31.3.i = fadd double %add25.3.i, %mul30.3.i
>   %104 = load double, double* %arrayidx34.3.i, align 8, !tbaa !2
>   %mul36.3.i = fmul double %56, %104
>   %add37.3.i = fadd double %add31.3.i, %mul36.3.i
>   %105 = load double, double* %arrayidx40.3.i, align 8, !tbaa !2
>   %mul42.3.i = fmul double %57, %105
>   %add43.3.i = fadd double %add37.3.i, %mul42.3.i
>   %106 = insertelement <4 x double> undef, double %74, i32 0
>   %107 = insertelement <4 x double> %106, double %75, i32 1
>   %108 = insertelement <4 x double> %107, double %76, i32 2
>   %109 = insertelement <4 x double> %108, double %77, i32 3
>   %110 = insertelement <4 x double> undef, double %add43.i, i32 0
>   %111 = shufflevector <4 x double> %110, <4 x double> undef, <4 x i32> zeroinitializer
>   %112 = fmul <4 x double> %109, %111
>   %113 = insertelement <4 x double> undef, double %82, i32 0
>   %114 = insertelement <4 x double> %113, double %83, i32 1
>   %115 = insertelement <4 x double> %114, double %84, i32 2
>   %116 = insertelement <4 x double> %115, double %85, i32 3
>   %117 = insertelement <4 x double> undef, double %add43.1.i, i32 0
>   %118 = shufflevector <4 x double> %117, <4 x double> undef, <4 x i32> zeroinitializer
>   %119 = fmul <4 x double> %116, %118
>   %120 = fadd <4 x double> %112, %119
>   %121 = insertelement <4 x double> undef, double %90, i32 0
>   %122 = insertelement <4 x double> %121, double %91, i32 1
>   %123 = insertelement <4 x double> %122, double %92, i32 2
>   %124 = insertelement <4 x double> %123, double %93, i32 3
>   %125 = insertelement <4 x double> undef, double %add43.2.i, i32 0
>   %126 = shufflevector <4 x double> %125, <4 x double> undef, <4 x i32> zeroinitializer
>   %127 = fmul <4 x double> %124, %126
>   %128 = fadd <4 x double> %120, %127
>   %129 = insertelement <4 x double> undef, double %98, i32 0
>   %130 = insertelement <4 x double> %129, double %99, i32 1
>   %131 = insertelement <4 x double> %130, double %100, i32 2
>   %132 = insertelement <4 x double> %131, double %101, i32 3
>   %133 = insertelement <4 x double> undef, double %add43.3.i, i32 0
>   %134 = shufflevector <4 x double> %133, <4 x double> undef, <4 x i32> zeroinitializer
>   %135 = fmul <4 x double> %132, %134
>   %136 = fadd <4 x double> %128, %135
>   %137 = insertelement <4 x double> undef, double %div447, i32 0
>   %138 = shufflevector <4 x double> %137, <4 x double> undef, <4 x i32> zeroinitializer
>   %139 = fmul <4 x double> %138, %136
>   %140 = insertelement <4 x double> undef, double %78, i32 0
>   %141 = insertelement <4 x double> %140, double %79, i32 1
>   %142 = insertelement <4 x double> %141, double %80, i32 2
>   %143 = insertelement <4 x double> %142, double %81, i32 3
>   %144 = fmul <4 x double> %143, %111
>   %145 = insertelement <4 x double> undef, double %86, i32 0
>   %146 = insertelement <4 x double> %145, double %87, i32 1
>   %147 = insertelement <4 x double> %146, double %88, i32 2
>   %148 = insertelement <4 x double> %147, double %89, i32 3
>   %149 = fmul <4 x double> %148, %118
>   %150 = fadd <4 x double> %144, %149
>   %151 = insertelement <4 x double> undef, double %94, i32 0
>   %152 = insertelement <4 x double> %151, double %95, i32 1
>   %153 = insertelement <4 x double> %152, double %96, i32 2
>   %154 = insertelement <4 x double> %153, double %97, i32 3
>   %155 = fmul <4 x double> %154, %126
>   %156 = fadd <4 x double> %150, %155
>   %157 = insertelement <4 x double> undef, double %102, i32 0
>   %158 = insertelement <4 x double> %157, double %103, i32 1
>   %159 = insertelement <4 x double> %158, double %104, i32 2
>   %160 = insertelement <4 x double> %159, double %105, i32 3
>   %161 = fmul <4 x double> %160, %134
>   %162 = fadd <4 x double> %156, %161
>   %163 = fmul <4 x double> %138, %162
>   %mul89.i = fmul double %58, %74
>   %mul94.i = fmul double %59, %75
>   %add95.i = fadd double %mul89.i, %mul94.i
>   %mul100.i = fmul double %60, %76
>   %add101.i = fadd double %add95.i, %mul100.i
>   %mul106.i = fmul double %61, %77
>   %add107.i = fadd double %add101.i, %mul106.i
>   %mul112.i = fmul double %62, %78
>   %add113.i = fadd double %add107.i, %mul112.i
>   %mul118.i = fmul double %63, %79
>   %add119.i = fadd double %add113.i, %mul118.i
>   %mul124.i = fmul double %64, %80
>   %add125.i = fadd double %add119.i, %mul124.i
>   %mul130.i = fmul double %65, %81
>   %add131.i = fadd double %add125.i, %mul130.i
>   %mul89.1.i = fmul double %58, %82
>   %mul94.1.i = fmul double %59, %83
>   %add95.1.i = fadd double %mul89.1.i, %mul94.1.i
>   %mul100.1.i = fmul double %60, %84
>   %add101.1.i = fadd double %add95.1.i, %mul100.1.i
>   %mul106.1.i = fmul double %61, %85
>   %add107.1.i = fadd double %add101.1.i, %mul106.1.i
>   %mul112.1.i = fmul double %62, %86
>   %add113.1.i = fadd double %add107.1.i, %mul112.1.i
>   %mul118.1.i = fmul double %63, %87
>   %add119.1.i = fadd double %add113.1.i, %mul118.1.i
>   %mul124.1.i = fmul double %64, %88
>   %add125.1.i = fadd double %add119.1.i, %mul124.1.i
>   %mul130.1.i = fmul double %65, %89
>   %add131.1.i = fadd double %add125.1.i, %mul130.1.i
>   %mul89.2.i = fmul double %58, %90
>   %mul94.2.i = fmul double %59, %91
>   %add95.2.i = fadd double %mul89.2.i, %mul94.2.i
>   %mul100.2.i = fmul double %60, %92
>   %add101.2.i = fadd double %add95.2.i, %mul100.2.i
>   %mul106.2.i = fmul double %61, %93
>   %add107.2.i = fadd double %add101.2.i, %mul106.2.i
>   %mul112.2.i = fmul double %62, %94
>   %add113.2.i = fadd double %add107.2.i, %mul112.2.i
>   %mul118.2.i = fmul double %63, %95
>   %add119.2.i = fadd double %add113.2.i, %mul118.2.i
>   %mul124.2.i = fmul double %64, %96
>   %add125.2.i = fadd double %add119.2.i, %mul124.2.i
>   %mul130.2.i = fmul double %65, %97
>   %add131.2.i = fadd double %add125.2.i, %mul130.2.i
>   %mul89.3.i = fmul double %58, %98
>   %mul94.3.i = fmul double %59, %99
>   %add95.3.i = fadd double %mul89.3.i, %mul94.3.i
>   %mul100.3.i = fmul double %60, %100
>   %add101.3.i = fadd double %add95.3.i, %mul100.3.i
>   %mul106.3.i = fmul double %61, %101
>   %add107.3.i = fadd double %add101.3.i, %mul106.3.i
>   %mul112.3.i = fmul double %62, %102
>   %add113.3.i = fadd double %add107.3.i, %mul112.3.i
>   %mul118.3.i = fmul double %63, %103
>   %add119.3.i = fadd double %add113.3.i, %mul118.3.i
>   %mul124.3.i = fmul double %64, %104
>   %add125.3.i = fadd double %add119.3.i, %mul124.3.i
>   %mul130.3.i = fmul double %65, %105
>   %add131.3.i = fadd double %add125.3.i, %mul130.3.i
>   %164 = insertelement <4 x double> undef, double %add131.i, i32 0
>   %165 = shufflevector <4 x double> %164, <4 x double> undef, <4 x i32> zeroinitializer
>   %166 = fmul <4 x double> %109, %165
>   %167 = insertelement <4 x double> undef, double %add131.1.i, i32 0
>   %168 = shufflevector <4 x double> %167, <4 x double> undef, <4 x i32> zeroinitializer
>   %169 = fmul <4 x double> %116, %168
>   %170 = fadd <4 x double> %166, %169
>   %171 = insertelement <4 x double> undef, double %add131.2.i, i32 0
>   %172 = shufflevector <4 x double> %171, <4 x double> undef, <4 x i32> zeroinitializer
>   %173 = fmul <4 x double> %124, %172
>   %174 = fadd <4 x double> %170, %173
>   %175 = insertelement <4 x double> undef, double %add131.3.i, i32 0
>   %176 = shufflevector <4 x double> %175, <4 x double> undef, <4 x i32> zeroinitializer
>   %177 = fmul <4 x double> %132, %176
>   %178 = fadd <4 x double> %174, %177
>   %179 = fmul <4 x double> %138, %178
>   %180 = fmul <4 x double> %143, %165
>   %181 = fmul <4 x double> %148, %168
>   %182 = fadd <4 x double> %180, %181
>   %183 = fmul <4 x double> %154, %172
>   %184 = fadd <4 x double> %182, %183
>   %185 = fmul <4 x double> %160, %176
>   %186 = fadd <4 x double> %184, %185
>   %187 = fmul <4 x double> %138, %186
>   %mul180.i = fmul double %66, %74
>   %mul185.i = fmul double %67, %75
>   %add186.i = fadd double %mul180.i, %mul185.i
>   %mul191.i = fmul double %68, %76
>   %add192.i = fadd double %add186.i, %mul191.i
>   %mul197.i = fmul double %69, %77
>   %add198.i = fadd double %add192.i, %mul197.i
>   %mul203.i = fmul double %70, %78
>   %add204.i = fadd double %add198.i, %mul203.i
>   %mul209.i = fmul double %71, %79
>   %add210.i = fadd double %add204.i, %mul209.i
>   %mul215.i = fmul double %72, %80
>   %add216.i = fadd double %add210.i, %mul215.i
>   %mul221.i = fmul double %73, %81
>   %add222.i = fadd double %add216.i, %mul221.i
>   %mul180.1.i = fmul double %66, %82
>   %mul185.1.i = fmul double %67, %83
>   %add186.1.i = fadd double %mul180.1.i, %mul185.1.i
>   %mul191.1.i = fmul double %68, %84
>   %add192.1.i = fadd double %add186.1.i, %mul191.1.i
>   %mul197.1.i = fmul double %69, %85
>   %add198.1.i = fadd double %add192.1.i, %mul197.1.i
>   %mul203.1.i = fmul double %70, %86
>   %add204.1.i = fadd double %add198.1.i, %mul203.1.i
>   %mul209.1.i = fmul double %71, %87
>   %add210.1.i = fadd double %add204.1.i, %mul209.1.i
>   %mul215.1.i = fmul double %72, %88
>   %add216.1.i = fadd double %add210.1.i, %mul215.1.i
>   %mul221.1.i = fmul double %73, %89
>   %add222.1.i = fadd double %add216.1.i, %mul221.1.i
>   %mul180.2.i = fmul double %66, %90
>   %mul185.2.i = fmul double %67, %91
>   %add186.2.i = fadd double %mul180.2.i, %mul185.2.i
>   %mul191.2.i = fmul double %68, %92
>   %add192.2.i = fadd double %add186.2.i, %mul191.2.i
>   %mul197.2.i = fmul double %69, %93
>   %add198.2.i = fadd double %add192.2.i, %mul197.2.i
>   %mul203.2.i = fmul double %70, %94
>   %add204.2.i = fadd double %add198.2.i, %mul203.2.i
>   %mul209.2.i = fmul double %71, %95
>   %add210.2.i = fadd double %add204.2.i, %mul209.2.i
>   %mul215.2.i = fmul double %72, %96
>   %add216.2.i = fadd double %add210.2.i, %mul215.2.i
>   %mul221.2.i = fmul double %73, %97
>   %add222.2.i = fadd double %add216.2.i, %mul221.2.i
>   %mul180.3.i = fmul double %66, %98
>   %mul185.3.i = fmul double %67, %99
>   %add186.3.i = fadd double %mul180.3.i, %mul185.3.i
>   %mul191.3.i = fmul double %68, %100
>   %add192.3.i = fadd double %add186.3.i, %mul191.3.i
>   %mul197.3.i = fmul double %69, %101
>   %add198.3.i = fadd double %add192.3.i, %mul197.3.i
>   %mul203.3.i = fmul double %70, %102
>   %add204.3.i = fadd double %add198.3.i, %mul203.3.i
>   %mul209.3.i = fmul double %71, %103
>   %add210.3.i = fadd double %add204.3.i, %mul209.3.i
>   %mul215.3.i = fmul double %72, %104
>   %add216.3.i = fadd double %add210.3.i, %mul215.3.i
>   %mul221.3.i = fmul double %73, %105
>   %add222.3.i = fadd double %add216.3.i, %mul221.3.i
>   %188 = insertelement <4 x double> undef, double %add222.i, i32 0
>   %189 = shufflevector <4 x double> %188, <4 x double> undef, <4 x i32> zeroinitializer
>   %190 = fmul <4 x double> %109, %189
>   %191 = insertelement <4 x double> undef, double %add222.1.i, i32 0
>   %192 = shufflevector <4 x double> %191, <4 x double> undef, <4 x i32> zeroinitializer
>   %193 = fmul <4 x double> %116, %192
>   %194 = fadd <4 x double> %190, %193
>   %195 = insertelement <4 x double> undef, double %add222.2.i, i32 0
>   %196 = shufflevector <4 x double> %195, <4 x double> undef, <4 x i32> zeroinitializer
>   %197 = fmul <4 x double> %124, %196
>   %198 = fadd <4 x double> %194, %197
>   %199 = insertelement <4 x double> undef, double %add222.3.i, i32 0
>   %200 = shufflevector <4 x double> %199, <4 x double> undef, <4 x i32> zeroinitializer
>   %201 = fmul <4 x double> %132, %200
>   %202 = fadd <4 x double> %198, %201
>   %203 = fmul <4 x double> %138, %202
>   %204 = fmul <4 x double> %143, %189
>   %205 = fmul <4 x double> %148, %192
>   %206 = fadd <4 x double> %204, %205
>   %207 = fmul <4 x double> %154, %196
>   %208 = fadd <4 x double> %206, %207
>   %209 = fmul <4 x double> %160, %200
>   %210 = fadd <4 x double> %208, %209
>   %211 = fmul <4 x double> %138, %210
>   br i1 %cmp456, label %if.then457, label %if.else
> 
> for.body:                                         ; preds = %for.body, %omp.inner.for.body
>   %indvars.iv1243 = phi i64 [ 0, %omp.inner.for.body ], [ %indvars.iv.next1244, %for.body ]
>   %212 = load double, double* %arrayidx21, align 8, !tbaa !2
>   %arrayidx24 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i64 0, i64 %indvars.iv1243, i64 0
>   %213 = load double, double* %arrayidx24, align 16, !tbaa !2
>   %mul25 = fmul double %212, %213
>   %214 = load double, double* %arrayidx28, align 8, !tbaa !2
>   %arrayidx31 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i64 0, i64 %indvars.iv1243, i64 1
>   %215 = load double, double* %arrayidx31, align 8, !tbaa !2
>   %mul32 = fmul double %214, %215
>   %add33 = fadd double %mul25, %mul32
>   %216 = load double, double* %arrayidx36, align 8, !tbaa !2
>   %arrayidx39 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i64 0, i64 %indvars.iv1243, i64 2
>   %217 = load double, double* %arrayidx39, align 16, !tbaa !2
>   %mul40 = fmul double %216, %217
>   %add41 = fadd double %add33, %mul40
>   %218 = load double, double* %arrayidx44, align 8, !tbaa !2
>   %arrayidx47 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i64 0, i64 %indvars.iv1243, i64 3
>   %219 = load double, double* %arrayidx47, align 8, !tbaa !2
>   %mul48 = fmul double %218, %219
>   %add49 = fadd double %add41, %mul48
>   %220 = load double, double* %arrayidx52, align 8, !tbaa !2
>   %arrayidx55 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i64 0, i64 %indvars.iv1243, i64 4
>   %221 = load double, double* %arrayidx55, align 16, !tbaa !2
>   %mul56 = fmul double %220, %221
>   %add57 = fadd double %add49, %mul56
>   %222 = load double, double* %arrayidx60, align 8, !tbaa !2
>   %arrayidx63 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i64 0, i64 %indvars.iv1243, i64 5
>   %223 = load double, double* %arrayidx63, align 8, !tbaa !2
>   %mul64 = fmul double %222, %223
>   %add65 = fadd double %add57, %mul64
>   %224 = load double, double* %arrayidx68, align 8, !tbaa !2
>   %arrayidx71 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i64 0, i64 %indvars.iv1243, i64 6
>   %225 = load double, double* %arrayidx71, align 16, !tbaa !2
>   %mul72 = fmul double %224, %225
>   %add73 = fadd double %add65, %mul72
>   %226 = load double, double* %arrayidx76, align 8, !tbaa !2
>   %arrayidx79 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i64 0, i64 %indvars.iv1243, i64 7
>   %227 = load double, double* %arrayidx79, align 8, !tbaa !2
>   %mul80 = fmul double %226, %227
>   %add81 = fadd double %add73, %mul80
>   %228 = load double, double* %arrayidx83, align 8, !tbaa !2
>   %mul87 = fmul double %213, %228
>   %229 = load double, double* %arrayidx90, align 8, !tbaa !2
>   %mul94 = fmul double %215, %229
>   %add95 = fadd double %mul87, %mul94
>   %230 = load double, double* %arrayidx98, align 8, !tbaa !2
>   %mul102 = fmul double %217, %230
>   %add103 = fadd double %add95, %mul102
>   %231 = load double, double* %arrayidx106, align 8, !tbaa !2
>   %mul110 = fmul double %219, %231
>   %add111 = fadd double %add103, %mul110
>   %232 = load double, double* %arrayidx114, align 8, !tbaa !2
>   %mul118 = fmul double %221, %232
>   %add119 = fadd double %add111, %mul118
>   %233 = load double, double* %arrayidx122, align 8, !tbaa !2
>   %mul126 = fmul double %223, %233
>   %add127 = fadd double %add119, %mul126
>   %234 = load double, double* %arrayidx130, align 8, !tbaa !2
>   %mul134 = fmul double %225, %234
>   %add135 = fadd double %add127, %mul134
>   %235 = load double, double* %arrayidx138, align 8, !tbaa !2
>   %mul142 = fmul double %227, %235
>   %add143 = fadd double %add135, %mul142
>   %236 = load double, double* %arrayidx145, align 8, !tbaa !2
>   %mul149 = fmul double %213, %236
>   %237 = load double, double* %arrayidx152, align 8, !tbaa !2
>   %mul156 = fmul double %215, %237
>   %add157 = fadd double %mul149, %mul156
>   %238 = load double, double* %arrayidx160, align 8, !tbaa !2
>   %mul164 = fmul double %217, %238
>   %add165 = fadd double %add157, %mul164
>   %239 = load double, double* %arrayidx168, align 8, !tbaa !2
>   %mul172 = fmul double %219, %239
>   %add173 = fadd double %add165, %mul172
>   %240 = load double, double* %arrayidx176, align 8, !tbaa !2
>   %mul180 = fmul double %221, %240
>   %add181 = fadd double %add173, %mul180
>   %241 = load double, double* %arrayidx184, align 8, !tbaa !2
>   %mul188 = fmul double %223, %241
>   %add189 = fadd double %add181, %mul188
>   %242 = load double, double* %arrayidx192, align 8, !tbaa !2
>   %mul196 = fmul double %225, %242
>   %add197 = fadd double %add189, %mul196
>   %243 = load double, double* %arrayidx200, align 8, !tbaa !2
>   %mul204 = fmul double %227, %243
>   %add205 = fadd double %add197, %mul204
>   %244 = load double, double* %arrayidx210, align 8, !tbaa !2
>   %mul211 = fmul double %add81, %244
>   %245 = load double, double* %arrayidx213, align 8, !tbaa !2
>   %mul214 = fmul double %add143, %245
>   %add215 = fadd double %mul211, %mul214
>   %246 = load double, double* %arrayidx217, align 8, !tbaa !2
>   %mul218 = fmul double %add205, %246
>   %add219 = fadd double %add215, %mul218
>   %mul220 = fmul double %div18, %add219
>   %sub221 = fsub double %213, %mul220
>   %arrayidx224 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 0, i64 %indvars.iv1243
>   store double %sub221, double* %arrayidx224, align 8, !tbaa !2
>   %247 = load double, double* %arrayidx230, align 8, !tbaa !2
>   %mul231 = fmul double %add81, %247
>   %248 = load double, double* %arrayidx234, align 8, !tbaa !2
>   %mul235 = fmul double %add143, %248
>   %add236 = fadd double %mul231, %mul235
>   %249 = load double, double* %arrayidx239, align 8, !tbaa !2
>   %mul240 = fmul double %add205, %249
>   %add241 = fadd double %add236, %mul240
>   %mul242 = fmul double %div18, %add241
>   %sub243 = fsub double %215, %mul242
>   %arrayidx246 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 1, i64 %indvars.iv1243
>   store double %sub243, double* %arrayidx246, align 8, !tbaa !2
>   %250 = load double, double* %arrayidx252, align 8, !tbaa !2
>   %mul253 = fmul double %add81, %250
>   %251 = load double, double* %arrayidx256, align 8, !tbaa !2
>   %mul257 = fmul double %add143, %251
>   %add258 = fadd double %mul253, %mul257
>   %252 = load double, double* %arrayidx261, align 8, !tbaa !2
>   %mul262 = fmul double %add205, %252
>   %add263 = fadd double %add258, %mul262
>   %mul264 = fmul double %div18, %add263
>   %sub265 = fsub double %217, %mul264
>   %arrayidx268 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 2, i64 %indvars.iv1243
>   store double %sub265, double* %arrayidx268, align 8, !tbaa !2
>   %253 = load double, double* %arrayidx274, align 8, !tbaa !2
>   %mul275 = fmul double %add81, %253
>   %254 = load double, double* %arrayidx278, align 8, !tbaa !2
>   %mul279 = fmul double %add143, %254
>   %add280 = fadd double %mul275, %mul279
>   %255 = load double, double* %arrayidx283, align 8, !tbaa !2
>   %mul284 = fmul double %add205, %255
>   %add285 = fadd double %add280, %mul284
>   %mul286 = fmul double %div18, %add285
>   %sub287 = fsub double %219, %mul286
>   %arrayidx290 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 3, i64 %indvars.iv1243
>   store double %sub287, double* %arrayidx290, align 8, !tbaa !2
>   %256 = load double, double* %arrayidx296, align 8, !tbaa !2
>   %mul297 = fmul double %add81, %256
>   %257 = load double, double* %arrayidx300, align 8, !tbaa !2
>   %mul301 = fmul double %add143, %257
>   %add302 = fadd double %mul297, %mul301
>   %258 = load double, double* %arrayidx305, align 8, !tbaa !2
>   %mul306 = fmul double %add205, %258
>   %add307 = fadd double %add302, %mul306
>   %mul308 = fmul double %div18, %add307
>   %sub309 = fsub double %221, %mul308
>   %arrayidx312 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 4, i64 %indvars.iv1243
>   store double %sub309, double* %arrayidx312, align 8, !tbaa !2
>   %259 = load double, double* %arrayidx318, align 8, !tbaa !2
>   %mul319 = fmul double %add81, %259
>   %260 = load double, double* %arrayidx322, align 8, !tbaa !2
>   %mul323 = fmul double %add143, %260
>   %add324 = fadd double %mul319, %mul323
>   %261 = load double, double* %arrayidx327, align 8, !tbaa !2
>   %mul328 = fmul double %add205, %261
>   %add329 = fadd double %add324, %mul328
>   %mul330 = fmul double %div18, %add329
>   %sub331 = fsub double %223, %mul330
>   %arrayidx334 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 5, i64 %indvars.iv1243
>   store double %sub331, double* %arrayidx334, align 8, !tbaa !2
>   %262 = load double, double* %arrayidx340, align 8, !tbaa !2
>   %mul341 = fmul double %add81, %262
>   %263 = load double, double* %arrayidx344, align 8, !tbaa !2
>   %mul345 = fmul double %add143, %263
>   %add346 = fadd double %mul341, %mul345
>   %264 = load double, double* %arrayidx349, align 8, !tbaa !2
>   %mul350 = fmul double %add205, %264
>   %add351 = fadd double %add346, %mul350
>   %mul352 = fmul double %div18, %add351
>   %sub353 = fsub double %225, %mul352
>   %arrayidx356 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 6, i64 %indvars.iv1243
>   store double %sub353, double* %arrayidx356, align 8, !tbaa !2
>   %265 = load double, double* %arrayidx362, align 8, !tbaa !2
>   %mul363 = fmul double %add81, %265
>   %266 = load double, double* %arrayidx366, align 8, !tbaa !2
>   %mul367 = fmul double %add143, %266
>   %add368 = fadd double %mul363, %mul367
>   %267 = load double, double* %arrayidx371, align 8, !tbaa !2
>   %mul372 = fmul double %add205, %267
>   %add373 = fadd double %add368, %mul372
>   %mul374 = fmul double %div18, %add373
>   %sub375 = fsub double %227, %mul374
>   %arrayidx378 = getelementptr inbounds [8 x [4 x double]], [8 x [4 x double]]* %hourgam, i64 0, i64 7, i64 %indvars.iv1243
>   store double %sub375, double* %arrayidx378, align 8, !tbaa !2
>   %indvars.iv.next1244 = add nuw nsw i64 %indvars.iv1243, 1
>   %exitcond1245.not = icmp eq i64 %indvars.iv.next1244, 4
>   br i1 %exitcond1245.not, label %for.cond.cleanup, label %for.body
> 
> if.then457:                                       ; preds = %for.cond.cleanup
>   %arrayidx459 = getelementptr inbounds double, double* %32, i64 %conv.i
>   %268 = bitcast double* %arrayidx459 to <4 x double>*
>   store <4 x double> %139, <4 x double>* %268, align 8, !tbaa !2
>   %arrayidx469 = getelementptr inbounds double, double* %arrayidx459, i64 4
>   %269 = bitcast double* %arrayidx469 to <4 x double>*
>   store <4 x double> %163, <4 x double>* %269, align 8, !tbaa !2
>   %arrayidx477 = getelementptr inbounds double, double* %33, i64 %conv.i
>   %270 = bitcast double* %arrayidx477 to <4 x double>*
>   store <4 x double> %179, <4 x double>* %270, align 8, !tbaa !2
>   %arrayidx487 = getelementptr inbounds double, double* %arrayidx477, i64 4
>   %271 = bitcast double* %arrayidx487 to <4 x double>*
>   store <4 x double> %187, <4 x double>* %271, align 8, !tbaa !2
>   %arrayidx495 = getelementptr inbounds double, double* %34, i64 %conv.i
>   %272 = bitcast double* %arrayidx495 to <4 x double>*
>   store <4 x double> %203, <4 x double>* %272, align 8, !tbaa !2
>   %arrayidx505 = getelementptr inbounds double, double* %arrayidx495, i64 4
>   %273 = bitcast double* %arrayidx505 to <4 x double>*
>   store <4 x double> %211, <4 x double>* %273, align 8, !tbaa !2
>   br label %if.end584
> 
> if.else:                                          ; preds = %for.cond.cleanup
>   %add.ptr.i.i1072 = getelementptr inbounds double, double* %29, i64 %conv.i1144
>   %274 = load double, double* %add.ptr.i.i1072, align 8, !tbaa !2
>   %275 = extractelement <4 x double> %139, i32 0
>   %add514 = fadd double %275, %274
>   store double %add514, double* %add.ptr.i.i1072, align 8, !tbaa !2
>   %add.ptr.i.i1069 = getelementptr inbounds double, double* %30, i64 %conv.i1144
>   %276 = load double, double* %add.ptr.i.i1069, align 8, !tbaa !2
>   %277 = extractelement <4 x double> %179, i32 0
>   %add517 = fadd double %277, %276
>   store double %add517, double* %add.ptr.i.i1069, align 8, !tbaa !2
>   %add.ptr.i.i1066 = getelementptr inbounds double, double* %31, i64 %conv.i1144
>   %278 = load double, double* %add.ptr.i.i1066, align 8, !tbaa !2
>   %279 = extractelement <4 x double> %203, i32 0
>   %add520 = fadd double %279, %278
>   store double %add520, double* %add.ptr.i.i1066, align 8, !tbaa !2
>   %add.ptr.i.i1063 = getelementptr inbounds double, double* %29, i64 %conv.i1141
>   %280 = load double, double* %add.ptr.i.i1063, align 8, !tbaa !2
>   %281 = extractelement <4 x double> %139, i32 1
>   %add523 = fadd double %281, %280
>   store double %add523, double* %add.ptr.i.i1063, align 8, !tbaa !2
>   %add.ptr.i.i1060 = getelementptr inbounds double, double* %30, i64 %conv.i1141
>   %282 = load double, double* %add.ptr.i.i1060, align 8, !tbaa !2
>   %283 = extractelement <4 x double> %179, i32 1
>   %add526 = fadd double %283, %282
>   store double %add526, double* %add.ptr.i.i1060, align 8, !tbaa !2
>   %add.ptr.i.i1057 = getelementptr inbounds double, double* %31, i64 %conv.i1141
>   %284 = load double, double* %add.ptr.i.i1057, align 8, !tbaa !2
>   %285 = extractelement <4 x double> %203, i32 1
>   %add529 = fadd double %285, %284
>   store double %add529, double* %add.ptr.i.i1057, align 8, !tbaa !2
>   %add.ptr.i.i1054 = getelementptr inbounds double, double* %29, i64 %conv.i1138
>   %286 = load double, double* %add.ptr.i.i1054, align 8, !tbaa !2
>   %287 = extractelement <4 x double> %139, i32 2
>   %add532 = fadd double %287, %286
>   store double %add532, double* %add.ptr.i.i1054, align 8, !tbaa !2
>   %add.ptr.i.i1051 = getelementptr inbounds double, double* %30, i64 %conv.i1138
>   %288 = load double, double* %add.ptr.i.i1051, align 8, !tbaa !2
>   %289 = extractelement <4 x double> %179, i32 2
>   %add535 = fadd double %289, %288
>   store double %add535, double* %add.ptr.i.i1051, align 8, !tbaa !2
>   %add.ptr.i.i1048 = getelementptr inbounds double, double* %31, i64 %conv.i1138
>   %290 = load double, double* %add.ptr.i.i1048, align 8, !tbaa !2
>   %291 = extractelement <4 x double> %203, i32 2
>   %add538 = fadd double %291, %290
>   store double %add538, double* %add.ptr.i.i1048, align 8, !tbaa !2
>   %add.ptr.i.i1045 = getelementptr inbounds double, double* %29, i64 %conv.i1135
>   %292 = load double, double* %add.ptr.i.i1045, align 8, !tbaa !2
>   %293 = extractelement <4 x double> %139, i32 3
>   %add541 = fadd double %293, %292
>   store double %add541, double* %add.ptr.i.i1045, align 8, !tbaa !2
>   %add.ptr.i.i1042 = getelementptr inbounds double, double* %30, i64 %conv.i1135
>   %294 = load double, double* %add.ptr.i.i1042, align 8, !tbaa !2
>   %295 = extractelement <4 x double> %179, i32 3
>   %add544 = fadd double %295, %294
>   store double %add544, double* %add.ptr.i.i1042, align 8, !tbaa !2
>   %add.ptr.i.i1039 = getelementptr inbounds double, double* %31, i64 %conv.i1135
>   %296 = load double, double* %add.ptr.i.i1039, align 8, !tbaa !2
>   %297 = extractelement <4 x double> %203, i32 3
>   %add547 = fadd double %297, %296
>   store double %add547, double* %add.ptr.i.i1039, align 8, !tbaa !2
>   %add.ptr.i.i1036 = getelementptr inbounds double, double* %29, i64 %conv.i1132
>   %298 = load double, double* %add.ptr.i.i1036, align 8, !tbaa !2
>   %299 = extractelement <4 x double> %163, i32 0
>   %add550 = fadd double %299, %298
>   store double %add550, double* %add.ptr.i.i1036, align 8, !tbaa !2
>   %add.ptr.i.i1033 = getelementptr inbounds double, double* %30, i64 %conv.i1132
>   %300 = load double, double* %add.ptr.i.i1033, align 8, !tbaa !2
>   %301 = extractelement <4 x double> %187, i32 0
>   %add553 = fadd double %301, %300
>   store double %add553, double* %add.ptr.i.i1033, align 8, !tbaa !2
>   %add.ptr.i.i1030 = getelementptr inbounds double, double* %31, i64 %conv.i1132
>   %302 = load double, double* %add.ptr.i.i1030, align 8, !tbaa !2
>   %303 = extractelement <4 x double> %211, i32 0
>   %add556 = fadd double %303, %302
>   store double %add556, double* %add.ptr.i.i1030, align 8, !tbaa !2
>   %add.ptr.i.i1027 = getelementptr inbounds double, double* %29, i64 %conv.i1129
>   %304 = load double, double* %add.ptr.i.i1027, align 8, !tbaa !2
>   %305 = extractelement <4 x double> %163, i32 1
>   %add559 = fadd double %305, %304
>   store double %add559, double* %add.ptr.i.i1027, align 8, !tbaa !2
>   %add.ptr.i.i1024 = getelementptr inbounds double, double* %30, i64 %conv.i1129
>   %306 = load double, double* %add.ptr.i.i1024, align 8, !tbaa !2
>   %307 = extractelement <4 x double> %187, i32 1
>   %add562 = fadd double %307, %306
>   store double %add562, double* %add.ptr.i.i1024, align 8, !tbaa !2
>   %add.ptr.i.i1021 = getelementptr inbounds double, double* %31, i64 %conv.i1129
>   %308 = load double, double* %add.ptr.i.i1021, align 8, !tbaa !2
>   %309 = extractelement <4 x double> %211, i32 1
>   %add565 = fadd double %309, %308
>   store double %add565, double* %add.ptr.i.i1021, align 8, !tbaa !2
>   %add.ptr.i.i1018 = getelementptr inbounds double, double* %29, i64 %conv.i1126
>   %310 = load double, double* %add.ptr.i.i1018, align 8, !tbaa !2
>   %311 = extractelement <4 x double> %163, i32 2
>   %add568 = fadd double %311, %310
>   store double %add568, double* %add.ptr.i.i1018, align 8, !tbaa !2
>   %add.ptr.i.i1015 = getelementptr inbounds double, double* %30, i64 %conv.i1126
>   %312 = load double, double* %add.ptr.i.i1015, align 8, !tbaa !2
>   %313 = extractelement <4 x double> %187, i32 2
>   %add571 = fadd double %313, %312
>   store double %add571, double* %add.ptr.i.i1015, align 8, !tbaa !2
>   %add.ptr.i.i1012 = getelementptr inbounds double, double* %31, i64 %conv.i1126
>   %314 = load double, double* %add.ptr.i.i1012, align 8, !tbaa !2
>   %315 = extractelement <4 x double> %211, i32 2
>   %add574 = fadd double %315, %314
>   store double %add574, double* %add.ptr.i.i1012, align 8, !tbaa !2
>   %add.ptr.i.i1009 = getelementptr inbounds double, double* %29, i64 %conv.i1123
>   %316 = load double, double* %add.ptr.i.i1009, align 8, !tbaa !2
>   %317 = extractelement <4 x double> %163, i32 3
>   %add577 = fadd double %317, %316
>   store double %add577, double* %add.ptr.i.i1009, align 8, !tbaa !2
>   %add.ptr.i.i1006 = getelementptr inbounds double, double* %30, i64 %conv.i1123
>   %318 = load double, double* %add.ptr.i.i1006, align 8, !tbaa !2
>   %319 = extractelement <4 x double> %187, i32 3
>   %add580 = fadd double %319, %318
>   store double %add580, double* %add.ptr.i.i1006, align 8, !tbaa !2
>   %add.ptr.i.i1003 = getelementptr inbounds double, double* %31, i64 %conv.i1123
>   %320 = load double, double* %add.ptr.i.i1003, align 8, !tbaa !2
>   %321 = extractelement <4 x double> %211, i32 3
>   %add583 = fadd double %321, %320
>   store double %add583, double* %add.ptr.i.i1003, align 8, !tbaa !2
>   br label %if.end584
> 
> if.end584:                                        ; preds = %if.else, %if.then457
>   call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %14) #7
>   %indvars.iv.next1247 = add nsw i64 %indvars.iv1246, 1
>   %add601 = add nsw i32 %.omp.iv.01238, 1
>   %lftr.wideiv = trunc i64 %indvars.iv.next1247 to i32
>   %exitcond1250.not = icmp eq i32 %37, %lftr.wideiv
>   br i1 %exitcond1250.not, label %omp.loop.exit, label %omp.inner.for.body
> 
> omp.loop.exit:                                    ; preds = %if.end584, %omp.precond.then
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %0)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #7
>   br label %omp.precond.end
> 
> omp.precond.end:                                  ; preds = %omp.loop.exit, %omp_if.end
>   call void @__kmpc_barrier(%struct.ident_t* nonnull @3, i32 %0) #7
>   %322 = load i32, i32* %numthreads, align 4, !tbaa !6
>   %cmp612 = icmp sgt i32 %322, 1
>   br i1 %cmp612, label %if.then613, label %if.end673
> 
> if.then613:                                       ; preds = %omp.precond.end
>   %323 = load i32, i32* %numNode, align 4, !tbaa !6
>   %sub621 = add nsw i32 %323, -1
>   %cmp622 = icmp sgt i32 %323, 0
>   br i1 %cmp622, label %omp.precond.then623, label %omp.precond.end672
> 
> omp.precond.then623:                              ; preds = %if.then613
>   %324 = bitcast i32* %.omp.lb624 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %324) #7
>   store i32 0, i32* %.omp.lb624, align 4, !tbaa !6
>   %325 = bitcast i32* %.omp.ub625 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %325) #7
>   store i32 %sub621, i32* %.omp.ub625, align 4, !tbaa !6
>   %326 = bitcast i32* %.omp.stride626 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %326) #7
>   store i32 1, i32* %.omp.stride626, align 4, !tbaa !6
>   %327 = bitcast i32* %.omp.is_last627 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %327) #7
>   store i32 0, i32* %.omp.is_last627, align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %0, i32 34, i32* nonnull %.omp.is_last627, i32* nonnull %.omp.lb624, i32* nonnull %.omp.ub625, i32* nonnull %.omp.stride626, i32 1, i32 1) #7
>   %328 = load i32, i32* %.omp.ub625, align 4, !tbaa !6
>   %cmp630.not = icmp slt i32 %328, %323
>   %cond634 = select i1 %cmp630.not, i32 %328, i32 %sub621
>   store i32 %cond634, i32* %.omp.ub625, align 4, !tbaa !6
>   %329 = load i32, i32* %.omp.lb624, align 4, !tbaa !6
>   %cmp636.not1234 = icmp sgt i32 %329, %cond634
>   br i1 %cmp636.not1234, label %omp.loop.exit671, label %omp.inner.for.body638.lr.ph
> 
> omp.inner.for.body638.lr.ph:                      ; preds = %omp.precond.then623
>   %m_nodeElemStart.i998 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 92
>   %330 = load i32*, i32** %m_nodeElemStart.i998, align 8, !tbaa !81
>   %m_nodeElemCornerList.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 93
>   %331 = load i32*, i32** %m_nodeElemCornerList.i, align 8, !tbaa !82
>   %332 = load double*, double** %fx_elem, align 8
>   %333 = load double*, double** %fy_elem, align 8
>   %334 = load double*, double** %fz_elem, align 8
>   %_M_start.i.i996 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 9, i32 0, i32 0, i32 0, i32 0
>   %335 = load double*, double** %_M_start.i.i996, align 8, !tbaa !11
>   %_M_start.i.i993 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 10, i32 0, i32 0, i32 0, i32 0
>   %336 = load double*, double** %_M_start.i.i993, align 8, !tbaa !11
>   %_M_start.i.i990 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 11, i32 0, i32 0, i32 0, i32 0
>   %337 = load double*, double** %_M_start.i.i990, align 8, !tbaa !11
>   %338 = sext i32 %329 to i64
>   %339 = icmp sgt i32 %cond634, %329
>   %smax = select i1 %339, i32 %cond634, i32 %329
>   %340 = add i32 %smax, 1
>   %wide.trip.count1241 = sext i32 %340 to i64
>   %arrayidx4.i.phi.trans.insert = getelementptr inbounds i32, i32* %330, i64 %338
>   %.pre = load i32, i32* %arrayidx4.i.phi.trans.insert, align 4, !tbaa !6
>   br label %omp.inner.for.body638
> 
> omp.inner.for.body638:                            ; preds = %for.cond.cleanup645, %omp.inner.for.body638.lr.ph
>   %341 = phi i32 [ %342, %for.cond.cleanup645 ], [ %.pre, %omp.inner.for.body638.lr.ph ]
>   %indvars.iv1239 = phi i64 [ %indvars.iv.next1240, %for.cond.cleanup645 ], [ %338, %omp.inner.for.body638.lr.ph ]
>   %indvars.iv.next1240 = add nsw i64 %indvars.iv1239, 1
>   %arrayidx.i1000 = getelementptr inbounds i32, i32* %330, i64 %indvars.iv.next1240
>   %342 = load i32, i32* %arrayidx.i1000, align 4, !tbaa !6
>   %sub.i = sub i32 %342, %341
>   %idxprom2.i = sext i32 %341 to i64
>   %arrayidx3.i = getelementptr inbounds i32, i32* %331, i64 %idxprom2.i
>   %cmp6441227 = icmp sgt i32 %sub.i, 0
>   br i1 %cmp6441227, label %for.body646.preheader, label %for.cond.cleanup645
> 
> for.body646.preheader:                            ; preds = %omp.inner.for.body638
>   %wide.trip.count = zext i32 %sub.i to i64
>   %343 = add nsw i64 %wide.trip.count, -1
>   %xtraiter = and i64 %wide.trip.count, 3
>   %344 = icmp ult i64 %343, 3
>   br i1 %344, label %for.cond.cleanup645.loopexit.unr-lcssa, label %for.body646.preheader.new
> 
> for.body646.preheader.new:                        ; preds = %for.body646.preheader
>   %unroll_iter = and i64 %wide.trip.count, 4294967292
>   br label %for.body646
> 
> for.cond.cleanup645.loopexit.unr-lcssa:           ; preds = %for.body646, %for.body646.preheader
>   %add651.lcssa.ph = phi double [ undef, %for.body646.preheader ], [ %add651.3, %for.body646 ]
>   %add654.lcssa.ph = phi double [ undef, %for.body646.preheader ], [ %add654.3, %for.body646 ]
>   %add657.lcssa.ph = phi double [ undef, %for.body646.preheader ], [ %add657.3, %for.body646 ]
>   %indvars.iv.unr = phi i64 [ 0, %for.body646.preheader ], [ %indvars.iv.next.3, %for.body646 ]
>   %fz_tmp.01230.unr = phi double [ 0.000000e+00, %for.body646.preheader ], [ %add657.3, %for.body646 ]
>   %fy_tmp.01229.unr = phi double [ 0.000000e+00, %for.body646.preheader ], [ %add654.3, %for.body646 ]
>   %fx_tmp.01228.unr = phi double [ 0.000000e+00, %for.body646.preheader ], [ %add651.3, %for.body646 ]
>   %lcmp.mod.not = icmp eq i64 %xtraiter, 0
>   br i1 %lcmp.mod.not, label %for.cond.cleanup645, label %for.body646.epil
> 
> for.body646.epil:                                 ; preds = %for.cond.cleanup645.loopexit.unr-lcssa, %for.body646.epil
>   %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body646.epil ], [ %indvars.iv.unr, %for.cond.cleanup645.loopexit.unr-lcssa ]
>   %fz_tmp.01230.epil = phi double [ %add657.epil, %for.body646.epil ], [ %fz_tmp.01230.unr, %for.cond.cleanup645.loopexit.unr-lcssa ]
>   %fy_tmp.01229.epil = phi double [ %add654.epil, %for.body646.epil ], [ %fy_tmp.01229.unr, %for.cond.cleanup645.loopexit.unr-lcssa ]
>   %fx_tmp.01228.epil = phi double [ %add651.epil, %for.body646.epil ], [ %fx_tmp.01228.unr, %for.cond.cleanup645.loopexit.unr-lcssa ]
>   %epil.iter = phi i64 [ %epil.iter.sub, %for.body646.epil ], [ %xtraiter, %for.cond.cleanup645.loopexit.unr-lcssa ]
>   %arrayidx648.epil = getelementptr inbounds i32, i32* %arrayidx3.i, i64 %indvars.iv.epil
>   %345 = load i32, i32* %arrayidx648.epil, align 4, !tbaa !6
>   %idxprom649.epil = sext i32 %345 to i64
>   %arrayidx650.epil = getelementptr inbounds double, double* %332, i64 %idxprom649.epil
>   %346 = load double, double* %arrayidx650.epil, align 8, !tbaa !2
>   %add651.epil = fadd double %fx_tmp.01228.epil, %346
>   %arrayidx653.epil = getelementptr inbounds double, double* %333, i64 %idxprom649.epil
>   %347 = load double, double* %arrayidx653.epil, align 8, !tbaa !2
>   %add654.epil = fadd double %fy_tmp.01229.epil, %347
>   %arrayidx656.epil = getelementptr inbounds double, double* %334, i64 %idxprom649.epil
>   %348 = load double, double* %arrayidx656.epil, align 8, !tbaa !2
>   %add657.epil = fadd double %fz_tmp.01230.epil, %348
>   %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
>   %epil.iter.sub = add i64 %epil.iter, -1
>   %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
>   br i1 %epil.iter.cmp.not, label %for.cond.cleanup645, label %for.body646.epil, !llvm.loop !84
> 
> for.cond.cleanup645:                              ; preds = %for.cond.cleanup645.loopexit.unr-lcssa, %for.body646.epil, %omp.inner.for.body638
>   %fx_tmp.0.lcssa = phi double [ 0.000000e+00, %omp.inner.for.body638 ], [ %add651.lcssa.ph, %for.cond.cleanup645.loopexit.unr-lcssa ], [ %add651.epil, %for.body646.epil ]
>   %fy_tmp.0.lcssa = phi double [ 0.000000e+00, %omp.inner.for.body638 ], [ %add654.lcssa.ph, %for.cond.cleanup645.loopexit.unr-lcssa ], [ %add654.epil, %for.body646.epil ]
>   %fz_tmp.0.lcssa = phi double [ 0.000000e+00, %omp.inner.for.body638 ], [ %add657.lcssa.ph, %for.cond.cleanup645.loopexit.unr-lcssa ], [ %add657.epil, %for.body646.epil ]
>   %add.ptr.i.i997 = getelementptr inbounds double, double* %335, i64 %indvars.iv1239
>   %349 = load double, double* %add.ptr.i.i997, align 8, !tbaa !2
>   %add662 = fadd double %fx_tmp.0.lcssa, %349
>   store double %add662, double* %add.ptr.i.i997, align 8, !tbaa !2
>   %add.ptr.i.i994 = getelementptr inbounds double, double* %336, i64 %indvars.iv1239
>   %350 = load double, double* %add.ptr.i.i994, align 8, !tbaa !2
>   %add664 = fadd double %fy_tmp.0.lcssa, %350
>   store double %add664, double* %add.ptr.i.i994, align 8, !tbaa !2
>   %add.ptr.i.i991 = getelementptr inbounds double, double* %337, i64 %indvars.iv1239
>   %351 = load double, double* %add.ptr.i.i991, align 8, !tbaa !2
>   %add666 = fadd double %fz_tmp.0.lcssa, %351
>   store double %add666, double* %add.ptr.i.i991, align 8, !tbaa !2
>   %exitcond1242.not = icmp eq i64 %indvars.iv.next1240, %wide.trip.count1241
>   br i1 %exitcond1242.not, label %omp.loop.exit671, label %omp.inner.for.body638
> 
> for.body646:                                      ; preds = %for.body646, %for.body646.preheader.new
>   %indvars.iv = phi i64 [ 0, %for.body646.preheader.new ], [ %indvars.iv.next.3, %for.body646 ]
>   %fz_tmp.01230 = phi double [ 0.000000e+00, %for.body646.preheader.new ], [ %add657.3, %for.body646 ]
>   %fy_tmp.01229 = phi double [ 0.000000e+00, %for.body646.preheader.new ], [ %add654.3, %for.body646 ]
>   %fx_tmp.01228 = phi double [ 0.000000e+00, %for.body646.preheader.new ], [ %add651.3, %for.body646 ]
>   %niter = phi i64 [ %unroll_iter, %for.body646.preheader.new ], [ %niter.nsub.3, %for.body646 ]
>   %arrayidx648 = getelementptr inbounds i32, i32* %arrayidx3.i, i64 %indvars.iv
>   %352 = load i32, i32* %arrayidx648, align 4, !tbaa !6
>   %idxprom649 = sext i32 %352 to i64
>   %arrayidx650 = getelementptr inbounds double, double* %332, i64 %idxprom649
>   %353 = load double, double* %arrayidx650, align 8, !tbaa !2
>   %add651 = fadd double %fx_tmp.01228, %353
>   %arrayidx653 = getelementptr inbounds double, double* %333, i64 %idxprom649
>   %354 = load double, double* %arrayidx653, align 8, !tbaa !2
>   %add654 = fadd double %fy_tmp.01229, %354
>   %arrayidx656 = getelementptr inbounds double, double* %334, i64 %idxprom649
>   %355 = load double, double* %arrayidx656, align 8, !tbaa !2
>   %add657 = fadd double %fz_tmp.01230, %355
>   %indvars.iv.next = or i64 %indvars.iv, 1
>   %arrayidx648.1 = getelementptr inbounds i32, i32* %arrayidx3.i, i64 %indvars.iv.next
>   %356 = load i32, i32* %arrayidx648.1, align 4, !tbaa !6
>   %idxprom649.1 = sext i32 %356 to i64
>   %arrayidx650.1 = getelementptr inbounds double, double* %332, i64 %idxprom649.1
>   %357 = load double, double* %arrayidx650.1, align 8, !tbaa !2
>   %add651.1 = fadd double %add651, %357
>   %arrayidx653.1 = getelementptr inbounds double, double* %333, i64 %idxprom649.1
>   %358 = load double, double* %arrayidx653.1, align 8, !tbaa !2
>   %add654.1 = fadd double %add654, %358
>   %arrayidx656.1 = getelementptr inbounds double, double* %334, i64 %idxprom649.1
>   %359 = load double, double* %arrayidx656.1, align 8, !tbaa !2
>   %add657.1 = fadd double %add657, %359
>   %indvars.iv.next.1 = or i64 %indvars.iv, 2
>   %arrayidx648.2 = getelementptr inbounds i32, i32* %arrayidx3.i, i64 %indvars.iv.next.1
>   %360 = load i32, i32* %arrayidx648.2, align 4, !tbaa !6
>   %idxprom649.2 = sext i32 %360 to i64
>   %arrayidx650.2 = getelementptr inbounds double, double* %332, i64 %idxprom649.2
>   %361 = load double, double* %arrayidx650.2, align 8, !tbaa !2
>   %add651.2 = fadd double %add651.1, %361
>   %arrayidx653.2 = getelementptr inbounds double, double* %333, i64 %idxprom649.2
>   %362 = load double, double* %arrayidx653.2, align 8, !tbaa !2
>   %add654.2 = fadd double %add654.1, %362
>   %arrayidx656.2 = getelementptr inbounds double, double* %334, i64 %idxprom649.2
>   %363 = load double, double* %arrayidx656.2, align 8, !tbaa !2
>   %add657.2 = fadd double %add657.1, %363
>   %indvars.iv.next.2 = or i64 %indvars.iv, 3
>   %arrayidx648.3 = getelementptr inbounds i32, i32* %arrayidx3.i, i64 %indvars.iv.next.2
>   %364 = load i32, i32* %arrayidx648.3, align 4, !tbaa !6
>   %idxprom649.3 = sext i32 %364 to i64
>   %arrayidx650.3 = getelementptr inbounds double, double* %332, i64 %idxprom649.3
>   %365 = load double, double* %arrayidx650.3, align 8, !tbaa !2
>   %add651.3 = fadd double %add651.2, %365
>   %arrayidx653.3 = getelementptr inbounds double, double* %333, i64 %idxprom649.3
>   %366 = load double, double* %arrayidx653.3, align 8, !tbaa !2
>   %add654.3 = fadd double %add654.2, %366
>   %arrayidx656.3 = getelementptr inbounds double, double* %334, i64 %idxprom649.3
>   %367 = load double, double* %arrayidx656.3, align 8, !tbaa !2
>   %add657.3 = fadd double %add657.2, %367
>   %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
>   %niter.nsub.3 = add i64 %niter, -4
>   %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
>   br i1 %niter.ncmp.3, label %for.cond.cleanup645.loopexit.unr-lcssa, label %for.body646
> 
> omp.loop.exit671:                                 ; preds = %for.cond.cleanup645, %omp.precond.then623
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %0)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %327) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %326) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %325) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %324) #7
>   br label %omp.precond.end672
> 
> omp.precond.end672:                               ; preds = %omp.loop.exit671, %if.then613
>   call void @__kmpc_barrier(%struct.ident_t* nonnull @3, i32 %0) #7
>   br label %if.end673
11413c8029
< 1076:                                             ; preds = %1074
---
> if.end673:                                        ; preds = %omp.precond.end672, %omp.precond.end
11415,11421d8030
< 
< 1077:                                             ; preds = %1074, %18
<   %1078 = landingpad { i8*, i32 }
<           catch i8* null
<   %1079 = extractvalue { i8*, i32 } %1078, 0
<   call void @__clang_call_terminate(i8* %1079) #29
<   unreachable
11424,11425c8033,8034
< ; Function Attrs: nofree nounwind readnone willreturn
< declare dso_local double @cbrt(double) local_unnamed_addr #19
---
> ; Function Attrs: nofree nounwind readnone
> declare dso_local double @cbrt(double) local_unnamed_addr #17
11427,11428c8036,8037
< ; Function Attrs: inaccessiblemem_or_argmemonly nounwind willreturn
< declare dso_local void @free(i8* nocapture noundef) local_unnamed_addr #20
---
> ; Function Attrs: nounwind
> declare dso_local void @free(i8* nocapture) local_unnamed_addr #1
11431,11531c8040,8127
< define internal void @.omp_outlined..33(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, i64 %2, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %3) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %5 = alloca i32, align 4
<   %6 = alloca i32, align 4
<   %7 = alloca i32, align 4
<   %8 = alloca i32, align 4
<   %9 = trunc i64 %2 to i32
<   %10 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL24CalcAccelerationForNodesR6DomainiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %10)
<           to label %11 unwind label %70
< 
< 11:                                               ; preds = %4
<   %12 = add nsw i32 %9, -1
<   %13 = icmp sgt i32 %9, 0
<   br i1 %13, label %16, label %14
< 
< 14:                                               ; preds = %11
<   %15 = load i32, i32* %0, align 4, !tbaa !12
<   br label %66
< 
< 16:                                               ; preds = %11
<   %17 = bitcast i32* %5 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #10
<   store i32 0, i32* %5, align 4, !tbaa !12
<   %18 = bitcast i32* %6 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #10
<   store i32 %12, i32* %6, align 4, !tbaa !12
<   %19 = bitcast i32* %7 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #10
<   store i32 1, i32* %7, align 4, !tbaa !12
<   %20 = bitcast i32* %8 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #10
<   store i32 0, i32* %8, align 4, !tbaa !12
<   %21 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %21, i32 34, i32* nonnull %8, i32* nonnull %5, i32* nonnull %6, i32* nonnull %7, i32 1, i32 1) #10
<   %22 = load i32, i32* %6, align 4, !tbaa !12
<   %23 = icmp slt i32 %22, %9
<   %24 = select i1 %23, i32 %22, i32 %12
<   store i32 %24, i32* %6, align 4, !tbaa !12
<   %25 = load i32, i32* %5, align 4, !tbaa !12
<   %26 = icmp sgt i32 %25, %24
<   br i1 %26, label %65, label %27
< 
< 27:                                               ; preds = %16
<   %28 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 9, i32 0, i32 0, i32 0
<   %29 = load double*, double** %28, align 8, !tbaa !22
<   %30 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 12, i32 0, i32 0, i32 0
<   %31 = load double*, double** %30, align 8, !tbaa !22
<   %32 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 6, i32 0, i32 0, i32 0
<   %33 = load double*, double** %32, align 8, !tbaa !22
<   %34 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 10, i32 0, i32 0, i32 0
<   %35 = load double*, double** %34, align 8, !tbaa !22
<   %36 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 7, i32 0, i32 0, i32 0
<   %37 = load double*, double** %36, align 8, !tbaa !22
<   %38 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 11, i32 0, i32 0, i32 0
<   %39 = load double*, double** %38, align 8, !tbaa !22
<   %40 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 8, i32 0, i32 0, i32 0
<   %41 = load double*, double** %40, align 8, !tbaa !22
<   %42 = sext i32 %25 to i64
<   %43 = add i32 %24, 1
<   br label %44
< 
< 44:                                               ; preds = %27, %44
<   %45 = phi i64 [ %42, %27 ], [ %62, %44 ]
<   %46 = getelementptr inbounds double, double* %29, i64 %45
<   %47 = load double, double* %46, align 8, !tbaa !2
<   %48 = getelementptr inbounds double, double* %31, i64 %45
<   %49 = load double, double* %48, align 8, !tbaa !2
<   %50 = fdiv double %47, %49
<   %51 = getelementptr inbounds double, double* %33, i64 %45
<   store double %50, double* %51, align 8, !tbaa !2
<   %52 = getelementptr inbounds double, double* %35, i64 %45
<   %53 = load double, double* %52, align 8, !tbaa !2
<   %54 = load double, double* %48, align 8, !tbaa !2
<   %55 = fdiv double %53, %54
<   %56 = getelementptr inbounds double, double* %37, i64 %45
<   store double %55, double* %56, align 8, !tbaa !2
<   %57 = getelementptr inbounds double, double* %39, i64 %45
<   %58 = load double, double* %57, align 8, !tbaa !2
<   %59 = load double, double* %48, align 8, !tbaa !2
<   %60 = fdiv double %58, %59
<   %61 = getelementptr inbounds double, double* %41, i64 %45
<   store double %60, double* %61, align 8, !tbaa !2
<   %62 = add nsw i64 %45, 1
<   %63 = trunc i64 %62 to i32
<   %64 = icmp eq i32 %43, %63
<   br i1 %64, label %65, label %44
< 
< 65:                                               ; preds = %44, %16
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %21)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #10
<   br label %66
< 
< 66:                                               ; preds = %14, %65
<   %67 = phi i32 [ %15, %14 ], [ %21, %65 ]
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %67)
<   %68 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL24CalcAccelerationForNodesR6DomainiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %68)
<           to label %69 unwind label %70
---
> define internal void @.omp_outlined..25(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i64 %numNode, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %domain) #6 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
> entry:
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %numNode.addr.sroa.0.0.extract.trunc = trunc i64 %numNode to i32
>   %sub3 = add nsw i32 %numNode.addr.sroa.0.0.extract.trunc, -1
>   %cmp = icmp sgt i32 %numNode.addr.sroa.0.0.extract.trunc, 0
>   br i1 %cmp, label %omp.precond.then, label %omp.precond.end
> 
> omp.precond.then:                                 ; preds = %entry
>   %0 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %1 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #7
>   store i32 %sub3, i32* %.omp.ub, align 4, !tbaa !6
>   %2 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %3 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   %4 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %4, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %5 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp5.not = icmp slt i32 %5, %numNode.addr.sroa.0.0.extract.trunc
>   %cond = select i1 %cmp5.not, i32 %5, i32 %sub3
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %6 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp6.not75 = icmp sgt i32 %6, %cond
>   br i1 %cmp6.not75, label %omp.loop.exit, label %omp.inner.for.body.lr.ph
> 
> omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
>   %_M_start.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 9, i32 0, i32 0, i32 0, i32 0
>   %7 = load double*, double** %_M_start.i.i, align 8, !tbaa !11
>   %_M_start.i.i73 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 12, i32 0, i32 0, i32 0, i32 0
>   %8 = load double*, double** %_M_start.i.i73, align 8, !tbaa !11
>   %_M_start.i.i70 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
>   %9 = load double*, double** %_M_start.i.i70, align 8, !tbaa !11
>   %_M_start.i.i67 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 10, i32 0, i32 0, i32 0, i32 0
>   %10 = load double*, double** %_M_start.i.i67, align 8, !tbaa !11
>   %_M_start.i.i61 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
>   %11 = load double*, double** %_M_start.i.i61, align 8, !tbaa !11
>   %_M_start.i.i58 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 11, i32 0, i32 0, i32 0, i32 0
>   %12 = load double*, double** %_M_start.i.i58, align 8, !tbaa !11
>   %_M_start.i.i52 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 8, i32 0, i32 0, i32 0, i32 0
>   %13 = load double*, double** %_M_start.i.i52, align 8, !tbaa !11
>   %14 = sext i32 %6 to i64
>   %15 = icmp sgt i32 %cond, %6
>   %smax = select i1 %15, i32 %cond, i32 %6
>   %16 = add i32 %smax, 1
>   br label %omp.inner.for.body
> 
> omp.inner.for.body:                               ; preds = %omp.inner.for.body, %omp.inner.for.body.lr.ph
>   %indvars.iv = phi i64 [ %indvars.iv.next, %omp.inner.for.body ], [ %14, %omp.inner.for.body.lr.ph ]
>   %add.ptr.i.i = getelementptr inbounds double, double* %7, i64 %indvars.iv
>   %17 = load double, double* %add.ptr.i.i, align 8, !tbaa !2
>   %add.ptr.i.i74 = getelementptr inbounds double, double* %8, i64 %indvars.iv
>   %18 = load double, double* %add.ptr.i.i74, align 8, !tbaa !2
>   %div8 = fdiv double %17, %18
>   %add.ptr.i.i71 = getelementptr inbounds double, double* %9, i64 %indvars.iv
>   store double %div8, double* %add.ptr.i.i71, align 8, !tbaa !2
>   %add.ptr.i.i68 = getelementptr inbounds double, double* %10, i64 %indvars.iv
>   %19 = load double, double* %add.ptr.i.i68, align 8, !tbaa !2
>   %20 = load double, double* %add.ptr.i.i74, align 8, !tbaa !2
>   %div14 = fdiv double %19, %20
>   %add.ptr.i.i62 = getelementptr inbounds double, double* %11, i64 %indvars.iv
>   store double %div14, double* %add.ptr.i.i62, align 8, !tbaa !2
>   %add.ptr.i.i59 = getelementptr inbounds double, double* %12, i64 %indvars.iv
>   %21 = load double, double* %add.ptr.i.i59, align 8, !tbaa !2
>   %22 = load double, double* %add.ptr.i.i74, align 8, !tbaa !2
>   %div20 = fdiv double %21, %22
>   %add.ptr.i.i53 = getelementptr inbounds double, double* %13, i64 %indvars.iv
>   store double %div20, double* %add.ptr.i.i53, align 8, !tbaa !2
>   %indvars.iv.next = add nsw i64 %indvars.iv, 1
>   %lftr.wideiv = trunc i64 %indvars.iv.next to i32
>   %exitcond.not = icmp eq i32 %16, %lftr.wideiv
>   br i1 %exitcond.not, label %omp.loop.exit, label %omp.inner.for.body
> 
> omp.loop.exit:                                    ; preds = %omp.inner.for.body, %omp.precond.then
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %4)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #7
>   br label %omp.precond.end
11533c8129
< 69:                                               ; preds = %66
---
> omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
11535,11541d8130
< 
< 70:                                               ; preds = %66, %4
<   %71 = landingpad { i8*, i32 }
<           catch i8* null
<   %72 = extractvalue { i8*, i32 } %71, 0
<   call void @__clang_call_terminate(i8* %72) #29
<   unreachable
11545,11880c8134,8538
< define internal void @.omp_outlined..35(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %2, i32* nocapture nonnull readonly align 4 dereferenceable(4) %3) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %5 = alloca i32, align 4
<   %6 = alloca i32, align 4
<   %7 = alloca i32, align 4
<   %8 = alloca i32, align 4
<   %9 = alloca i32, align 4
<   %10 = alloca i32, align 4
<   %11 = alloca i32, align 4
<   %12 = alloca i32, align 4
<   %13 = alloca i32, align 4
<   %14 = alloca i32, align 4
<   %15 = alloca i32, align 4
<   %16 = alloca i32, align 4
<   %17 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL43ApplyAccelerationBoundaryConditionsForNodesR6DomainE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %17)
<           to label %18 unwind label %228
< 
< 18:                                               ; preds = %4
<   %19 = getelementptr inbounds %class.Domain, %class.Domain* %2, i64 0, i32 13, i32 0, i32 0, i32 0
<   %20 = load i32*, i32** %19, align 8, !tbaa !6
<   %21 = getelementptr inbounds %class.Domain, %class.Domain* %2, i64 0, i32 13, i32 0, i32 0, i32 1
<   %22 = load i32*, i32** %21, align 8, !tbaa !6
<   %23 = icmp eq i32* %20, %22
<   br i1 %23, label %87, label %24
< 
< 24:                                               ; preds = %18
<   %25 = load i32, i32* %3, align 4, !tbaa !12
<   %26 = add nsw i32 %25, -1
<   %27 = icmp sgt i32 %25, 0
<   br i1 %27, label %28, label %87
< 
< 28:                                               ; preds = %24
<   %29 = bitcast i32* %5 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %29) #10
<   store i32 0, i32* %5, align 4, !tbaa !12
<   %30 = bitcast i32* %6 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30) #10
<   store i32 %26, i32* %6, align 4, !tbaa !12
<   %31 = bitcast i32* %7 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %31) #10
<   store i32 1, i32* %7, align 4, !tbaa !12
<   %32 = bitcast i32* %8 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32) #10
<   store i32 0, i32* %8, align 4, !tbaa !12
<   %33 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %33, i32 34, i32* nonnull %8, i32* nonnull %5, i32* nonnull %6, i32* nonnull %7, i32 1, i32 1) #10
<   %34 = load i32, i32* %6, align 4, !tbaa !12
<   %35 = icmp slt i32 %34, %25
<   %36 = select i1 %35, i32 %34, i32 %26
<   store i32 %36, i32* %6, align 4, !tbaa !12
<   %37 = load i32, i32* %5, align 4, !tbaa !12
<   %38 = icmp slt i32 %36, %37
<   br i1 %38, label %86, label %39
< 
< 39:                                               ; preds = %28
<   %40 = load i32*, i32** %19, align 8, !tbaa !19
<   %41 = getelementptr inbounds %class.Domain, %class.Domain* %2, i64 0, i32 6, i32 0, i32 0, i32 0
<   %42 = load double*, double** %41, align 8, !tbaa !22
<   %43 = sext i32 %37 to i64
<   %44 = add i32 %36, 1
<   %45 = sub i32 %44, %37
<   %46 = sub i32 %36, %37
<   %47 = and i32 %45, 3
<   %48 = icmp eq i32 %47, 0
<   br i1 %48, label %59, label %49
< 
< 49:                                               ; preds = %39, %49
<   %50 = phi i64 [ %56, %49 ], [ %43, %39 ]
<   %51 = phi i32 [ %57, %49 ], [ %47, %39 ]
<   %52 = getelementptr inbounds i32, i32* %40, i64 %50
<   %53 = load i32, i32* %52, align 4, !tbaa !12
<   %54 = sext i32 %53 to i64
<   %55 = getelementptr inbounds double, double* %42, i64 %54
<   store double 0.000000e+00, double* %55, align 8, !tbaa !2
<   %56 = add nsw i64 %50, 1
<   %57 = add i32 %51, -1
<   %58 = icmp eq i32 %57, 0
<   br i1 %58, label %59, label %49, !llvm.loop !102
< 
< 59:                                               ; preds = %49, %39
<   %60 = phi i64 [ %43, %39 ], [ %56, %49 ]
<   %61 = icmp ult i32 %46, 3
<   br i1 %61, label %86, label %62
< 
< 62:                                               ; preds = %59, %62
<   %63 = phi i64 [ %83, %62 ], [ %60, %59 ]
<   %64 = getelementptr inbounds i32, i32* %40, i64 %63
<   %65 = load i32, i32* %64, align 4, !tbaa !12
<   %66 = sext i32 %65 to i64
<   %67 = getelementptr inbounds double, double* %42, i64 %66
<   store double 0.000000e+00, double* %67, align 8, !tbaa !2
<   %68 = add nsw i64 %63, 1
<   %69 = getelementptr inbounds i32, i32* %40, i64 %68
<   %70 = load i32, i32* %69, align 4, !tbaa !12
<   %71 = sext i32 %70 to i64
<   %72 = getelementptr inbounds double, double* %42, i64 %71
<   store double 0.000000e+00, double* %72, align 8, !tbaa !2
<   %73 = add nsw i64 %63, 2
<   %74 = getelementptr inbounds i32, i32* %40, i64 %73
<   %75 = load i32, i32* %74, align 4, !tbaa !12
<   %76 = sext i32 %75 to i64
<   %77 = getelementptr inbounds double, double* %42, i64 %76
<   store double 0.000000e+00, double* %77, align 8, !tbaa !2
<   %78 = add nsw i64 %63, 3
<   %79 = getelementptr inbounds i32, i32* %40, i64 %78
<   %80 = load i32, i32* %79, align 4, !tbaa !12
<   %81 = sext i32 %80 to i64
<   %82 = getelementptr inbounds double, double* %42, i64 %81
<   store double 0.000000e+00, double* %82, align 8, !tbaa !2
<   %83 = add nsw i64 %63, 4
<   %84 = trunc i64 %83 to i32
<   %85 = icmp eq i32 %44, %84
<   br i1 %85, label %86, label %62
< 
< 86:                                               ; preds = %59, %62, %28
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %33)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %29) #10
<   br label %87
< 
< 87:                                               ; preds = %24, %86, %18
<   %88 = getelementptr inbounds %class.Domain, %class.Domain* %2, i64 0, i32 14, i32 0, i32 0, i32 0
<   %89 = load i32*, i32** %88, align 8, !tbaa !6
<   %90 = getelementptr inbounds %class.Domain, %class.Domain* %2, i64 0, i32 14, i32 0, i32 0, i32 1
<   %91 = load i32*, i32** %90, align 8, !tbaa !6
<   %92 = icmp eq i32* %89, %91
<   br i1 %92, label %156, label %93
< 
< 93:                                               ; preds = %87
<   %94 = load i32, i32* %3, align 4, !tbaa !12
<   %95 = add nsw i32 %94, -1
<   %96 = icmp sgt i32 %94, 0
<   br i1 %96, label %97, label %156
< 
< 97:                                               ; preds = %93
<   %98 = bitcast i32* %9 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %98) #10
<   store i32 0, i32* %9, align 4, !tbaa !12
<   %99 = bitcast i32* %10 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %99) #10
<   store i32 %95, i32* %10, align 4, !tbaa !12
<   %100 = bitcast i32* %11 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %100) #10
<   store i32 1, i32* %11, align 4, !tbaa !12
<   %101 = bitcast i32* %12 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %101) #10
<   store i32 0, i32* %12, align 4, !tbaa !12
<   %102 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %102, i32 34, i32* nonnull %12, i32* nonnull %9, i32* nonnull %10, i32* nonnull %11, i32 1, i32 1) #10
<   %103 = load i32, i32* %10, align 4, !tbaa !12
<   %104 = icmp slt i32 %103, %94
<   %105 = select i1 %104, i32 %103, i32 %95
<   store i32 %105, i32* %10, align 4, !tbaa !12
<   %106 = load i32, i32* %9, align 4, !tbaa !12
<   %107 = icmp slt i32 %105, %106
<   br i1 %107, label %155, label %108
< 
< 108:                                              ; preds = %97
<   %109 = load i32*, i32** %88, align 8, !tbaa !19
<   %110 = getelementptr inbounds %class.Domain, %class.Domain* %2, i64 0, i32 7, i32 0, i32 0, i32 0
<   %111 = load double*, double** %110, align 8, !tbaa !22
<   %112 = sext i32 %106 to i64
<   %113 = add i32 %105, 1
<   %114 = sub i32 %113, %106
<   %115 = sub i32 %105, %106
<   %116 = and i32 %114, 3
<   %117 = icmp eq i32 %116, 0
<   br i1 %117, label %128, label %118
< 
< 118:                                              ; preds = %108, %118
<   %119 = phi i64 [ %125, %118 ], [ %112, %108 ]
<   %120 = phi i32 [ %126, %118 ], [ %116, %108 ]
<   %121 = getelementptr inbounds i32, i32* %109, i64 %119
<   %122 = load i32, i32* %121, align 4, !tbaa !12
<   %123 = sext i32 %122 to i64
<   %124 = getelementptr inbounds double, double* %111, i64 %123
<   store double 0.000000e+00, double* %124, align 8, !tbaa !2
<   %125 = add nsw i64 %119, 1
<   %126 = add i32 %120, -1
<   %127 = icmp eq i32 %126, 0
<   br i1 %127, label %128, label %118, !llvm.loop !104
< 
< 128:                                              ; preds = %118, %108
<   %129 = phi i64 [ %112, %108 ], [ %125, %118 ]
<   %130 = icmp ult i32 %115, 3
<   br i1 %130, label %155, label %131
< 
< 131:                                              ; preds = %128, %131
<   %132 = phi i64 [ %152, %131 ], [ %129, %128 ]
<   %133 = getelementptr inbounds i32, i32* %109, i64 %132
<   %134 = load i32, i32* %133, align 4, !tbaa !12
<   %135 = sext i32 %134 to i64
<   %136 = getelementptr inbounds double, double* %111, i64 %135
<   store double 0.000000e+00, double* %136, align 8, !tbaa !2
<   %137 = add nsw i64 %132, 1
<   %138 = getelementptr inbounds i32, i32* %109, i64 %137
<   %139 = load i32, i32* %138, align 4, !tbaa !12
<   %140 = sext i32 %139 to i64
<   %141 = getelementptr inbounds double, double* %111, i64 %140
<   store double 0.000000e+00, double* %141, align 8, !tbaa !2
<   %142 = add nsw i64 %132, 2
<   %143 = getelementptr inbounds i32, i32* %109, i64 %142
<   %144 = load i32, i32* %143, align 4, !tbaa !12
<   %145 = sext i32 %144 to i64
<   %146 = getelementptr inbounds double, double* %111, i64 %145
<   store double 0.000000e+00, double* %146, align 8, !tbaa !2
<   %147 = add nsw i64 %132, 3
<   %148 = getelementptr inbounds i32, i32* %109, i64 %147
<   %149 = load i32, i32* %148, align 4, !tbaa !12
<   %150 = sext i32 %149 to i64
<   %151 = getelementptr inbounds double, double* %111, i64 %150
<   store double 0.000000e+00, double* %151, align 8, !tbaa !2
<   %152 = add nsw i64 %132, 4
<   %153 = trunc i64 %152 to i32
<   %154 = icmp eq i32 %113, %153
<   br i1 %154, label %155, label %131
< 
< 155:                                              ; preds = %128, %131, %97
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %102)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %101) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %100) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %99) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %98) #10
<   br label %156
< 
< 156:                                              ; preds = %93, %155, %87
<   %157 = getelementptr inbounds %class.Domain, %class.Domain* %2, i64 0, i32 15, i32 0, i32 0, i32 0
<   %158 = load i32*, i32** %157, align 8, !tbaa !6
<   %159 = getelementptr inbounds %class.Domain, %class.Domain* %2, i64 0, i32 15, i32 0, i32 0, i32 1
<   %160 = load i32*, i32** %159, align 8, !tbaa !6
<   %161 = icmp eq i32* %158, %160
<   br i1 %161, label %225, label %162
< 
< 162:                                              ; preds = %156
<   %163 = load i32, i32* %3, align 4, !tbaa !12
<   %164 = add nsw i32 %163, -1
<   %165 = icmp sgt i32 %163, 0
<   br i1 %165, label %166, label %225
< 
< 166:                                              ; preds = %162
<   %167 = bitcast i32* %13 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %167) #10
<   store i32 0, i32* %13, align 4, !tbaa !12
<   %168 = bitcast i32* %14 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %168) #10
<   store i32 %164, i32* %14, align 4, !tbaa !12
<   %169 = bitcast i32* %15 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %169) #10
<   store i32 1, i32* %15, align 4, !tbaa !12
<   %170 = bitcast i32* %16 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %170) #10
<   store i32 0, i32* %16, align 4, !tbaa !12
<   %171 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %171, i32 34, i32* nonnull %16, i32* nonnull %13, i32* nonnull %14, i32* nonnull %15, i32 1, i32 1) #10
<   %172 = load i32, i32* %14, align 4, !tbaa !12
<   %173 = icmp slt i32 %172, %163
<   %174 = select i1 %173, i32 %172, i32 %164
<   store i32 %174, i32* %14, align 4, !tbaa !12
<   %175 = load i32, i32* %13, align 4, !tbaa !12
<   %176 = icmp slt i32 %174, %175
<   br i1 %176, label %224, label %177
< 
< 177:                                              ; preds = %166
<   %178 = load i32*, i32** %157, align 8, !tbaa !19
<   %179 = getelementptr inbounds %class.Domain, %class.Domain* %2, i64 0, i32 8, i32 0, i32 0, i32 0
<   %180 = load double*, double** %179, align 8, !tbaa !22
<   %181 = sext i32 %175 to i64
<   %182 = add i32 %174, 1
<   %183 = sub i32 %182, %175
<   %184 = sub i32 %174, %175
<   %185 = and i32 %183, 3
<   %186 = icmp eq i32 %185, 0
<   br i1 %186, label %197, label %187
< 
< 187:                                              ; preds = %177, %187
<   %188 = phi i64 [ %194, %187 ], [ %181, %177 ]
<   %189 = phi i32 [ %195, %187 ], [ %185, %177 ]
<   %190 = getelementptr inbounds i32, i32* %178, i64 %188
<   %191 = load i32, i32* %190, align 4, !tbaa !12
<   %192 = sext i32 %191 to i64
<   %193 = getelementptr inbounds double, double* %180, i64 %192
<   store double 0.000000e+00, double* %193, align 8, !tbaa !2
<   %194 = add nsw i64 %188, 1
<   %195 = add i32 %189, -1
<   %196 = icmp eq i32 %195, 0
<   br i1 %196, label %197, label %187, !llvm.loop !105
< 
< 197:                                              ; preds = %187, %177
<   %198 = phi i64 [ %181, %177 ], [ %194, %187 ]
<   %199 = icmp ult i32 %184, 3
<   br i1 %199, label %224, label %200
< 
< 200:                                              ; preds = %197, %200
<   %201 = phi i64 [ %221, %200 ], [ %198, %197 ]
<   %202 = getelementptr inbounds i32, i32* %178, i64 %201
<   %203 = load i32, i32* %202, align 4, !tbaa !12
<   %204 = sext i32 %203 to i64
<   %205 = getelementptr inbounds double, double* %180, i64 %204
<   store double 0.000000e+00, double* %205, align 8, !tbaa !2
<   %206 = add nsw i64 %201, 1
<   %207 = getelementptr inbounds i32, i32* %178, i64 %206
<   %208 = load i32, i32* %207, align 4, !tbaa !12
<   %209 = sext i32 %208 to i64
<   %210 = getelementptr inbounds double, double* %180, i64 %209
<   store double 0.000000e+00, double* %210, align 8, !tbaa !2
<   %211 = add nsw i64 %201, 2
<   %212 = getelementptr inbounds i32, i32* %178, i64 %211
<   %213 = load i32, i32* %212, align 4, !tbaa !12
<   %214 = sext i32 %213 to i64
<   %215 = getelementptr inbounds double, double* %180, i64 %214
<   store double 0.000000e+00, double* %215, align 8, !tbaa !2
<   %216 = add nsw i64 %201, 3
<   %217 = getelementptr inbounds i32, i32* %178, i64 %216
<   %218 = load i32, i32* %217, align 4, !tbaa !12
<   %219 = sext i32 %218 to i64
<   %220 = getelementptr inbounds double, double* %180, i64 %219
<   store double 0.000000e+00, double* %220, align 8, !tbaa !2
<   %221 = add nsw i64 %201, 4
<   %222 = trunc i64 %221 to i32
<   %223 = icmp eq i32 %182, %222
<   br i1 %223, label %224, label %200
< 
< 224:                                              ; preds = %197, %200, %166
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %171)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %170) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %169) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %168) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %167) #10
<   br label %225
< 
< 225:                                              ; preds = %162, %224, %156
<   %226 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL43ApplyAccelerationBoundaryConditionsForNodesR6DomainE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %226)
<           to label %227 unwind label %228
---
> define internal void @.omp_outlined..26(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %domain, i32* nocapture nonnull readonly align 4 dereferenceable(4) %numNodeBC) #6 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
> entry:
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %.omp.lb31 = alloca i32, align 4
>   %.omp.ub32 = alloca i32, align 4
>   %.omp.stride33 = alloca i32, align 4
>   %.omp.is_last34 = alloca i32, align 4
>   %.omp.lb76 = alloca i32, align 4
>   %.omp.ub77 = alloca i32, align 4
>   %.omp.stride78 = alloca i32, align 4
>   %.omp.is_last79 = alloca i32, align 4
>   %0 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
>   %1 = load i32*, i32** %0, align 8, !tbaa !41
>   %_M_finish.i.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1
>   %2 = load i32*, i32** %_M_finish.i.i.i, align 8, !tbaa !41
>   %cmp.i.i.i = icmp eq i32* %1, %2
>   br i1 %cmp.i.i.i, label %if.end, label %if.then
> 
> if.then:                                          ; preds = %entry
>   %3 = load i32, i32* %numNodeBC, align 4, !tbaa !6
>   %sub4 = add nsw i32 %3, -1
>   %cmp5 = icmp sgt i32 %3, 0
>   br i1 %cmp5, label %omp.precond.then, label %if.end
> 
> omp.precond.then:                                 ; preds = %if.then
>   %4 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %5 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #7
>   store i32 %sub4, i32* %.omp.ub, align 4, !tbaa !6
>   %6 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %7 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   %8 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %8, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %9 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp8.not = icmp slt i32 %9, %3
>   %cond = select i1 %cmp8.not, i32 %9, i32 %sub4
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %10 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp9.not173 = icmp sgt i32 %10, %cond
>   br i1 %cmp9.not173, label %omp.loop.exit, label %omp.inner.for.body.lr.ph
> 
> omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
>   %11 = load i32*, i32** %0, align 8, !tbaa !8
>   %_M_start.i.i164 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
>   %12 = load double*, double** %_M_start.i.i164, align 8, !tbaa !11
>   %13 = sext i32 %10 to i64
>   %14 = icmp sgt i32 %cond, %10
>   %smax182 = select i1 %14, i32 %cond, i32 %10
>   %15 = add i32 %smax182, 1
>   %16 = sub i32 %15, %10
>   %17 = sub i32 %smax182, %10
>   %xtraiter188 = and i32 %16, 7
>   %lcmp.mod189.not = icmp eq i32 %xtraiter188, 0
>   br i1 %lcmp.mod189.not, label %omp.inner.for.body.prol.loopexit, label %omp.inner.for.body.prol
> 
> omp.inner.for.body.prol:                          ; preds = %omp.inner.for.body.lr.ph, %omp.inner.for.body.prol
>   %indvars.iv180.prol = phi i64 [ %indvars.iv.next181.prol, %omp.inner.for.body.prol ], [ %13, %omp.inner.for.body.lr.ph ]
>   %prol.iter190 = phi i32 [ %prol.iter190.sub, %omp.inner.for.body.prol ], [ %xtraiter188, %omp.inner.for.body.lr.ph ]
>   %add.ptr.i.i168.prol = getelementptr inbounds i32, i32* %11, i64 %indvars.iv180.prol
>   %18 = load i32, i32* %add.ptr.i.i168.prol, align 4, !tbaa !6
>   %conv.i163.prol = sext i32 %18 to i64
>   %add.ptr.i.i165.prol = getelementptr inbounds double, double* %12, i64 %conv.i163.prol
>   store double 0.000000e+00, double* %add.ptr.i.i165.prol, align 8, !tbaa !2
>   %indvars.iv.next181.prol = add nsw i64 %indvars.iv180.prol, 1
>   %prol.iter190.sub = add i32 %prol.iter190, -1
>   %prol.iter190.cmp.not = icmp eq i32 %prol.iter190.sub, 0
>   br i1 %prol.iter190.cmp.not, label %omp.inner.for.body.prol.loopexit, label %omp.inner.for.body.prol, !llvm.loop !85
> 
> omp.inner.for.body.prol.loopexit:                 ; preds = %omp.inner.for.body.prol, %omp.inner.for.body.lr.ph
>   %indvars.iv180.unr = phi i64 [ %13, %omp.inner.for.body.lr.ph ], [ %indvars.iv.next181.prol, %omp.inner.for.body.prol ]
>   %19 = icmp ult i32 %17, 7
>   br i1 %19, label %omp.loop.exit, label %omp.inner.for.body
> 
> omp.inner.for.body:                               ; preds = %omp.inner.for.body.prol.loopexit, %omp.inner.for.body
>   %indvars.iv180 = phi i64 [ %indvars.iv.next181.7, %omp.inner.for.body ], [ %indvars.iv180.unr, %omp.inner.for.body.prol.loopexit ]
>   %add.ptr.i.i168 = getelementptr inbounds i32, i32* %11, i64 %indvars.iv180
>   %20 = load i32, i32* %add.ptr.i.i168, align 4, !tbaa !6
>   %conv.i163 = sext i32 %20 to i64
>   %add.ptr.i.i165 = getelementptr inbounds double, double* %12, i64 %conv.i163
>   store double 0.000000e+00, double* %add.ptr.i.i165, align 8, !tbaa !2
>   %indvars.iv.next181 = add nsw i64 %indvars.iv180, 1
>   %add.ptr.i.i168.1 = getelementptr inbounds i32, i32* %11, i64 %indvars.iv.next181
>   %21 = load i32, i32* %add.ptr.i.i168.1, align 4, !tbaa !6
>   %conv.i163.1 = sext i32 %21 to i64
>   %add.ptr.i.i165.1 = getelementptr inbounds double, double* %12, i64 %conv.i163.1
>   store double 0.000000e+00, double* %add.ptr.i.i165.1, align 8, !tbaa !2
>   %indvars.iv.next181.1 = add nsw i64 %indvars.iv180, 2
>   %add.ptr.i.i168.2 = getelementptr inbounds i32, i32* %11, i64 %indvars.iv.next181.1
>   %22 = load i32, i32* %add.ptr.i.i168.2, align 4, !tbaa !6
>   %conv.i163.2 = sext i32 %22 to i64
>   %add.ptr.i.i165.2 = getelementptr inbounds double, double* %12, i64 %conv.i163.2
>   store double 0.000000e+00, double* %add.ptr.i.i165.2, align 8, !tbaa !2
>   %indvars.iv.next181.2 = add nsw i64 %indvars.iv180, 3
>   %add.ptr.i.i168.3 = getelementptr inbounds i32, i32* %11, i64 %indvars.iv.next181.2
>   %23 = load i32, i32* %add.ptr.i.i168.3, align 4, !tbaa !6
>   %conv.i163.3 = sext i32 %23 to i64
>   %add.ptr.i.i165.3 = getelementptr inbounds double, double* %12, i64 %conv.i163.3
>   store double 0.000000e+00, double* %add.ptr.i.i165.3, align 8, !tbaa !2
>   %indvars.iv.next181.3 = add nsw i64 %indvars.iv180, 4
>   %add.ptr.i.i168.4 = getelementptr inbounds i32, i32* %11, i64 %indvars.iv.next181.3
>   %24 = load i32, i32* %add.ptr.i.i168.4, align 4, !tbaa !6
>   %conv.i163.4 = sext i32 %24 to i64
>   %add.ptr.i.i165.4 = getelementptr inbounds double, double* %12, i64 %conv.i163.4
>   store double 0.000000e+00, double* %add.ptr.i.i165.4, align 8, !tbaa !2
>   %indvars.iv.next181.4 = add nsw i64 %indvars.iv180, 5
>   %add.ptr.i.i168.5 = getelementptr inbounds i32, i32* %11, i64 %indvars.iv.next181.4
>   %25 = load i32, i32* %add.ptr.i.i168.5, align 4, !tbaa !6
>   %conv.i163.5 = sext i32 %25 to i64
>   %add.ptr.i.i165.5 = getelementptr inbounds double, double* %12, i64 %conv.i163.5
>   store double 0.000000e+00, double* %add.ptr.i.i165.5, align 8, !tbaa !2
>   %indvars.iv.next181.5 = add nsw i64 %indvars.iv180, 6
>   %add.ptr.i.i168.6 = getelementptr inbounds i32, i32* %11, i64 %indvars.iv.next181.5
>   %26 = load i32, i32* %add.ptr.i.i168.6, align 4, !tbaa !6
>   %conv.i163.6 = sext i32 %26 to i64
>   %add.ptr.i.i165.6 = getelementptr inbounds double, double* %12, i64 %conv.i163.6
>   store double 0.000000e+00, double* %add.ptr.i.i165.6, align 8, !tbaa !2
>   %indvars.iv.next181.6 = add nsw i64 %indvars.iv180, 7
>   %add.ptr.i.i168.7 = getelementptr inbounds i32, i32* %11, i64 %indvars.iv.next181.6
>   %27 = load i32, i32* %add.ptr.i.i168.7, align 4, !tbaa !6
>   %conv.i163.7 = sext i32 %27 to i64
>   %add.ptr.i.i165.7 = getelementptr inbounds double, double* %12, i64 %conv.i163.7
>   store double 0.000000e+00, double* %add.ptr.i.i165.7, align 8, !tbaa !2
>   %indvars.iv.next181.7 = add nsw i64 %indvars.iv180, 8
>   %lftr.wideiv183.7 = trunc i64 %indvars.iv.next181.7 to i32
>   %exitcond184.not.7 = icmp eq i32 %15, %lftr.wideiv183.7
>   br i1 %exitcond184.not.7, label %omp.loop.exit, label %omp.inner.for.body
> 
> omp.loop.exit:                                    ; preds = %omp.inner.for.body.prol.loopexit, %omp.inner.for.body, %omp.precond.then
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %8)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #7
>   br label %if.end
> 
> if.end:                                           ; preds = %if.then, %omp.loop.exit, %entry
>   %28 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 14, i32 0, i32 0, i32 0, i32 0
>   %29 = load i32*, i32** %28, align 8, !tbaa !41
>   %_M_finish.i.i.i161 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 14, i32 0, i32 0, i32 0, i32 1
>   %30 = load i32*, i32** %_M_finish.i.i.i161, align 8, !tbaa !41
>   %cmp.i.i.i162 = icmp eq i32* %29, %30
>   br i1 %cmp.i.i.i162, label %if.end58, label %if.then19
> 
> if.then19:                                        ; preds = %if.end
>   %31 = load i32, i32* %numNodeBC, align 4, !tbaa !6
>   %sub27 = add nsw i32 %31, -1
>   %cmp29 = icmp sgt i32 %31, 0
>   br i1 %cmp29, label %omp.precond.then30, label %if.end58
> 
> omp.precond.then30:                               ; preds = %if.then19
>   %32 = bitcast i32* %.omp.lb31 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32) #7
>   store i32 0, i32* %.omp.lb31, align 4, !tbaa !6
>   %33 = bitcast i32* %.omp.ub32 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %33) #7
>   store i32 %sub27, i32* %.omp.ub32, align 4, !tbaa !6
>   %34 = bitcast i32* %.omp.stride33 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %34) #7
>   store i32 1, i32* %.omp.stride33, align 4, !tbaa !6
>   %35 = bitcast i32* %.omp.is_last34 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %35) #7
>   store i32 0, i32* %.omp.is_last34, align 4, !tbaa !6
>   %36 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %36, i32 34, i32* nonnull %.omp.is_last34, i32* nonnull %.omp.lb31, i32* nonnull %.omp.ub32, i32* nonnull %.omp.stride33, i32 1, i32 1) #7
>   %37 = load i32, i32* %.omp.ub32, align 4, !tbaa !6
>   %cmp37.not = icmp slt i32 %37, %31
>   %cond41 = select i1 %cmp37.not, i32 %37, i32 %sub27
>   store i32 %cond41, i32* %.omp.ub32, align 4, !tbaa !6
>   %38 = load i32, i32* %.omp.lb31, align 4, !tbaa !6
>   %cmp43.not171 = icmp sgt i32 %38, %cond41
>   br i1 %cmp43.not171, label %omp.loop.exit56, label %omp.inner.for.body45.lr.ph
> 
> omp.inner.for.body45.lr.ph:                       ; preds = %omp.precond.then30
>   %39 = load i32*, i32** %28, align 8, !tbaa !8
>   %_M_start.i.i156 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
>   %40 = load double*, double** %_M_start.i.i156, align 8, !tbaa !11
>   %41 = sext i32 %38 to i64
>   %42 = icmp sgt i32 %cond41, %38
>   %smax177 = select i1 %42, i32 %cond41, i32 %38
>   %43 = add i32 %smax177, 1
>   %44 = sub i32 %43, %38
>   %45 = sub i32 %smax177, %38
>   %xtraiter185 = and i32 %44, 7
>   %lcmp.mod186.not = icmp eq i32 %xtraiter185, 0
>   br i1 %lcmp.mod186.not, label %omp.inner.for.body45.prol.loopexit, label %omp.inner.for.body45.prol
> 
> omp.inner.for.body45.prol:                        ; preds = %omp.inner.for.body45.lr.ph, %omp.inner.for.body45.prol
>   %indvars.iv175.prol = phi i64 [ %indvars.iv.next176.prol, %omp.inner.for.body45.prol ], [ %41, %omp.inner.for.body45.lr.ph ]
>   %prol.iter187 = phi i32 [ %prol.iter187.sub, %omp.inner.for.body45.prol ], [ %xtraiter185, %omp.inner.for.body45.lr.ph ]
>   %add.ptr.i.i160.prol = getelementptr inbounds i32, i32* %39, i64 %indvars.iv175.prol
>   %46 = load i32, i32* %add.ptr.i.i160.prol, align 4, !tbaa !6
>   %conv.i155.prol = sext i32 %46 to i64
>   %add.ptr.i.i157.prol = getelementptr inbounds double, double* %40, i64 %conv.i155.prol
>   store double 0.000000e+00, double* %add.ptr.i.i157.prol, align 8, !tbaa !2
>   %indvars.iv.next176.prol = add nsw i64 %indvars.iv175.prol, 1
>   %prol.iter187.sub = add i32 %prol.iter187, -1
>   %prol.iter187.cmp.not = icmp eq i32 %prol.iter187.sub, 0
>   br i1 %prol.iter187.cmp.not, label %omp.inner.for.body45.prol.loopexit, label %omp.inner.for.body45.prol, !llvm.loop !86
> 
> omp.inner.for.body45.prol.loopexit:               ; preds = %omp.inner.for.body45.prol, %omp.inner.for.body45.lr.ph
>   %indvars.iv175.unr = phi i64 [ %41, %omp.inner.for.body45.lr.ph ], [ %indvars.iv.next176.prol, %omp.inner.for.body45.prol ]
>   %47 = icmp ult i32 %45, 7
>   br i1 %47, label %omp.loop.exit56, label %omp.inner.for.body45
> 
> omp.inner.for.body45:                             ; preds = %omp.inner.for.body45.prol.loopexit, %omp.inner.for.body45
>   %indvars.iv175 = phi i64 [ %indvars.iv.next176.7, %omp.inner.for.body45 ], [ %indvars.iv175.unr, %omp.inner.for.body45.prol.loopexit ]
>   %add.ptr.i.i160 = getelementptr inbounds i32, i32* %39, i64 %indvars.iv175
>   %48 = load i32, i32* %add.ptr.i.i160, align 4, !tbaa !6
>   %conv.i155 = sext i32 %48 to i64
>   %add.ptr.i.i157 = getelementptr inbounds double, double* %40, i64 %conv.i155
>   store double 0.000000e+00, double* %add.ptr.i.i157, align 8, !tbaa !2
>   %indvars.iv.next176 = add nsw i64 %indvars.iv175, 1
>   %add.ptr.i.i160.1 = getelementptr inbounds i32, i32* %39, i64 %indvars.iv.next176
>   %49 = load i32, i32* %add.ptr.i.i160.1, align 4, !tbaa !6
>   %conv.i155.1 = sext i32 %49 to i64
>   %add.ptr.i.i157.1 = getelementptr inbounds double, double* %40, i64 %conv.i155.1
>   store double 0.000000e+00, double* %add.ptr.i.i157.1, align 8, !tbaa !2
>   %indvars.iv.next176.1 = add nsw i64 %indvars.iv175, 2
>   %add.ptr.i.i160.2 = getelementptr inbounds i32, i32* %39, i64 %indvars.iv.next176.1
>   %50 = load i32, i32* %add.ptr.i.i160.2, align 4, !tbaa !6
>   %conv.i155.2 = sext i32 %50 to i64
>   %add.ptr.i.i157.2 = getelementptr inbounds double, double* %40, i64 %conv.i155.2
>   store double 0.000000e+00, double* %add.ptr.i.i157.2, align 8, !tbaa !2
>   %indvars.iv.next176.2 = add nsw i64 %indvars.iv175, 3
>   %add.ptr.i.i160.3 = getelementptr inbounds i32, i32* %39, i64 %indvars.iv.next176.2
>   %51 = load i32, i32* %add.ptr.i.i160.3, align 4, !tbaa !6
>   %conv.i155.3 = sext i32 %51 to i64
>   %add.ptr.i.i157.3 = getelementptr inbounds double, double* %40, i64 %conv.i155.3
>   store double 0.000000e+00, double* %add.ptr.i.i157.3, align 8, !tbaa !2
>   %indvars.iv.next176.3 = add nsw i64 %indvars.iv175, 4
>   %add.ptr.i.i160.4 = getelementptr inbounds i32, i32* %39, i64 %indvars.iv.next176.3
>   %52 = load i32, i32* %add.ptr.i.i160.4, align 4, !tbaa !6
>   %conv.i155.4 = sext i32 %52 to i64
>   %add.ptr.i.i157.4 = getelementptr inbounds double, double* %40, i64 %conv.i155.4
>   store double 0.000000e+00, double* %add.ptr.i.i157.4, align 8, !tbaa !2
>   %indvars.iv.next176.4 = add nsw i64 %indvars.iv175, 5
>   %add.ptr.i.i160.5 = getelementptr inbounds i32, i32* %39, i64 %indvars.iv.next176.4
>   %53 = load i32, i32* %add.ptr.i.i160.5, align 4, !tbaa !6
>   %conv.i155.5 = sext i32 %53 to i64
>   %add.ptr.i.i157.5 = getelementptr inbounds double, double* %40, i64 %conv.i155.5
>   store double 0.000000e+00, double* %add.ptr.i.i157.5, align 8, !tbaa !2
>   %indvars.iv.next176.5 = add nsw i64 %indvars.iv175, 6
>   %add.ptr.i.i160.6 = getelementptr inbounds i32, i32* %39, i64 %indvars.iv.next176.5
>   %54 = load i32, i32* %add.ptr.i.i160.6, align 4, !tbaa !6
>   %conv.i155.6 = sext i32 %54 to i64
>   %add.ptr.i.i157.6 = getelementptr inbounds double, double* %40, i64 %conv.i155.6
>   store double 0.000000e+00, double* %add.ptr.i.i157.6, align 8, !tbaa !2
>   %indvars.iv.next176.6 = add nsw i64 %indvars.iv175, 7
>   %add.ptr.i.i160.7 = getelementptr inbounds i32, i32* %39, i64 %indvars.iv.next176.6
>   %55 = load i32, i32* %add.ptr.i.i160.7, align 4, !tbaa !6
>   %conv.i155.7 = sext i32 %55 to i64
>   %add.ptr.i.i157.7 = getelementptr inbounds double, double* %40, i64 %conv.i155.7
>   store double 0.000000e+00, double* %add.ptr.i.i157.7, align 8, !tbaa !2
>   %indvars.iv.next176.7 = add nsw i64 %indvars.iv175, 8
>   %lftr.wideiv178.7 = trunc i64 %indvars.iv.next176.7 to i32
>   %exitcond179.not.7 = icmp eq i32 %43, %lftr.wideiv178.7
>   br i1 %exitcond179.not.7, label %omp.loop.exit56, label %omp.inner.for.body45
> 
> omp.loop.exit56:                                  ; preds = %omp.inner.for.body45.prol.loopexit, %omp.inner.for.body45, %omp.precond.then30
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %36)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %35) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %34) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %33) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #7
>   br label %if.end58
> 
> if.end58:                                         ; preds = %if.then19, %omp.loop.exit56, %if.end
>   %56 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0
>   %57 = load i32*, i32** %56, align 8, !tbaa !41
>   %_M_finish.i.i.i153 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 15, i32 0, i32 0, i32 0, i32 1
>   %58 = load i32*, i32** %_M_finish.i.i.i153, align 8, !tbaa !41
>   %cmp.i.i.i154 = icmp eq i32* %57, %58
>   br i1 %cmp.i.i.i154, label %if.end103, label %if.then64
> 
> if.then64:                                        ; preds = %if.end58
>   %59 = load i32, i32* %numNodeBC, align 4, !tbaa !6
>   %sub72 = add nsw i32 %59, -1
>   %cmp74 = icmp sgt i32 %59, 0
>   br i1 %cmp74, label %omp.precond.then75, label %if.end103
> 
> omp.precond.then75:                               ; preds = %if.then64
>   %60 = bitcast i32* %.omp.lb76 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %60) #7
>   store i32 0, i32* %.omp.lb76, align 4, !tbaa !6
>   %61 = bitcast i32* %.omp.ub77 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %61) #7
>   store i32 %sub72, i32* %.omp.ub77, align 4, !tbaa !6
>   %62 = bitcast i32* %.omp.stride78 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %62) #7
>   store i32 1, i32* %.omp.stride78, align 4, !tbaa !6
>   %63 = bitcast i32* %.omp.is_last79 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %63) #7
>   store i32 0, i32* %.omp.is_last79, align 4, !tbaa !6
>   %64 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %64, i32 34, i32* nonnull %.omp.is_last79, i32* nonnull %.omp.lb76, i32* nonnull %.omp.ub77, i32* nonnull %.omp.stride78, i32 1, i32 1) #7
>   %65 = load i32, i32* %.omp.ub77, align 4, !tbaa !6
>   %cmp82.not = icmp slt i32 %65, %59
>   %cond86 = select i1 %cmp82.not, i32 %65, i32 %sub72
>   store i32 %cond86, i32* %.omp.ub77, align 4, !tbaa !6
>   %66 = load i32, i32* %.omp.lb76, align 4, !tbaa !6
>   %cmp88.not169 = icmp sgt i32 %66, %cond86
>   br i1 %cmp88.not169, label %omp.loop.exit101, label %omp.inner.for.body90.lr.ph
> 
> omp.inner.for.body90.lr.ph:                       ; preds = %omp.precond.then75
>   %67 = load i32*, i32** %56, align 8, !tbaa !8
>   %_M_start.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 8, i32 0, i32 0, i32 0, i32 0
>   %68 = load double*, double** %_M_start.i.i, align 8, !tbaa !11
>   %69 = sext i32 %66 to i64
>   %70 = icmp sgt i32 %cond86, %66
>   %smax = select i1 %70, i32 %cond86, i32 %66
>   %71 = add i32 %smax, 1
>   %72 = sub i32 %71, %66
>   %73 = sub i32 %smax, %66
>   %xtraiter = and i32 %72, 7
>   %lcmp.mod.not = icmp eq i32 %xtraiter, 0
>   br i1 %lcmp.mod.not, label %omp.inner.for.body90.prol.loopexit, label %omp.inner.for.body90.prol
> 
> omp.inner.for.body90.prol:                        ; preds = %omp.inner.for.body90.lr.ph, %omp.inner.for.body90.prol
>   %indvars.iv.prol = phi i64 [ %indvars.iv.next.prol, %omp.inner.for.body90.prol ], [ %69, %omp.inner.for.body90.lr.ph ]
>   %prol.iter = phi i32 [ %prol.iter.sub, %omp.inner.for.body90.prol ], [ %xtraiter, %omp.inner.for.body90.lr.ph ]
>   %add.ptr.i.i152.prol = getelementptr inbounds i32, i32* %67, i64 %indvars.iv.prol
>   %74 = load i32, i32* %add.ptr.i.i152.prol, align 4, !tbaa !6
>   %conv.i.prol = sext i32 %74 to i64
>   %add.ptr.i.i.prol = getelementptr inbounds double, double* %68, i64 %conv.i.prol
>   store double 0.000000e+00, double* %add.ptr.i.i.prol, align 8, !tbaa !2
>   %indvars.iv.next.prol = add nsw i64 %indvars.iv.prol, 1
>   %prol.iter.sub = add i32 %prol.iter, -1
>   %prol.iter.cmp.not = icmp eq i32 %prol.iter.sub, 0
>   br i1 %prol.iter.cmp.not, label %omp.inner.for.body90.prol.loopexit, label %omp.inner.for.body90.prol, !llvm.loop !87
> 
> omp.inner.for.body90.prol.loopexit:               ; preds = %omp.inner.for.body90.prol, %omp.inner.for.body90.lr.ph
>   %indvars.iv.unr = phi i64 [ %69, %omp.inner.for.body90.lr.ph ], [ %indvars.iv.next.prol, %omp.inner.for.body90.prol ]
>   %75 = icmp ult i32 %73, 7
>   br i1 %75, label %omp.loop.exit101, label %omp.inner.for.body90
> 
> omp.inner.for.body90:                             ; preds = %omp.inner.for.body90.prol.loopexit, %omp.inner.for.body90
>   %indvars.iv = phi i64 [ %indvars.iv.next.7, %omp.inner.for.body90 ], [ %indvars.iv.unr, %omp.inner.for.body90.prol.loopexit ]
>   %add.ptr.i.i152 = getelementptr inbounds i32, i32* %67, i64 %indvars.iv
>   %76 = load i32, i32* %add.ptr.i.i152, align 4, !tbaa !6
>   %conv.i = sext i32 %76 to i64
>   %add.ptr.i.i = getelementptr inbounds double, double* %68, i64 %conv.i
>   store double 0.000000e+00, double* %add.ptr.i.i, align 8, !tbaa !2
>   %indvars.iv.next = add nsw i64 %indvars.iv, 1
>   %add.ptr.i.i152.1 = getelementptr inbounds i32, i32* %67, i64 %indvars.iv.next
>   %77 = load i32, i32* %add.ptr.i.i152.1, align 4, !tbaa !6
>   %conv.i.1 = sext i32 %77 to i64
>   %add.ptr.i.i.1 = getelementptr inbounds double, double* %68, i64 %conv.i.1
>   store double 0.000000e+00, double* %add.ptr.i.i.1, align 8, !tbaa !2
>   %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
>   %add.ptr.i.i152.2 = getelementptr inbounds i32, i32* %67, i64 %indvars.iv.next.1
>   %78 = load i32, i32* %add.ptr.i.i152.2, align 4, !tbaa !6
>   %conv.i.2 = sext i32 %78 to i64
>   %add.ptr.i.i.2 = getelementptr inbounds double, double* %68, i64 %conv.i.2
>   store double 0.000000e+00, double* %add.ptr.i.i.2, align 8, !tbaa !2
>   %indvars.iv.next.2 = add nsw i64 %indvars.iv, 3
>   %add.ptr.i.i152.3 = getelementptr inbounds i32, i32* %67, i64 %indvars.iv.next.2
>   %79 = load i32, i32* %add.ptr.i.i152.3, align 4, !tbaa !6
>   %conv.i.3 = sext i32 %79 to i64
>   %add.ptr.i.i.3 = getelementptr inbounds double, double* %68, i64 %conv.i.3
>   store double 0.000000e+00, double* %add.ptr.i.i.3, align 8, !tbaa !2
>   %indvars.iv.next.3 = add nsw i64 %indvars.iv, 4
>   %add.ptr.i.i152.4 = getelementptr inbounds i32, i32* %67, i64 %indvars.iv.next.3
>   %80 = load i32, i32* %add.ptr.i.i152.4, align 4, !tbaa !6
>   %conv.i.4 = sext i32 %80 to i64
>   %add.ptr.i.i.4 = getelementptr inbounds double, double* %68, i64 %conv.i.4
>   store double 0.000000e+00, double* %add.ptr.i.i.4, align 8, !tbaa !2
>   %indvars.iv.next.4 = add nsw i64 %indvars.iv, 5
>   %add.ptr.i.i152.5 = getelementptr inbounds i32, i32* %67, i64 %indvars.iv.next.4
>   %81 = load i32, i32* %add.ptr.i.i152.5, align 4, !tbaa !6
>   %conv.i.5 = sext i32 %81 to i64
>   %add.ptr.i.i.5 = getelementptr inbounds double, double* %68, i64 %conv.i.5
>   store double 0.000000e+00, double* %add.ptr.i.i.5, align 8, !tbaa !2
>   %indvars.iv.next.5 = add nsw i64 %indvars.iv, 6
>   %add.ptr.i.i152.6 = getelementptr inbounds i32, i32* %67, i64 %indvars.iv.next.5
>   %82 = load i32, i32* %add.ptr.i.i152.6, align 4, !tbaa !6
>   %conv.i.6 = sext i32 %82 to i64
>   %add.ptr.i.i.6 = getelementptr inbounds double, double* %68, i64 %conv.i.6
>   store double 0.000000e+00, double* %add.ptr.i.i.6, align 8, !tbaa !2
>   %indvars.iv.next.6 = add nsw i64 %indvars.iv, 7
>   %add.ptr.i.i152.7 = getelementptr inbounds i32, i32* %67, i64 %indvars.iv.next.6
>   %83 = load i32, i32* %add.ptr.i.i152.7, align 4, !tbaa !6
>   %conv.i.7 = sext i32 %83 to i64
>   %add.ptr.i.i.7 = getelementptr inbounds double, double* %68, i64 %conv.i.7
>   store double 0.000000e+00, double* %add.ptr.i.i.7, align 8, !tbaa !2
>   %indvars.iv.next.7 = add nsw i64 %indvars.iv, 8
>   %lftr.wideiv.7 = trunc i64 %indvars.iv.next.7 to i32
>   %exitcond.not.7 = icmp eq i32 %71, %lftr.wideiv.7
>   br i1 %exitcond.not.7, label %omp.loop.exit101, label %omp.inner.for.body90
> 
> omp.loop.exit101:                                 ; preds = %omp.inner.for.body90.prol.loopexit, %omp.inner.for.body90, %omp.precond.then75
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %64)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %63) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %62) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %61) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %60) #7
>   br label %if.end103
11882c8540
< 227:                                              ; preds = %225
---
> if.end103:                                        ; preds = %if.then64, %omp.loop.exit101, %if.end58
11884,11890d8541
< 
< 228:                                              ; preds = %225, %4
<   %229 = landingpad { i8*, i32 }
<           catch i8* null
<   %230 = extractvalue { i8*, i32 } %229, 0
<   call void @__clang_call_terminate(i8* %230) #29
<   unreachable
11894,12009c8545,8647
< define internal void @.omp_outlined..37(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, i64 %2, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %3, double* nocapture nonnull readonly align 8 dereferenceable(8) %4, double* nocapture nonnull readonly align 8 dereferenceable(8) %5) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %7 = alloca i32, align 4
<   %8 = alloca i32, align 4
<   %9 = alloca i32, align 4
<   %10 = alloca i32, align 4
<   %11 = trunc i64 %2 to i32
<   %12 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcVelocityForNodesR6DomainddiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %12)
<           to label %13 unwind label %87
< 
< 13:                                               ; preds = %6
<   %14 = add nsw i32 %11, -1
<   %15 = icmp sgt i32 %11, 0
<   br i1 %15, label %18, label %16
< 
< 16:                                               ; preds = %13
<   %17 = load i32, i32* %0, align 4, !tbaa !12
<   br label %83
< 
< 18:                                               ; preds = %13
<   %19 = bitcast i32* %7 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #10
<   store i32 0, i32* %7, align 4, !tbaa !12
<   %20 = bitcast i32* %8 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #10
<   store i32 %14, i32* %8, align 4, !tbaa !12
<   %21 = bitcast i32* %9 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #10
<   store i32 1, i32* %9, align 4, !tbaa !12
<   %22 = bitcast i32* %10 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22) #10
<   store i32 0, i32* %10, align 4, !tbaa !12
<   %23 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %23, i32 34, i32* nonnull %10, i32* nonnull %7, i32* nonnull %8, i32* nonnull %9, i32 1, i32 1) #10
<   %24 = load i32, i32* %8, align 4, !tbaa !12
<   %25 = icmp slt i32 %24, %11
<   %26 = select i1 %25, i32 %24, i32 %14
<   store i32 %26, i32* %8, align 4, !tbaa !12
<   %27 = load i32, i32* %7, align 4, !tbaa !12
<   %28 = icmp sgt i32 %27, %26
<   br i1 %28, label %82, label %29
< 
< 29:                                               ; preds = %18
<   %30 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 3, i32 0, i32 0, i32 0
<   %31 = load double*, double** %30, align 8, !tbaa !22
<   %32 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 6, i32 0, i32 0, i32 0
<   %33 = load double*, double** %32, align 8, !tbaa !22
<   %34 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 4, i32 0, i32 0, i32 0
<   %35 = load double*, double** %34, align 8, !tbaa !22
<   %36 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 7, i32 0, i32 0, i32 0
<   %37 = load double*, double** %36, align 8, !tbaa !22
<   %38 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 5, i32 0, i32 0, i32 0
<   %39 = load double*, double** %38, align 8, !tbaa !22
<   %40 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 8, i32 0, i32 0, i32 0
<   %41 = load double*, double** %40, align 8, !tbaa !22
<   %42 = sext i32 %27 to i64
<   %43 = add i32 %26, 1
<   br label %44
< 
< 44:                                               ; preds = %29, %44
<   %45 = phi i64 [ %42, %29 ], [ %79, %44 ]
<   %46 = getelementptr inbounds double, double* %31, i64 %45
<   %47 = load double, double* %46, align 8, !tbaa !2
<   %48 = getelementptr inbounds double, double* %33, i64 %45
<   %49 = load double, double* %48, align 8, !tbaa !2
<   %50 = load double, double* %4, align 8, !tbaa !2
<   %51 = fmul double %49, %50
<   %52 = fadd double %47, %51
<   %53 = call double @llvm.fabs.f64(double %52) #10
<   %54 = load double, double* %5, align 8, !tbaa !2
<   %55 = fcmp olt double %53, %54
<   %56 = select i1 %55, double 0.000000e+00, double %52
<   store double %56, double* %46, align 8, !tbaa !2
<   %57 = getelementptr inbounds double, double* %35, i64 %45
<   %58 = load double, double* %57, align 8, !tbaa !2
<   %59 = getelementptr inbounds double, double* %37, i64 %45
<   %60 = load double, double* %59, align 8, !tbaa !2
<   %61 = load double, double* %4, align 8, !tbaa !2
<   %62 = fmul double %60, %61
<   %63 = fadd double %58, %62
<   %64 = call double @llvm.fabs.f64(double %63) #10
<   %65 = load double, double* %5, align 8, !tbaa !2
<   %66 = fcmp olt double %64, %65
<   %67 = select i1 %66, double 0.000000e+00, double %63
<   store double %67, double* %57, align 8, !tbaa !2
<   %68 = getelementptr inbounds double, double* %39, i64 %45
<   %69 = load double, double* %68, align 8, !tbaa !2
<   %70 = getelementptr inbounds double, double* %41, i64 %45
<   %71 = load double, double* %70, align 8, !tbaa !2
<   %72 = load double, double* %4, align 8, !tbaa !2
<   %73 = fmul double %71, %72
<   %74 = fadd double %69, %73
<   %75 = call double @llvm.fabs.f64(double %74) #10
<   %76 = load double, double* %5, align 8, !tbaa !2
<   %77 = fcmp olt double %75, %76
<   %78 = select i1 %77, double 0.000000e+00, double %74
<   store double %78, double* %68, align 8, !tbaa !2
<   %79 = add nsw i64 %45, 1
<   %80 = trunc i64 %79 to i32
<   %81 = icmp eq i32 %43, %80
<   br i1 %81, label %82, label %44
< 
< 82:                                               ; preds = %44, %18
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %23)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #10
<   br label %83
< 
< 83:                                               ; preds = %16, %82
<   %84 = phi i32 [ %17, %16 ], [ %23, %82 ]
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %84)
<   %85 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcVelocityForNodesR6DomainddiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %85)
<           to label %86 unwind label %87
---
> define internal void @.omp_outlined..27(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i64 %numNode, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %domain, double* nocapture nonnull readonly align 8 dereferenceable(8) %dt, double* nocapture nonnull readonly align 8 dereferenceable(8) %u_cut) #6 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
> entry:
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %numNode.addr.sroa.0.0.extract.trunc = trunc i64 %numNode to i32
>   %sub3 = add nsw i32 %numNode.addr.sroa.0.0.extract.trunc, -1
>   %cmp = icmp sgt i32 %numNode.addr.sroa.0.0.extract.trunc, 0
>   br i1 %cmp, label %omp.precond.then, label %omp.precond.end
> 
> omp.precond.then:                                 ; preds = %entry
>   %0 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %1 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #7
>   store i32 %sub3, i32* %.omp.ub, align 4, !tbaa !6
>   %2 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %3 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   %4 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %4, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %5 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp5.not = icmp slt i32 %5, %numNode.addr.sroa.0.0.extract.trunc
>   %cond = select i1 %cmp5.not, i32 %5, i32 %sub3
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %6 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp6.not91 = icmp sgt i32 %6, %cond
>   br i1 %cmp6.not91, label %omp.loop.exit, label %omp.inner.for.body.lr.ph
> 
> omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
>   %_M_start.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
>   %7 = load double*, double** %_M_start.i.i, align 8, !tbaa !11
>   %_M_start.i.i89 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
>   %8 = load double*, double** %_M_start.i.i89, align 8, !tbaa !11
>   %_M_start.i.i83 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
>   %9 = load double*, double** %_M_start.i.i83, align 8, !tbaa !11
>   %_M_start.i.i80 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
>   %10 = load double*, double** %_M_start.i.i80, align 8, !tbaa !11
>   %_M_start.i.i74 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
>   %11 = load double*, double** %_M_start.i.i74, align 8, !tbaa !11
>   %_M_start.i.i71 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 8, i32 0, i32 0, i32 0, i32 0
>   %12 = load double*, double** %_M_start.i.i71, align 8, !tbaa !11
>   %13 = sext i32 %6 to i64
>   %14 = icmp sgt i32 %cond, %6
>   %smax = select i1 %14, i32 %cond, i32 %6
>   %15 = add i32 %smax, 1
>   br label %omp.inner.for.body
> 
> omp.inner.for.body:                               ; preds = %omp.inner.for.body, %omp.inner.for.body.lr.ph
>   %indvars.iv = phi i64 [ %indvars.iv.next, %omp.inner.for.body ], [ %13, %omp.inner.for.body.lr.ph ]
>   %add.ptr.i.i = getelementptr inbounds double, double* %7, i64 %indvars.iv
>   %16 = load double, double* %add.ptr.i.i, align 8, !tbaa !2
>   %add.ptr.i.i90 = getelementptr inbounds double, double* %8, i64 %indvars.iv
>   %17 = load double, double* %add.ptr.i.i90, align 8, !tbaa !2
>   %18 = load double, double* %dt, align 8, !tbaa !2
>   %mul8 = fmul double %17, %18
>   %add9 = fadd double %16, %mul8
>   %19 = call double @llvm.fabs.f64(double %add9) #7
>   %20 = load double, double* %u_cut, align 8, !tbaa !2
>   %cmp11 = fcmp olt double %19, %20
>   %xdtmp.0 = select i1 %cmp11, double 0.000000e+00, double %add9
>   store double %xdtmp.0, double* %add.ptr.i.i, align 8, !tbaa !2
>   %add.ptr.i.i84 = getelementptr inbounds double, double* %9, i64 %indvars.iv
>   %21 = load double, double* %add.ptr.i.i84, align 8, !tbaa !2
>   %add.ptr.i.i81 = getelementptr inbounds double, double* %10, i64 %indvars.iv
>   %22 = load double, double* %add.ptr.i.i81, align 8, !tbaa !2
>   %23 = load double, double* %dt, align 8, !tbaa !2
>   %mul15 = fmul double %22, %23
>   %add16 = fadd double %21, %mul15
>   %24 = call double @llvm.fabs.f64(double %add16) #7
>   %25 = load double, double* %u_cut, align 8, !tbaa !2
>   %cmp19 = fcmp olt double %24, %25
>   %ydtmp.0 = select i1 %cmp19, double 0.000000e+00, double %add16
>   store double %ydtmp.0, double* %add.ptr.i.i84, align 8, !tbaa !2
>   %add.ptr.i.i75 = getelementptr inbounds double, double* %11, i64 %indvars.iv
>   %26 = load double, double* %add.ptr.i.i75, align 8, !tbaa !2
>   %add.ptr.i.i72 = getelementptr inbounds double, double* %12, i64 %indvars.iv
>   %27 = load double, double* %add.ptr.i.i72, align 8, !tbaa !2
>   %28 = load double, double* %dt, align 8, !tbaa !2
>   %mul25 = fmul double %27, %28
>   %add26 = fadd double %26, %mul25
>   %29 = call double @llvm.fabs.f64(double %add26) #7
>   %30 = load double, double* %u_cut, align 8, !tbaa !2
>   %cmp29 = fcmp olt double %29, %30
>   %zdtmp.0 = select i1 %cmp29, double 0.000000e+00, double %add26
>   store double %zdtmp.0, double* %add.ptr.i.i75, align 8, !tbaa !2
>   %indvars.iv.next = add nsw i64 %indvars.iv, 1
>   %lftr.wideiv = trunc i64 %indvars.iv.next to i32
>   %exitcond.not = icmp eq i32 %15, %lftr.wideiv
>   br i1 %exitcond.not, label %omp.loop.exit, label %omp.inner.for.body
> 
> omp.loop.exit:                                    ; preds = %omp.inner.for.body, %omp.precond.then
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %4)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #7
>   br label %omp.precond.end
12011c8649
< 86:                                               ; preds = %83
---
> omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
12013,12019d8650
< 
< 87:                                               ; preds = %83, %6
<   %88 = landingpad { i8*, i32 }
<           catch i8* null
<   %89 = extractvalue { i8*, i32 } %88, 0
<   call void @__clang_call_terminate(i8* %89) #29
<   unreachable
12022,12023c8653,8654
< ; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
< declare double @llvm.fabs.f64(double) #21
---
> ; Function Attrs: nounwind readnone speculatable willreturn
> declare double @llvm.fabs.f64(double) #18
12026,12129c8657,8808
< define internal void @.omp_outlined..39(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, i64 %2, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %3, double* nocapture nonnull readonly align 8 dereferenceable(8) %4) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %6 = alloca i32, align 4
<   %7 = alloca i32, align 4
<   %8 = alloca i32, align 4
<   %9 = alloca i32, align 4
<   %10 = trunc i64 %2 to i32
<   %11 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcPositionForNodesR6DomaindiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %11)
<           to label %12 unwind label %74
< 
< 12:                                               ; preds = %5
<   %13 = add nsw i32 %10, -1
<   %14 = icmp sgt i32 %10, 0
<   br i1 %14, label %17, label %15
< 
< 15:                                               ; preds = %12
<   %16 = load i32, i32* %0, align 4, !tbaa !12
<   br label %70
< 
< 17:                                               ; preds = %12
<   %18 = bitcast i32* %6 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #10
<   store i32 0, i32* %6, align 4, !tbaa !12
<   %19 = bitcast i32* %7 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #10
<   store i32 %13, i32* %7, align 4, !tbaa !12
<   %20 = bitcast i32* %8 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #10
<   store i32 1, i32* %8, align 4, !tbaa !12
<   %21 = bitcast i32* %9 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #10
<   store i32 0, i32* %9, align 4, !tbaa !12
<   %22 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %22, i32 34, i32* nonnull %9, i32* nonnull %6, i32* nonnull %7, i32* nonnull %8, i32 1, i32 1) #10
<   %23 = load i32, i32* %7, align 4, !tbaa !12
<   %24 = icmp slt i32 %23, %10
<   %25 = select i1 %24, i32 %23, i32 %13
<   store i32 %25, i32* %7, align 4, !tbaa !12
<   %26 = load i32, i32* %6, align 4, !tbaa !12
<   %27 = icmp sgt i32 %26, %25
<   br i1 %27, label %69, label %28
< 
< 28:                                               ; preds = %17
<   %29 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 3, i32 0, i32 0, i32 0
<   %30 = load double*, double** %29, align 8, !tbaa !22
<   %31 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 0, i32 0, i32 0, i32 0
<   %32 = load double*, double** %31, align 8, !tbaa !22
<   %33 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 4, i32 0, i32 0, i32 0
<   %34 = load double*, double** %33, align 8, !tbaa !22
<   %35 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 1, i32 0, i32 0, i32 0
<   %36 = load double*, double** %35, align 8, !tbaa !22
<   %37 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 5, i32 0, i32 0, i32 0
<   %38 = load double*, double** %37, align 8, !tbaa !22
<   %39 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 2, i32 0, i32 0, i32 0
<   %40 = load double*, double** %39, align 8, !tbaa !22
<   %41 = sext i32 %26 to i64
<   %42 = add i32 %25, 1
<   br label %43
< 
< 43:                                               ; preds = %28, %43
<   %44 = phi i64 [ %41, %28 ], [ %66, %43 ]
<   %45 = getelementptr inbounds double, double* %30, i64 %44
<   %46 = load double, double* %45, align 8, !tbaa !2
<   %47 = load double, double* %4, align 8, !tbaa !2
<   %48 = fmul double %46, %47
<   %49 = getelementptr inbounds double, double* %32, i64 %44
<   %50 = load double, double* %49, align 8, !tbaa !2
<   %51 = fadd double %48, %50
<   store double %51, double* %49, align 8, !tbaa !2
<   %52 = getelementptr inbounds double, double* %34, i64 %44
<   %53 = load double, double* %52, align 8, !tbaa !2
<   %54 = load double, double* %4, align 8, !tbaa !2
<   %55 = fmul double %53, %54
<   %56 = getelementptr inbounds double, double* %36, i64 %44
<   %57 = load double, double* %56, align 8, !tbaa !2
<   %58 = fadd double %55, %57
<   store double %58, double* %56, align 8, !tbaa !2
<   %59 = getelementptr inbounds double, double* %38, i64 %44
<   %60 = load double, double* %59, align 8, !tbaa !2
<   %61 = load double, double* %4, align 8, !tbaa !2
<   %62 = fmul double %60, %61
<   %63 = getelementptr inbounds double, double* %40, i64 %44
<   %64 = load double, double* %63, align 8, !tbaa !2
<   %65 = fadd double %62, %64
<   store double %65, double* %63, align 8, !tbaa !2
<   %66 = add nsw i64 %44, 1
<   %67 = trunc i64 %66 to i32
<   %68 = icmp eq i32 %42, %67
<   br i1 %68, label %69, label %43
< 
< 69:                                               ; preds = %43, %17
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %22)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #10
<   br label %70
< 
< 70:                                               ; preds = %15, %69
<   %71 = phi i32 [ %16, %15 ], [ %22, %69 ]
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %71)
<   %72 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcPositionForNodesR6DomaindiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %72)
<           to label %73 unwind label %74
---
> define internal void @.omp_outlined..28(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i64 %numNode, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %domain, double* nocapture nonnull readonly align 8 dereferenceable(8) %dt) #6 {
> entry:
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %numNode.addr.sroa.0.0.extract.trunc = trunc i64 %numNode to i32
>   %sub3 = add nsw i32 %numNode.addr.sroa.0.0.extract.trunc, -1
>   %cmp = icmp sgt i32 %numNode.addr.sroa.0.0.extract.trunc, 0
>   br i1 %cmp, label %omp.precond.then, label %omp.precond.end
> 
> omp.precond.then:                                 ; preds = %entry
>   %0 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %1 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #7
>   store i32 %sub3, i32* %.omp.ub, align 4, !tbaa !6
>   %2 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %3 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   %4 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %4, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %5 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp5.not = icmp slt i32 %5, %numNode.addr.sroa.0.0.extract.trunc
>   %cond = select i1 %cmp5.not, i32 %5, i32 %sub3
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %6 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp6.not55 = icmp sgt i32 %6, %cond
>   br i1 %cmp6.not55, label %omp.loop.exit, label %omp.inner.for.body.lr.ph
> 
> omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
>   %_M_start.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
>   %7 = load double*, double** %_M_start.i.i, align 8, !tbaa !11
>   %_M_start.i.i53 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
>   %8 = load double*, double** %_M_start.i.i53, align 8, !tbaa !11
>   %_M_start.i.i50 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
>   %9 = load double*, double** %_M_start.i.i50, align 8, !tbaa !11
>   %_M_start.i.i47 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
>   %10 = load double*, double** %_M_start.i.i47, align 8, !tbaa !11
>   %_M_start.i.i44 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
>   %11 = load double*, double** %_M_start.i.i44, align 8, !tbaa !11
>   %_M_start.i.i41 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
>   %12 = load double*, double** %_M_start.i.i41, align 8, !tbaa !11
>   %13 = sext i32 %6 to i64
>   %14 = icmp sgt i32 %cond, %6
>   %smax = select i1 %14, i32 %cond, i32 %6
>   %15 = add i32 %smax, 1
>   %16 = sub i32 %15, %6
>   %xtraiter = and i32 %16, 1
>   %lcmp.mod.not = icmp eq i32 %xtraiter, 0
>   br i1 %lcmp.mod.not, label %omp.inner.for.body.prol.loopexit, label %omp.inner.for.body.prol
> 
> omp.inner.for.body.prol:                          ; preds = %omp.inner.for.body.lr.ph
>   %add.ptr.i.i.prol = getelementptr inbounds double, double* %7, i64 %13
>   %17 = load double, double* %add.ptr.i.i.prol, align 8, !tbaa !2
>   %18 = load double, double* %dt, align 8, !tbaa !2
>   %mul7.prol = fmul double %17, %18
>   %add.ptr.i.i54.prol = getelementptr inbounds double, double* %8, i64 %13
>   %19 = load double, double* %add.ptr.i.i54.prol, align 8, !tbaa !2
>   %add9.prol = fadd double %mul7.prol, %19
>   store double %add9.prol, double* %add.ptr.i.i54.prol, align 8, !tbaa !2
>   %add.ptr.i.i51.prol = getelementptr inbounds double, double* %9, i64 %13
>   %20 = load double, double* %add.ptr.i.i51.prol, align 8, !tbaa !2
>   %21 = load double, double* %dt, align 8, !tbaa !2
>   %mul11.prol = fmul double %20, %21
>   %add.ptr.i.i48.prol = getelementptr inbounds double, double* %10, i64 %13
>   %22 = load double, double* %add.ptr.i.i48.prol, align 8, !tbaa !2
>   %add13.prol = fadd double %mul11.prol, %22
>   store double %add13.prol, double* %add.ptr.i.i48.prol, align 8, !tbaa !2
>   %add.ptr.i.i45.prol = getelementptr inbounds double, double* %11, i64 %13
>   %23 = load double, double* %add.ptr.i.i45.prol, align 8, !tbaa !2
>   %24 = load double, double* %dt, align 8, !tbaa !2
>   %mul15.prol = fmul double %23, %24
>   %add.ptr.i.i42.prol = getelementptr inbounds double, double* %12, i64 %13
>   %25 = load double, double* %add.ptr.i.i42.prol, align 8, !tbaa !2
>   %add17.prol = fadd double %mul15.prol, %25
>   store double %add17.prol, double* %add.ptr.i.i42.prol, align 8, !tbaa !2
>   %indvars.iv.next.prol = add nsw i64 %13, 1
>   br label %omp.inner.for.body.prol.loopexit
> 
> omp.inner.for.body.prol.loopexit:                 ; preds = %omp.inner.for.body.lr.ph, %omp.inner.for.body.prol
>   %indvars.iv.unr = phi i64 [ %13, %omp.inner.for.body.lr.ph ], [ %indvars.iv.next.prol, %omp.inner.for.body.prol ]
>   %.not = icmp slt i32 %6, %cond
>   br i1 %.not, label %omp.inner.for.body, label %omp.loop.exit
> 
> omp.inner.for.body:                               ; preds = %omp.inner.for.body.prol.loopexit, %omp.inner.for.body
>   %indvars.iv = phi i64 [ %indvars.iv.next.1, %omp.inner.for.body ], [ %indvars.iv.unr, %omp.inner.for.body.prol.loopexit ]
>   %add.ptr.i.i = getelementptr inbounds double, double* %7, i64 %indvars.iv
>   %26 = load double, double* %add.ptr.i.i, align 8, !tbaa !2
>   %27 = load double, double* %dt, align 8, !tbaa !2
>   %mul7 = fmul double %26, %27
>   %add.ptr.i.i54 = getelementptr inbounds double, double* %8, i64 %indvars.iv
>   %28 = load double, double* %add.ptr.i.i54, align 8, !tbaa !2
>   %add9 = fadd double %mul7, %28
>   store double %add9, double* %add.ptr.i.i54, align 8, !tbaa !2
>   %add.ptr.i.i51 = getelementptr inbounds double, double* %9, i64 %indvars.iv
>   %29 = load double, double* %add.ptr.i.i51, align 8, !tbaa !2
>   %30 = load double, double* %dt, align 8, !tbaa !2
>   %mul11 = fmul double %29, %30
>   %add.ptr.i.i48 = getelementptr inbounds double, double* %10, i64 %indvars.iv
>   %31 = load double, double* %add.ptr.i.i48, align 8, !tbaa !2
>   %add13 = fadd double %mul11, %31
>   store double %add13, double* %add.ptr.i.i48, align 8, !tbaa !2
>   %add.ptr.i.i45 = getelementptr inbounds double, double* %11, i64 %indvars.iv
>   %32 = load double, double* %add.ptr.i.i45, align 8, !tbaa !2
>   %33 = load double, double* %dt, align 8, !tbaa !2
>   %mul15 = fmul double %32, %33
>   %add.ptr.i.i42 = getelementptr inbounds double, double* %12, i64 %indvars.iv
>   %34 = load double, double* %add.ptr.i.i42, align 8, !tbaa !2
>   %add17 = fadd double %mul15, %34
>   store double %add17, double* %add.ptr.i.i42, align 8, !tbaa !2
>   %indvars.iv.next = add nsw i64 %indvars.iv, 1
>   %add.ptr.i.i.1 = getelementptr inbounds double, double* %7, i64 %indvars.iv.next
>   %35 = load double, double* %add.ptr.i.i.1, align 8, !tbaa !2
>   %36 = load double, double* %dt, align 8, !tbaa !2
>   %mul7.1 = fmul double %35, %36
>   %add.ptr.i.i54.1 = getelementptr inbounds double, double* %8, i64 %indvars.iv.next
>   %37 = load double, double* %add.ptr.i.i54.1, align 8, !tbaa !2
>   %add9.1 = fadd double %mul7.1, %37
>   store double %add9.1, double* %add.ptr.i.i54.1, align 8, !tbaa !2
>   %add.ptr.i.i51.1 = getelementptr inbounds double, double* %9, i64 %indvars.iv.next
>   %38 = load double, double* %add.ptr.i.i51.1, align 8, !tbaa !2
>   %39 = load double, double* %dt, align 8, !tbaa !2
>   %mul11.1 = fmul double %38, %39
>   %add.ptr.i.i48.1 = getelementptr inbounds double, double* %10, i64 %indvars.iv.next
>   %40 = load double, double* %add.ptr.i.i48.1, align 8, !tbaa !2
>   %add13.1 = fadd double %mul11.1, %40
>   store double %add13.1, double* %add.ptr.i.i48.1, align 8, !tbaa !2
>   %add.ptr.i.i45.1 = getelementptr inbounds double, double* %11, i64 %indvars.iv.next
>   %41 = load double, double* %add.ptr.i.i45.1, align 8, !tbaa !2
>   %42 = load double, double* %dt, align 8, !tbaa !2
>   %mul15.1 = fmul double %41, %42
>   %add.ptr.i.i42.1 = getelementptr inbounds double, double* %12, i64 %indvars.iv.next
>   %43 = load double, double* %add.ptr.i.i42.1, align 8, !tbaa !2
>   %add17.1 = fadd double %mul15.1, %43
>   store double %add17.1, double* %add.ptr.i.i42.1, align 8, !tbaa !2
>   %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
>   %lftr.wideiv.1 = trunc i64 %indvars.iv.next.1 to i32
>   %exitcond.not.1 = icmp eq i32 %15, %lftr.wideiv.1
>   br i1 %exitcond.not.1, label %omp.loop.exit, label %omp.inner.for.body
> 
> omp.loop.exit:                                    ; preds = %omp.inner.for.body.prol.loopexit, %omp.inner.for.body, %omp.precond.then
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %4)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #7
>   br label %omp.precond.end
12131c8810
< 73:                                               ; preds = %70
---
> omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
12133,12139d8811
< 
< 74:                                               ; preds = %70, %5
<   %75 = landingpad { i8*, i32 }
<           catch i8* null
<   %76 = extractvalue { i8*, i32 } %75, 0
<   call void @__clang_call_terminate(i8* %76) #29
<   unreachable
12143,12231c8815,8897
< define internal void @.omp_outlined..41(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, i64 %2, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %3) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %5 = alloca i32, align 4
<   %6 = alloca i32, align 4
<   %7 = alloca i32, align 4
<   %8 = alloca i32, align 4
<   %9 = trunc i64 %2 to i32
<   %10 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcLagrangeElementsR6DomainE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %10)
<           to label %11 unwind label %71
< 
< 11:                                               ; preds = %4
<   %12 = add nsw i32 %9, -1
<   %13 = icmp sgt i32 %9, 0
<   br i1 %13, label %16, label %14
< 
< 14:                                               ; preds = %11
<   %15 = load i32, i32* %0, align 4, !tbaa !12
<   br label %67
< 
< 16:                                               ; preds = %11
<   %17 = bitcast i32* %5 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #10
<   store i32 0, i32* %5, align 4, !tbaa !12
<   %18 = bitcast i32* %6 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #10
<   store i32 %12, i32* %6, align 4, !tbaa !12
<   %19 = bitcast i32* %7 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #10
<   store i32 1, i32* %7, align 4, !tbaa !12
<   %20 = bitcast i32* %8 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #10
<   store i32 0, i32* %8, align 4, !tbaa !12
<   %21 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %21, i32 34, i32* nonnull %8, i32* nonnull %5, i32* nonnull %6, i32* nonnull %7, i32 1, i32 1) #10
<   %22 = load i32, i32* %6, align 4, !tbaa !12
<   %23 = icmp slt i32 %22, %9
<   %24 = select i1 %23, i32 %22, i32 %12
<   store i32 %24, i32* %6, align 4, !tbaa !12
<   %25 = load i32, i32* %5, align 4, !tbaa !12
<   %26 = icmp sgt i32 %25, %24
<   br i1 %26, label %66, label %27
< 
< 27:                                               ; preds = %16
<   %28 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 29
<   %29 = load double*, double** %28, align 8, !tbaa !25
<   %30 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 30
<   %31 = load double*, double** %30, align 8, !tbaa !29
<   %32 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 31
<   %33 = load double*, double** %32, align 8, !tbaa !30
<   %34 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 47, i32 0, i32 0, i32 0
<   %35 = load double*, double** %34, align 8, !tbaa !22
<   %36 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 45, i32 0, i32 0, i32 0
<   %37 = load double*, double** %36, align 8, !tbaa !22
<   %38 = sext i32 %25 to i64
<   %39 = add i32 %24, 1
<   br label %44
< 
< 40:                                               ; preds = %44
<   %41 = add nsw i64 %45, 1
<   %42 = trunc i64 %41 to i32
<   %43 = icmp eq i32 %39, %42
<   br i1 %43, label %66, label %44
< 
< 44:                                               ; preds = %27, %40
<   %45 = phi i64 [ %38, %27 ], [ %41, %40 ]
<   %46 = getelementptr inbounds double, double* %29, i64 %45
<   %47 = load double, double* %46, align 8, !tbaa !2
<   %48 = getelementptr inbounds double, double* %31, i64 %45
<   %49 = load double, double* %48, align 8, !tbaa !2
<   %50 = fadd double %47, %49
<   %51 = getelementptr inbounds double, double* %33, i64 %45
<   %52 = load double, double* %51, align 8, !tbaa !2
<   %53 = fadd double %50, %52
<   %54 = fdiv double %53, 3.000000e+00
<   %55 = getelementptr inbounds double, double* %35, i64 %45
<   store double %53, double* %55, align 8, !tbaa !2
<   %56 = load double, double* %46, align 8, !tbaa !2
<   %57 = fsub double %56, %54
<   store double %57, double* %46, align 8, !tbaa !2
<   %58 = load double, double* %48, align 8, !tbaa !2
<   %59 = fsub double %58, %54
<   store double %59, double* %48, align 8, !tbaa !2
<   %60 = load double, double* %51, align 8, !tbaa !2
<   %61 = fsub double %60, %54
<   store double %61, double* %51, align 8, !tbaa !2
<   %62 = getelementptr inbounds double, double* %37, i64 %45
<   %63 = load double, double* %62, align 8, !tbaa !2
<   %64 = fcmp ugt double %63, 0.000000e+00
<   br i1 %64, label %40, label %65
---
> define internal void @.omp_outlined..29(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i64 %numElem, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %domain) #6 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
> entry:
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %numElem.addr.sroa.0.0.extract.trunc = trunc i64 %numElem to i32
>   %sub3 = add nsw i32 %numElem.addr.sroa.0.0.extract.trunc, -1
>   %cmp = icmp sgt i32 %numElem.addr.sroa.0.0.extract.trunc, 0
>   br i1 %cmp, label %omp.precond.then, label %omp.precond.end
> 
> omp.precond.then:                                 ; preds = %entry
>   %0 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %1 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #7
>   store i32 %sub3, i32* %.omp.ub, align 4, !tbaa !6
>   %2 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %3 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   %4 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %4, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %5 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp5.not = icmp slt i32 %5, %numElem.addr.sroa.0.0.extract.trunc
>   %cond = select i1 %cmp5.not, i32 %5, i32 %sub3
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %6 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp6.not68 = icmp sgt i32 %6, %cond
>   br i1 %cmp6.not68, label %omp.loop.exit, label %omp.inner.for.body.lr.ph
> 
> omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
>   %m_dxx.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 29
>   %7 = load double*, double** %m_dxx.i, align 8, !tbaa !13
>   %m_dyy.i65 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 30
>   %8 = load double*, double** %m_dyy.i65, align 8, !tbaa !17
>   %m_dzz.i62 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 31
>   %9 = load double*, double** %m_dzz.i62, align 8, !tbaa !18
>   %_M_start.i.i60 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 47, i32 0, i32 0, i32 0, i32 0
>   %10 = load double*, double** %_M_start.i.i60, align 8, !tbaa !11
>   %_M_start.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 45, i32 0, i32 0, i32 0, i32 0
>   %11 = load double*, double** %_M_start.i.i, align 8, !tbaa !11
>   %12 = sext i32 %6 to i64
>   %13 = icmp sgt i32 %cond, %6
>   %smax = select i1 %13, i32 %cond, i32 %6
>   %14 = add i32 %smax, 1
>   br label %omp.inner.for.body
> 
> omp.inner.for.cond:                               ; preds = %omp.inner.for.body
>   %indvars.iv.next = add nsw i64 %indvars.iv, 1
>   %lftr.wideiv = trunc i64 %indvars.iv.next to i32
>   %exitcond.not = icmp eq i32 %14, %lftr.wideiv
>   br i1 %exitcond.not, label %omp.loop.exit, label %omp.inner.for.body
> 
> omp.inner.for.body:                               ; preds = %omp.inner.for.cond, %omp.inner.for.body.lr.ph
>   %indvars.iv = phi i64 [ %indvars.iv.next, %omp.inner.for.cond ], [ %12, %omp.inner.for.body.lr.ph ]
>   %arrayidx.i = getelementptr inbounds double, double* %7, i64 %indvars.iv
>   %15 = load double, double* %arrayidx.i, align 8, !tbaa !2
>   %arrayidx.i67 = getelementptr inbounds double, double* %8, i64 %indvars.iv
>   %16 = load double, double* %arrayidx.i67, align 8, !tbaa !2
>   %add8 = fadd double %15, %16
>   %arrayidx.i64 = getelementptr inbounds double, double* %9, i64 %indvars.iv
>   %17 = load double, double* %arrayidx.i64, align 8, !tbaa !2
>   %add10 = fadd double %add8, %17
>   %div11 = fdiv double %add10, 3.000000e+00
>   %add.ptr.i.i61 = getelementptr inbounds double, double* %10, i64 %indvars.iv
>   store double %add10, double* %add.ptr.i.i61, align 8, !tbaa !2
>   %18 = load double, double* %arrayidx.i, align 8, !tbaa !2
>   %sub14 = fsub double %18, %div11
>   store double %sub14, double* %arrayidx.i, align 8, !tbaa !2
>   %19 = load double, double* %arrayidx.i67, align 8, !tbaa !2
>   %sub16 = fsub double %19, %div11
>   store double %sub16, double* %arrayidx.i67, align 8, !tbaa !2
>   %20 = load double, double* %arrayidx.i64, align 8, !tbaa !2
>   %sub18 = fsub double %20, %div11
>   store double %sub18, double* %arrayidx.i64, align 8, !tbaa !2
>   %add.ptr.i.i = getelementptr inbounds double, double* %11, i64 %indvars.iv
>   %21 = load double, double* %add.ptr.i.i, align 8, !tbaa !2
>   %cmp20 = fcmp ugt double %21, 0.000000e+00
>   br i1 %cmp20, label %omp.inner.for.cond, label %if.then
12233,12234c8899,8900
< 65:                                               ; preds = %44
<   call void @exit(i32 -1) #29
---
> if.then:                                          ; preds = %omp.inner.for.body
>   call void @exit(i32 -1) #23
12237,12250c8903,8909
< 66:                                               ; preds = %40, %16
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %21)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #10
<   br label %67
< 
< 67:                                               ; preds = %14, %66
<   %68 = phi i32 [ %15, %14 ], [ %21, %66 ]
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %68)
<   %69 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcLagrangeElementsR6DomainE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %69)
<           to label %70 unwind label %71
---
> omp.loop.exit:                                    ; preds = %omp.inner.for.cond, %omp.precond.then
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %4)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #7
>   br label %omp.precond.end
12252c8911
< 70:                                               ; preds = %67
---
> omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
12254,12260d8912
< 
< 71:                                               ; preds = %67, %4
<   %72 = landingpad { i8*, i32 }
<           catch i8* null
<   %73 = extractvalue { i8*, i32 } %72, 0
<   call void @__clang_call_terminate(i8* %73) #29
<   unreachable
12263,12334c8915,8987
< ; Function Attrs: nounwind uwtable willreturn mustprogress
< define linkonce_odr dso_local void @_ZN6Domain19DeallocateGradientsEv(%class.Domain* nonnull dereferenceable(1312) %0) local_unnamed_addr #22 comdat align 2 {
<   %2 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 37
<   %3 = load double*, double** %2, align 8, !tbaa !6
<   %4 = icmp eq double* %3, null
<   br i1 %4, label %7, label %5
< 
< 5:                                                ; preds = %1
<   %6 = bitcast double* %3 to i8*
<   tail call void @free(i8* %6) #10
<   store double* null, double** %2, align 8, !tbaa !6
<   br label %7
< 
< 7:                                                ; preds = %1, %5
<   %8 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 36
<   %9 = load double*, double** %8, align 8, !tbaa !6
<   %10 = icmp eq double* %9, null
<   br i1 %10, label %13, label %11
< 
< 11:                                               ; preds = %7
<   %12 = bitcast double* %9 to i8*
<   tail call void @free(i8* %12) #10
<   store double* null, double** %8, align 8, !tbaa !6
<   br label %13
< 
< 13:                                               ; preds = %7, %11
<   %14 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 35
<   %15 = load double*, double** %14, align 8, !tbaa !6
<   %16 = icmp eq double* %15, null
<   br i1 %16, label %19, label %17
< 
< 17:                                               ; preds = %13
<   %18 = bitcast double* %15 to i8*
<   tail call void @free(i8* %18) #10
<   store double* null, double** %14, align 8, !tbaa !6
<   br label %19
< 
< 19:                                               ; preds = %13, %17
<   %20 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 34
<   %21 = load double*, double** %20, align 8, !tbaa !6
<   %22 = icmp eq double* %21, null
<   br i1 %22, label %25, label %23
< 
< 23:                                               ; preds = %19
<   %24 = bitcast double* %21 to i8*
<   tail call void @free(i8* %24) #10
<   store double* null, double** %20, align 8, !tbaa !6
<   br label %25
< 
< 25:                                               ; preds = %19, %23
<   %26 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 33
<   %27 = load double*, double** %26, align 8, !tbaa !6
<   %28 = icmp eq double* %27, null
<   br i1 %28, label %31, label %29
< 
< 29:                                               ; preds = %25
<   %30 = bitcast double* %27 to i8*
<   tail call void @free(i8* %30) #10
<   store double* null, double** %26, align 8, !tbaa !6
<   br label %31
< 
< 31:                                               ; preds = %25, %29
<   %32 = getelementptr inbounds %class.Domain, %class.Domain* %0, i64 0, i32 32
<   %33 = load double*, double** %32, align 8, !tbaa !6
<   %34 = icmp eq double* %33, null
<   br i1 %34, label %37, label %35
< 
< 35:                                               ; preds = %31
<   %36 = bitcast double* %33 to i8*
<   tail call void @free(i8* %36) #10
<   store double* null, double** %32, align 8, !tbaa !6
<   br label %37
---
> ; Function Attrs: nounwind uwtable
> define linkonce_odr dso_local void @_ZN6Domain19DeallocateGradientsEv(%class.Domain* %this) local_unnamed_addr #5 comdat align 2 {
> entry:
>   %m_delx_zeta = getelementptr inbounds %class.Domain, %class.Domain* %this, i64 0, i32 37
>   %0 = load double*, double** %m_delx_zeta, align 8, !tbaa !41
>   %cmp.not.i = icmp eq double* %0, null
>   br i1 %cmp.not.i, label %_Z7ReleaseIdEvPPT_.exit, label %if.then.i
> 
> if.then.i:                                        ; preds = %entry
>   %1 = bitcast double* %0 to i8*
>   tail call void @free(i8* %1) #7
>   store double* null, double** %m_delx_zeta, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit
> 
> _Z7ReleaseIdEvPPT_.exit:                          ; preds = %entry, %if.then.i
>   %m_delx_eta = getelementptr inbounds %class.Domain, %class.Domain* %this, i64 0, i32 36
>   %2 = load double*, double** %m_delx_eta, align 8, !tbaa !41
>   %cmp.not.i2 = icmp eq double* %2, null
>   br i1 %cmp.not.i2, label %_Z7ReleaseIdEvPPT_.exit4, label %if.then.i3
> 
> if.then.i3:                                       ; preds = %_Z7ReleaseIdEvPPT_.exit
>   %3 = bitcast double* %2 to i8*
>   tail call void @free(i8* %3) #7
>   store double* null, double** %m_delx_eta, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit4
> 
> _Z7ReleaseIdEvPPT_.exit4:                         ; preds = %_Z7ReleaseIdEvPPT_.exit, %if.then.i3
>   %m_delx_xi = getelementptr inbounds %class.Domain, %class.Domain* %this, i64 0, i32 35
>   %4 = load double*, double** %m_delx_xi, align 8, !tbaa !41
>   %cmp.not.i5 = icmp eq double* %4, null
>   br i1 %cmp.not.i5, label %_Z7ReleaseIdEvPPT_.exit7, label %if.then.i6
> 
> if.then.i6:                                       ; preds = %_Z7ReleaseIdEvPPT_.exit4
>   %5 = bitcast double* %4 to i8*
>   tail call void @free(i8* %5) #7
>   store double* null, double** %m_delx_xi, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit7
> 
> _Z7ReleaseIdEvPPT_.exit7:                         ; preds = %_Z7ReleaseIdEvPPT_.exit4, %if.then.i6
>   %m_delv_zeta = getelementptr inbounds %class.Domain, %class.Domain* %this, i64 0, i32 34
>   %6 = load double*, double** %m_delv_zeta, align 8, !tbaa !41
>   %cmp.not.i8 = icmp eq double* %6, null
>   br i1 %cmp.not.i8, label %_Z7ReleaseIdEvPPT_.exit10, label %if.then.i9
> 
> if.then.i9:                                       ; preds = %_Z7ReleaseIdEvPPT_.exit7
>   %7 = bitcast double* %6 to i8*
>   tail call void @free(i8* %7) #7
>   store double* null, double** %m_delv_zeta, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit10
> 
> _Z7ReleaseIdEvPPT_.exit10:                        ; preds = %_Z7ReleaseIdEvPPT_.exit7, %if.then.i9
>   %m_delv_eta = getelementptr inbounds %class.Domain, %class.Domain* %this, i64 0, i32 33
>   %8 = load double*, double** %m_delv_eta, align 8, !tbaa !41
>   %cmp.not.i11 = icmp eq double* %8, null
>   br i1 %cmp.not.i11, label %_Z7ReleaseIdEvPPT_.exit13, label %if.then.i12
> 
> if.then.i12:                                      ; preds = %_Z7ReleaseIdEvPPT_.exit10
>   %9 = bitcast double* %8 to i8*
>   tail call void @free(i8* %9) #7
>   store double* null, double** %m_delv_eta, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit13
> 
> _Z7ReleaseIdEvPPT_.exit13:                        ; preds = %_Z7ReleaseIdEvPPT_.exit10, %if.then.i12
>   %m_delv_xi = getelementptr inbounds %class.Domain, %class.Domain* %this, i64 0, i32 32
>   %10 = load double*, double** %m_delv_xi, align 8, !tbaa !41
>   %cmp.not.i14 = icmp eq double* %10, null
>   br i1 %cmp.not.i14, label %_Z7ReleaseIdEvPPT_.exit16, label %if.then.i15
> 
> if.then.i15:                                      ; preds = %_Z7ReleaseIdEvPPT_.exit13
>   %11 = bitcast double* %10 to i8*
>   tail call void @free(i8* %11) #7
>   store double* null, double** %m_delv_xi, align 8, !tbaa !41
>   br label %_Z7ReleaseIdEvPPT_.exit16
12336c8989
< 37:                                               ; preds = %31, %35
---
> _Z7ReleaseIdEvPPT_.exit16:                        ; preds = %_Z7ReleaseIdEvPPT_.exit13, %if.then.i15
12341,12790c8994,9432
< define internal void @.omp_outlined..43(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, i64 %2, %class.Domain* nonnull readonly align 8 dereferenceable(1312) %3) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %5 = alloca i32, align 4
<   %6 = alloca i32, align 4
<   %7 = alloca i32, align 4
<   %8 = alloca i32, align 4
<   %9 = trunc i64 %2 to i32
<   %10 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL31CalcMonotonicQGradientsForElemsR6DomainE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %10)
<           to label %11 unwind label %418
< 
< 11:                                               ; preds = %4
<   %12 = add nsw i32 %9, -1
<   %13 = icmp sgt i32 %9, 0
<   br i1 %13, label %14, label %414
< 
< 14:                                               ; preds = %11
<   %15 = bitcast i32* %5 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #10
<   store i32 0, i32* %5, align 4, !tbaa !12
<   %16 = bitcast i32* %6 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #10
<   store i32 %12, i32* %6, align 4, !tbaa !12
<   %17 = bitcast i32* %7 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #10
<   store i32 1, i32* %7, align 4, !tbaa !12
<   %18 = bitcast i32* %8 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #10
<   store i32 0, i32* %8, align 4, !tbaa !12
<   %19 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %19, i32 34, i32* nonnull %8, i32* nonnull %5, i32* nonnull %6, i32* nonnull %7, i32 1, i32 1) #10
<   %20 = load i32, i32* %6, align 4, !tbaa !12
<   %21 = icmp slt i32 %20, %9
<   %22 = select i1 %21, i32 %20, i32 %12
<   store i32 %22, i32* %6, align 4, !tbaa !12
<   %23 = load i32, i32* %5, align 4, !tbaa !12
<   %24 = icmp sgt i32 %23, %22
<   br i1 %24, label %413, label %25
< 
< 25:                                               ; preds = %14
<   %26 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 21, i32 0, i32 0, i32 0
<   %27 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 0, i32 0, i32 0, i32 0
<   %28 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 1, i32 0, i32 0, i32 0
<   %29 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 2, i32 0, i32 0, i32 0
<   %30 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 3, i32 0, i32 0, i32 0
<   %31 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 4, i32 0, i32 0, i32 0
<   %32 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 5, i32 0, i32 0, i32 0
<   %33 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 44, i32 0, i32 0, i32 0
<   %34 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 45, i32 0, i32 0, i32 0
<   %35 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 37
<   %36 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 34
<   %37 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 35
<   %38 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 32
<   %39 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 36
<   %40 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 33
<   %41 = sext i32 %23 to i64
<   br label %42
< 
< 42:                                               ; preds = %25, %42
<   %43 = phi i64 [ %41, %25 ], [ %408, %42 ]
<   %44 = phi i32 [ %23, %25 ], [ %409, %42 ]
<   %45 = shl nsw i32 %44, 3
<   %46 = sext i32 %45 to i64
<   %47 = load i32*, i32** %26, align 8, !tbaa !19
<   %48 = getelementptr inbounds i32, i32* %47, i64 %46
<   %49 = load i32, i32* %48, align 4, !tbaa !12
<   %50 = getelementptr inbounds i32, i32* %48, i64 1
<   %51 = load i32, i32* %50, align 4, !tbaa !12
<   %52 = getelementptr inbounds i32, i32* %48, i64 2
<   %53 = load i32, i32* %52, align 4, !tbaa !12
<   %54 = getelementptr inbounds i32, i32* %48, i64 3
<   %55 = load i32, i32* %54, align 4, !tbaa !12
<   %56 = getelementptr inbounds i32, i32* %48, i64 4
<   %57 = load i32, i32* %56, align 4, !tbaa !12
<   %58 = getelementptr inbounds i32, i32* %48, i64 5
<   %59 = load i32, i32* %58, align 4, !tbaa !12
<   %60 = getelementptr inbounds i32, i32* %48, i64 6
<   %61 = load i32, i32* %60, align 4, !tbaa !12
<   %62 = getelementptr inbounds i32, i32* %48, i64 7
<   %63 = load i32, i32* %62, align 4, !tbaa !12
<   %64 = sext i32 %49 to i64
<   %65 = load double*, double** %27, align 8, !tbaa !22
<   %66 = getelementptr inbounds double, double* %65, i64 %64
<   %67 = load double, double* %66, align 8, !tbaa !2
<   %68 = sext i32 %51 to i64
<   %69 = getelementptr inbounds double, double* %65, i64 %68
<   %70 = load double, double* %69, align 8, !tbaa !2
<   %71 = sext i32 %53 to i64
<   %72 = getelementptr inbounds double, double* %65, i64 %71
<   %73 = load double, double* %72, align 8, !tbaa !2
<   %74 = sext i32 %55 to i64
<   %75 = getelementptr inbounds double, double* %65, i64 %74
<   %76 = load double, double* %75, align 8, !tbaa !2
<   %77 = sext i32 %57 to i64
<   %78 = getelementptr inbounds double, double* %65, i64 %77
<   %79 = load double, double* %78, align 8, !tbaa !2
<   %80 = sext i32 %59 to i64
<   %81 = getelementptr inbounds double, double* %65, i64 %80
<   %82 = load double, double* %81, align 8, !tbaa !2
<   %83 = sext i32 %61 to i64
<   %84 = getelementptr inbounds double, double* %65, i64 %83
<   %85 = load double, double* %84, align 8, !tbaa !2
<   %86 = sext i32 %63 to i64
<   %87 = getelementptr inbounds double, double* %65, i64 %86
<   %88 = load double, double* %87, align 8, !tbaa !2
<   %89 = load double*, double** %28, align 8, !tbaa !22
<   %90 = getelementptr inbounds double, double* %89, i64 %64
<   %91 = load double, double* %90, align 8, !tbaa !2
<   %92 = getelementptr inbounds double, double* %89, i64 %68
<   %93 = load double, double* %92, align 8, !tbaa !2
<   %94 = getelementptr inbounds double, double* %89, i64 %71
<   %95 = load double, double* %94, align 8, !tbaa !2
<   %96 = getelementptr inbounds double, double* %89, i64 %74
<   %97 = load double, double* %96, align 8, !tbaa !2
<   %98 = getelementptr inbounds double, double* %89, i64 %77
<   %99 = load double, double* %98, align 8, !tbaa !2
<   %100 = getelementptr inbounds double, double* %89, i64 %80
<   %101 = load double, double* %100, align 8, !tbaa !2
<   %102 = getelementptr inbounds double, double* %89, i64 %83
<   %103 = load double, double* %102, align 8, !tbaa !2
<   %104 = getelementptr inbounds double, double* %89, i64 %86
<   %105 = load double, double* %104, align 8, !tbaa !2
<   %106 = load double*, double** %29, align 8, !tbaa !22
<   %107 = getelementptr inbounds double, double* %106, i64 %64
<   %108 = load double, double* %107, align 8, !tbaa !2
<   %109 = getelementptr inbounds double, double* %106, i64 %68
<   %110 = load double, double* %109, align 8, !tbaa !2
<   %111 = getelementptr inbounds double, double* %106, i64 %71
<   %112 = load double, double* %111, align 8, !tbaa !2
<   %113 = getelementptr inbounds double, double* %106, i64 %74
<   %114 = load double, double* %113, align 8, !tbaa !2
<   %115 = getelementptr inbounds double, double* %106, i64 %77
<   %116 = load double, double* %115, align 8, !tbaa !2
<   %117 = getelementptr inbounds double, double* %106, i64 %80
<   %118 = load double, double* %117, align 8, !tbaa !2
<   %119 = getelementptr inbounds double, double* %106, i64 %83
<   %120 = load double, double* %119, align 8, !tbaa !2
<   %121 = getelementptr inbounds double, double* %106, i64 %86
<   %122 = load double, double* %121, align 8, !tbaa !2
<   %123 = load double*, double** %30, align 8, !tbaa !22
<   %124 = getelementptr inbounds double, double* %123, i64 %64
<   %125 = load double, double* %124, align 8, !tbaa !2
<   %126 = getelementptr inbounds double, double* %123, i64 %68
<   %127 = load double, double* %126, align 8, !tbaa !2
<   %128 = getelementptr inbounds double, double* %123, i64 %71
<   %129 = load double, double* %128, align 8, !tbaa !2
<   %130 = getelementptr inbounds double, double* %123, i64 %74
<   %131 = load double, double* %130, align 8, !tbaa !2
<   %132 = getelementptr inbounds double, double* %123, i64 %77
<   %133 = load double, double* %132, align 8, !tbaa !2
<   %134 = getelementptr inbounds double, double* %123, i64 %80
<   %135 = load double, double* %134, align 8, !tbaa !2
<   %136 = getelementptr inbounds double, double* %123, i64 %83
<   %137 = load double, double* %136, align 8, !tbaa !2
<   %138 = getelementptr inbounds double, double* %123, i64 %86
<   %139 = load double, double* %138, align 8, !tbaa !2
<   %140 = load double*, double** %31, align 8, !tbaa !22
<   %141 = getelementptr inbounds double, double* %140, i64 %64
<   %142 = load double, double* %141, align 8, !tbaa !2
<   %143 = getelementptr inbounds double, double* %140, i64 %68
<   %144 = load double, double* %143, align 8, !tbaa !2
<   %145 = getelementptr inbounds double, double* %140, i64 %71
<   %146 = load double, double* %145, align 8, !tbaa !2
<   %147 = getelementptr inbounds double, double* %140, i64 %74
<   %148 = load double, double* %147, align 8, !tbaa !2
<   %149 = getelementptr inbounds double, double* %140, i64 %77
<   %150 = load double, double* %149, align 8, !tbaa !2
<   %151 = getelementptr inbounds double, double* %140, i64 %80
<   %152 = load double, double* %151, align 8, !tbaa !2
<   %153 = getelementptr inbounds double, double* %140, i64 %83
<   %154 = load double, double* %153, align 8, !tbaa !2
<   %155 = getelementptr inbounds double, double* %140, i64 %86
<   %156 = load double, double* %155, align 8, !tbaa !2
<   %157 = load double*, double** %32, align 8, !tbaa !22
<   %158 = getelementptr inbounds double, double* %157, i64 %64
<   %159 = load double, double* %158, align 8, !tbaa !2
<   %160 = getelementptr inbounds double, double* %157, i64 %68
<   %161 = load double, double* %160, align 8, !tbaa !2
<   %162 = getelementptr inbounds double, double* %157, i64 %71
<   %163 = load double, double* %162, align 8, !tbaa !2
<   %164 = getelementptr inbounds double, double* %157, i64 %74
<   %165 = load double, double* %164, align 8, !tbaa !2
<   %166 = getelementptr inbounds double, double* %157, i64 %77
<   %167 = load double, double* %166, align 8, !tbaa !2
<   %168 = getelementptr inbounds double, double* %157, i64 %80
<   %169 = load double, double* %168, align 8, !tbaa !2
<   %170 = getelementptr inbounds double, double* %157, i64 %83
<   %171 = load double, double* %170, align 8, !tbaa !2
<   %172 = getelementptr inbounds double, double* %157, i64 %86
<   %173 = load double, double* %172, align 8, !tbaa !2
<   %174 = load double*, double** %33, align 8, !tbaa !22
<   %175 = getelementptr inbounds double, double* %174, i64 %43
<   %176 = load double, double* %175, align 8, !tbaa !2
<   %177 = load double*, double** %34, align 8, !tbaa !22
<   %178 = getelementptr inbounds double, double* %177, i64 %43
<   %179 = load double, double* %178, align 8, !tbaa !2
<   %180 = fmul double %176, %179
<   %181 = fadd double %180, 0x38754484932D2E72
<   %182 = fdiv double 1.000000e+00, %181
<   %183 = fadd double %67, %70
<   %184 = fadd double %183, %82
<   %185 = fadd double %79, %184
<   %186 = fadd double %73, %76
<   %187 = fadd double %186, %85
<   %188 = fadd double %187, %88
<   %189 = fsub double %185, %188
<   %190 = fmul double %189, -2.500000e-01
<   %191 = fadd double %91, %93
<   %192 = fadd double %191, %101
<   %193 = fadd double %99, %192
<   %194 = fadd double %95, %97
<   %195 = fadd double %194, %103
<   %196 = fadd double %195, %105
<   %197 = fsub double %193, %196
<   %198 = fmul double %197, -2.500000e-01
<   %199 = fadd double %108, %110
<   %200 = fadd double %199, %118
<   %201 = fadd double %116, %200
<   %202 = fadd double %112, %114
<   %203 = fadd double %202, %120
<   %204 = fadd double %203, %122
<   %205 = fsub double %201, %204
<   %206 = fmul double %205, -2.500000e-01
<   %207 = fadd double %70, %73
<   %208 = fadd double %207, %85
<   %209 = fadd double %82, %208
<   %210 = fadd double %67, %76
<   %211 = fadd double %210, %88
<   %212 = fadd double %79, %211
<   %213 = fsub double %209, %212
<   %214 = fmul double %213, 2.500000e-01
<   %215 = fadd double %93, %95
<   %216 = fadd double %215, %103
<   %217 = fadd double %101, %216
<   %218 = fadd double %91, %97
<   %219 = fadd double %218, %105
<   %220 = fadd double %99, %219
<   %221 = fsub double %217, %220
<   %222 = fmul double %221, 2.500000e-01
<   %223 = fadd double %110, %112
<   %224 = fadd double %223, %120
<   %225 = fadd double %118, %224
<   %226 = fadd double %108, %114
<   %227 = fadd double %226, %122
<   %228 = fadd double %116, %227
<   %229 = fsub double %225, %228
<   %230 = fmul double %229, 2.500000e-01
<   %231 = fadd double %79, %82
<   %232 = fadd double %231, %85
<   %233 = fadd double %232, %88
<   %234 = fadd double %183, %73
<   %235 = fadd double %234, %76
<   %236 = fsub double %233, %235
<   %237 = fmul double %236, 2.500000e-01
<   %238 = fadd double %99, %101
<   %239 = fadd double %238, %103
<   %240 = fadd double %239, %105
<   %241 = fadd double %191, %95
<   %242 = fadd double %241, %97
<   %243 = fsub double %240, %242
<   %244 = fmul double %243, 2.500000e-01
<   %245 = fadd double %116, %118
<   %246 = fadd double %245, %120
<   %247 = fadd double %246, %122
<   %248 = fadd double %199, %112
<   %249 = fadd double %248, %114
<   %250 = fsub double %247, %249
<   %251 = fmul double %250, 2.500000e-01
<   %252 = fmul double %222, %206
<   %253 = fmul double %198, %230
<   %254 = fsub double %252, %253
<   %255 = fmul double %190, %230
<   %256 = fmul double %214, %206
<   %257 = fsub double %255, %256
<   %258 = fmul double %214, %198
<   %259 = fmul double %190, %222
<   %260 = fsub double %258, %259
<   %261 = fmul double %254, %254
<   %262 = fmul double %257, %257
<   %263 = fadd double %261, %262
<   %264 = fmul double %260, %260
<   %265 = fadd double %264, %263
<   %266 = fadd double %265, 0x38754484932D2E72
<   %267 = call double @sqrt(double %266) #10
<   %268 = fdiv double %180, %267
<   %269 = load double*, double** %35, align 8, !tbaa !63
<   %270 = getelementptr inbounds double, double* %269, i64 %43
<   store double %268, double* %270, align 8, !tbaa !2
<   %271 = fmul double %254, %182
<   %272 = fmul double %257, %182
<   %273 = fmul double %260, %182
<   %274 = fadd double %133, %135
<   %275 = fadd double %274, %137
<   %276 = fadd double %275, %139
<   %277 = fadd double %125, %127
<   %278 = fadd double %277, %129
<   %279 = fadd double %278, %131
<   %280 = fsub double %276, %279
<   %281 = fmul double %280, 2.500000e-01
<   %282 = fadd double %150, %152
<   %283 = fadd double %282, %154
<   %284 = fadd double %283, %156
<   %285 = fadd double %142, %144
<   %286 = fadd double %285, %146
<   %287 = fadd double %286, %148
<   %288 = fsub double %284, %287
<   %289 = fmul double %288, 2.500000e-01
<   %290 = fadd double %167, %169
<   %291 = fadd double %290, %171
<   %292 = fadd double %291, %173
<   %293 = fadd double %159, %161
<   %294 = fadd double %293, %163
<   %295 = fadd double %294, %165
<   %296 = fsub double %292, %295
<   %297 = fmul double %296, 2.500000e-01
<   %298 = fmul double %281, %271
<   %299 = fmul double %289, %272
<   %300 = fadd double %298, %299
<   %301 = fmul double %297, %273
<   %302 = fadd double %301, %300
<   %303 = load double*, double** %36, align 8, !tbaa !66
<   %304 = getelementptr inbounds double, double* %303, i64 %43
<   store double %302, double* %304, align 8, !tbaa !2
<   %305 = fmul double %198, %251
<   %306 = fmul double %244, %206
<   %307 = fsub double %305, %306
<   %308 = fmul double %237, %206
<   %309 = fmul double %190, %251
<   %310 = fsub double %308, %309
<   %311 = fmul double %190, %244
<   %312 = fmul double %237, %198
<   %313 = fsub double %311, %312
<   %314 = fmul double %307, %307
<   %315 = fmul double %310, %310
<   %316 = fadd double %314, %315
<   %317 = fmul double %313, %313
<   %318 = fadd double %317, %316
<   %319 = fadd double %318, 0x38754484932D2E72
<   %320 = call double @sqrt(double %319) #10
<   %321 = fdiv double %180, %320
<   %322 = load double*, double** %37, align 8, !tbaa !61
<   %323 = getelementptr inbounds double, double* %322, i64 %43
<   store double %321, double* %323, align 8, !tbaa !2
<   %324 = fmul double %307, %182
<   %325 = fmul double %310, %182
<   %326 = fmul double %313, %182
<   %327 = fadd double %127, %129
<   %328 = fadd double %327, %137
<   %329 = fadd double %135, %328
<   %330 = fadd double %125, %131
<   %331 = fadd double %330, %139
<   %332 = fadd double %133, %331
<   %333 = fsub double %329, %332
<   %334 = fmul double %333, 2.500000e-01
<   %335 = fadd double %144, %146
<   %336 = fadd double %335, %154
<   %337 = fadd double %152, %336
<   %338 = fadd double %142, %148
<   %339 = fadd double %338, %156
<   %340 = fadd double %150, %339
<   %341 = fsub double %337, %340
<   %342 = fmul double %341, 2.500000e-01
<   %343 = fadd double %161, %163
<   %344 = fadd double %343, %171
<   %345 = fadd double %169, %344
<   %346 = fadd double %159, %165
<   %347 = fadd double %346, %173
<   %348 = fadd double %167, %347
<   %349 = fsub double %345, %348
<   %350 = fmul double %349, 2.500000e-01
<   %351 = fmul double %334, %324
<   %352 = fmul double %342, %325
<   %353 = fadd double %351, %352
<   %354 = fmul double %350, %326
<   %355 = fadd double %354, %353
<   %356 = load double*, double** %38, align 8, !tbaa !64
<   %357 = getelementptr inbounds double, double* %356, i64 %43
<   store double %355, double* %357, align 8, !tbaa !2
<   %358 = fmul double %244, %230
<   %359 = fmul double %222, %251
<   %360 = fsub double %358, %359
<   %361 = fmul double %214, %251
<   %362 = fmul double %237, %230
<   %363 = fsub double %361, %362
<   %364 = fmul double %237, %222
<   %365 = fmul double %214, %244
<   %366 = fsub double %364, %365
<   %367 = fmul double %360, %360
<   %368 = fmul double %363, %363
<   %369 = fadd double %367, %368
<   %370 = fmul double %366, %366
<   %371 = fadd double %370, %369
<   %372 = fadd double %371, 0x38754484932D2E72
<   %373 = call double @sqrt(double %372) #10
<   %374 = fdiv double %180, %373
<   %375 = load double*, double** %39, align 8, !tbaa !62
<   %376 = getelementptr inbounds double, double* %375, i64 %43
<   store double %374, double* %376, align 8, !tbaa !2
<   %377 = fmul double %360, %182
<   %378 = fmul double %363, %182
<   %379 = fmul double %366, %182
<   %380 = fadd double %277, %135
<   %381 = fadd double %133, %380
<   %382 = fadd double %129, %131
<   %383 = fadd double %382, %137
<   %384 = fadd double %383, %139
<   %385 = fsub double %381, %384
<   %386 = fmul double %385, -2.500000e-01
<   %387 = fadd double %285, %152
<   %388 = fadd double %150, %387
<   %389 = fadd double %146, %148
<   %390 = fadd double %389, %154
<   %391 = fadd double %390, %156
<   %392 = fsub double %388, %391
<   %393 = fmul double %392, 2.500000e-01
<   %394 = fadd double %293, %169
<   %395 = fadd double %167, %394
<   %396 = fadd double %163, %165
<   %397 = fadd double %396, %171
<   %398 = fadd double %397, %173
<   %399 = fsub double %395, %398
<   %400 = fmul double %399, 2.500000e-01
<   %401 = fmul double %386, %377
<   %402 = fmul double %393, %378
<   %403 = fsub double %401, %402
<   %404 = fmul double %400, %379
<   %405 = fsub double %403, %404
<   %406 = load double*, double** %40, align 8, !tbaa !65
<   %407 = getelementptr inbounds double, double* %406, i64 %43
<   store double %405, double* %407, align 8, !tbaa !2
<   %408 = add nsw i64 %43, 1
<   %409 = add nsw i32 %44, 1
<   %410 = load i32, i32* %6, align 4, !tbaa !12
<   %411 = sext i32 %410 to i64
<   %412 = icmp slt i64 %43, %411
<   br i1 %412, label %42, label %413
< 
< 413:                                              ; preds = %42, %14
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %19)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #10
<   br label %414
< 
< 414:                                              ; preds = %413, %11
<   %415 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %415)
<   %416 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL31CalcMonotonicQGradientsForElemsR6DomainE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %416)
<           to label %417 unwind label %418
---
> define internal void @.omp_outlined..30(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i64 %numElem, %class.Domain* nonnull readonly align 8 dereferenceable(1312) %domain) #6 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
> entry:
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %numElem.addr.sroa.0.0.extract.trunc = trunc i64 %numElem to i32
>   %sub3 = add nsw i32 %numElem.addr.sroa.0.0.extract.trunc, -1
>   %cmp = icmp sgt i32 %numElem.addr.sroa.0.0.extract.trunc, 0
>   br i1 %cmp, label %omp.precond.then, label %omp.precond.end
> 
> omp.precond.then:                                 ; preds = %entry
>   %0 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %1 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #7
>   store i32 %sub3, i32* %.omp.ub, align 4, !tbaa !6
>   %2 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %3 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   %4 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %4, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %5 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp5.not = icmp slt i32 %5, %numElem.addr.sroa.0.0.extract.trunc
>   %cond = select i1 %cmp5.not, i32 %5, i32 %sub3
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %6 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp6.not830 = icmp sgt i32 %6, %cond
>   br i1 %cmp6.not830, label %omp.loop.exit, label %omp.inner.for.body.lr.ph
> 
> omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
>   %_M_start.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 21, i32 0, i32 0, i32 0, i32 0
>   %_M_start.i.i671 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
>   %_M_start.i.i813 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
>   %_M_start.i.i789 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
>   %_M_start.i.i765 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
>   %_M_start.i.i741 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
>   %_M_start.i.i717 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
>   %_M_start.i.i693 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 44, i32 0, i32 0, i32 0, i32 0
>   %_M_start.i.i690 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 45, i32 0, i32 0, i32 0, i32 0
>   %m_delx_zeta.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 37
>   %m_delv_zeta.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 34
>   %m_delx_xi.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 35
>   %m_delv_xi.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 32
>   %m_delx_eta.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 36
>   %m_delv_eta.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 33
>   %7 = sext i32 %6 to i64
>   br label %omp.inner.for.body
> 
> omp.inner.for.body:                               ; preds = %omp.inner.for.body, %omp.inner.for.body.lr.ph
>   %indvars.iv = phi i64 [ %indvars.iv.next, %omp.inner.for.body ], [ %7, %omp.inner.for.body.lr.ph ]
>   %.omp.iv.0831 = phi i32 [ %add297, %omp.inner.for.body ], [ %6, %omp.inner.for.body.lr.ph ]
>   %mul.i = shl nsw i32 %.omp.iv.0831, 3
>   %conv.i = sext i32 %mul.i to i64
>   %8 = load i32*, i32** %_M_start.i.i, align 8, !tbaa !8
>   %add.ptr.i.i = getelementptr inbounds i32, i32* %8, i64 %conv.i
>   %9 = load i32, i32* %add.ptr.i.i, align 4, !tbaa !6
>   %arrayidx7 = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 1
>   %10 = load i32, i32* %arrayidx7, align 4, !tbaa !6
>   %arrayidx8 = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 2
>   %11 = load i32, i32* %arrayidx8, align 4, !tbaa !6
>   %arrayidx9 = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 3
>   %12 = load i32, i32* %arrayidx9, align 4, !tbaa !6
>   %arrayidx10 = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 4
>   %13 = load i32, i32* %arrayidx10, align 4, !tbaa !6
>   %arrayidx11 = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 5
>   %14 = load i32, i32* %arrayidx11, align 4, !tbaa !6
>   %arrayidx12 = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 6
>   %15 = load i32, i32* %arrayidx12, align 4, !tbaa !6
>   %arrayidx13 = getelementptr inbounds i32, i32* %add.ptr.i.i, i64 7
>   %16 = load i32, i32* %arrayidx13, align 4, !tbaa !6
>   %conv.i670 = sext i32 %9 to i64
>   %17 = load double*, double** %_M_start.i.i671, align 8, !tbaa !11
>   %add.ptr.i.i672 = getelementptr inbounds double, double* %17, i64 %conv.i670
>   %18 = load double, double* %add.ptr.i.i672, align 8, !tbaa !2
>   %conv.i678 = sext i32 %10 to i64
>   %add.ptr.i.i680 = getelementptr inbounds double, double* %17, i64 %conv.i678
>   %19 = load double, double* %add.ptr.i.i680, align 8, !tbaa !2
>   %conv.i686 = sext i32 %11 to i64
>   %add.ptr.i.i688 = getelementptr inbounds double, double* %17, i64 %conv.i686
>   %20 = load double, double* %add.ptr.i.i688, align 8, !tbaa !2
>   %conv.i827 = sext i32 %12 to i64
>   %add.ptr.i.i829 = getelementptr inbounds double, double* %17, i64 %conv.i827
>   %21 = load double, double* %add.ptr.i.i829, align 8, !tbaa !2
>   %conv.i824 = sext i32 %13 to i64
>   %add.ptr.i.i826 = getelementptr inbounds double, double* %17, i64 %conv.i824
>   %22 = load double, double* %add.ptr.i.i826, align 8, !tbaa !2
>   %conv.i821 = sext i32 %14 to i64
>   %add.ptr.i.i823 = getelementptr inbounds double, double* %17, i64 %conv.i821
>   %23 = load double, double* %add.ptr.i.i823, align 8, !tbaa !2
>   %conv.i818 = sext i32 %15 to i64
>   %add.ptr.i.i820 = getelementptr inbounds double, double* %17, i64 %conv.i818
>   %24 = load double, double* %add.ptr.i.i820, align 8, !tbaa !2
>   %conv.i815 = sext i32 %16 to i64
>   %add.ptr.i.i817 = getelementptr inbounds double, double* %17, i64 %conv.i815
>   %25 = load double, double* %add.ptr.i.i817, align 8, !tbaa !2
>   %26 = load double*, double** %_M_start.i.i813, align 8, !tbaa !11
>   %add.ptr.i.i814 = getelementptr inbounds double, double* %26, i64 %conv.i670
>   %27 = load double, double* %add.ptr.i.i814, align 8, !tbaa !2
>   %add.ptr.i.i811 = getelementptr inbounds double, double* %26, i64 %conv.i678
>   %28 = load double, double* %add.ptr.i.i811, align 8, !tbaa !2
>   %add.ptr.i.i808 = getelementptr inbounds double, double* %26, i64 %conv.i686
>   %29 = load double, double* %add.ptr.i.i808, align 8, !tbaa !2
>   %add.ptr.i.i805 = getelementptr inbounds double, double* %26, i64 %conv.i827
>   %30 = load double, double* %add.ptr.i.i805, align 8, !tbaa !2
>   %add.ptr.i.i802 = getelementptr inbounds double, double* %26, i64 %conv.i824
>   %31 = load double, double* %add.ptr.i.i802, align 8, !tbaa !2
>   %add.ptr.i.i799 = getelementptr inbounds double, double* %26, i64 %conv.i821
>   %32 = load double, double* %add.ptr.i.i799, align 8, !tbaa !2
>   %add.ptr.i.i796 = getelementptr inbounds double, double* %26, i64 %conv.i818
>   %33 = load double, double* %add.ptr.i.i796, align 8, !tbaa !2
>   %add.ptr.i.i793 = getelementptr inbounds double, double* %26, i64 %conv.i815
>   %34 = load double, double* %add.ptr.i.i793, align 8, !tbaa !2
>   %35 = load double*, double** %_M_start.i.i789, align 8, !tbaa !11
>   %add.ptr.i.i790 = getelementptr inbounds double, double* %35, i64 %conv.i670
>   %36 = load double, double* %add.ptr.i.i790, align 8, !tbaa !2
>   %add.ptr.i.i787 = getelementptr inbounds double, double* %35, i64 %conv.i678
>   %37 = load double, double* %add.ptr.i.i787, align 8, !tbaa !2
>   %add.ptr.i.i784 = getelementptr inbounds double, double* %35, i64 %conv.i686
>   %38 = load double, double* %add.ptr.i.i784, align 8, !tbaa !2
>   %add.ptr.i.i781 = getelementptr inbounds double, double* %35, i64 %conv.i827
>   %39 = load double, double* %add.ptr.i.i781, align 8, !tbaa !2
>   %add.ptr.i.i778 = getelementptr inbounds double, double* %35, i64 %conv.i824
>   %40 = load double, double* %add.ptr.i.i778, align 8, !tbaa !2
>   %add.ptr.i.i775 = getelementptr inbounds double, double* %35, i64 %conv.i821
>   %41 = load double, double* %add.ptr.i.i775, align 8, !tbaa !2
>   %add.ptr.i.i772 = getelementptr inbounds double, double* %35, i64 %conv.i818
>   %42 = load double, double* %add.ptr.i.i772, align 8, !tbaa !2
>   %add.ptr.i.i769 = getelementptr inbounds double, double* %35, i64 %conv.i815
>   %43 = load double, double* %add.ptr.i.i769, align 8, !tbaa !2
>   %44 = load double*, double** %_M_start.i.i765, align 8, !tbaa !11
>   %add.ptr.i.i766 = getelementptr inbounds double, double* %44, i64 %conv.i670
>   %45 = load double, double* %add.ptr.i.i766, align 8, !tbaa !2
>   %add.ptr.i.i763 = getelementptr inbounds double, double* %44, i64 %conv.i678
>   %46 = load double, double* %add.ptr.i.i763, align 8, !tbaa !2
>   %add.ptr.i.i760 = getelementptr inbounds double, double* %44, i64 %conv.i686
>   %47 = load double, double* %add.ptr.i.i760, align 8, !tbaa !2
>   %add.ptr.i.i757 = getelementptr inbounds double, double* %44, i64 %conv.i827
>   %48 = load double, double* %add.ptr.i.i757, align 8, !tbaa !2
>   %add.ptr.i.i754 = getelementptr inbounds double, double* %44, i64 %conv.i824
>   %49 = load double, double* %add.ptr.i.i754, align 8, !tbaa !2
>   %add.ptr.i.i751 = getelementptr inbounds double, double* %44, i64 %conv.i821
>   %50 = load double, double* %add.ptr.i.i751, align 8, !tbaa !2
>   %add.ptr.i.i748 = getelementptr inbounds double, double* %44, i64 %conv.i818
>   %51 = load double, double* %add.ptr.i.i748, align 8, !tbaa !2
>   %add.ptr.i.i745 = getelementptr inbounds double, double* %44, i64 %conv.i815
>   %52 = load double, double* %add.ptr.i.i745, align 8, !tbaa !2
>   %53 = load double*, double** %_M_start.i.i741, align 8, !tbaa !11
>   %add.ptr.i.i742 = getelementptr inbounds double, double* %53, i64 %conv.i670
>   %54 = load double, double* %add.ptr.i.i742, align 8, !tbaa !2
>   %add.ptr.i.i739 = getelementptr inbounds double, double* %53, i64 %conv.i678
>   %55 = load double, double* %add.ptr.i.i739, align 8, !tbaa !2
>   %add.ptr.i.i736 = getelementptr inbounds double, double* %53, i64 %conv.i686
>   %56 = load double, double* %add.ptr.i.i736, align 8, !tbaa !2
>   %add.ptr.i.i733 = getelementptr inbounds double, double* %53, i64 %conv.i827
>   %57 = load double, double* %add.ptr.i.i733, align 8, !tbaa !2
>   %add.ptr.i.i730 = getelementptr inbounds double, double* %53, i64 %conv.i824
>   %58 = load double, double* %add.ptr.i.i730, align 8, !tbaa !2
>   %add.ptr.i.i727 = getelementptr inbounds double, double* %53, i64 %conv.i821
>   %59 = load double, double* %add.ptr.i.i727, align 8, !tbaa !2
>   %add.ptr.i.i724 = getelementptr inbounds double, double* %53, i64 %conv.i818
>   %60 = load double, double* %add.ptr.i.i724, align 8, !tbaa !2
>   %add.ptr.i.i721 = getelementptr inbounds double, double* %53, i64 %conv.i815
>   %61 = load double, double* %add.ptr.i.i721, align 8, !tbaa !2
>   %62 = load double*, double** %_M_start.i.i717, align 8, !tbaa !11
>   %add.ptr.i.i718 = getelementptr inbounds double, double* %62, i64 %conv.i670
>   %63 = load double, double* %add.ptr.i.i718, align 8, !tbaa !2
>   %add.ptr.i.i715 = getelementptr inbounds double, double* %62, i64 %conv.i678
>   %64 = load double, double* %add.ptr.i.i715, align 8, !tbaa !2
>   %add.ptr.i.i712 = getelementptr inbounds double, double* %62, i64 %conv.i686
>   %65 = load double, double* %add.ptr.i.i712, align 8, !tbaa !2
>   %add.ptr.i.i709 = getelementptr inbounds double, double* %62, i64 %conv.i827
>   %66 = load double, double* %add.ptr.i.i709, align 8, !tbaa !2
>   %add.ptr.i.i706 = getelementptr inbounds double, double* %62, i64 %conv.i824
>   %67 = load double, double* %add.ptr.i.i706, align 8, !tbaa !2
>   %add.ptr.i.i703 = getelementptr inbounds double, double* %62, i64 %conv.i821
>   %68 = load double, double* %add.ptr.i.i703, align 8, !tbaa !2
>   %add.ptr.i.i700 = getelementptr inbounds double, double* %62, i64 %conv.i818
>   %69 = load double, double* %add.ptr.i.i700, align 8, !tbaa !2
>   %add.ptr.i.i697 = getelementptr inbounds double, double* %62, i64 %conv.i815
>   %70 = load double, double* %add.ptr.i.i697, align 8, !tbaa !2
>   %71 = load double*, double** %_M_start.i.i693, align 8, !tbaa !11
>   %add.ptr.i.i694 = getelementptr inbounds double, double* %71, i64 %indvars.iv
>   %72 = load double, double* %add.ptr.i.i694, align 8, !tbaa !2
>   %73 = load double*, double** %_M_start.i.i690, align 8, !tbaa !11
>   %add.ptr.i.i691 = getelementptr inbounds double, double* %73, i64 %indvars.iv
>   %74 = load double, double* %add.ptr.i.i691, align 8, !tbaa !2
>   %mul64 = fmul double %72, %74
>   %add65 = fadd double %mul64, 0x38754484932D2E72
>   %div66 = fdiv double 1.000000e+00, %add65
>   %add67 = fadd double %18, %19
>   %add68 = fadd double %add67, %23
>   %add69 = fadd double %22, %add68
>   %add70 = fadd double %20, %21
>   %add71 = fadd double %add70, %24
>   %add72 = fadd double %add71, %25
>   %sub73 = fsub double %add69, %add72
>   %mul74 = fmul double %sub73, -2.500000e-01
>   %add75 = fadd double %27, %28
>   %add76 = fadd double %add75, %32
>   %add77 = fadd double %31, %add76
>   %add78 = fadd double %29, %30
>   %add79 = fadd double %add78, %33
>   %add80 = fadd double %add79, %34
>   %sub81 = fsub double %add77, %add80
>   %mul82 = fmul double %sub81, -2.500000e-01
>   %add83 = fadd double %36, %37
>   %add84 = fadd double %add83, %41
>   %add85 = fadd double %40, %add84
>   %add86 = fadd double %38, %39
>   %add87 = fadd double %add86, %42
>   %add88 = fadd double %add87, %43
>   %sub89 = fsub double %add85, %add88
>   %mul90 = fmul double %sub89, -2.500000e-01
>   %add91 = fadd double %19, %20
>   %add92 = fadd double %add91, %24
>   %add93 = fadd double %23, %add92
>   %add94 = fadd double %18, %21
>   %add95 = fadd double %add94, %25
>   %add96 = fadd double %22, %add95
>   %sub97 = fsub double %add93, %add96
>   %mul98 = fmul double %sub97, 2.500000e-01
>   %add99 = fadd double %28, %29
>   %add100 = fadd double %add99, %33
>   %add101 = fadd double %32, %add100
>   %add102 = fadd double %27, %30
>   %add103 = fadd double %add102, %34
>   %add104 = fadd double %31, %add103
>   %sub105 = fsub double %add101, %add104
>   %mul106 = fmul double %sub105, 2.500000e-01
>   %add107 = fadd double %37, %38
>   %add108 = fadd double %add107, %42
>   %add109 = fadd double %41, %add108
>   %add110 = fadd double %36, %39
>   %add111 = fadd double %add110, %43
>   %add112 = fadd double %40, %add111
>   %sub113 = fsub double %add109, %add112
>   %mul114 = fmul double %sub113, 2.500000e-01
>   %add115 = fadd double %22, %23
>   %add116 = fadd double %add115, %24
>   %add117 = fadd double %add116, %25
>   %add119 = fadd double %add67, %20
>   %add120 = fadd double %add119, %21
>   %sub121 = fsub double %add117, %add120
>   %mul122 = fmul double %sub121, 2.500000e-01
>   %add123 = fadd double %31, %32
>   %add124 = fadd double %add123, %33
>   %add125 = fadd double %add124, %34
>   %add127 = fadd double %add75, %29
>   %add128 = fadd double %add127, %30
>   %sub129 = fsub double %add125, %add128
>   %mul130 = fmul double %sub129, 2.500000e-01
>   %add131 = fadd double %40, %41
>   %add132 = fadd double %add131, %42
>   %add133 = fadd double %add132, %43
>   %add135 = fadd double %add83, %38
>   %add136 = fadd double %add135, %39
>   %sub137 = fsub double %add133, %add136
>   %mul138 = fmul double %sub137, 2.500000e-01
>   %mul139 = fmul double %mul106, %mul90
>   %mul140 = fmul double %mul82, %mul114
>   %sub141 = fsub double %mul139, %mul140
>   %mul142 = fmul double %mul74, %mul114
>   %mul143 = fmul double %mul98, %mul90
>   %sub144 = fsub double %mul142, %mul143
>   %mul145 = fmul double %mul98, %mul82
>   %mul146 = fmul double %mul74, %mul106
>   %sub147 = fsub double %mul145, %mul146
>   %mul148 = fmul double %sub141, %sub141
>   %mul149 = fmul double %sub144, %sub144
>   %add150 = fadd double %mul148, %mul149
>   %mul151 = fmul double %sub147, %sub147
>   %add152 = fadd double %mul151, %add150
>   %add153 = fadd double %add152, 0x38754484932D2E72
>   %call.i685 = call double @sqrt(double %add153) #7
>   %div155 = fdiv double %mul64, %call.i685
>   %75 = load double*, double** %m_delx_zeta.i, align 8, !tbaa !44
>   %arrayidx.i684 = getelementptr inbounds double, double* %75, i64 %indvars.iv
>   store double %div155, double* %arrayidx.i684, align 8, !tbaa !2
>   %mul157 = fmul double %sub141, %div66
>   %mul158 = fmul double %sub144, %div66
>   %mul159 = fmul double %sub147, %div66
>   %add160 = fadd double %49, %50
>   %add161 = fadd double %add160, %51
>   %add162 = fadd double %add161, %52
>   %add163 = fadd double %45, %46
>   %add164 = fadd double %add163, %47
>   %add165 = fadd double %add164, %48
>   %sub166 = fsub double %add162, %add165
>   %mul167 = fmul double %sub166, 2.500000e-01
>   %add168 = fadd double %58, %59
>   %add169 = fadd double %add168, %60
>   %add170 = fadd double %add169, %61
>   %add171 = fadd double %54, %55
>   %add172 = fadd double %add171, %56
>   %add173 = fadd double %add172, %57
>   %sub174 = fsub double %add170, %add173
>   %mul175 = fmul double %sub174, 2.500000e-01
>   %add176 = fadd double %67, %68
>   %add177 = fadd double %add176, %69
>   %add178 = fadd double %add177, %70
>   %add179 = fadd double %63, %64
>   %add180 = fadd double %add179, %65
>   %add181 = fadd double %add180, %66
>   %sub182 = fsub double %add178, %add181
>   %mul183 = fmul double %sub182, 2.500000e-01
>   %mul184 = fmul double %mul167, %mul157
>   %mul185 = fmul double %mul175, %mul158
>   %add186 = fadd double %mul184, %mul185
>   %mul187 = fmul double %mul183, %mul159
>   %add188 = fadd double %mul187, %add186
>   %76 = load double*, double** %m_delv_zeta.i, align 8, !tbaa !47
>   %arrayidx.i682 = getelementptr inbounds double, double* %76, i64 %indvars.iv
>   store double %add188, double* %arrayidx.i682, align 8, !tbaa !2
>   %mul191 = fmul double %mul82, %mul138
>   %mul192 = fmul double %mul130, %mul90
>   %sub193 = fsub double %mul191, %mul192
>   %mul194 = fmul double %mul122, %mul90
>   %mul195 = fmul double %mul74, %mul138
>   %sub196 = fsub double %mul194, %mul195
>   %mul197 = fmul double %mul74, %mul130
>   %mul198 = fmul double %mul122, %mul82
>   %sub199 = fsub double %mul197, %mul198
>   %mul200 = fmul double %sub193, %sub193
>   %mul201 = fmul double %sub196, %sub196
>   %add202 = fadd double %mul200, %mul201
>   %mul203 = fmul double %sub199, %sub199
>   %add204 = fadd double %mul203, %add202
>   %add205 = fadd double %add204, 0x38754484932D2E72
>   %call.i677 = call double @sqrt(double %add205) #7
>   %div207 = fdiv double %mul64, %call.i677
>   %77 = load double*, double** %m_delx_xi.i, align 8, !tbaa !42
>   %arrayidx.i676 = getelementptr inbounds double, double* %77, i64 %indvars.iv
>   store double %div207, double* %arrayidx.i676, align 8, !tbaa !2
>   %mul210 = fmul double %sub193, %div66
>   %mul211 = fmul double %sub196, %div66
>   %mul212 = fmul double %sub199, %div66
>   %add213 = fadd double %46, %47
>   %add214 = fadd double %add213, %51
>   %add215 = fadd double %50, %add214
>   %add216 = fadd double %45, %48
>   %add217 = fadd double %add216, %52
>   %add218 = fadd double %49, %add217
>   %sub219 = fsub double %add215, %add218
>   %mul220 = fmul double %sub219, 2.500000e-01
>   %add221 = fadd double %55, %56
>   %add222 = fadd double %add221, %60
>   %add223 = fadd double %59, %add222
>   %add224 = fadd double %54, %57
>   %add225 = fadd double %add224, %61
>   %add226 = fadd double %58, %add225
>   %sub227 = fsub double %add223, %add226
>   %mul228 = fmul double %sub227, 2.500000e-01
>   %add229 = fadd double %64, %65
>   %add230 = fadd double %add229, %69
>   %add231 = fadd double %68, %add230
>   %add232 = fadd double %63, %66
>   %add233 = fadd double %add232, %70
>   %add234 = fadd double %67, %add233
>   %sub235 = fsub double %add231, %add234
>   %mul236 = fmul double %sub235, 2.500000e-01
>   %mul237 = fmul double %mul220, %mul210
>   %mul238 = fmul double %mul228, %mul211
>   %add239 = fadd double %mul237, %mul238
>   %mul240 = fmul double %mul236, %mul212
>   %add241 = fadd double %mul240, %add239
>   %78 = load double*, double** %m_delv_xi.i, align 8, !tbaa !45
>   %arrayidx.i674 = getelementptr inbounds double, double* %78, i64 %indvars.iv
>   store double %add241, double* %arrayidx.i674, align 8, !tbaa !2
>   %mul244 = fmul double %mul130, %mul114
>   %mul245 = fmul double %mul106, %mul138
>   %sub246 = fsub double %mul244, %mul245
>   %mul247 = fmul double %mul98, %mul138
>   %mul248 = fmul double %mul122, %mul114
>   %sub249 = fsub double %mul247, %mul248
>   %mul250 = fmul double %mul122, %mul106
>   %mul251 = fmul double %mul98, %mul130
>   %sub252 = fsub double %mul250, %mul251
>   %mul253 = fmul double %sub246, %sub246
>   %mul254 = fmul double %sub249, %sub249
>   %add255 = fadd double %mul253, %mul254
>   %mul256 = fmul double %sub252, %sub252
>   %add257 = fadd double %mul256, %add255
>   %add258 = fadd double %add257, 0x38754484932D2E72
>   %call.i = call double @sqrt(double %add258) #7
>   %div260 = fdiv double %mul64, %call.i
>   %79 = load double*, double** %m_delx_eta.i, align 8, !tbaa !43
>   %arrayidx.i669 = getelementptr inbounds double, double* %79, i64 %indvars.iv
>   store double %div260, double* %arrayidx.i669, align 8, !tbaa !2
>   %mul263 = fmul double %sub246, %div66
>   %mul264 = fmul double %sub249, %div66
>   %mul265 = fmul double %sub252, %div66
>   %add267 = fadd double %add163, %50
>   %add268 = fadd double %49, %add267
>   %add269 = fadd double %47, %48
>   %add270 = fadd double %add269, %51
>   %add271 = fadd double %add270, %52
>   %sub272 = fsub double %add268, %add271
>   %mul273 = fmul double %sub272, -2.500000e-01
>   %add275 = fadd double %add171, %59
>   %add276 = fadd double %58, %add275
>   %add277 = fadd double %56, %57
>   %add278 = fadd double %add277, %60
>   %add279 = fadd double %add278, %61
>   %sub280 = fsub double %add276, %add279
>   %mul281 = fmul double %sub280, 2.500000e-01
>   %add283 = fadd double %add179, %68
>   %add284 = fadd double %67, %add283
>   %add285 = fadd double %65, %66
>   %add286 = fadd double %add285, %69
>   %add287 = fadd double %add286, %70
>   %sub288 = fsub double %add284, %add287
>   %mul289 = fmul double %sub288, 2.500000e-01
>   %mul290 = fmul double %mul273, %mul263
>   %mul291 = fmul double %mul281, %mul264
>   %80 = fsub double %mul290, %mul291
>   %mul293 = fmul double %mul289, %mul265
>   %81 = fsub double %80, %mul293
>   %82 = load double*, double** %m_delv_eta.i, align 8, !tbaa !46
>   %arrayidx.i = getelementptr inbounds double, double* %82, i64 %indvars.iv
>   store double %81, double* %arrayidx.i, align 8, !tbaa !2
>   %indvars.iv.next = add nsw i64 %indvars.iv, 1
>   %add297 = add nsw i32 %.omp.iv.0831, 1
>   %83 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %84 = sext i32 %83 to i64
>   %cmp6.not.not = icmp slt i64 %indvars.iv, %84
>   br i1 %cmp6.not.not, label %omp.inner.for.body, label %omp.loop.exit
> 
> omp.loop.exit:                                    ; preds = %omp.inner.for.body, %omp.precond.then
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %4)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #7
>   br label %omp.precond.end
12792c9434
< 417:                                              ; preds = %414
---
> omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
12794,12800d9435
< 
< 418:                                              ; preds = %414, %4
<   %419 = landingpad { i8*, i32 }
<           catch i8* null
<   %420 = extractvalue { i8*, i32 } %419, 0
<   call void @__clang_call_terminate(i8* %420) #29
<   unreachable
12804,12906c9439,9533
< define internal void @.omp_outlined..45(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, i32* nocapture nonnull readonly align 4 dereferenceable(4) %2, %class.Domain* nonnull readonly align 8 dereferenceable(1312) %3, i64 %4, i64 %5, i64 %6, i64 %7, i64 %8) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %10 = alloca i32, align 4
<   %11 = alloca i32, align 4
<   %12 = alloca i32, align 4
<   %13 = alloca i32, align 4
<   %14 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL28CalcMonotonicQRegionForElemsR6DomainidE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %14)
<           to label %15 unwind label %328
< 
< 15:                                               ; preds = %9
<   %16 = load i32, i32* %2, align 4, !tbaa !12
<   %17 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 18
<   %18 = load i32*, i32** %17, align 8, !tbaa !43
<   %19 = sext i32 %16 to i64
<   %20 = getelementptr inbounds i32, i32* %18, i64 %19
<   %21 = load i32, i32* %20, align 4, !tbaa !12
<   %22 = add nsw i32 %21, -1
<   %23 = icmp sgt i32 %21, 0
<   br i1 %23, label %26, label %24
< 
< 24:                                               ; preds = %15
<   %25 = load i32, i32* %0, align 4, !tbaa !12
<   br label %324
< 
< 26:                                               ; preds = %15
<   %27 = bitcast i32* %10 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %27) #10
<   store i32 0, i32* %10, align 4, !tbaa !12
<   %28 = bitcast i32* %11 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #10
<   store i32 %22, i32* %11, align 4, !tbaa !12
<   %29 = bitcast i32* %12 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %29) #10
<   store i32 1, i32* %12, align 4, !tbaa !12
<   %30 = bitcast i32* %13 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30) #10
<   store i32 0, i32* %13, align 4, !tbaa !12
<   %31 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %31, i32 34, i32* nonnull %13, i32* nonnull %10, i32* nonnull %11, i32* nonnull %12, i32 1, i32 1) #10
<   %32 = load i32, i32* %11, align 4, !tbaa !12
<   %33 = icmp slt i32 %32, %21
<   %34 = select i1 %33, i32 %32, i32 %22
<   store i32 %34, i32* %11, align 4, !tbaa !12
<   %35 = load i32, i32* %10, align 4, !tbaa !12
<   %36 = icmp sgt i32 %35, %34
<   br i1 %36, label %323, label %37
< 
< 37:                                               ; preds = %26
<   %38 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 20
<   %39 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 28, i32 0, i32 0, i32 0
<   %40 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 32
<   %41 = bitcast i64 %4 to double
<   %42 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 22, i32 0, i32 0, i32 0
<   %43 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 23, i32 0, i32 0, i32 0
<   %44 = bitcast i64 %5 to double
<   %45 = bitcast i64 %6 to double
<   %46 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 33
<   %47 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 24, i32 0, i32 0, i32 0
<   %48 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 25, i32 0, i32 0, i32 0
<   %49 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 34
<   %50 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 26, i32 0, i32 0, i32 0
<   %51 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 27, i32 0, i32 0, i32 0
<   %52 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 47, i32 0, i32 0, i32 0
<   %53 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 35
<   %54 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 36
<   %55 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 37
<   %56 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 50, i32 0, i32 0, i32 0
<   %57 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 44, i32 0, i32 0, i32 0
<   %58 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 45, i32 0, i32 0, i32 0
<   %59 = bitcast i64 %7 to double
<   %60 = fneg double %59
<   %61 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 42, i32 0, i32 0, i32 0
<   %62 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 41, i32 0, i32 0, i32 0
<   %63 = sext i32 %35 to i64
<   %64 = insertelement <2 x i64> undef, i64 %8, i32 0
<   %65 = bitcast <2 x i64> %64 to <2 x double>
<   %66 = insertelement <2 x double> %65, double %60, i32 1
<   br label %67
< 
< 67:                                               ; preds = %37, %311
<   %68 = phi i64 [ %63, %37 ], [ %319, %311 ]
<   %69 = load i32, i32* %2, align 4, !tbaa !12
<   %70 = load i32**, i32*** %38, align 8, !tbaa !44
<   %71 = sext i32 %69 to i64
<   %72 = getelementptr inbounds i32*, i32** %70, i64 %71
<   %73 = load i32*, i32** %72, align 8, !tbaa !6
<   %74 = getelementptr inbounds i32, i32* %73, i64 %68
<   %75 = load i32, i32* %74, align 4, !tbaa !12
<   %76 = sext i32 %75 to i64
<   %77 = load i32*, i32** %39, align 8, !tbaa !19
<   %78 = getelementptr inbounds i32, i32* %77, i64 %76
<   %79 = load i32, i32* %78, align 4, !tbaa !12
<   %80 = load double*, double** %40, align 8, !tbaa !64
<   %81 = getelementptr inbounds double, double* %80, i64 %76
<   %82 = load double, double* %81, align 8, !tbaa !2
<   %83 = fadd double %82, %41
<   %84 = fdiv double 1.000000e+00, %83
<   %85 = and i32 %79, 7
<   switch i32 %85, label %94 [
<     i32 4, label %86
<     i32 0, label %86
<     i32 1, label %93
<     i32 2, label %97
---
> define internal void @.omp_outlined..31(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture nonnull readonly align 4 dereferenceable(4) %r, %class.Domain* nonnull readonly align 8 dereferenceable(1312) %domain, i64 %ptiny, i64 %monoq_limiter_mult, i64 %monoq_max_slope, i64 %qlc_monoq, i64 %qqc_monoq) #6 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
> entry:
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %0 = load i32, i32* %r, align 4, !tbaa !6
>   %m_regElemSize.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 18
>   %1 = load i32*, i32** %m_regElemSize.i, align 8, !tbaa !48
>   %idxprom.i = sext i32 %0 to i64
>   %arrayidx.i = getelementptr inbounds i32, i32* %1, i64 %idxprom.i
>   %2 = load i32, i32* %arrayidx.i, align 4, !tbaa !6
>   %sub7 = add nsw i32 %2, -1
>   %cmp = icmp sgt i32 %2, 0
>   br i1 %cmp, label %omp.precond.then, label %omp.precond.end
> 
> omp.precond.then:                                 ; preds = %entry
>   %3 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %4 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #7
>   store i32 %sub7, i32* %.omp.ub, align 4, !tbaa !6
>   %5 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %6 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   %7 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %7, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %8 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp9.not = icmp slt i32 %8, %2
>   %cond = select i1 %cmp9.not, i32 %8, i32 %sub7
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %9 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp10.not491 = icmp sgt i32 %9, %cond
>   br i1 %cmp10.not491, label %omp.loop.exit, label %omp.inner.for.body.lr.ph
> 
> omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
>   %m_regElemlist.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 20
>   %_M_start.i.i487 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 28, i32 0, i32 0, i32 0, i32 0
>   %m_delv_xi.i483 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 32
>   %10 = bitcast i64 %ptiny to double
>   %_M_start.i.i481 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 22, i32 0, i32 0, i32 0, i32 0
>   %_M_start.i.i472 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 23, i32 0, i32 0, i32 0, i32 0
>   %11 = bitcast i64 %monoq_limiter_mult to double
>   %12 = bitcast i64 %monoq_max_slope to double
>   %m_delv_eta.i462 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 33
>   %_M_start.i.i460 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 24, i32 0, i32 0, i32 0, i32 0
>   %_M_start.i.i451 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 25, i32 0, i32 0, i32 0, i32 0
>   %m_delv_zeta.i441 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 34
>   %_M_start.i.i439 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 26, i32 0, i32 0, i32 0, i32 0
>   %_M_start.i.i430 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 27, i32 0, i32 0, i32 0, i32 0
>   %_M_start.i.i421 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 47, i32 0, i32 0, i32 0, i32 0
>   %m_delx_xi.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 35
>   %m_delx_eta.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 36
>   %m_delx_zeta.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 37
>   %_M_start.i.i406 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 50, i32 0, i32 0, i32 0, i32 0
>   %_M_start.i.i403 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 44, i32 0, i32 0, i32 0, i32 0
>   %_M_start.i.i400 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 45, i32 0, i32 0, i32 0, i32 0
>   %13 = bitcast i64 %qlc_monoq to double
>   %fneg = fneg double %13
>   %_M_start.i.i397 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 42, i32 0, i32 0, i32 0, i32 0
>   %_M_start.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 41, i32 0, i32 0, i32 0, i32 0
>   %14 = sext i32 %9 to i64
>   %15 = insertelement <2 x i64> undef, i64 %qqc_monoq, i32 0
>   %16 = bitcast <2 x i64> %15 to <2 x double>
>   %17 = insertelement <2 x double> %16, double %fneg, i32 1
>   br label %omp.inner.for.body
> 
> omp.inner.for.body:                               ; preds = %if.end197, %omp.inner.for.body.lr.ph
>   %indvars.iv = phi i64 [ %indvars.iv.next, %if.end197 ], [ %14, %omp.inner.for.body.lr.ph ]
>   %18 = load i32, i32* %r, align 4, !tbaa !6
>   %19 = load i32**, i32*** %m_regElemlist.i, align 8, !tbaa !56
>   %idxprom.i489 = sext i32 %18 to i64
>   %arrayidx.i490 = getelementptr inbounds i32*, i32** %19, i64 %idxprom.i489
>   %20 = load i32*, i32** %arrayidx.i490, align 8, !tbaa !41
>   %arrayidx3.i = getelementptr inbounds i32, i32* %20, i64 %indvars.iv
>   %21 = load i32, i32* %arrayidx3.i, align 4, !tbaa !6
>   %conv.i486 = sext i32 %21 to i64
>   %22 = load i32*, i32** %_M_start.i.i487, align 8, !tbaa !8
>   %add.ptr.i.i488 = getelementptr inbounds i32, i32* %22, i64 %conv.i486
>   %23 = load i32, i32* %add.ptr.i.i488, align 4, !tbaa !6
>   %24 = load double*, double** %m_delv_xi.i483, align 8, !tbaa !45
>   %arrayidx.i485 = getelementptr inbounds double, double* %24, i64 %conv.i486
>   %25 = load double, double* %arrayidx.i485, align 8, !tbaa !2
>   %add16 = fadd double %25, %10
>   %div17 = fdiv double 1.000000e+00, %add16
>   %and = and i32 %23, 7
>   switch i32 %and, label %sw.default [
>     i32 4, label %sw.bb
>     i32 0, label %sw.bb
>     i32 1, label %sw.bb22
>     i32 2, label %sw.epilog
12909,12934c9536,9561
< 86:                                               ; preds = %67, %67
<   %87 = load i32*, i32** %42, align 8, !tbaa !19
<   %88 = getelementptr inbounds i32, i32* %87, i64 %76
<   %89 = load i32, i32* %88, align 4, !tbaa !12
<   %90 = sext i32 %89 to i64
<   %91 = getelementptr inbounds double, double* %80, i64 %90
<   %92 = load double, double* %91, align 8, !tbaa !2
<   br label %97
< 
< 93:                                               ; preds = %67
<   br label %97
< 
< 94:                                               ; preds = %67
<   %95 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !6
<   %96 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %95, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.46, i64 0, i64 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.47, i64 0, i64 0), i32 2277) #31
<   br label %97
< 
< 97:                                               ; preds = %67, %94, %93, %86
<   %98 = phi double [ 0.000000e+00, %94 ], [ %82, %93 ], [ %92, %86 ], [ 0.000000e+00, %67 ]
<   %99 = lshr i32 %79, 3
<   %100 = and i32 %99, 7
<   switch i32 %100, label %113 [
<     i32 4, label %101
<     i32 0, label %101
<     i32 1, label %109
<     i32 2, label %116
---
> sw.bb:                                            ; preds = %omp.inner.for.body, %omp.inner.for.body
>   %26 = load i32*, i32** %_M_start.i.i481, align 8, !tbaa !8
>   %add.ptr.i.i482 = getelementptr inbounds i32, i32* %26, i64 %conv.i486
>   %27 = load i32, i32* %add.ptr.i.i482, align 4, !tbaa !6
>   %idxprom.i478 = sext i32 %27 to i64
>   %arrayidx.i479 = getelementptr inbounds double, double* %24, i64 %idxprom.i478
>   %28 = load double, double* %arrayidx.i479, align 8, !tbaa !2
>   br label %sw.epilog
> 
> sw.bb22:                                          ; preds = %omp.inner.for.body
>   br label %sw.epilog
> 
> sw.default:                                       ; preds = %omp.inner.for.body
>   %29 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !41
>   %call26 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.32, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.33, i64 0, i64 0), i32 1812) #27
>   br label %sw.epilog
> 
> sw.epilog:                                        ; preds = %omp.inner.for.body, %sw.default, %sw.bb22, %sw.bb
>   %delvm.0 = phi double [ 0.000000e+00, %sw.default ], [ %25, %sw.bb22 ], [ %28, %sw.bb ], [ 0.000000e+00, %omp.inner.for.body ]
>   %and27 = lshr i32 %23, 3
>   %30 = and i32 %and27, 7
>   switch i32 %30, label %sw.default35 [
>     i32 4, label %sw.bb28
>     i32 0, label %sw.bb28
>     i32 1, label %sw.bb32
>     i32 2, label %sw.epilog38
12937,12985c9564,9612
< 101:                                              ; preds = %97, %97
<   %102 = load i32*, i32** %43, align 8, !tbaa !19
<   %103 = getelementptr inbounds i32, i32* %102, i64 %76
<   %104 = load i32, i32* %103, align 4, !tbaa !12
<   %105 = load double*, double** %40, align 8, !tbaa !64
<   %106 = sext i32 %104 to i64
<   %107 = getelementptr inbounds double, double* %105, i64 %106
<   %108 = load double, double* %107, align 8, !tbaa !2
<   br label %116
< 
< 109:                                              ; preds = %97
<   %110 = load double*, double** %40, align 8, !tbaa !64
<   %111 = getelementptr inbounds double, double* %110, i64 %76
<   %112 = load double, double* %111, align 8, !tbaa !2
<   br label %116
< 
< 113:                                              ; preds = %97
<   %114 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !6
<   %115 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %114, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.46, i64 0, i64 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.47, i64 0, i64 0), i32 2287) #31
<   br label %116
< 
< 116:                                              ; preds = %97, %113, %109, %101
<   %117 = phi double [ 0.000000e+00, %113 ], [ %112, %109 ], [ %108, %101 ], [ 0.000000e+00, %97 ]
<   %118 = fmul double %84, %98
<   %119 = fmul double %84, %117
<   %120 = fadd double %118, %119
<   %121 = fmul double %120, 5.000000e-01
<   %122 = fmul double %118, %44
<   %123 = fmul double %119, %44
<   %124 = fcmp olt double %122, %121
<   %125 = select i1 %124, double %122, double %121
<   %126 = fcmp olt double %123, %125
<   %127 = select i1 %126, double %123, double %125
<   %128 = fcmp olt double %127, 0.000000e+00
<   %129 = select i1 %128, double 0.000000e+00, double %127
<   %130 = fcmp ogt double %129, %45
<   %131 = select i1 %130, double %45, double %129
<   %132 = load double*, double** %46, align 8, !tbaa !65
<   %133 = getelementptr inbounds double, double* %132, i64 %76
<   %134 = load double, double* %133, align 8, !tbaa !2
<   %135 = fadd double %134, %41
<   %136 = fdiv double 1.000000e+00, %135
<   %137 = lshr i32 %79, 6
<   %138 = and i32 %137, 7
<   switch i32 %138, label %147 [
<     i32 4, label %139
<     i32 0, label %139
<     i32 1, label %146
<     i32 2, label %150
---
> sw.bb28:                                          ; preds = %sw.epilog, %sw.epilog
>   %31 = load i32*, i32** %_M_start.i.i472, align 8, !tbaa !8
>   %add.ptr.i.i473 = getelementptr inbounds i32, i32* %31, i64 %conv.i486
>   %32 = load i32, i32* %add.ptr.i.i473, align 4, !tbaa !6
>   %33 = load double*, double** %m_delv_xi.i483, align 8, !tbaa !45
>   %idxprom.i469 = sext i32 %32 to i64
>   %arrayidx.i470 = getelementptr inbounds double, double* %33, i64 %idxprom.i469
>   %34 = load double, double* %arrayidx.i470, align 8, !tbaa !2
>   br label %sw.epilog38
> 
> sw.bb32:                                          ; preds = %sw.epilog
>   %35 = load double*, double** %m_delv_xi.i483, align 8, !tbaa !45
>   %arrayidx.i467 = getelementptr inbounds double, double* %35, i64 %conv.i486
>   %36 = load double, double* %arrayidx.i467, align 8, !tbaa !2
>   br label %sw.epilog38
> 
> sw.default35:                                     ; preds = %sw.epilog
>   %37 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !41
>   %call37 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.32, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.33, i64 0, i64 0), i32 1822) #27
>   br label %sw.epilog38
> 
> sw.epilog38:                                      ; preds = %sw.epilog, %sw.default35, %sw.bb32, %sw.bb28
>   %delvp.0 = phi double [ 0.000000e+00, %sw.default35 ], [ %36, %sw.bb32 ], [ %34, %sw.bb28 ], [ 0.000000e+00, %sw.epilog ]
>   %mul39 = fmul double %div17, %delvm.0
>   %mul40 = fmul double %div17, %delvp.0
>   %add41 = fadd double %mul39, %mul40
>   %mul42 = fmul double %add41, 5.000000e-01
>   %mul43 = fmul double %mul39, %11
>   %mul44 = fmul double %mul40, %11
>   %cmp45 = fcmp olt double %mul43, %mul42
>   %phixi.0 = select i1 %cmp45, double %mul43, double %mul42
>   %cmp46 = fcmp olt double %mul44, %phixi.0
>   %phixi.1 = select i1 %cmp46, double %mul44, double %phixi.0
>   %cmp49 = fcmp olt double %phixi.1, 0.000000e+00
>   %phixi.2 = select i1 %cmp49, double 0.000000e+00, double %phixi.1
>   %cmp52 = fcmp ogt double %phixi.2, %12
>   %phixi.3 = select i1 %cmp52, double %12, double %phixi.2
>   %38 = load double*, double** %m_delv_eta.i462, align 8, !tbaa !46
>   %arrayidx.i464 = getelementptr inbounds double, double* %38, i64 %conv.i486
>   %39 = load double, double* %arrayidx.i464, align 8, !tbaa !2
>   %add56 = fadd double %39, %10
>   %div57 = fdiv double 1.000000e+00, %add56
>   %and58 = lshr i32 %23, 6
>   %40 = and i32 %and58, 7
>   switch i32 %40, label %sw.default66 [
>     i32 4, label %sw.bb59
>     i32 0, label %sw.bb59
>     i32 1, label %sw.bb63
>     i32 2, label %sw.epilog69
12988,13013c9615,9640
< 139:                                              ; preds = %116, %116
<   %140 = load i32*, i32** %47, align 8, !tbaa !19
<   %141 = getelementptr inbounds i32, i32* %140, i64 %76
<   %142 = load i32, i32* %141, align 4, !tbaa !12
<   %143 = sext i32 %142 to i64
<   %144 = getelementptr inbounds double, double* %132, i64 %143
<   %145 = load double, double* %144, align 8, !tbaa !2
<   br label %150
< 
< 146:                                              ; preds = %116
<   br label %150
< 
< 147:                                              ; preds = %116
<   %148 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !6
<   %149 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %148, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.46, i64 0, i64 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.47, i64 0, i64 0), i32 2315) #31
<   br label %150
< 
< 150:                                              ; preds = %116, %147, %146, %139
<   %151 = phi double [ 0.000000e+00, %147 ], [ %134, %146 ], [ %145, %139 ], [ 0.000000e+00, %116 ]
<   %152 = lshr i32 %79, 9
<   %153 = and i32 %152, 7
<   switch i32 %153, label %166 [
<     i32 4, label %154
<     i32 0, label %154
<     i32 1, label %162
<     i32 2, label %169
---
> sw.bb59:                                          ; preds = %sw.epilog38, %sw.epilog38
>   %41 = load i32*, i32** %_M_start.i.i460, align 8, !tbaa !8
>   %add.ptr.i.i461 = getelementptr inbounds i32, i32* %41, i64 %conv.i486
>   %42 = load i32, i32* %add.ptr.i.i461, align 4, !tbaa !6
>   %idxprom.i457 = sext i32 %42 to i64
>   %arrayidx.i458 = getelementptr inbounds double, double* %38, i64 %idxprom.i457
>   %43 = load double, double* %arrayidx.i458, align 8, !tbaa !2
>   br label %sw.epilog69
> 
> sw.bb63:                                          ; preds = %sw.epilog38
>   br label %sw.epilog69
> 
> sw.default66:                                     ; preds = %sw.epilog38
>   %44 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !41
>   %call68 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %44, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.32, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.33, i64 0, i64 0), i32 1850) #27
>   br label %sw.epilog69
> 
> sw.epilog69:                                      ; preds = %sw.epilog38, %sw.default66, %sw.bb63, %sw.bb59
>   %delvm.1 = phi double [ 0.000000e+00, %sw.default66 ], [ %39, %sw.bb63 ], [ %43, %sw.bb59 ], [ 0.000000e+00, %sw.epilog38 ]
>   %and70 = lshr i32 %23, 9
>   %45 = and i32 %and70, 7
>   switch i32 %45, label %sw.default78 [
>     i32 4, label %sw.bb71
>     i32 0, label %sw.bb71
>     i32 1, label %sw.bb75
>     i32 2, label %sw.epilog81
13016,13064c9643,9691
< 154:                                              ; preds = %150, %150
<   %155 = load i32*, i32** %48, align 8, !tbaa !19
<   %156 = getelementptr inbounds i32, i32* %155, i64 %76
<   %157 = load i32, i32* %156, align 4, !tbaa !12
<   %158 = load double*, double** %46, align 8, !tbaa !65
<   %159 = sext i32 %157 to i64
<   %160 = getelementptr inbounds double, double* %158, i64 %159
<   %161 = load double, double* %160, align 8, !tbaa !2
<   br label %169
< 
< 162:                                              ; preds = %150
<   %163 = load double*, double** %46, align 8, !tbaa !65
<   %164 = getelementptr inbounds double, double* %163, i64 %76
<   %165 = load double, double* %164, align 8, !tbaa !2
<   br label %169
< 
< 166:                                              ; preds = %150
<   %167 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !6
<   %168 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %167, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.46, i64 0, i64 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.47, i64 0, i64 0), i32 2325) #31
<   br label %169
< 
< 169:                                              ; preds = %150, %166, %162, %154
<   %170 = phi double [ 0.000000e+00, %166 ], [ %165, %162 ], [ %161, %154 ], [ 0.000000e+00, %150 ]
<   %171 = fmul double %136, %151
<   %172 = fmul double %136, %170
<   %173 = fadd double %171, %172
<   %174 = fmul double %173, 5.000000e-01
<   %175 = fmul double %171, %44
<   %176 = fmul double %172, %44
<   %177 = fcmp olt double %175, %174
<   %178 = select i1 %177, double %175, double %174
<   %179 = fcmp olt double %176, %178
<   %180 = select i1 %179, double %176, double %178
<   %181 = fcmp olt double %180, 0.000000e+00
<   %182 = select i1 %181, double 0.000000e+00, double %180
<   %183 = fcmp ogt double %182, %45
<   %184 = select i1 %183, double %45, double %182
<   %185 = load double*, double** %49, align 8, !tbaa !66
<   %186 = getelementptr inbounds double, double* %185, i64 %76
<   %187 = load double, double* %186, align 8, !tbaa !2
<   %188 = fadd double %187, %41
<   %189 = fdiv double 1.000000e+00, %188
<   %190 = lshr i32 %79, 12
<   %191 = and i32 %190, 7
<   switch i32 %191, label %200 [
<     i32 4, label %192
<     i32 0, label %192
<     i32 1, label %199
<     i32 2, label %203
---
> sw.bb71:                                          ; preds = %sw.epilog69, %sw.epilog69
>   %46 = load i32*, i32** %_M_start.i.i451, align 8, !tbaa !8
>   %add.ptr.i.i452 = getelementptr inbounds i32, i32* %46, i64 %conv.i486
>   %47 = load i32, i32* %add.ptr.i.i452, align 4, !tbaa !6
>   %48 = load double*, double** %m_delv_eta.i462, align 8, !tbaa !46
>   %idxprom.i448 = sext i32 %47 to i64
>   %arrayidx.i449 = getelementptr inbounds double, double* %48, i64 %idxprom.i448
>   %49 = load double, double* %arrayidx.i449, align 8, !tbaa !2
>   br label %sw.epilog81
> 
> sw.bb75:                                          ; preds = %sw.epilog69
>   %50 = load double*, double** %m_delv_eta.i462, align 8, !tbaa !46
>   %arrayidx.i446 = getelementptr inbounds double, double* %50, i64 %conv.i486
>   %51 = load double, double* %arrayidx.i446, align 8, !tbaa !2
>   br label %sw.epilog81
> 
> sw.default78:                                     ; preds = %sw.epilog69
>   %52 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !41
>   %call80 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %52, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.32, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.33, i64 0, i64 0), i32 1860) #27
>   br label %sw.epilog81
> 
> sw.epilog81:                                      ; preds = %sw.epilog69, %sw.default78, %sw.bb75, %sw.bb71
>   %delvp.1 = phi double [ 0.000000e+00, %sw.default78 ], [ %51, %sw.bb75 ], [ %49, %sw.bb71 ], [ 0.000000e+00, %sw.epilog69 ]
>   %mul82 = fmul double %div57, %delvm.1
>   %mul83 = fmul double %div57, %delvp.1
>   %add84 = fadd double %mul82, %mul83
>   %mul85 = fmul double %add84, 5.000000e-01
>   %mul86 = fmul double %mul82, %11
>   %mul87 = fmul double %mul83, %11
>   %cmp88 = fcmp olt double %mul86, %mul85
>   %phieta.0 = select i1 %cmp88, double %mul86, double %mul85
>   %cmp91 = fcmp olt double %mul87, %phieta.0
>   %phieta.1 = select i1 %cmp91, double %mul87, double %phieta.0
>   %cmp94 = fcmp olt double %phieta.1, 0.000000e+00
>   %phieta.2 = select i1 %cmp94, double 0.000000e+00, double %phieta.1
>   %cmp97 = fcmp ogt double %phieta.2, %12
>   %phieta.3 = select i1 %cmp97, double %12, double %phieta.2
>   %53 = load double*, double** %m_delv_zeta.i441, align 8, !tbaa !47
>   %arrayidx.i443 = getelementptr inbounds double, double* %53, i64 %conv.i486
>   %54 = load double, double* %arrayidx.i443, align 8, !tbaa !2
>   %add101 = fadd double %54, %10
>   %div102 = fdiv double 1.000000e+00, %add101
>   %and103 = lshr i32 %23, 12
>   %55 = and i32 %and103, 7
>   switch i32 %55, label %sw.default111 [
>     i32 4, label %sw.bb104
>     i32 0, label %sw.bb104
>     i32 1, label %sw.bb108
>     i32 2, label %sw.epilog114
13067,13092c9694,9719
< 192:                                              ; preds = %169, %169
<   %193 = load i32*, i32** %50, align 8, !tbaa !19
<   %194 = getelementptr inbounds i32, i32* %193, i64 %76
<   %195 = load i32, i32* %194, align 4, !tbaa !12
<   %196 = sext i32 %195 to i64
<   %197 = getelementptr inbounds double, double* %185, i64 %196
<   %198 = load double, double* %197, align 8, !tbaa !2
<   br label %203
< 
< 199:                                              ; preds = %169
<   br label %203
< 
< 200:                                              ; preds = %169
<   %201 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !6
<   %202 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %201, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.46, i64 0, i64 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.47, i64 0, i64 0), i32 2352) #31
<   br label %203
< 
< 203:                                              ; preds = %169, %200, %199, %192
<   %204 = phi double [ 0.000000e+00, %200 ], [ %187, %199 ], [ %198, %192 ], [ 0.000000e+00, %169 ]
<   %205 = lshr i32 %79, 15
<   %206 = and i32 %205, 7
<   switch i32 %206, label %219 [
<     i32 4, label %207
<     i32 0, label %207
<     i32 1, label %215
<     i32 2, label %222
---
> sw.bb104:                                         ; preds = %sw.epilog81, %sw.epilog81
>   %56 = load i32*, i32** %_M_start.i.i439, align 8, !tbaa !8
>   %add.ptr.i.i440 = getelementptr inbounds i32, i32* %56, i64 %conv.i486
>   %57 = load i32, i32* %add.ptr.i.i440, align 4, !tbaa !6
>   %idxprom.i436 = sext i32 %57 to i64
>   %arrayidx.i437 = getelementptr inbounds double, double* %53, i64 %idxprom.i436
>   %58 = load double, double* %arrayidx.i437, align 8, !tbaa !2
>   br label %sw.epilog114
> 
> sw.bb108:                                         ; preds = %sw.epilog81
>   br label %sw.epilog114
> 
> sw.default111:                                    ; preds = %sw.epilog81
>   %59 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !41
>   %call113 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %59, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.32, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.33, i64 0, i64 0), i32 1887) #27
>   br label %sw.epilog114
> 
> sw.epilog114:                                     ; preds = %sw.epilog81, %sw.default111, %sw.bb108, %sw.bb104
>   %delvm.2 = phi double [ 0.000000e+00, %sw.default111 ], [ %54, %sw.bb108 ], [ %58, %sw.bb104 ], [ 0.000000e+00, %sw.epilog81 ]
>   %and115 = lshr i32 %23, 15
>   %60 = and i32 %and115, 7
>   switch i32 %60, label %sw.default123 [
>     i32 4, label %sw.bb116
>     i32 0, label %sw.bb116
>     i32 1, label %sw.bb120
>     i32 2, label %sw.epilog126
13095,13238c9722,9858
< 207:                                              ; preds = %203, %203
<   %208 = load i32*, i32** %51, align 8, !tbaa !19
<   %209 = getelementptr inbounds i32, i32* %208, i64 %76
<   %210 = load i32, i32* %209, align 4, !tbaa !12
<   %211 = load double*, double** %49, align 8, !tbaa !66
<   %212 = sext i32 %210 to i64
<   %213 = getelementptr inbounds double, double* %211, i64 %212
<   %214 = load double, double* %213, align 8, !tbaa !2
<   br label %222
< 
< 215:                                              ; preds = %203
<   %216 = load double*, double** %49, align 8, !tbaa !66
<   %217 = getelementptr inbounds double, double* %216, i64 %76
<   %218 = load double, double* %217, align 8, !tbaa !2
<   br label %222
< 
< 219:                                              ; preds = %203
<   %220 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !6
<   %221 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %220, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.46, i64 0, i64 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.47, i64 0, i64 0), i32 2362) #31
<   br label %222
< 
< 222:                                              ; preds = %203, %219, %215, %207
<   %223 = phi double [ 0.000000e+00, %219 ], [ %218, %215 ], [ %214, %207 ], [ 0.000000e+00, %203 ]
<   %224 = fmul double %189, %204
<   %225 = fmul double %189, %223
<   %226 = fadd double %224, %225
<   %227 = fmul double %226, 5.000000e-01
<   %228 = fmul double %224, %44
<   %229 = fmul double %225, %44
<   %230 = fcmp olt double %228, %227
<   %231 = select i1 %230, double %228, double %227
<   %232 = fcmp olt double %229, %231
<   %233 = select i1 %232, double %229, double %231
<   %234 = fcmp olt double %233, 0.000000e+00
<   %235 = select i1 %234, double 0.000000e+00, double %233
<   %236 = fcmp ogt double %235, %45
<   %237 = select i1 %236, double %45, double %235
<   %238 = load double*, double** %52, align 8, !tbaa !22
<   %239 = getelementptr inbounds double, double* %238, i64 %76
<   %240 = load double, double* %239, align 8, !tbaa !2
<   %241 = fcmp ogt double %240, 0.000000e+00
<   br i1 %241, label %311, label %242
< 
< 242:                                              ; preds = %222
<   %243 = load double*, double** %40, align 8, !tbaa !64
<   %244 = getelementptr inbounds double, double* %243, i64 %76
<   %245 = load double, double* %244, align 8, !tbaa !2
<   %246 = load double*, double** %53, align 8, !tbaa !61
<   %247 = getelementptr inbounds double, double* %246, i64 %76
<   %248 = load double, double* %247, align 8, !tbaa !2
<   %249 = fmul double %245, %248
<   %250 = load double*, double** %46, align 8, !tbaa !65
<   %251 = getelementptr inbounds double, double* %250, i64 %76
<   %252 = load double, double* %251, align 8, !tbaa !2
<   %253 = load double*, double** %54, align 8, !tbaa !62
<   %254 = getelementptr inbounds double, double* %253, i64 %76
<   %255 = load double, double* %254, align 8, !tbaa !2
<   %256 = fmul double %252, %255
<   %257 = load double*, double** %49, align 8, !tbaa !66
<   %258 = getelementptr inbounds double, double* %257, i64 %76
<   %259 = load double, double* %258, align 8, !tbaa !2
<   %260 = load double*, double** %55, align 8, !tbaa !63
<   %261 = getelementptr inbounds double, double* %260, i64 %76
<   %262 = load double, double* %261, align 8, !tbaa !2
<   %263 = fmul double %259, %262
<   %264 = fcmp ogt double %249, 0.000000e+00
<   %265 = select i1 %264, double 0.000000e+00, double %249
<   %266 = fcmp ogt double %256, 0.000000e+00
<   %267 = select i1 %266, double 0.000000e+00, double %256
<   %268 = fcmp ogt double %263, 0.000000e+00
<   %269 = select i1 %268, double 0.000000e+00, double %263
<   %270 = load double*, double** %56, align 8, !tbaa !22
<   %271 = getelementptr inbounds double, double* %270, i64 %76
<   %272 = load double, double* %271, align 8, !tbaa !2
<   %273 = load double*, double** %57, align 8, !tbaa !22
<   %274 = getelementptr inbounds double, double* %273, i64 %76
<   %275 = load double, double* %274, align 8, !tbaa !2
<   %276 = load double*, double** %58, align 8, !tbaa !22
<   %277 = getelementptr inbounds double, double* %276, i64 %76
<   %278 = load double, double* %277, align 8, !tbaa !2
<   %279 = fmul double %275, %278
<   %280 = fdiv double %272, %279
<   %281 = insertelement <2 x double> poison, double %280, i32 0
<   %282 = shufflevector <2 x double> %281, <2 x double> undef, <2 x i32> zeroinitializer
<   %283 = fmul <2 x double> %282, %66
<   %284 = fmul double %265, %265
<   %285 = fmul double %131, %131
<   %286 = insertelement <2 x double> poison, double %285, i32 0
<   %287 = insertelement <2 x double> %286, double %131, i32 1
<   %288 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %287
<   %289 = insertelement <2 x double> poison, double %284, i32 0
<   %290 = insertelement <2 x double> %289, double %265, i32 1
<   %291 = fmul <2 x double> %288, %290
<   %292 = fmul double %267, %267
<   %293 = fmul double %184, %184
<   %294 = insertelement <2 x double> poison, double %293, i32 0
<   %295 = insertelement <2 x double> %294, double %184, i32 1
<   %296 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %295
<   %297 = insertelement <2 x double> poison, double %292, i32 0
<   %298 = insertelement <2 x double> %297, double %267, i32 1
<   %299 = fmul <2 x double> %296, %298
<   %300 = fadd <2 x double> %291, %299
<   %301 = fmul double %269, %269
<   %302 = fmul double %237, %237
<   %303 = insertelement <2 x double> poison, double %302, i32 0
<   %304 = insertelement <2 x double> %303, double %237, i32 1
<   %305 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %304
<   %306 = insertelement <2 x double> poison, double %301, i32 0
<   %307 = insertelement <2 x double> %306, double %269, i32 1
<   %308 = fmul <2 x double> %305, %307
<   %309 = fadd <2 x double> %300, %308
<   %310 = fmul <2 x double> %309, %283
<   br label %311
< 
< 311:                                              ; preds = %222, %242
<   %312 = phi <2 x double> [ %310, %242 ], [ zeroinitializer, %222 ]
<   %313 = load double*, double** %61, align 8, !tbaa !22
<   %314 = getelementptr inbounds double, double* %313, i64 %76
<   %315 = extractelement <2 x double> %312, i32 0
<   store double %315, double* %314, align 8, !tbaa !2
<   %316 = load double*, double** %62, align 8, !tbaa !22
<   %317 = getelementptr inbounds double, double* %316, i64 %76
<   %318 = extractelement <2 x double> %312, i32 1
<   store double %318, double* %317, align 8, !tbaa !2
<   %319 = add nsw i64 %68, 1
<   %320 = load i32, i32* %11, align 4, !tbaa !12
<   %321 = sext i32 %320 to i64
<   %322 = icmp slt i64 %68, %321
<   br i1 %322, label %67, label %323
< 
< 323:                                              ; preds = %311, %26
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %31)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %29) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %27) #10
<   br label %324
< 
< 324:                                              ; preds = %24, %323
<   %325 = phi i32 [ %25, %24 ], [ %31, %323 ]
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %325)
<   %326 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL28CalcMonotonicQRegionForElemsR6DomainidE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %326)
<           to label %327 unwind label %328
---
> sw.bb116:                                         ; preds = %sw.epilog114, %sw.epilog114
>   %61 = load i32*, i32** %_M_start.i.i430, align 8, !tbaa !8
>   %add.ptr.i.i431 = getelementptr inbounds i32, i32* %61, i64 %conv.i486
>   %62 = load i32, i32* %add.ptr.i.i431, align 4, !tbaa !6
>   %63 = load double*, double** %m_delv_zeta.i441, align 8, !tbaa !47
>   %idxprom.i427 = sext i32 %62 to i64
>   %arrayidx.i428 = getelementptr inbounds double, double* %63, i64 %idxprom.i427
>   %64 = load double, double* %arrayidx.i428, align 8, !tbaa !2
>   br label %sw.epilog126
> 
> sw.bb120:                                         ; preds = %sw.epilog114
>   %65 = load double*, double** %m_delv_zeta.i441, align 8, !tbaa !47
>   %arrayidx.i425 = getelementptr inbounds double, double* %65, i64 %conv.i486
>   %66 = load double, double* %arrayidx.i425, align 8, !tbaa !2
>   br label %sw.epilog126
> 
> sw.default123:                                    ; preds = %sw.epilog114
>   %67 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !41
>   %call125 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %67, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.32, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.33, i64 0, i64 0), i32 1897) #27
>   br label %sw.epilog126
> 
> sw.epilog126:                                     ; preds = %sw.epilog114, %sw.default123, %sw.bb120, %sw.bb116
>   %delvp.2 = phi double [ 0.000000e+00, %sw.default123 ], [ %66, %sw.bb120 ], [ %64, %sw.bb116 ], [ 0.000000e+00, %sw.epilog114 ]
>   %mul127 = fmul double %div102, %delvm.2
>   %mul128 = fmul double %div102, %delvp.2
>   %add129 = fadd double %mul127, %mul128
>   %mul130 = fmul double %add129, 5.000000e-01
>   %mul131 = fmul double %mul127, %11
>   %mul132 = fmul double %mul128, %11
>   %cmp133 = fcmp olt double %mul131, %mul130
>   %phizeta.0 = select i1 %cmp133, double %mul131, double %mul130
>   %cmp136 = fcmp olt double %mul132, %phizeta.0
>   %phizeta.1 = select i1 %cmp136, double %mul132, double %phizeta.0
>   %cmp139 = fcmp olt double %phizeta.1, 0.000000e+00
>   %phizeta.2 = select i1 %cmp139, double 0.000000e+00, double %phizeta.1
>   %cmp142 = fcmp ogt double %phizeta.2, %12
>   %phizeta.3 = select i1 %cmp142, double %12, double %phizeta.2
>   %68 = load double*, double** %_M_start.i.i421, align 8, !tbaa !11
>   %add.ptr.i.i422 = getelementptr inbounds double, double* %68, i64 %conv.i486
>   %69 = load double, double* %add.ptr.i.i422, align 8, !tbaa !2
>   %cmp146 = fcmp ogt double %69, 0.000000e+00
>   br i1 %cmp146, label %if.end197, label %if.else
> 
> if.else:                                          ; preds = %sw.epilog126
>   %70 = load double*, double** %m_delv_xi.i483, align 8, !tbaa !45
>   %arrayidx.i419 = getelementptr inbounds double, double* %70, i64 %conv.i486
>   %71 = load double, double* %arrayidx.i419, align 8, !tbaa !2
>   %72 = load double*, double** %m_delx_xi.i, align 8, !tbaa !42
>   %arrayidx.i417 = getelementptr inbounds double, double* %72, i64 %conv.i486
>   %73 = load double, double* %arrayidx.i417, align 8, !tbaa !2
>   %mul150 = fmul double %71, %73
>   %74 = load double*, double** %m_delv_eta.i462, align 8, !tbaa !46
>   %arrayidx.i415 = getelementptr inbounds double, double* %74, i64 %conv.i486
>   %75 = load double, double* %arrayidx.i415, align 8, !tbaa !2
>   %76 = load double*, double** %m_delx_eta.i, align 8, !tbaa !43
>   %arrayidx.i413 = getelementptr inbounds double, double* %76, i64 %conv.i486
>   %77 = load double, double* %arrayidx.i413, align 8, !tbaa !2
>   %mul153 = fmul double %75, %77
>   %78 = load double*, double** %m_delv_zeta.i441, align 8, !tbaa !47
>   %arrayidx.i411 = getelementptr inbounds double, double* %78, i64 %conv.i486
>   %79 = load double, double* %arrayidx.i411, align 8, !tbaa !2
>   %80 = load double*, double** %m_delx_zeta.i, align 8, !tbaa !44
>   %arrayidx.i409 = getelementptr inbounds double, double* %80, i64 %conv.i486
>   %81 = load double, double* %arrayidx.i409, align 8, !tbaa !2
>   %mul156 = fmul double %79, %81
>   %cmp157 = fcmp ogt double %mul150, 0.000000e+00
>   %delvxxi.0 = select i1 %cmp157, double 0.000000e+00, double %mul150
>   %cmp160 = fcmp ogt double %mul153, 0.000000e+00
>   %delvxeta.0 = select i1 %cmp160, double 0.000000e+00, double %mul153
>   %cmp163 = fcmp ogt double %mul156, 0.000000e+00
>   %delvxzeta.0 = select i1 %cmp163, double 0.000000e+00, double %mul156
>   %82 = load double*, double** %_M_start.i.i406, align 8, !tbaa !11
>   %add.ptr.i.i407 = getelementptr inbounds double, double* %82, i64 %conv.i486
>   %83 = load double, double* %add.ptr.i.i407, align 8, !tbaa !2
>   %84 = load double*, double** %_M_start.i.i403, align 8, !tbaa !11
>   %add.ptr.i.i404 = getelementptr inbounds double, double* %84, i64 %conv.i486
>   %85 = load double, double* %add.ptr.i.i404, align 8, !tbaa !2
>   %86 = load double*, double** %_M_start.i.i400, align 8, !tbaa !11
>   %add.ptr.i.i401 = getelementptr inbounds double, double* %86, i64 %conv.i486
>   %87 = load double, double* %add.ptr.i.i401, align 8, !tbaa !2
>   %mul169 = fmul double %85, %87
>   %div170 = fdiv double %83, %mul169
>   %88 = insertelement <2 x double> undef, double %div170, i32 0
>   %89 = shufflevector <2 x double> %88, <2 x double> undef, <2 x i32> zeroinitializer
>   %90 = fmul <2 x double> %89, %17
>   %mul182 = fmul double %delvxxi.0, %delvxxi.0
>   %mul183 = fmul double %phixi.3, %phixi.3
>   %91 = insertelement <2 x double> undef, double %mul183, i32 0
>   %92 = insertelement <2 x double> %91, double %phixi.3, i32 1
>   %93 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %92
>   %94 = insertelement <2 x double> undef, double %mul182, i32 0
>   %95 = insertelement <2 x double> %94, double %delvxxi.0, i32 1
>   %96 = fmul <2 x double> %93, %95
>   %mul186 = fmul double %delvxeta.0, %delvxeta.0
>   %mul187 = fmul double %phieta.3, %phieta.3
>   %97 = insertelement <2 x double> undef, double %mul187, i32 0
>   %98 = insertelement <2 x double> %97, double %phieta.3, i32 1
>   %99 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %98
>   %100 = insertelement <2 x double> undef, double %mul186, i32 0
>   %101 = insertelement <2 x double> %100, double %delvxeta.0, i32 1
>   %102 = fmul <2 x double> %99, %101
>   %103 = fadd <2 x double> %96, %102
>   %mul191 = fmul double %delvxzeta.0, %delvxzeta.0
>   %mul192 = fmul double %phizeta.3, %phizeta.3
>   %104 = insertelement <2 x double> undef, double %mul192, i32 0
>   %105 = insertelement <2 x double> %104, double %phizeta.3, i32 1
>   %106 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %105
>   %107 = insertelement <2 x double> undef, double %mul191, i32 0
>   %108 = insertelement <2 x double> %107, double %delvxzeta.0, i32 1
>   %109 = fmul <2 x double> %106, %108
>   %110 = fadd <2 x double> %103, %109
>   %111 = fmul <2 x double> %110, %90
>   br label %if.end197
> 
> if.end197:                                        ; preds = %sw.epilog126, %if.else
>   %112 = phi <2 x double> [ %111, %if.else ], [ zeroinitializer, %sw.epilog126 ]
>   %113 = load double*, double** %_M_start.i.i397, align 8, !tbaa !11
>   %add.ptr.i.i398 = getelementptr inbounds double, double* %113, i64 %conv.i486
>   %114 = extractelement <2 x double> %112, i32 0
>   store double %114, double* %add.ptr.i.i398, align 8, !tbaa !2
>   %115 = load double*, double** %_M_start.i.i, align 8, !tbaa !11
>   %add.ptr.i.i = getelementptr inbounds double, double* %115, i64 %conv.i486
>   %116 = extractelement <2 x double> %112, i32 1
>   store double %116, double* %add.ptr.i.i, align 8, !tbaa !2
>   %indvars.iv.next = add nsw i64 %indvars.iv, 1
>   %117 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %118 = sext i32 %117 to i64
>   %cmp10.not.not = icmp slt i64 %indvars.iv, %118
>   br i1 %cmp10.not.not, label %omp.inner.for.body, label %omp.loop.exit
> 
> omp.loop.exit:                                    ; preds = %if.end197, %omp.precond.then
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %7)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #7
>   br label %omp.precond.end
13240c9860
< 327:                                              ; preds = %324
---
> omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
13242,13248d9861
< 
< 328:                                              ; preds = %324, %9
<   %329 = landingpad { i8*, i32 }
<           catch i8* null
<   %330 = extractvalue { i8*, i32 } %329, 0
<   call void @__clang_call_terminate(i8* %330) #29
<   unreachable
13252c9865
< declare dso_local noundef i32 @fprintf(%struct._IO_FILE* nocapture noundef, i8* nocapture noundef readonly, ...) local_unnamed_addr #15
---
> declare dso_local i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #10
13255,13347c9868,10843
< define internal void @.omp_outlined..49(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, i32* nocapture nonnull readonly align 4 dereferenceable(4) %2, double** nocapture nonnull readonly align 8 dereferenceable(8) %3, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %4, double* nocapture nonnull readonly align 8 dereferenceable(8) %5, double* nocapture nonnull readonly align 8 dereferenceable(8) %6) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %8 = alloca i32, align 4
<   %9 = alloca i32, align 4
<   %10 = alloca i32, align 4
<   %11 = alloca i32, align 4
<   %12 = alloca i32, align 4
<   %13 = alloca i32, align 4
<   %14 = alloca i32, align 4
<   %15 = alloca i32, align 4
<   %16 = alloca i32, align 4
<   %17 = alloca i32, align 4
<   %18 = alloca i32, align 4
<   %19 = alloca i32, align 4
<   %20 = alloca i32, align 4
<   %21 = alloca i32, align 4
<   %22 = alloca i32, align 4
<   %23 = alloca i32, align 4
<   %24 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL31ApplyMaterialPropertiesForElemsR6DomainE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %24)
<           to label %25 unwind label %363
< 
< 25:                                               ; preds = %7
<   %26 = load i32, i32* %2, align 4, !tbaa !12
<   %27 = add nsw i32 %26, -1
<   %28 = icmp sgt i32 %26, 0
<   br i1 %28, label %31, label %29
< 
< 29:                                               ; preds = %25
<   %30 = load i32, i32* %0, align 4, !tbaa !12
<   br label %190
< 
< 31:                                               ; preds = %25
<   %32 = bitcast i32* %8 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32) #10
<   store i32 0, i32* %8, align 4, !tbaa !12
<   %33 = bitcast i32* %9 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %33) #10
<   store i32 %27, i32* %9, align 4, !tbaa !12
<   %34 = bitcast i32* %10 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %34) #10
<   store i32 1, i32* %10, align 4, !tbaa !12
<   %35 = bitcast i32* %11 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %35) #10
<   store i32 0, i32* %11, align 4, !tbaa !12
<   %36 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %36, i32 34, i32* nonnull %11, i32* nonnull %8, i32* nonnull %9, i32* nonnull %10, i32 1, i32 1) #10
<   %37 = load i32, i32* %9, align 4, !tbaa !12
<   %38 = icmp slt i32 %37, %26
<   %39 = select i1 %38, i32 %37, i32 %27
<   store i32 %39, i32* %9, align 4, !tbaa !12
<   %40 = load i32, i32* %8, align 4, !tbaa !12
<   %41 = icmp slt i32 %39, %40
<   br i1 %41, label %189, label %42
< 
< 42:                                               ; preds = %31
<   %43 = getelementptr inbounds %class.Domain, %class.Domain* %4, i64 0, i32 45, i32 0, i32 0, i32 0
<   %44 = load double*, double** %43, align 8, !tbaa !22
<   %45 = load double*, double** %3, align 8, !tbaa !6
<   %46 = sext i32 %40 to i64
<   %47 = add i32 %39, 1
<   %48 = sub i32 %39, %40
<   %49 = zext i32 %48 to i64
<   %50 = add nuw nsw i64 %49, 1
<   %51 = icmp ult i32 %48, 3
<   br i1 %51, label %149, label %52
< 
< 52:                                               ; preds = %42
<   %53 = getelementptr double, double* %45, i64 %46
<   %54 = sub i32 %39, %40
<   %55 = zext i32 %54 to i64
<   %56 = add nsw i64 %46, %55
<   %57 = add nsw i64 %56, 1
<   %58 = getelementptr double, double* %45, i64 %57
<   %59 = getelementptr double, double* %44, i64 %46
<   %60 = getelementptr double, double* %44, i64 %57
<   %61 = icmp ult double* %53, %60
<   %62 = icmp ult double* %59, %58
<   %63 = and i1 %61, %62
<   br i1 %63, label %149, label %64
< 
< 64:                                               ; preds = %52
<   %65 = and i64 %50, 8589934588
<   %66 = add nsw i64 %65, %46
<   %67 = add nsw i64 %65, -4
<   %68 = lshr exact i64 %67, 2
<   %69 = add nuw nsw i64 %68, 1
<   %70 = and i64 %69, 3
<   %71 = icmp ult i64 %67, 12
<   br i1 %71, label %127, label %72
< 
< 72:                                               ; preds = %64
<   %73 = and i64 %69, 9223372036854775804
<   br label %74
---
> define internal void @.omp_outlined..34(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture nonnull readonly align 4 dereferenceable(4) %numElem, double** nocapture nonnull readonly align 8 dereferenceable(8) %vnewc, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %domain, double* nocapture nonnull readonly align 8 dereferenceable(8) %eosvmin, double* nocapture nonnull readonly align 8 dereferenceable(8) %eosvmax) #6 {
> entry:
>   %eosvmin301 = bitcast double* %eosvmin to i8*
>   %eosvmax329 = bitcast double* %eosvmax to i8*
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %.omp.lb21 = alloca i32, align 4
>   %.omp.ub22 = alloca i32, align 4
>   %.omp.stride23 = alloca i32, align 4
>   %.omp.is_last24 = alloca i32, align 4
>   %.omp.lb63 = alloca i32, align 4
>   %.omp.ub64 = alloca i32, align 4
>   %.omp.stride65 = alloca i32, align 4
>   %.omp.is_last66 = alloca i32, align 4
>   %.omp.lb105 = alloca i32, align 4
>   %.omp.ub106 = alloca i32, align 4
>   %.omp.stride107 = alloca i32, align 4
>   %.omp.is_last108 = alloca i32, align 4
>   %0 = load i32, i32* %numElem, align 4, !tbaa !6
>   %sub4 = add nsw i32 %0, -1
>   %cmp = icmp sgt i32 %0, 0
>   br i1 %cmp, label %omp.precond.then, label %entry.omp.precond.end_crit_edge
> 
> entry.omp.precond.end_crit_edge:                  ; preds = %entry
>   %.pre = load i32, i32* %.global_tid., align 4, !tbaa !6
>   br label %omp.precond.end
> 
> omp.precond.then:                                 ; preds = %entry
>   %1 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %2 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #7
>   store i32 %sub4, i32* %.omp.ub, align 4, !tbaa !6
>   %3 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %4 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   %5 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %5, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %6 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp7.not = icmp slt i32 %6, %0
>   %cond = select i1 %cmp7.not, i32 %6, i32 %sub4
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %7 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp8.not219 = icmp sgt i32 %7, %cond
>   br i1 %cmp8.not219, label %omp.loop.exit, label %omp.inner.for.body.lr.ph
> 
> omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
>   %_M_start.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 45, i32 0, i32 0, i32 0, i32 0
>   %8 = load double*, double** %_M_start.i.i, align 8, !tbaa !11
>   %9 = load double*, double** %vnewc, align 8, !tbaa !41
>   %10 = sext i32 %7 to i64
>   %11 = icmp sgt i32 %cond, %7
>   %smax266 = select i1 %11, i32 %cond, i32 %7
>   %12 = add i32 %smax266, 1
>   %13 = sub i32 %smax266, %7
>   %14 = zext i32 %13 to i64
>   %15 = add nuw nsw i64 %14, 1
>   %min.iters.check = icmp ult i32 %13, 15
>   br i1 %min.iters.check, label %omp.inner.for.body.preheader, label %vector.memcheck
> 
> vector.memcheck:                                  ; preds = %omp.inner.for.body.lr.ph
>   %scevgep = getelementptr double, double* %9, i64 %10
>   %16 = sub i32 %smax266, %7
>   %17 = zext i32 %16 to i64
>   %18 = add nsw i64 %10, %17
>   %19 = add nsw i64 %18, 1
>   %scevgep283 = getelementptr double, double* %9, i64 %19
>   %scevgep285 = getelementptr double, double* %8, i64 %10
>   %scevgep287 = getelementptr double, double* %8, i64 %19
>   %bound0 = icmp ult double* %scevgep, %scevgep287
>   %bound1 = icmp ult double* %scevgep285, %scevgep283
>   %found.conflict = and i1 %bound0, %bound1
>   br i1 %found.conflict, label %omp.inner.for.body.preheader, label %vector.ph
> 
> vector.ph:                                        ; preds = %vector.memcheck
>   %n.vec = and i64 %15, 8589934576
>   %ind.end = add nsw i64 %n.vec, %10
>   %20 = add nsw i64 %n.vec, -16
>   %21 = lshr exact i64 %20, 4
>   %22 = add nuw nsw i64 %21, 1
>   %xtraiter368 = and i64 %22, 3
>   %23 = icmp ult i64 %20, 48
>   br i1 %23, label %middle.block.unr-lcssa, label %vector.ph.new
> 
> vector.ph.new:                                    ; preds = %vector.ph
>   %unroll_iter370 = and i64 %22, 2305843009213693948
>   br label %vector.body
> 
> vector.body:                                      ; preds = %vector.body, %vector.ph.new
>   %index = phi i64 [ 0, %vector.ph.new ], [ %index.next.3, %vector.body ]
>   %niter371 = phi i64 [ %unroll_iter370, %vector.ph.new ], [ %niter371.nsub.3, %vector.body ]
>   %offset.idx = add i64 %index, %10
>   %24 = getelementptr inbounds double, double* %8, i64 %offset.idx
>   %25 = bitcast double* %24 to <4 x i64>*
>   %wide.load = load <4 x i64>, <4 x i64>* %25, align 8, !tbaa !2, !alias.scope !88
>   %26 = getelementptr inbounds double, double* %24, i64 4
>   %27 = bitcast double* %26 to <4 x i64>*
>   %wide.load289 = load <4 x i64>, <4 x i64>* %27, align 8, !tbaa !2, !alias.scope !88
>   %28 = getelementptr inbounds double, double* %24, i64 8
>   %29 = bitcast double* %28 to <4 x i64>*
>   %wide.load290 = load <4 x i64>, <4 x i64>* %29, align 8, !tbaa !2, !alias.scope !88
>   %30 = getelementptr inbounds double, double* %24, i64 12
>   %31 = bitcast double* %30 to <4 x i64>*
>   %wide.load291 = load <4 x i64>, <4 x i64>* %31, align 8, !tbaa !2, !alias.scope !88
>   %32 = getelementptr inbounds double, double* %9, i64 %offset.idx
>   %33 = bitcast double* %32 to <4 x i64>*
>   store <4 x i64> %wide.load, <4 x i64>* %33, align 8, !tbaa !2, !alias.scope !91, !noalias !88
>   %34 = getelementptr inbounds double, double* %32, i64 4
>   %35 = bitcast double* %34 to <4 x i64>*
>   store <4 x i64> %wide.load289, <4 x i64>* %35, align 8, !tbaa !2, !alias.scope !91, !noalias !88
>   %36 = getelementptr inbounds double, double* %32, i64 8
>   %37 = bitcast double* %36 to <4 x i64>*
>   store <4 x i64> %wide.load290, <4 x i64>* %37, align 8, !tbaa !2, !alias.scope !91, !noalias !88
>   %38 = getelementptr inbounds double, double* %32, i64 12
>   %39 = bitcast double* %38 to <4 x i64>*
>   store <4 x i64> %wide.load291, <4 x i64>* %39, align 8, !tbaa !2, !alias.scope !91, !noalias !88
>   %index.next = or i64 %index, 16
>   %offset.idx.1 = add i64 %index.next, %10
>   %40 = getelementptr inbounds double, double* %8, i64 %offset.idx.1
>   %41 = bitcast double* %40 to <4 x i64>*
>   %wide.load.1 = load <4 x i64>, <4 x i64>* %41, align 8, !tbaa !2, !alias.scope !88
>   %42 = getelementptr inbounds double, double* %40, i64 4
>   %43 = bitcast double* %42 to <4 x i64>*
>   %wide.load289.1 = load <4 x i64>, <4 x i64>* %43, align 8, !tbaa !2, !alias.scope !88
>   %44 = getelementptr inbounds double, double* %40, i64 8
>   %45 = bitcast double* %44 to <4 x i64>*
>   %wide.load290.1 = load <4 x i64>, <4 x i64>* %45, align 8, !tbaa !2, !alias.scope !88
>   %46 = getelementptr inbounds double, double* %40, i64 12
>   %47 = bitcast double* %46 to <4 x i64>*
>   %wide.load291.1 = load <4 x i64>, <4 x i64>* %47, align 8, !tbaa !2, !alias.scope !88
>   %48 = getelementptr inbounds double, double* %9, i64 %offset.idx.1
>   %49 = bitcast double* %48 to <4 x i64>*
>   store <4 x i64> %wide.load.1, <4 x i64>* %49, align 8, !tbaa !2, !alias.scope !91, !noalias !88
>   %50 = getelementptr inbounds double, double* %48, i64 4
>   %51 = bitcast double* %50 to <4 x i64>*
>   store <4 x i64> %wide.load289.1, <4 x i64>* %51, align 8, !tbaa !2, !alias.scope !91, !noalias !88
>   %52 = getelementptr inbounds double, double* %48, i64 8
>   %53 = bitcast double* %52 to <4 x i64>*
>   store <4 x i64> %wide.load290.1, <4 x i64>* %53, align 8, !tbaa !2, !alias.scope !91, !noalias !88
>   %54 = getelementptr inbounds double, double* %48, i64 12
>   %55 = bitcast double* %54 to <4 x i64>*
>   store <4 x i64> %wide.load291.1, <4 x i64>* %55, align 8, !tbaa !2, !alias.scope !91, !noalias !88
>   %index.next.1 = or i64 %index, 32
>   %offset.idx.2 = add i64 %index.next.1, %10
>   %56 = getelementptr inbounds double, double* %8, i64 %offset.idx.2
>   %57 = bitcast double* %56 to <4 x i64>*
>   %wide.load.2 = load <4 x i64>, <4 x i64>* %57, align 8, !tbaa !2, !alias.scope !88
>   %58 = getelementptr inbounds double, double* %56, i64 4
>   %59 = bitcast double* %58 to <4 x i64>*
>   %wide.load289.2 = load <4 x i64>, <4 x i64>* %59, align 8, !tbaa !2, !alias.scope !88
>   %60 = getelementptr inbounds double, double* %56, i64 8
>   %61 = bitcast double* %60 to <4 x i64>*
>   %wide.load290.2 = load <4 x i64>, <4 x i64>* %61, align 8, !tbaa !2, !alias.scope !88
>   %62 = getelementptr inbounds double, double* %56, i64 12
>   %63 = bitcast double* %62 to <4 x i64>*
>   %wide.load291.2 = load <4 x i64>, <4 x i64>* %63, align 8, !tbaa !2, !alias.scope !88
>   %64 = getelementptr inbounds double, double* %9, i64 %offset.idx.2
>   %65 = bitcast double* %64 to <4 x i64>*
>   store <4 x i64> %wide.load.2, <4 x i64>* %65, align 8, !tbaa !2, !alias.scope !91, !noalias !88
>   %66 = getelementptr inbounds double, double* %64, i64 4
>   %67 = bitcast double* %66 to <4 x i64>*
>   store <4 x i64> %wide.load289.2, <4 x i64>* %67, align 8, !tbaa !2, !alias.scope !91, !noalias !88
>   %68 = getelementptr inbounds double, double* %64, i64 8
>   %69 = bitcast double* %68 to <4 x i64>*
>   store <4 x i64> %wide.load290.2, <4 x i64>* %69, align 8, !tbaa !2, !alias.scope !91, !noalias !88
>   %70 = getelementptr inbounds double, double* %64, i64 12
>   %71 = bitcast double* %70 to <4 x i64>*
>   store <4 x i64> %wide.load291.2, <4 x i64>* %71, align 8, !tbaa !2, !alias.scope !91, !noalias !88
>   %index.next.2 = or i64 %index, 48
>   %offset.idx.3 = add i64 %index.next.2, %10
>   %72 = getelementptr inbounds double, double* %8, i64 %offset.idx.3
>   %73 = bitcast double* %72 to <4 x i64>*
>   %wide.load.3 = load <4 x i64>, <4 x i64>* %73, align 8, !tbaa !2, !alias.scope !88
>   %74 = getelementptr inbounds double, double* %72, i64 4
>   %75 = bitcast double* %74 to <4 x i64>*
>   %wide.load289.3 = load <4 x i64>, <4 x i64>* %75, align 8, !tbaa !2, !alias.scope !88
>   %76 = getelementptr inbounds double, double* %72, i64 8
>   %77 = bitcast double* %76 to <4 x i64>*
>   %wide.load290.3 = load <4 x i64>, <4 x i64>* %77, align 8, !tbaa !2, !alias.scope !88
>   %78 = getelementptr inbounds double, double* %72, i64 12
>   %79 = bitcast double* %78 to <4 x i64>*
>   %wide.load291.3 = load <4 x i64>, <4 x i64>* %79, align 8, !tbaa !2, !alias.scope !88
>   %80 = getelementptr inbounds double, double* %9, i64 %offset.idx.3
>   %81 = bitcast double* %80 to <4 x i64>*
>   store <4 x i64> %wide.load.3, <4 x i64>* %81, align 8, !tbaa !2, !alias.scope !91, !noalias !88
>   %82 = getelementptr inbounds double, double* %80, i64 4
>   %83 = bitcast double* %82 to <4 x i64>*
>   store <4 x i64> %wide.load289.3, <4 x i64>* %83, align 8, !tbaa !2, !alias.scope !91, !noalias !88
>   %84 = getelementptr inbounds double, double* %80, i64 8
>   %85 = bitcast double* %84 to <4 x i64>*
>   store <4 x i64> %wide.load290.3, <4 x i64>* %85, align 8, !tbaa !2, !alias.scope !91, !noalias !88
>   %86 = getelementptr inbounds double, double* %80, i64 12
>   %87 = bitcast double* %86 to <4 x i64>*
>   store <4 x i64> %wide.load291.3, <4 x i64>* %87, align 8, !tbaa !2, !alias.scope !91, !noalias !88
>   %index.next.3 = add i64 %index, 64
>   %niter371.nsub.3 = add i64 %niter371, -4
>   %niter371.ncmp.3 = icmp eq i64 %niter371.nsub.3, 0
>   br i1 %niter371.ncmp.3, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !93
> 
> middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
>   %index.unr = phi i64 [ 0, %vector.ph ], [ %index.next.3, %vector.body ]
>   %lcmp.mod369.not = icmp eq i64 %xtraiter368, 0
>   br i1 %lcmp.mod369.not, label %middle.block, label %vector.body.epil
> 
> vector.body.epil:                                 ; preds = %middle.block.unr-lcssa, %vector.body.epil
>   %index.epil = phi i64 [ %index.next.epil, %vector.body.epil ], [ %index.unr, %middle.block.unr-lcssa ]
>   %epil.iter = phi i64 [ %epil.iter.sub, %vector.body.epil ], [ %xtraiter368, %middle.block.unr-lcssa ]
>   %offset.idx.epil = add i64 %index.epil, %10
>   %88 = getelementptr inbounds double, double* %8, i64 %offset.idx.epil
>   %89 = bitcast double* %88 to <4 x i64>*
>   %wide.load.epil = load <4 x i64>, <4 x i64>* %89, align 8, !tbaa !2, !alias.scope !88
>   %90 = getelementptr inbounds double, double* %88, i64 4
>   %91 = bitcast double* %90 to <4 x i64>*
>   %wide.load289.epil = load <4 x i64>, <4 x i64>* %91, align 8, !tbaa !2, !alias.scope !88
>   %92 = getelementptr inbounds double, double* %88, i64 8
>   %93 = bitcast double* %92 to <4 x i64>*
>   %wide.load290.epil = load <4 x i64>, <4 x i64>* %93, align 8, !tbaa !2, !alias.scope !88
>   %94 = getelementptr inbounds double, double* %88, i64 12
>   %95 = bitcast double* %94 to <4 x i64>*
>   %wide.load291.epil = load <4 x i64>, <4 x i64>* %95, align 8, !tbaa !2, !alias.scope !88
>   %96 = getelementptr inbounds double, double* %9, i64 %offset.idx.epil
>   %97 = bitcast double* %96 to <4 x i64>*
>   store <4 x i64> %wide.load.epil, <4 x i64>* %97, align 8, !tbaa !2, !alias.scope !91, !noalias !88
>   %98 = getelementptr inbounds double, double* %96, i64 4
>   %99 = bitcast double* %98 to <4 x i64>*
>   store <4 x i64> %wide.load289.epil, <4 x i64>* %99, align 8, !tbaa !2, !alias.scope !91, !noalias !88
>   %100 = getelementptr inbounds double, double* %96, i64 8
>   %101 = bitcast double* %100 to <4 x i64>*
>   store <4 x i64> %wide.load290.epil, <4 x i64>* %101, align 8, !tbaa !2, !alias.scope !91, !noalias !88
>   %102 = getelementptr inbounds double, double* %96, i64 12
>   %103 = bitcast double* %102 to <4 x i64>*
>   store <4 x i64> %wide.load291.epil, <4 x i64>* %103, align 8, !tbaa !2, !alias.scope !91, !noalias !88
>   %index.next.epil = add i64 %index.epil, 16
>   %epil.iter.sub = add i64 %epil.iter, -1
>   %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
>   br i1 %epil.iter.cmp.not, label %middle.block, label %vector.body.epil, !llvm.loop !94
> 
> middle.block:                                     ; preds = %vector.body.epil, %middle.block.unr-lcssa
>   %cmp.n = icmp eq i64 %15, %n.vec
>   br i1 %cmp.n, label %omp.loop.exit, label %omp.inner.for.body.preheader
> 
> omp.inner.for.body.preheader:                     ; preds = %middle.block, %vector.memcheck, %omp.inner.for.body.lr.ph
>   %indvars.iv264.ph = phi i64 [ %10, %vector.memcheck ], [ %10, %omp.inner.for.body.lr.ph ], [ %ind.end, %middle.block ]
>   %104 = add i32 %smax266, 1
>   %105 = trunc i64 %indvars.iv264.ph to i32
>   %106 = sub i32 %104, %105
>   %107 = sub i32 %smax266, %105
>   %xtraiter365 = and i32 %106, 7
>   %lcmp.mod366.not = icmp eq i32 %xtraiter365, 0
>   br i1 %lcmp.mod366.not, label %omp.inner.for.body.prol.loopexit, label %omp.inner.for.body.prol
> 
> omp.inner.for.body.prol:                          ; preds = %omp.inner.for.body.preheader, %omp.inner.for.body.prol
>   %indvars.iv264.prol = phi i64 [ %indvars.iv.next265.prol, %omp.inner.for.body.prol ], [ %indvars.iv264.ph, %omp.inner.for.body.preheader ]
>   %prol.iter367 = phi i32 [ %prol.iter367.sub, %omp.inner.for.body.prol ], [ %xtraiter365, %omp.inner.for.body.preheader ]
>   %add.ptr.i.i.prol = getelementptr inbounds double, double* %8, i64 %indvars.iv264.prol
>   %108 = bitcast double* %add.ptr.i.i.prol to i64*
>   %109 = load i64, i64* %108, align 8, !tbaa !2
>   %arrayidx.prol = getelementptr inbounds double, double* %9, i64 %indvars.iv264.prol
>   %110 = bitcast double* %arrayidx.prol to i64*
>   store i64 %109, i64* %110, align 8, !tbaa !2
>   %indvars.iv.next265.prol = add nsw i64 %indvars.iv264.prol, 1
>   %prol.iter367.sub = add i32 %prol.iter367, -1
>   %prol.iter367.cmp.not = icmp eq i32 %prol.iter367.sub, 0
>   br i1 %prol.iter367.cmp.not, label %omp.inner.for.body.prol.loopexit, label %omp.inner.for.body.prol, !llvm.loop !95
> 
> omp.inner.for.body.prol.loopexit:                 ; preds = %omp.inner.for.body.prol, %omp.inner.for.body.preheader
>   %indvars.iv264.unr = phi i64 [ %indvars.iv264.ph, %omp.inner.for.body.preheader ], [ %indvars.iv.next265.prol, %omp.inner.for.body.prol ]
>   %111 = icmp ult i32 %107, 7
>   br i1 %111, label %omp.loop.exit, label %omp.inner.for.body
> 
> omp.inner.for.body:                               ; preds = %omp.inner.for.body.prol.loopexit, %omp.inner.for.body
>   %indvars.iv264 = phi i64 [ %indvars.iv.next265.7, %omp.inner.for.body ], [ %indvars.iv264.unr, %omp.inner.for.body.prol.loopexit ]
>   %add.ptr.i.i = getelementptr inbounds double, double* %8, i64 %indvars.iv264
>   %112 = bitcast double* %add.ptr.i.i to i64*
>   %113 = load i64, i64* %112, align 8, !tbaa !2
>   %arrayidx = getelementptr inbounds double, double* %9, i64 %indvars.iv264
>   %114 = bitcast double* %arrayidx to i64*
>   store i64 %113, i64* %114, align 8, !tbaa !2
>   %indvars.iv.next265 = add nsw i64 %indvars.iv264, 1
>   %add.ptr.i.i.1 = getelementptr inbounds double, double* %8, i64 %indvars.iv.next265
>   %115 = bitcast double* %add.ptr.i.i.1 to i64*
>   %116 = load i64, i64* %115, align 8, !tbaa !2
>   %arrayidx.1 = getelementptr inbounds double, double* %9, i64 %indvars.iv.next265
>   %117 = bitcast double* %arrayidx.1 to i64*
>   store i64 %116, i64* %117, align 8, !tbaa !2
>   %indvars.iv.next265.1 = add nsw i64 %indvars.iv264, 2
>   %add.ptr.i.i.2 = getelementptr inbounds double, double* %8, i64 %indvars.iv.next265.1
>   %118 = bitcast double* %add.ptr.i.i.2 to i64*
>   %119 = load i64, i64* %118, align 8, !tbaa !2
>   %arrayidx.2 = getelementptr inbounds double, double* %9, i64 %indvars.iv.next265.1
>   %120 = bitcast double* %arrayidx.2 to i64*
>   store i64 %119, i64* %120, align 8, !tbaa !2
>   %indvars.iv.next265.2 = add nsw i64 %indvars.iv264, 3
>   %add.ptr.i.i.3 = getelementptr inbounds double, double* %8, i64 %indvars.iv.next265.2
>   %121 = bitcast double* %add.ptr.i.i.3 to i64*
>   %122 = load i64, i64* %121, align 8, !tbaa !2
>   %arrayidx.3 = getelementptr inbounds double, double* %9, i64 %indvars.iv.next265.2
>   %123 = bitcast double* %arrayidx.3 to i64*
>   store i64 %122, i64* %123, align 8, !tbaa !2
>   %indvars.iv.next265.3 = add nsw i64 %indvars.iv264, 4
>   %add.ptr.i.i.4 = getelementptr inbounds double, double* %8, i64 %indvars.iv.next265.3
>   %124 = bitcast double* %add.ptr.i.i.4 to i64*
>   %125 = load i64, i64* %124, align 8, !tbaa !2
>   %arrayidx.4 = getelementptr inbounds double, double* %9, i64 %indvars.iv.next265.3
>   %126 = bitcast double* %arrayidx.4 to i64*
>   store i64 %125, i64* %126, align 8, !tbaa !2
>   %indvars.iv.next265.4 = add nsw i64 %indvars.iv264, 5
>   %add.ptr.i.i.5 = getelementptr inbounds double, double* %8, i64 %indvars.iv.next265.4
>   %127 = bitcast double* %add.ptr.i.i.5 to i64*
>   %128 = load i64, i64* %127, align 8, !tbaa !2
>   %arrayidx.5 = getelementptr inbounds double, double* %9, i64 %indvars.iv.next265.4
>   %129 = bitcast double* %arrayidx.5 to i64*
>   store i64 %128, i64* %129, align 8, !tbaa !2
>   %indvars.iv.next265.5 = add nsw i64 %indvars.iv264, 6
>   %add.ptr.i.i.6 = getelementptr inbounds double, double* %8, i64 %indvars.iv.next265.5
>   %130 = bitcast double* %add.ptr.i.i.6 to i64*
>   %131 = load i64, i64* %130, align 8, !tbaa !2
>   %arrayidx.6 = getelementptr inbounds double, double* %9, i64 %indvars.iv.next265.5
>   %132 = bitcast double* %arrayidx.6 to i64*
>   store i64 %131, i64* %132, align 8, !tbaa !2
>   %indvars.iv.next265.6 = add nsw i64 %indvars.iv264, 7
>   %add.ptr.i.i.7 = getelementptr inbounds double, double* %8, i64 %indvars.iv.next265.6
>   %133 = bitcast double* %add.ptr.i.i.7 to i64*
>   %134 = load i64, i64* %133, align 8, !tbaa !2
>   %arrayidx.7 = getelementptr inbounds double, double* %9, i64 %indvars.iv.next265.6
>   %135 = bitcast double* %arrayidx.7 to i64*
>   store i64 %134, i64* %135, align 8, !tbaa !2
>   %indvars.iv.next265.7 = add nsw i64 %indvars.iv264, 8
>   %lftr.wideiv267.7 = trunc i64 %indvars.iv.next265.7 to i32
>   %exitcond268.not.7 = icmp eq i32 %12, %lftr.wideiv267.7
>   br i1 %exitcond268.not.7, label %omp.loop.exit, label %omp.inner.for.body, !llvm.loop !96
> 
> omp.loop.exit:                                    ; preds = %omp.inner.for.body.prol.loopexit, %omp.inner.for.body, %middle.block, %omp.precond.then
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %5)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #7
>   br label %omp.precond.end
> 
> omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
>   %136 = phi i32 [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
>   call void @__kmpc_barrier(%struct.ident_t* nonnull @3, i32 %136) #7
>   %137 = load double, double* %eosvmin, align 8, !tbaa !2
>   %cmp10 = fcmp une double %137, 0.000000e+00
>   br i1 %cmp10, label %if.then, label %if.end50
> 
> if.then:                                          ; preds = %omp.precond.end
>   %138 = load i32, i32* %numElem, align 4, !tbaa !6
>   %sub17 = add nsw i32 %138, -1
>   %cmp19 = icmp sgt i32 %138, 0
>   br i1 %cmp19, label %omp.precond.then20, label %if.end50
> 
> omp.precond.then20:                               ; preds = %if.then
>   %139 = bitcast i32* %.omp.lb21 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %139) #7
>   store i32 0, i32* %.omp.lb21, align 4, !tbaa !6
>   %140 = bitcast i32* %.omp.ub22 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %140) #7
>   store i32 %sub17, i32* %.omp.ub22, align 4, !tbaa !6
>   %141 = bitcast i32* %.omp.stride23 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %141) #7
>   store i32 1, i32* %.omp.stride23, align 4, !tbaa !6
>   %142 = bitcast i32* %.omp.is_last24 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %142) #7
>   store i32 0, i32* %.omp.is_last24, align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %136, i32 34, i32* nonnull %.omp.is_last24, i32* nonnull %.omp.lb21, i32* nonnull %.omp.ub22, i32* nonnull %.omp.stride23, i32 1, i32 1) #7
>   %143 = load i32, i32* %.omp.ub22, align 4, !tbaa !6
>   %cmp27.not = icmp slt i32 %143, %138
>   %cond31 = select i1 %cmp27.not, i32 %143, i32 %sub17
>   store i32 %cond31, i32* %.omp.ub22, align 4, !tbaa !6
>   %144 = load i32, i32* %.omp.lb21, align 4, !tbaa !6
>   %cmp33.not217 = icmp sgt i32 %144, %cond31
>   br i1 %cmp33.not217, label %omp.loop.exit48, label %omp.inner.for.body35.lr.ph
> 
> omp.inner.for.body35.lr.ph:                       ; preds = %omp.precond.then20
>   %145 = load double*, double** %vnewc, align 8, !tbaa !41
>   %146 = sext i32 %144 to i64
>   %147 = icmp sgt i32 %cond31, %144
>   %smax261 = select i1 %147, i32 %cond31, i32 %144
>   %148 = add i32 %smax261, 1
>   %149 = sub i32 %smax261, %144
>   %150 = zext i32 %149 to i64
>   %151 = add nuw nsw i64 %150, 1
>   %min.iters.check295 = icmp ult i32 %149, 15
>   br i1 %min.iters.check295, label %omp.inner.for.body35.preheader, label %vector.memcheck306
> 
> vector.memcheck306:                               ; preds = %omp.inner.for.body35.lr.ph
>   %scevgep297 = getelementptr double, double* %145, i64 %146
>   %scevgep297298 = bitcast double* %scevgep297 to i8*
>   %152 = sub i32 %smax261, %144
>   %153 = zext i32 %152 to i64
>   %154 = add nsw i64 %146, %153
>   %155 = add nsw i64 %154, 1
>   %scevgep299 = getelementptr double, double* %145, i64 %155
>   %uglygep = getelementptr i8, i8* %eosvmin301, i64 1
>   %bound0302 = icmp ugt i8* %uglygep, %scevgep297298
>   %bound1303 = icmp ugt double* %scevgep299, %eosvmin
>   %found.conflict304 = and i1 %bound0302, %bound1303
>   br i1 %found.conflict304, label %omp.inner.for.body35.preheader, label %vector.ph307
> 
> vector.ph307:                                     ; preds = %vector.memcheck306
>   %n.vec309 = and i64 %151, 8589934576
>   %ind.end313 = add nsw i64 %n.vec309, %146
>   %156 = add nsw i64 %n.vec309, -16
>   %157 = lshr exact i64 %156, 4
>   %158 = add nuw nsw i64 %157, 1
>   %xtraiter361 = and i64 %158, 1
>   %159 = icmp eq i64 %156, 0
>   br i1 %159, label %middle.block292.unr-lcssa, label %vector.ph307.new
> 
> vector.ph307.new:                                 ; preds = %vector.ph307
>   %unroll_iter363 = and i64 %158, 2305843009213693950
>   %160 = load double, double* %eosvmin, align 8, !tbaa !2, !alias.scope !97
>   %161 = insertelement <4 x double> undef, double %160, i32 0
>   %162 = shufflevector <4 x double> %161, <4 x double> undef, <4 x i32> zeroinitializer
>   %163 = insertelement <4 x double> undef, double %160, i32 0
>   %164 = shufflevector <4 x double> %163, <4 x double> undef, <4 x i32> zeroinitializer
>   %165 = insertelement <4 x double> undef, double %160, i32 0
>   %166 = shufflevector <4 x double> %165, <4 x double> undef, <4 x i32> zeroinitializer
>   %167 = load double, double* %eosvmin, align 8, !tbaa !2, !alias.scope !97
>   %168 = insertelement <4 x double> undef, double %167, i32 0
>   %169 = shufflevector <4 x double> %168, <4 x double> undef, <4 x i32> zeroinitializer
>   %170 = load double, double* %eosvmin, align 8, !tbaa !2, !alias.scope !97
>   %171 = insertelement <4 x double> undef, double %170, i32 0
>   %172 = shufflevector <4 x double> %171, <4 x double> undef, <4 x i32> zeroinitializer
>   %173 = insertelement <4 x double> undef, double %170, i32 0
>   %174 = shufflevector <4 x double> %173, <4 x double> undef, <4 x i32> zeroinitializer
>   %175 = insertelement <4 x double> undef, double %170, i32 0
>   %176 = shufflevector <4 x double> %175, <4 x double> undef, <4 x i32> zeroinitializer
>   %177 = load double, double* %eosvmin, align 8, !tbaa !2, !alias.scope !97
>   %178 = insertelement <4 x double> undef, double %177, i32 0
>   %179 = shufflevector <4 x double> %178, <4 x double> undef, <4 x i32> zeroinitializer
>   br label %vector.body294
> 
> vector.body294:                                   ; preds = %vector.body294, %vector.ph307.new
>   %index310 = phi i64 [ 0, %vector.ph307.new ], [ %index.next311.1, %vector.body294 ]
>   %niter364 = phi i64 [ %unroll_iter363, %vector.ph307.new ], [ %niter364.nsub.1, %vector.body294 ]
>   %offset.idx315 = add i64 %index310, %146
>   %180 = getelementptr inbounds double, double* %145, i64 %offset.idx315
>   %181 = bitcast double* %180 to <4 x double>*
>   %wide.load316 = load <4 x double>, <4 x double>* %181, align 8, !tbaa !2, !alias.scope !100, !noalias !97
>   %182 = getelementptr inbounds double, double* %180, i64 4
>   %183 = bitcast double* %182 to <4 x double>*
>   %wide.load317 = load <4 x double>, <4 x double>* %183, align 8, !tbaa !2, !alias.scope !100, !noalias !97
>   %184 = getelementptr inbounds double, double* %180, i64 8
>   %185 = bitcast double* %184 to <4 x double>*
>   %wide.load318 = load <4 x double>, <4 x double>* %185, align 8, !tbaa !2, !alias.scope !100, !noalias !97
>   %186 = getelementptr inbounds double, double* %180, i64 12
>   %187 = bitcast double* %186 to <4 x double>*
>   %wide.load319 = load <4 x double>, <4 x double>* %187, align 8, !tbaa !2, !alias.scope !100, !noalias !97
>   %188 = fcmp olt <4 x double> %wide.load316, %162
>   %189 = fcmp olt <4 x double> %wide.load317, %164
>   %190 = fcmp olt <4 x double> %wide.load318, %166
>   %191 = fcmp olt <4 x double> %wide.load319, %169
>   %192 = bitcast double* %180 to <4 x double>*
>   call void @llvm.masked.store.v4f64.p0v4f64(<4 x double> %162, <4 x double>* %192, i32 8, <4 x i1> %188), !tbaa !2, !alias.scope !100, !noalias !97
>   %193 = bitcast double* %182 to <4 x double>*
>   call void @llvm.masked.store.v4f64.p0v4f64(<4 x double> %164, <4 x double>* %193, i32 8, <4 x i1> %189), !tbaa !2, !alias.scope !100, !noalias !97
>   %194 = bitcast double* %184 to <4 x double>*
>   call void @llvm.masked.store.v4f64.p0v4f64(<4 x double> %166, <4 x double>* %194, i32 8, <4 x i1> %190), !tbaa !2, !alias.scope !100, !noalias !97
>   %195 = bitcast double* %186 to <4 x double>*
>   call void @llvm.masked.store.v4f64.p0v4f64(<4 x double> %169, <4 x double>* %195, i32 8, <4 x i1> %191), !tbaa !2, !alias.scope !100, !noalias !97
>   %index.next311 = or i64 %index310, 16
>   %offset.idx315.1 = add i64 %index.next311, %146
>   %196 = getelementptr inbounds double, double* %145, i64 %offset.idx315.1
>   %197 = bitcast double* %196 to <4 x double>*
>   %wide.load316.1 = load <4 x double>, <4 x double>* %197, align 8, !tbaa !2, !alias.scope !100, !noalias !97
>   %198 = getelementptr inbounds double, double* %196, i64 4
>   %199 = bitcast double* %198 to <4 x double>*
>   %wide.load317.1 = load <4 x double>, <4 x double>* %199, align 8, !tbaa !2, !alias.scope !100, !noalias !97
>   %200 = getelementptr inbounds double, double* %196, i64 8
>   %201 = bitcast double* %200 to <4 x double>*
>   %wide.load318.1 = load <4 x double>, <4 x double>* %201, align 8, !tbaa !2, !alias.scope !100, !noalias !97
>   %202 = getelementptr inbounds double, double* %196, i64 12
>   %203 = bitcast double* %202 to <4 x double>*
>   %wide.load319.1 = load <4 x double>, <4 x double>* %203, align 8, !tbaa !2, !alias.scope !100, !noalias !97
>   %204 = fcmp olt <4 x double> %wide.load316.1, %172
>   %205 = fcmp olt <4 x double> %wide.load317.1, %174
>   %206 = fcmp olt <4 x double> %wide.load318.1, %176
>   %207 = fcmp olt <4 x double> %wide.load319.1, %179
>   %208 = bitcast double* %196 to <4 x double>*
>   call void @llvm.masked.store.v4f64.p0v4f64(<4 x double> %172, <4 x double>* %208, i32 8, <4 x i1> %204), !tbaa !2, !alias.scope !100, !noalias !97
>   %209 = bitcast double* %198 to <4 x double>*
>   call void @llvm.masked.store.v4f64.p0v4f64(<4 x double> %174, <4 x double>* %209, i32 8, <4 x i1> %205), !tbaa !2, !alias.scope !100, !noalias !97
>   %210 = bitcast double* %200 to <4 x double>*
>   call void @llvm.masked.store.v4f64.p0v4f64(<4 x double> %176, <4 x double>* %210, i32 8, <4 x i1> %206), !tbaa !2, !alias.scope !100, !noalias !97
>   %211 = bitcast double* %202 to <4 x double>*
>   call void @llvm.masked.store.v4f64.p0v4f64(<4 x double> %179, <4 x double>* %211, i32 8, <4 x i1> %207), !tbaa !2, !alias.scope !100, !noalias !97
>   %index.next311.1 = add i64 %index310, 32
>   %niter364.nsub.1 = add i64 %niter364, -2
>   %niter364.ncmp.1 = icmp eq i64 %niter364.nsub.1, 0
>   br i1 %niter364.ncmp.1, label %middle.block292.unr-lcssa, label %vector.body294, !llvm.loop !102
> 
> middle.block292.unr-lcssa:                        ; preds = %vector.body294, %vector.ph307
>   %index310.unr = phi i64 [ 0, %vector.ph307 ], [ %index.next311.1, %vector.body294 ]
>   %lcmp.mod362.not = icmp eq i64 %xtraiter361, 0
>   br i1 %lcmp.mod362.not, label %middle.block292, label %vector.body294.epil
> 
> vector.body294.epil:                              ; preds = %middle.block292.unr-lcssa
>   %offset.idx315.epil = add i64 %index310.unr, %146
>   %212 = getelementptr inbounds double, double* %145, i64 %offset.idx315.epil
>   %213 = bitcast double* %212 to <4 x double>*
>   %wide.load316.epil = load <4 x double>, <4 x double>* %213, align 8, !tbaa !2, !alias.scope !100, !noalias !97
>   %214 = getelementptr inbounds double, double* %212, i64 4
>   %215 = bitcast double* %214 to <4 x double>*
>   %wide.load317.epil = load <4 x double>, <4 x double>* %215, align 8, !tbaa !2, !alias.scope !100, !noalias !97
>   %216 = getelementptr inbounds double, double* %212, i64 8
>   %217 = bitcast double* %216 to <4 x double>*
>   %wide.load318.epil = load <4 x double>, <4 x double>* %217, align 8, !tbaa !2, !alias.scope !100, !noalias !97
>   %218 = getelementptr inbounds double, double* %212, i64 12
>   %219 = bitcast double* %218 to <4 x double>*
>   %wide.load319.epil = load <4 x double>, <4 x double>* %219, align 8, !tbaa !2, !alias.scope !100, !noalias !97
>   %220 = load double, double* %eosvmin, align 8, !tbaa !2, !alias.scope !97
>   %221 = insertelement <4 x double> undef, double %220, i32 0
>   %222 = shufflevector <4 x double> %221, <4 x double> undef, <4 x i32> zeroinitializer
>   %223 = insertelement <4 x double> undef, double %220, i32 0
>   %224 = shufflevector <4 x double> %223, <4 x double> undef, <4 x i32> zeroinitializer
>   %225 = insertelement <4 x double> undef, double %220, i32 0
>   %226 = shufflevector <4 x double> %225, <4 x double> undef, <4 x i32> zeroinitializer
>   %227 = load double, double* %eosvmin, align 8, !tbaa !2, !alias.scope !97
>   %228 = insertelement <4 x double> undef, double %227, i32 0
>   %229 = shufflevector <4 x double> %228, <4 x double> undef, <4 x i32> zeroinitializer
>   %230 = fcmp olt <4 x double> %wide.load316.epil, %222
>   %231 = fcmp olt <4 x double> %wide.load317.epil, %224
>   %232 = fcmp olt <4 x double> %wide.load318.epil, %226
>   %233 = fcmp olt <4 x double> %wide.load319.epil, %229
>   %234 = bitcast double* %212 to <4 x double>*
>   call void @llvm.masked.store.v4f64.p0v4f64(<4 x double> %222, <4 x double>* %234, i32 8, <4 x i1> %230), !tbaa !2, !alias.scope !100, !noalias !97
>   %235 = bitcast double* %214 to <4 x double>*
>   call void @llvm.masked.store.v4f64.p0v4f64(<4 x double> %224, <4 x double>* %235, i32 8, <4 x i1> %231), !tbaa !2, !alias.scope !100, !noalias !97
>   %236 = bitcast double* %216 to <4 x double>*
>   call void @llvm.masked.store.v4f64.p0v4f64(<4 x double> %226, <4 x double>* %236, i32 8, <4 x i1> %232), !tbaa !2, !alias.scope !100, !noalias !97
>   %237 = bitcast double* %218 to <4 x double>*
>   call void @llvm.masked.store.v4f64.p0v4f64(<4 x double> %229, <4 x double>* %237, i32 8, <4 x i1> %233), !tbaa !2, !alias.scope !100, !noalias !97
>   br label %middle.block292
> 
> middle.block292:                                  ; preds = %middle.block292.unr-lcssa, %vector.body294.epil
>   %cmp.n314 = icmp eq i64 %151, %n.vec309
>   br i1 %cmp.n314, label %omp.loop.exit48, label %omp.inner.for.body35.preheader
> 
> omp.inner.for.body35.preheader:                   ; preds = %middle.block292, %vector.memcheck306, %omp.inner.for.body35.lr.ph
>   %indvars.iv259.ph = phi i64 [ %146, %vector.memcheck306 ], [ %146, %omp.inner.for.body35.lr.ph ], [ %ind.end313, %middle.block292 ]
>   %238 = add i32 %smax261, 1
>   %239 = trunc i64 %indvars.iv259.ph to i32
>   %240 = sub i32 %238, %239
>   %241 = sub i32 %smax261, %239
>   %xtraiter358 = and i32 %240, 3
>   %lcmp.mod359.not = icmp eq i32 %xtraiter358, 0
>   br i1 %lcmp.mod359.not, label %omp.inner.for.body35.prol.loopexit, label %omp.inner.for.body35.prol
> 
> omp.inner.for.body35.prol:                        ; preds = %omp.inner.for.body35.preheader, %omp.inner.for.inc45.prol
>   %indvars.iv259.prol = phi i64 [ %indvars.iv.next260.prol, %omp.inner.for.inc45.prol ], [ %indvars.iv259.ph, %omp.inner.for.body35.preheader ]
>   %prol.iter360 = phi i32 [ %prol.iter360.sub, %omp.inner.for.inc45.prol ], [ %xtraiter358, %omp.inner.for.body35.preheader ]
>   %arrayidx39.prol = getelementptr inbounds double, double* %145, i64 %indvars.iv259.prol
>   %242 = load double, double* %arrayidx39.prol, align 8, !tbaa !2
>   %243 = load double, double* %eosvmin, align 8, !tbaa !2
>   %cmp40.prol = fcmp olt double %242, %243
>   br i1 %cmp40.prol, label %if.then41.prol, label %omp.inner.for.inc45.prol
> 
> if.then41.prol:                                   ; preds = %omp.inner.for.body35.prol
>   store double %243, double* %arrayidx39.prol, align 8, !tbaa !2
>   br label %omp.inner.for.inc45.prol
> 
> omp.inner.for.inc45.prol:                         ; preds = %if.then41.prol, %omp.inner.for.body35.prol
>   %indvars.iv.next260.prol = add nsw i64 %indvars.iv259.prol, 1
>   %prol.iter360.sub = add i32 %prol.iter360, -1
>   %prol.iter360.cmp.not = icmp eq i32 %prol.iter360.sub, 0
>   br i1 %prol.iter360.cmp.not, label %omp.inner.for.body35.prol.loopexit, label %omp.inner.for.body35.prol, !llvm.loop !103
> 
> omp.inner.for.body35.prol.loopexit:               ; preds = %omp.inner.for.inc45.prol, %omp.inner.for.body35.preheader
>   %indvars.iv259.unr = phi i64 [ %indvars.iv259.ph, %omp.inner.for.body35.preheader ], [ %indvars.iv.next260.prol, %omp.inner.for.inc45.prol ]
>   %244 = icmp ult i32 %241, 3
>   br i1 %244, label %omp.loop.exit48, label %omp.inner.for.body35
> 
> omp.inner.for.body35:                             ; preds = %omp.inner.for.body35.prol.loopexit, %omp.inner.for.inc45.3
>   %indvars.iv259 = phi i64 [ %indvars.iv.next260.3, %omp.inner.for.inc45.3 ], [ %indvars.iv259.unr, %omp.inner.for.body35.prol.loopexit ]
>   %arrayidx39 = getelementptr inbounds double, double* %145, i64 %indvars.iv259
>   %245 = load double, double* %arrayidx39, align 8, !tbaa !2
>   %246 = load double, double* %eosvmin, align 8, !tbaa !2
>   %cmp40 = fcmp olt double %245, %246
>   br i1 %cmp40, label %if.then41, label %omp.inner.for.inc45
> 
> if.then41:                                        ; preds = %omp.inner.for.body35
>   store double %246, double* %arrayidx39, align 8, !tbaa !2
>   br label %omp.inner.for.inc45
> 
> omp.inner.for.inc45:                              ; preds = %if.then41, %omp.inner.for.body35
>   %indvars.iv.next260 = add nsw i64 %indvars.iv259, 1
>   %arrayidx39.1 = getelementptr inbounds double, double* %145, i64 %indvars.iv.next260
>   %247 = load double, double* %arrayidx39.1, align 8, !tbaa !2
>   %248 = load double, double* %eosvmin, align 8, !tbaa !2
>   %cmp40.1 = fcmp olt double %247, %248
>   br i1 %cmp40.1, label %if.then41.1, label %omp.inner.for.inc45.1
> 
> omp.loop.exit48:                                  ; preds = %omp.inner.for.body35.prol.loopexit, %omp.inner.for.inc45.3, %middle.block292, %omp.precond.then20
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %136)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %142) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %141) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %140) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %139) #7
>   br label %if.end50
> 
> if.end50:                                         ; preds = %if.then, %omp.loop.exit48, %omp.precond.end
>   %249 = load double, double* %eosvmax, align 8, !tbaa !2
>   %cmp51 = fcmp une double %249, 0.000000e+00
>   br i1 %cmp51, label %if.then52, label %if.end93
> 
> if.then52:                                        ; preds = %if.end50
>   %250 = load i32, i32* %numElem, align 4, !tbaa !6
>   %sub59 = add nsw i32 %250, -1
>   %cmp61 = icmp sgt i32 %250, 0
>   br i1 %cmp61, label %omp.precond.then62, label %omp.precond.end143
> 
> omp.precond.then62:                               ; preds = %if.then52
>   %251 = bitcast i32* %.omp.lb63 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %251) #7
>   store i32 0, i32* %.omp.lb63, align 4, !tbaa !6
>   %252 = bitcast i32* %.omp.ub64 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %252) #7
>   store i32 %sub59, i32* %.omp.ub64, align 4, !tbaa !6
>   %253 = bitcast i32* %.omp.stride65 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %253) #7
>   store i32 1, i32* %.omp.stride65, align 4, !tbaa !6
>   %254 = bitcast i32* %.omp.is_last66 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %254) #7
>   store i32 0, i32* %.omp.is_last66, align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %136, i32 34, i32* nonnull %.omp.is_last66, i32* nonnull %.omp.lb63, i32* nonnull %.omp.ub64, i32* nonnull %.omp.stride65, i32 1, i32 1) #7
>   %255 = load i32, i32* %.omp.ub64, align 4, !tbaa !6
>   %cmp69.not = icmp slt i32 %255, %250
>   %cond73 = select i1 %cmp69.not, i32 %255, i32 %sub59
>   store i32 %cond73, i32* %.omp.ub64, align 4, !tbaa !6
>   %256 = load i32, i32* %.omp.lb63, align 4, !tbaa !6
>   %cmp75.not215 = icmp sgt i32 %256, %cond73
>   br i1 %cmp75.not215, label %omp.loop.exit91, label %omp.inner.for.body77.lr.ph
> 
> omp.inner.for.body77.lr.ph:                       ; preds = %omp.precond.then62
>   %257 = load double*, double** %vnewc, align 8, !tbaa !41
>   %258 = sext i32 %256 to i64
>   %259 = icmp sgt i32 %cond73, %256
>   %smax256 = select i1 %259, i32 %cond73, i32 %256
>   %260 = add i32 %smax256, 1
>   %261 = sub i32 %smax256, %256
>   %262 = zext i32 %261 to i64
>   %263 = add nuw nsw i64 %262, 1
>   %min.iters.check323 = icmp ult i32 %261, 15
>   br i1 %min.iters.check323, label %omp.inner.for.body77.preheader, label %vector.memcheck336
> 
> vector.memcheck336:                               ; preds = %omp.inner.for.body77.lr.ph
>   %scevgep325 = getelementptr double, double* %257, i64 %258
>   %scevgep325326 = bitcast double* %scevgep325 to i8*
>   %264 = sub i32 %smax256, %256
>   %265 = zext i32 %264 to i64
>   %266 = add nsw i64 %258, %265
>   %267 = add nsw i64 %266, 1
>   %scevgep327 = getelementptr double, double* %257, i64 %267
>   %uglygep330 = getelementptr i8, i8* %eosvmax329, i64 1
>   %bound0332 = icmp ugt i8* %uglygep330, %scevgep325326
>   %bound1333 = icmp ugt double* %scevgep327, %eosvmax
>   %found.conflict334 = and i1 %bound0332, %bound1333
>   br i1 %found.conflict334, label %omp.inner.for.body77.preheader, label %vector.ph337
> 
> vector.ph337:                                     ; preds = %vector.memcheck336
>   %n.vec339 = and i64 %263, 8589934576
>   %ind.end343 = add nsw i64 %n.vec339, %258
>   %268 = add nsw i64 %n.vec339, -16
>   %269 = lshr exact i64 %268, 4
>   %270 = add nuw nsw i64 %269, 1
>   %xtraiter356 = and i64 %270, 1
>   %271 = icmp eq i64 %268, 0
>   br i1 %271, label %middle.block320.unr-lcssa, label %vector.ph337.new
> 
> vector.ph337.new:                                 ; preds = %vector.ph337
>   %unroll_iter = and i64 %270, 2305843009213693950
>   %272 = load double, double* %eosvmax, align 8, !tbaa !2, !alias.scope !104
>   %273 = insertelement <4 x double> undef, double %272, i32 0
>   %274 = shufflevector <4 x double> %273, <4 x double> undef, <4 x i32> zeroinitializer
>   %275 = insertelement <4 x double> undef, double %272, i32 0
>   %276 = shufflevector <4 x double> %275, <4 x double> undef, <4 x i32> zeroinitializer
>   %277 = insertelement <4 x double> undef, double %272, i32 0
>   %278 = shufflevector <4 x double> %277, <4 x double> undef, <4 x i32> zeroinitializer
>   %279 = load double, double* %eosvmax, align 8, !tbaa !2, !alias.scope !104
>   %280 = insertelement <4 x double> undef, double %279, i32 0
>   %281 = shufflevector <4 x double> %280, <4 x double> undef, <4 x i32> zeroinitializer
>   %282 = load double, double* %eosvmax, align 8, !tbaa !2, !alias.scope !104
>   %283 = insertelement <4 x double> undef, double %282, i32 0
>   %284 = shufflevector <4 x double> %283, <4 x double> undef, <4 x i32> zeroinitializer
>   %285 = insertelement <4 x double> undef, double %282, i32 0
>   %286 = shufflevector <4 x double> %285, <4 x double> undef, <4 x i32> zeroinitializer
>   %287 = insertelement <4 x double> undef, double %282, i32 0
>   %288 = shufflevector <4 x double> %287, <4 x double> undef, <4 x i32> zeroinitializer
>   %289 = load double, double* %eosvmax, align 8, !tbaa !2, !alias.scope !104
>   %290 = insertelement <4 x double> undef, double %289, i32 0
>   %291 = shufflevector <4 x double> %290, <4 x double> undef, <4 x i32> zeroinitializer
>   br label %vector.body322
> 
> vector.body322:                                   ; preds = %vector.body322, %vector.ph337.new
>   %index340 = phi i64 [ 0, %vector.ph337.new ], [ %index.next341.1, %vector.body322 ]
>   %niter = phi i64 [ %unroll_iter, %vector.ph337.new ], [ %niter.nsub.1, %vector.body322 ]
>   %offset.idx345 = add i64 %index340, %258
>   %292 = getelementptr inbounds double, double* %257, i64 %offset.idx345
>   %293 = bitcast double* %292 to <4 x double>*
>   %wide.load346 = load <4 x double>, <4 x double>* %293, align 8, !tbaa !2, !alias.scope !107, !noalias !104
>   %294 = getelementptr inbounds double, double* %292, i64 4
>   %295 = bitcast double* %294 to <4 x double>*
>   %wide.load347 = load <4 x double>, <4 x double>* %295, align 8, !tbaa !2, !alias.scope !107, !noalias !104
>   %296 = getelementptr inbounds double, double* %292, i64 8
>   %297 = bitcast double* %296 to <4 x double>*
>   %wide.load348 = load <4 x double>, <4 x double>* %297, align 8, !tbaa !2, !alias.scope !107, !noalias !104
>   %298 = getelementptr inbounds double, double* %292, i64 12
>   %299 = bitcast double* %298 to <4 x double>*
>   %wide.load349 = load <4 x double>, <4 x double>* %299, align 8, !tbaa !2, !alias.scope !107, !noalias !104
>   %300 = fcmp ogt <4 x double> %wide.load346, %274
>   %301 = fcmp ogt <4 x double> %wide.load347, %276
>   %302 = fcmp ogt <4 x double> %wide.load348, %278
>   %303 = fcmp ogt <4 x double> %wide.load349, %281
>   %304 = bitcast double* %292 to <4 x double>*
>   call void @llvm.masked.store.v4f64.p0v4f64(<4 x double> %274, <4 x double>* %304, i32 8, <4 x i1> %300), !tbaa !2, !alias.scope !107, !noalias !104
>   %305 = bitcast double* %294 to <4 x double>*
>   call void @llvm.masked.store.v4f64.p0v4f64(<4 x double> %276, <4 x double>* %305, i32 8, <4 x i1> %301), !tbaa !2, !alias.scope !107, !noalias !104
>   %306 = bitcast double* %296 to <4 x double>*
>   call void @llvm.masked.store.v4f64.p0v4f64(<4 x double> %278, <4 x double>* %306, i32 8, <4 x i1> %302), !tbaa !2, !alias.scope !107, !noalias !104
>   %307 = bitcast double* %298 to <4 x double>*
>   call void @llvm.masked.store.v4f64.p0v4f64(<4 x double> %281, <4 x double>* %307, i32 8, <4 x i1> %303), !tbaa !2, !alias.scope !107, !noalias !104
>   %index.next341 = or i64 %index340, 16
>   %offset.idx345.1 = add i64 %index.next341, %258
>   %308 = getelementptr inbounds double, double* %257, i64 %offset.idx345.1
>   %309 = bitcast double* %308 to <4 x double>*
>   %wide.load346.1 = load <4 x double>, <4 x double>* %309, align 8, !tbaa !2, !alias.scope !107, !noalias !104
>   %310 = getelementptr inbounds double, double* %308, i64 4
>   %311 = bitcast double* %310 to <4 x double>*
>   %wide.load347.1 = load <4 x double>, <4 x double>* %311, align 8, !tbaa !2, !alias.scope !107, !noalias !104
>   %312 = getelementptr inbounds double, double* %308, i64 8
>   %313 = bitcast double* %312 to <4 x double>*
>   %wide.load348.1 = load <4 x double>, <4 x double>* %313, align 8, !tbaa !2, !alias.scope !107, !noalias !104
>   %314 = getelementptr inbounds double, double* %308, i64 12
>   %315 = bitcast double* %314 to <4 x double>*
>   %wide.load349.1 = load <4 x double>, <4 x double>* %315, align 8, !tbaa !2, !alias.scope !107, !noalias !104
>   %316 = fcmp ogt <4 x double> %wide.load346.1, %284
>   %317 = fcmp ogt <4 x double> %wide.load347.1, %286
>   %318 = fcmp ogt <4 x double> %wide.load348.1, %288
>   %319 = fcmp ogt <4 x double> %wide.load349.1, %291
>   %320 = bitcast double* %308 to <4 x double>*
>   call void @llvm.masked.store.v4f64.p0v4f64(<4 x double> %284, <4 x double>* %320, i32 8, <4 x i1> %316), !tbaa !2, !alias.scope !107, !noalias !104
>   %321 = bitcast double* %310 to <4 x double>*
>   call void @llvm.masked.store.v4f64.p0v4f64(<4 x double> %286, <4 x double>* %321, i32 8, <4 x i1> %317), !tbaa !2, !alias.scope !107, !noalias !104
>   %322 = bitcast double* %312 to <4 x double>*
>   call void @llvm.masked.store.v4f64.p0v4f64(<4 x double> %288, <4 x double>* %322, i32 8, <4 x i1> %318), !tbaa !2, !alias.scope !107, !noalias !104
>   %323 = bitcast double* %314 to <4 x double>*
>   call void @llvm.masked.store.v4f64.p0v4f64(<4 x double> %291, <4 x double>* %323, i32 8, <4 x i1> %319), !tbaa !2, !alias.scope !107, !noalias !104
>   %index.next341.1 = add i64 %index340, 32
>   %niter.nsub.1 = add i64 %niter, -2
>   %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
>   br i1 %niter.ncmp.1, label %middle.block320.unr-lcssa, label %vector.body322, !llvm.loop !109
> 
> middle.block320.unr-lcssa:                        ; preds = %vector.body322, %vector.ph337
>   %index340.unr = phi i64 [ 0, %vector.ph337 ], [ %index.next341.1, %vector.body322 ]
>   %lcmp.mod357.not = icmp eq i64 %xtraiter356, 0
>   br i1 %lcmp.mod357.not, label %middle.block320, label %vector.body322.epil
> 
> vector.body322.epil:                              ; preds = %middle.block320.unr-lcssa
>   %offset.idx345.epil = add i64 %index340.unr, %258
>   %324 = getelementptr inbounds double, double* %257, i64 %offset.idx345.epil
>   %325 = bitcast double* %324 to <4 x double>*
>   %wide.load346.epil = load <4 x double>, <4 x double>* %325, align 8, !tbaa !2, !alias.scope !107, !noalias !104
>   %326 = getelementptr inbounds double, double* %324, i64 4
>   %327 = bitcast double* %326 to <4 x double>*
>   %wide.load347.epil = load <4 x double>, <4 x double>* %327, align 8, !tbaa !2, !alias.scope !107, !noalias !104
>   %328 = getelementptr inbounds double, double* %324, i64 8
>   %329 = bitcast double* %328 to <4 x double>*
>   %wide.load348.epil = load <4 x double>, <4 x double>* %329, align 8, !tbaa !2, !alias.scope !107, !noalias !104
>   %330 = getelementptr inbounds double, double* %324, i64 12
>   %331 = bitcast double* %330 to <4 x double>*
>   %wide.load349.epil = load <4 x double>, <4 x double>* %331, align 8, !tbaa !2, !alias.scope !107, !noalias !104
>   %332 = load double, double* %eosvmax, align 8, !tbaa !2, !alias.scope !104
>   %333 = insertelement <4 x double> undef, double %332, i32 0
>   %334 = shufflevector <4 x double> %333, <4 x double> undef, <4 x i32> zeroinitializer
>   %335 = insertelement <4 x double> undef, double %332, i32 0
>   %336 = shufflevector <4 x double> %335, <4 x double> undef, <4 x i32> zeroinitializer
>   %337 = insertelement <4 x double> undef, double %332, i32 0
>   %338 = shufflevector <4 x double> %337, <4 x double> undef, <4 x i32> zeroinitializer
>   %339 = load double, double* %eosvmax, align 8, !tbaa !2, !alias.scope !104
>   %340 = insertelement <4 x double> undef, double %339, i32 0
>   %341 = shufflevector <4 x double> %340, <4 x double> undef, <4 x i32> zeroinitializer
>   %342 = fcmp ogt <4 x double> %wide.load346.epil, %334
>   %343 = fcmp ogt <4 x double> %wide.load347.epil, %336
>   %344 = fcmp ogt <4 x double> %wide.load348.epil, %338
>   %345 = fcmp ogt <4 x double> %wide.load349.epil, %341
>   %346 = bitcast double* %324 to <4 x double>*
>   call void @llvm.masked.store.v4f64.p0v4f64(<4 x double> %334, <4 x double>* %346, i32 8, <4 x i1> %342), !tbaa !2, !alias.scope !107, !noalias !104
>   %347 = bitcast double* %326 to <4 x double>*
>   call void @llvm.masked.store.v4f64.p0v4f64(<4 x double> %336, <4 x double>* %347, i32 8, <4 x i1> %343), !tbaa !2, !alias.scope !107, !noalias !104
>   %348 = bitcast double* %328 to <4 x double>*
>   call void @llvm.masked.store.v4f64.p0v4f64(<4 x double> %338, <4 x double>* %348, i32 8, <4 x i1> %344), !tbaa !2, !alias.scope !107, !noalias !104
>   %349 = bitcast double* %330 to <4 x double>*
>   call void @llvm.masked.store.v4f64.p0v4f64(<4 x double> %341, <4 x double>* %349, i32 8, <4 x i1> %345), !tbaa !2, !alias.scope !107, !noalias !104
>   br label %middle.block320
> 
> middle.block320:                                  ; preds = %middle.block320.unr-lcssa, %vector.body322.epil
>   %cmp.n344 = icmp eq i64 %263, %n.vec339
>   br i1 %cmp.n344, label %omp.loop.exit91, label %omp.inner.for.body77.preheader
> 
> omp.inner.for.body77.preheader:                   ; preds = %middle.block320, %vector.memcheck336, %omp.inner.for.body77.lr.ph
>   %indvars.iv254.ph = phi i64 [ %258, %vector.memcheck336 ], [ %258, %omp.inner.for.body77.lr.ph ], [ %ind.end343, %middle.block320 ]
>   %350 = add i32 %smax256, 1
>   %351 = trunc i64 %indvars.iv254.ph to i32
>   %352 = sub i32 %350, %351
>   %353 = sub i32 %smax256, %351
>   %xtraiter = and i32 %352, 3
>   %lcmp.mod.not = icmp eq i32 %xtraiter, 0
>   br i1 %lcmp.mod.not, label %omp.inner.for.body77.prol.loopexit, label %omp.inner.for.body77.prol
> 
> omp.inner.for.body77.prol:                        ; preds = %omp.inner.for.body77.preheader, %omp.inner.for.inc88.prol
>   %indvars.iv254.prol = phi i64 [ %indvars.iv.next255.prol, %omp.inner.for.inc88.prol ], [ %indvars.iv254.ph, %omp.inner.for.body77.preheader ]
>   %prol.iter = phi i32 [ %prol.iter.sub, %omp.inner.for.inc88.prol ], [ %xtraiter, %omp.inner.for.body77.preheader ]
>   %arrayidx81.prol = getelementptr inbounds double, double* %257, i64 %indvars.iv254.prol
>   %354 = load double, double* %arrayidx81.prol, align 8, !tbaa !2
>   %355 = load double, double* %eosvmax, align 8, !tbaa !2
>   %cmp82.prol = fcmp ogt double %354, %355
>   br i1 %cmp82.prol, label %if.then83.prol, label %omp.inner.for.inc88.prol
> 
> if.then83.prol:                                   ; preds = %omp.inner.for.body77.prol
>   store double %355, double* %arrayidx81.prol, align 8, !tbaa !2
>   br label %omp.inner.for.inc88.prol
> 
> omp.inner.for.inc88.prol:                         ; preds = %if.then83.prol, %omp.inner.for.body77.prol
>   %indvars.iv.next255.prol = add nsw i64 %indvars.iv254.prol, 1
>   %prol.iter.sub = add i32 %prol.iter, -1
>   %prol.iter.cmp.not = icmp eq i32 %prol.iter.sub, 0
>   br i1 %prol.iter.cmp.not, label %omp.inner.for.body77.prol.loopexit, label %omp.inner.for.body77.prol, !llvm.loop !110
> 
> omp.inner.for.body77.prol.loopexit:               ; preds = %omp.inner.for.inc88.prol, %omp.inner.for.body77.preheader
>   %indvars.iv254.unr = phi i64 [ %indvars.iv254.ph, %omp.inner.for.body77.preheader ], [ %indvars.iv.next255.prol, %omp.inner.for.inc88.prol ]
>   %356 = icmp ult i32 %353, 3
>   br i1 %356, label %omp.loop.exit91, label %omp.inner.for.body77
> 
> omp.inner.for.body77:                             ; preds = %omp.inner.for.body77.prol.loopexit, %omp.inner.for.inc88.3
>   %indvars.iv254 = phi i64 [ %indvars.iv.next255.3, %omp.inner.for.inc88.3 ], [ %indvars.iv254.unr, %omp.inner.for.body77.prol.loopexit ]
>   %arrayidx81 = getelementptr inbounds double, double* %257, i64 %indvars.iv254
>   %357 = load double, double* %arrayidx81, align 8, !tbaa !2
>   %358 = load double, double* %eosvmax, align 8, !tbaa !2
>   %cmp82 = fcmp ogt double %357, %358
>   br i1 %cmp82, label %if.then83, label %omp.inner.for.inc88
> 
> if.then83:                                        ; preds = %omp.inner.for.body77
>   store double %358, double* %arrayidx81, align 8, !tbaa !2
>   br label %omp.inner.for.inc88
> 
> omp.inner.for.inc88:                              ; preds = %if.then83, %omp.inner.for.body77
>   %indvars.iv.next255 = add nsw i64 %indvars.iv254, 1
>   %arrayidx81.1 = getelementptr inbounds double, double* %257, i64 %indvars.iv.next255
>   %359 = load double, double* %arrayidx81.1, align 8, !tbaa !2
>   %360 = load double, double* %eosvmax, align 8, !tbaa !2
>   %cmp82.1 = fcmp ogt double %359, %360
>   br i1 %cmp82.1, label %if.then83.1, label %omp.inner.for.inc88.1
> 
> omp.loop.exit91:                                  ; preds = %omp.inner.for.body77.prol.loopexit, %omp.inner.for.inc88.3, %middle.block320, %omp.precond.then62
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %136)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %254) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %253) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %252) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %251) #7
>   br label %if.end93
> 
> if.end93:                                         ; preds = %omp.loop.exit91, %if.end50
>   %.pr = load i32, i32* %numElem, align 4, !tbaa !6
>   %sub101 = add nsw i32 %.pr, -1
>   %cmp103 = icmp sgt i32 %.pr, 0
>   br i1 %cmp103, label %omp.precond.then104, label %omp.precond.end143
> 
> omp.precond.then104:                              ; preds = %if.end93
>   %361 = bitcast i32* %.omp.lb105 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %361) #7
>   store i32 0, i32* %.omp.lb105, align 4, !tbaa !6
>   %362 = bitcast i32* %.omp.ub106 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %362) #7
>   store i32 %sub101, i32* %.omp.ub106, align 4, !tbaa !6
>   %363 = bitcast i32* %.omp.stride107 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %363) #7
>   store i32 1, i32* %.omp.stride107, align 4, !tbaa !6
>   %364 = bitcast i32* %.omp.is_last108 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %364) #7
>   store i32 0, i32* %.omp.is_last108, align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %136, i32 34, i32* nonnull %.omp.is_last108, i32* nonnull %.omp.lb105, i32* nonnull %.omp.ub106, i32* nonnull %.omp.stride107, i32 1, i32 1) #7
>   %365 = load i32, i32* %.omp.ub106, align 4, !tbaa !6
>   %cmp111.not = icmp slt i32 %365, %.pr
>   %cond115 = select i1 %cmp111.not, i32 %365, i32 %sub101
>   store i32 %cond115, i32* %.omp.ub106, align 4, !tbaa !6
>   %366 = load i32, i32* %.omp.lb105, align 4, !tbaa !6
>   %cmp117.not213 = icmp sgt i32 %366, %cond115
>   br i1 %cmp117.not213, label %omp.loop.exit142, label %omp.inner.for.body119.lr.ph
> 
> omp.inner.for.body119.lr.ph:                      ; preds = %omp.precond.then104
>   %_M_start.i.i209 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 43, i32 0, i32 0, i32 0, i32 0
>   %367 = load double*, double** %_M_start.i.i209, align 8, !tbaa !11
>   %368 = load double, double* %eosvmin, align 8, !tbaa !2
>   %cmp123 = fcmp une double %368, 0.000000e+00
>   %369 = load double, double* %eosvmax, align 8, !tbaa !2
>   %cmp129 = fcmp une double %369, 0.000000e+00
>   %370 = sext i32 %366 to i64
>   %371 = icmp sgt i32 %cond115, %366
>   %smax = select i1 %371, i32 %cond115, i32 %366
>   %372 = add i32 %smax, 1
>   br i1 %cmp123, label %omp.inner.for.body119.lr.ph.split.us, label %omp.inner.for.body119.lr.ph.split
> 
> omp.inner.for.body119.lr.ph.split.us:             ; preds = %omp.inner.for.body119.lr.ph
>   br i1 %cmp129, label %omp.inner.for.body119.us.us, label %omp.inner.for.body119.us
> 
> omp.inner.for.body119.us.us:                      ; preds = %omp.inner.for.body119.lr.ph.split.us, %omp.inner.for.cond116.us.us
>   %indvars.iv = phi i64 [ %indvars.iv.next, %omp.inner.for.cond116.us.us ], [ %370, %omp.inner.for.body119.lr.ph.split.us ]
>   %add.ptr.i.i210.us.us = getelementptr inbounds double, double* %367, i64 %indvars.iv
>   %373 = load double, double* %add.ptr.i.i210.us.us, align 8, !tbaa !2
>   %cmp125.us.us = fcmp olt double %373, %368
>   %vc.0.us.us = select i1 %cmp125.us.us, double %368, double %373
>   %cmp131.us.us = fcmp ogt double %vc.0.us.us, %369
>   %vc.1.us.us = select i1 %cmp131.us.us, double %369, double %vc.0.us.us
>   %cmp135.us.us = fcmp ugt double %vc.1.us.us, 0.000000e+00
>   br i1 %cmp135.us.us, label %omp.inner.for.cond116.us.us, label %if.then136
> 
> omp.inner.for.cond116.us.us:                      ; preds = %omp.inner.for.body119.us.us
>   %indvars.iv.next = add nsw i64 %indvars.iv, 1
>   %lftr.wideiv = trunc i64 %indvars.iv.next to i32
>   %exitcond.not = icmp eq i32 %372, %lftr.wideiv
>   br i1 %exitcond.not, label %omp.loop.exit142, label %omp.inner.for.body119.us.us
> 
> omp.inner.for.body119.us:                         ; preds = %omp.inner.for.body119.lr.ph.split.us, %omp.inner.for.cond116.us
>   %indvars.iv239 = phi i64 [ %indvars.iv.next240, %omp.inner.for.cond116.us ], [ %370, %omp.inner.for.body119.lr.ph.split.us ]
>   %add.ptr.i.i210.us = getelementptr inbounds double, double* %367, i64 %indvars.iv239
>   %374 = load double, double* %add.ptr.i.i210.us, align 8, !tbaa !2
>   %cmp125.us = fcmp olt double %374, %368
>   %vc.0.us = select i1 %cmp125.us, double %368, double %374
>   %cmp135.us = fcmp ugt double %vc.0.us, 0.000000e+00
>   br i1 %cmp135.us, label %omp.inner.for.cond116.us, label %if.then136
> 
> omp.inner.for.cond116.us:                         ; preds = %omp.inner.for.body119.us
>   %indvars.iv.next240 = add nsw i64 %indvars.iv239, 1
>   %lftr.wideiv242 = trunc i64 %indvars.iv.next240 to i32
>   %exitcond243.not = icmp eq i32 %372, %lftr.wideiv242
>   br i1 %exitcond243.not, label %omp.loop.exit142, label %omp.inner.for.body119.us
> 
> omp.inner.for.body119.lr.ph.split:                ; preds = %omp.inner.for.body119.lr.ph
>   br i1 %cmp129, label %omp.inner.for.body119.us221, label %omp.inner.for.body119
> 
> omp.inner.for.body119.us221:                      ; preds = %omp.inner.for.body119.lr.ph.split, %omp.inner.for.cond116.us230
>   %indvars.iv244 = phi i64 [ %indvars.iv.next245, %omp.inner.for.cond116.us230 ], [ %370, %omp.inner.for.body119.lr.ph.split ]
>   %add.ptr.i.i210.us224 = getelementptr inbounds double, double* %367, i64 %indvars.iv244
>   %375 = load double, double* %add.ptr.i.i210.us224, align 8, !tbaa !2
>   %cmp131.us225 = fcmp ogt double %375, %369
>   %vc.1.us227 = select i1 %cmp131.us225, double %369, double %375
>   %cmp135.us228 = fcmp ugt double %vc.1.us227, 0.000000e+00
>   br i1 %cmp135.us228, label %omp.inner.for.cond116.us230, label %if.then136
> 
> omp.inner.for.cond116.us230:                      ; preds = %omp.inner.for.body119.us221
>   %indvars.iv.next245 = add nsw i64 %indvars.iv244, 1
>   %lftr.wideiv247 = trunc i64 %indvars.iv.next245 to i32
>   %exitcond248.not = icmp eq i32 %372, %lftr.wideiv247
>   br i1 %exitcond248.not, label %omp.loop.exit142, label %omp.inner.for.body119.us221
> 
> omp.inner.for.cond116:                            ; preds = %omp.inner.for.body119
>   %indvars.iv.next250 = add nsw i64 %indvars.iv249, 1
>   %lftr.wideiv252 = trunc i64 %indvars.iv.next250 to i32
>   %exitcond253.not = icmp eq i32 %372, %lftr.wideiv252
>   br i1 %exitcond253.not, label %omp.loop.exit142, label %omp.inner.for.body119
> 
> omp.inner.for.body119:                            ; preds = %omp.inner.for.body119.lr.ph.split, %omp.inner.for.cond116
>   %indvars.iv249 = phi i64 [ %indvars.iv.next250, %omp.inner.for.cond116 ], [ %370, %omp.inner.for.body119.lr.ph.split ]
>   %add.ptr.i.i210 = getelementptr inbounds double, double* %367, i64 %indvars.iv249
>   %376 = load double, double* %add.ptr.i.i210, align 8, !tbaa !2
>   %cmp135 = fcmp ugt double %376, 0.000000e+00
>   br i1 %cmp135, label %omp.inner.for.cond116, label %if.then136
13349,13791c10845,10846
< 74:                                               ; preds = %74, %72
<   %75 = phi i64 [ 0, %72 ], [ %124, %74 ]
<   %76 = phi i64 [ %73, %72 ], [ %125, %74 ]
<   %77 = add i64 %75, %46
<   %78 = getelementptr inbounds double, double* %44, i64 %77
<   %79 = bitcast double* %78 to <2 x double>*
<   %80 = load <2 x double>, <2 x double>* %79, align 8, !tbaa !2, !alias.scope !106
<   %81 = getelementptr inbounds double, double* %78, i64 2
<   %82 = bitcast double* %81 to <2 x double>*
<   %83 = load <2 x double>, <2 x double>* %82, align 8, !tbaa !2, !alias.scope !106
<   %84 = getelementptr inbounds double, double* %45, i64 %77
<   %85 = bitcast double* %84 to <2 x double>*
<   store <2 x double> %80, <2 x double>* %85, align 8, !tbaa !2, !alias.scope !109, !noalias !106
<   %86 = getelementptr inbounds double, double* %84, i64 2
<   %87 = bitcast double* %86 to <2 x double>*
<   store <2 x double> %83, <2 x double>* %87, align 8, !tbaa !2, !alias.scope !109, !noalias !106
<   %88 = or i64 %75, 4
<   %89 = add i64 %88, %46
<   %90 = getelementptr inbounds double, double* %44, i64 %89
<   %91 = bitcast double* %90 to <2 x double>*
<   %92 = load <2 x double>, <2 x double>* %91, align 8, !tbaa !2, !alias.scope !106
<   %93 = getelementptr inbounds double, double* %90, i64 2
<   %94 = bitcast double* %93 to <2 x double>*
<   %95 = load <2 x double>, <2 x double>* %94, align 8, !tbaa !2, !alias.scope !106
<   %96 = getelementptr inbounds double, double* %45, i64 %89
<   %97 = bitcast double* %96 to <2 x double>*
<   store <2 x double> %92, <2 x double>* %97, align 8, !tbaa !2, !alias.scope !109, !noalias !106
<   %98 = getelementptr inbounds double, double* %96, i64 2
<   %99 = bitcast double* %98 to <2 x double>*
<   store <2 x double> %95, <2 x double>* %99, align 8, !tbaa !2, !alias.scope !109, !noalias !106
<   %100 = or i64 %75, 8
<   %101 = add i64 %100, %46
<   %102 = getelementptr inbounds double, double* %44, i64 %101
<   %103 = bitcast double* %102 to <2 x double>*
<   %104 = load <2 x double>, <2 x double>* %103, align 8, !tbaa !2, !alias.scope !106
<   %105 = getelementptr inbounds double, double* %102, i64 2
<   %106 = bitcast double* %105 to <2 x double>*
<   %107 = load <2 x double>, <2 x double>* %106, align 8, !tbaa !2, !alias.scope !106
<   %108 = getelementptr inbounds double, double* %45, i64 %101
<   %109 = bitcast double* %108 to <2 x double>*
<   store <2 x double> %104, <2 x double>* %109, align 8, !tbaa !2, !alias.scope !109, !noalias !106
<   %110 = getelementptr inbounds double, double* %108, i64 2
<   %111 = bitcast double* %110 to <2 x double>*
<   store <2 x double> %107, <2 x double>* %111, align 8, !tbaa !2, !alias.scope !109, !noalias !106
<   %112 = or i64 %75, 12
<   %113 = add i64 %112, %46
<   %114 = getelementptr inbounds double, double* %44, i64 %113
<   %115 = bitcast double* %114 to <2 x double>*
<   %116 = load <2 x double>, <2 x double>* %115, align 8, !tbaa !2, !alias.scope !106
<   %117 = getelementptr inbounds double, double* %114, i64 2
<   %118 = bitcast double* %117 to <2 x double>*
<   %119 = load <2 x double>, <2 x double>* %118, align 8, !tbaa !2, !alias.scope !106
<   %120 = getelementptr inbounds double, double* %45, i64 %113
<   %121 = bitcast double* %120 to <2 x double>*
<   store <2 x double> %116, <2 x double>* %121, align 8, !tbaa !2, !alias.scope !109, !noalias !106
<   %122 = getelementptr inbounds double, double* %120, i64 2
<   %123 = bitcast double* %122 to <2 x double>*
<   store <2 x double> %119, <2 x double>* %123, align 8, !tbaa !2, !alias.scope !109, !noalias !106
<   %124 = add i64 %75, 16
<   %125 = add i64 %76, -4
<   %126 = icmp eq i64 %125, 0
<   br i1 %126, label %127, label %74, !llvm.loop !111
< 
< 127:                                              ; preds = %74, %64
<   %128 = phi i64 [ 0, %64 ], [ %124, %74 ]
<   %129 = icmp eq i64 %70, 0
<   br i1 %129, label %147, label %130
< 
< 130:                                              ; preds = %127, %130
<   %131 = phi i64 [ %144, %130 ], [ %128, %127 ]
<   %132 = phi i64 [ %145, %130 ], [ %70, %127 ]
<   %133 = add i64 %131, %46
<   %134 = getelementptr inbounds double, double* %44, i64 %133
<   %135 = bitcast double* %134 to <2 x double>*
<   %136 = load <2 x double>, <2 x double>* %135, align 8, !tbaa !2, !alias.scope !106
<   %137 = getelementptr inbounds double, double* %134, i64 2
<   %138 = bitcast double* %137 to <2 x double>*
<   %139 = load <2 x double>, <2 x double>* %138, align 8, !tbaa !2, !alias.scope !106
<   %140 = getelementptr inbounds double, double* %45, i64 %133
<   %141 = bitcast double* %140 to <2 x double>*
<   store <2 x double> %136, <2 x double>* %141, align 8, !tbaa !2, !alias.scope !109, !noalias !106
<   %142 = getelementptr inbounds double, double* %140, i64 2
<   %143 = bitcast double* %142 to <2 x double>*
<   store <2 x double> %139, <2 x double>* %143, align 8, !tbaa !2, !alias.scope !109, !noalias !106
<   %144 = add i64 %131, 4
<   %145 = add i64 %132, -1
<   %146 = icmp eq i64 %145, 0
<   br i1 %146, label %147, label %130, !llvm.loop !112
< 
< 147:                                              ; preds = %130, %127
<   %148 = icmp eq i64 %50, %65
<   br i1 %148, label %189, label %149
< 
< 149:                                              ; preds = %52, %42, %147
<   %150 = phi i64 [ %46, %52 ], [ %46, %42 ], [ %66, %147 ]
<   %151 = add i32 %39, 1
<   %152 = trunc i64 %150 to i32
<   %153 = sub i32 %151, %152
<   %154 = sub i32 %39, %152
<   %155 = and i32 %153, 3
<   %156 = icmp eq i32 %155, 0
<   br i1 %156, label %166, label %157
< 
< 157:                                              ; preds = %149, %157
<   %158 = phi i64 [ %163, %157 ], [ %150, %149 ]
<   %159 = phi i32 [ %164, %157 ], [ %155, %149 ]
<   %160 = getelementptr inbounds double, double* %44, i64 %158
<   %161 = load double, double* %160, align 8, !tbaa !2
<   %162 = getelementptr inbounds double, double* %45, i64 %158
<   store double %161, double* %162, align 8, !tbaa !2
<   %163 = add nsw i64 %158, 1
<   %164 = add i32 %159, -1
<   %165 = icmp eq i32 %164, 0
<   br i1 %165, label %166, label %157, !llvm.loop !113
< 
< 166:                                              ; preds = %157, %149
<   %167 = phi i64 [ %150, %149 ], [ %163, %157 ]
<   %168 = icmp ult i32 %154, 3
<   br i1 %168, label %189, label %169
< 
< 169:                                              ; preds = %166, %169
<   %170 = phi i64 [ %186, %169 ], [ %167, %166 ]
<   %171 = getelementptr inbounds double, double* %44, i64 %170
<   %172 = load double, double* %171, align 8, !tbaa !2
<   %173 = getelementptr inbounds double, double* %45, i64 %170
<   store double %172, double* %173, align 8, !tbaa !2
<   %174 = add nsw i64 %170, 1
<   %175 = getelementptr inbounds double, double* %44, i64 %174
<   %176 = load double, double* %175, align 8, !tbaa !2
<   %177 = getelementptr inbounds double, double* %45, i64 %174
<   store double %176, double* %177, align 8, !tbaa !2
<   %178 = add nsw i64 %170, 2
<   %179 = getelementptr inbounds double, double* %44, i64 %178
<   %180 = load double, double* %179, align 8, !tbaa !2
<   %181 = getelementptr inbounds double, double* %45, i64 %178
<   store double %180, double* %181, align 8, !tbaa !2
<   %182 = add nsw i64 %170, 3
<   %183 = getelementptr inbounds double, double* %44, i64 %182
<   %184 = load double, double* %183, align 8, !tbaa !2
<   %185 = getelementptr inbounds double, double* %45, i64 %182
<   store double %184, double* %185, align 8, !tbaa !2
<   %186 = add nsw i64 %170, 4
<   %187 = trunc i64 %186 to i32
<   %188 = icmp eq i32 %47, %187
<   br i1 %188, label %189, label %169, !llvm.loop !114
< 
< 189:                                              ; preds = %166, %169, %147, %31
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %36)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %35) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %34) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %33) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #10
<   br label %190
< 
< 190:                                              ; preds = %29, %189
<   %191 = phi i32 [ %30, %29 ], [ %36, %189 ]
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %191)
<   %192 = load double, double* %5, align 8, !tbaa !2
<   %193 = fcmp une double %192, 0.000000e+00
<   br i1 %193, label %194, label %240
< 
< 194:                                              ; preds = %190
<   %195 = load i32, i32* %2, align 4, !tbaa !12
<   %196 = add nsw i32 %195, -1
<   %197 = icmp sgt i32 %195, 0
<   br i1 %197, label %198, label %240
< 
< 198:                                              ; preds = %194
<   %199 = bitcast i32* %12 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %199) #10
<   store i32 0, i32* %12, align 4, !tbaa !12
<   %200 = bitcast i32* %13 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %200) #10
<   store i32 %196, i32* %13, align 4, !tbaa !12
<   %201 = bitcast i32* %14 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %201) #10
<   store i32 1, i32* %14, align 4, !tbaa !12
<   %202 = bitcast i32* %15 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %202) #10
<   store i32 0, i32* %15, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %191, i32 34, i32* nonnull %15, i32* nonnull %12, i32* nonnull %13, i32* nonnull %14, i32 1, i32 1) #10
<   %203 = load i32, i32* %13, align 4, !tbaa !12
<   %204 = icmp slt i32 %203, %195
<   %205 = select i1 %204, i32 %203, i32 %196
<   store i32 %205, i32* %13, align 4, !tbaa !12
<   %206 = load i32, i32* %12, align 4, !tbaa !12
<   %207 = icmp slt i32 %205, %206
<   br i1 %207, label %239, label %208
< 
< 208:                                              ; preds = %198
<   %209 = load double*, double** %3, align 8, !tbaa !6
<   %210 = sext i32 %206 to i64
<   %211 = add i32 %205, 1
<   %212 = sub i32 %211, %206
<   %213 = and i32 %212, 1
<   %214 = icmp eq i32 %213, 0
<   br i1 %214, label %223, label %215
< 
< 215:                                              ; preds = %208
<   %216 = getelementptr inbounds double, double* %209, i64 %210
<   %217 = load double, double* %216, align 8, !tbaa !2
<   %218 = load double, double* %5, align 8, !tbaa !2
<   %219 = fcmp olt double %217, %218
<   br i1 %219, label %220, label %221
< 
< 220:                                              ; preds = %215
<   store double %218, double* %216, align 8, !tbaa !2
<   br label %221
< 
< 221:                                              ; preds = %220, %215
<   %222 = add nsw i64 %210, 1
<   br label %223
< 
< 223:                                              ; preds = %221, %208
<   %224 = phi i64 [ %210, %208 ], [ %222, %221 ]
<   %225 = icmp eq i32 %205, %206
<   br i1 %225, label %239, label %226
< 
< 226:                                              ; preds = %223, %372
<   %227 = phi i64 [ %373, %372 ], [ %224, %223 ]
<   %228 = getelementptr inbounds double, double* %209, i64 %227
<   %229 = load double, double* %228, align 8, !tbaa !2
<   %230 = load double, double* %5, align 8, !tbaa !2
<   %231 = fcmp olt double %229, %230
<   br i1 %231, label %232, label %233
< 
< 232:                                              ; preds = %226
<   store double %230, double* %228, align 8, !tbaa !2
<   br label %233
< 
< 233:                                              ; preds = %232, %226
<   %234 = add nsw i64 %227, 1
<   %235 = getelementptr inbounds double, double* %209, i64 %234
<   %236 = load double, double* %235, align 8, !tbaa !2
<   %237 = load double, double* %5, align 8, !tbaa !2
<   %238 = fcmp olt double %236, %237
<   br i1 %238, label %371, label %372
< 
< 239:                                              ; preds = %223, %372, %198
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %191)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %202) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %201) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %200) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %199) #10
<   br label %240
< 
< 240:                                              ; preds = %194, %239, %190
<   %241 = load double, double* %6, align 8, !tbaa !2
<   %242 = fcmp une double %241, 0.000000e+00
<   br i1 %242, label %243, label %289
< 
< 243:                                              ; preds = %240
<   %244 = load i32, i32* %2, align 4, !tbaa !12
<   %245 = add nsw i32 %244, -1
<   %246 = icmp sgt i32 %244, 0
<   br i1 %246, label %247, label %360
< 
< 247:                                              ; preds = %243
<   %248 = bitcast i32* %16 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %248) #10
<   store i32 0, i32* %16, align 4, !tbaa !12
<   %249 = bitcast i32* %17 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %249) #10
<   store i32 %245, i32* %17, align 4, !tbaa !12
<   %250 = bitcast i32* %18 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %250) #10
<   store i32 1, i32* %18, align 4, !tbaa !12
<   %251 = bitcast i32* %19 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %251) #10
<   store i32 0, i32* %19, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %191, i32 34, i32* nonnull %19, i32* nonnull %16, i32* nonnull %17, i32* nonnull %18, i32 1, i32 1) #10
<   %252 = load i32, i32* %17, align 4, !tbaa !12
<   %253 = icmp slt i32 %252, %244
<   %254 = select i1 %253, i32 %252, i32 %245
<   store i32 %254, i32* %17, align 4, !tbaa !12
<   %255 = load i32, i32* %16, align 4, !tbaa !12
<   %256 = icmp slt i32 %254, %255
<   br i1 %256, label %288, label %257
< 
< 257:                                              ; preds = %247
<   %258 = load double*, double** %3, align 8, !tbaa !6
<   %259 = sext i32 %255 to i64
<   %260 = add i32 %254, 1
<   %261 = sub i32 %260, %255
<   %262 = and i32 %261, 1
<   %263 = icmp eq i32 %262, 0
<   br i1 %263, label %272, label %264
< 
< 264:                                              ; preds = %257
<   %265 = getelementptr inbounds double, double* %258, i64 %259
<   %266 = load double, double* %265, align 8, !tbaa !2
<   %267 = load double, double* %6, align 8, !tbaa !2
<   %268 = fcmp ogt double %266, %267
<   br i1 %268, label %269, label %270
< 
< 269:                                              ; preds = %264
<   store double %267, double* %265, align 8, !tbaa !2
<   br label %270
< 
< 270:                                              ; preds = %269, %264
<   %271 = add nsw i64 %259, 1
<   br label %272
< 
< 272:                                              ; preds = %270, %257
<   %273 = phi i64 [ %259, %257 ], [ %271, %270 ]
<   %274 = icmp eq i32 %254, %255
<   br i1 %274, label %288, label %275
< 
< 275:                                              ; preds = %272, %367
<   %276 = phi i64 [ %368, %367 ], [ %273, %272 ]
<   %277 = getelementptr inbounds double, double* %258, i64 %276
<   %278 = load double, double* %277, align 8, !tbaa !2
<   %279 = load double, double* %6, align 8, !tbaa !2
<   %280 = fcmp ogt double %278, %279
<   br i1 %280, label %281, label %282
< 
< 281:                                              ; preds = %275
<   store double %279, double* %277, align 8, !tbaa !2
<   br label %282
< 
< 282:                                              ; preds = %281, %275
<   %283 = add nsw i64 %276, 1
<   %284 = getelementptr inbounds double, double* %258, i64 %283
<   %285 = load double, double* %284, align 8, !tbaa !2
<   %286 = load double, double* %6, align 8, !tbaa !2
<   %287 = fcmp ogt double %285, %286
<   br i1 %287, label %366, label %367
< 
< 288:                                              ; preds = %272, %367, %247
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %191)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %251) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %250) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %249) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %248) #10
<   br label %289
< 
< 289:                                              ; preds = %288, %240
<   %290 = load i32, i32* %2, align 4, !tbaa !12
<   %291 = add nsw i32 %290, -1
<   %292 = icmp sgt i32 %290, 0
<   br i1 %292, label %293, label %360
< 
< 293:                                              ; preds = %289
<   %294 = bitcast i32* %20 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %294) #10
<   store i32 0, i32* %20, align 4, !tbaa !12
<   %295 = bitcast i32* %21 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %295) #10
<   store i32 %291, i32* %21, align 4, !tbaa !12
<   %296 = bitcast i32* %22 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %296) #10
<   store i32 1, i32* %22, align 4, !tbaa !12
<   %297 = bitcast i32* %23 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %297) #10
<   store i32 0, i32* %23, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %191, i32 34, i32* nonnull %23, i32* nonnull %20, i32* nonnull %21, i32* nonnull %22, i32 1, i32 1) #10
<   %298 = load i32, i32* %21, align 4, !tbaa !12
<   %299 = icmp slt i32 %298, %290
<   %300 = select i1 %299, i32 %298, i32 %291
<   store i32 %300, i32* %21, align 4, !tbaa !12
<   %301 = load i32, i32* %20, align 4, !tbaa !12
<   %302 = icmp sgt i32 %301, %300
<   br i1 %302, label %359, label %303
< 
< 303:                                              ; preds = %293
<   %304 = getelementptr inbounds %class.Domain, %class.Domain* %4, i64 0, i32 43, i32 0, i32 0, i32 0
<   %305 = load double*, double** %304, align 8, !tbaa !22
<   %306 = load double, double* %5, align 8, !tbaa !2
<   %307 = fcmp une double %306, 0.000000e+00
<   %308 = load double, double* %6, align 8, !tbaa !2
<   %309 = fcmp une double %308, 0.000000e+00
<   %310 = sext i32 %301 to i64
<   %311 = add i32 %300, 1
<   br i1 %307, label %312, label %337
< 
< 312:                                              ; preds = %303
<   br i1 %309, label %313, label %326
< 
< 313:                                              ; preds = %312, %322
<   %314 = phi i64 [ %323, %322 ], [ %310, %312 ]
<   %315 = getelementptr inbounds double, double* %305, i64 %314
<   %316 = load double, double* %315, align 8, !tbaa !2
<   %317 = fcmp olt double %316, %306
<   %318 = select i1 %317, double %306, double %316
<   %319 = fcmp ogt double %318, %308
<   %320 = select i1 %319, double %308, double %318
<   %321 = fcmp ugt double %320, 0.000000e+00
<   br i1 %321, label %322, label %358
< 
< 322:                                              ; preds = %313
<   %323 = add nsw i64 %314, 1
<   %324 = trunc i64 %323 to i32
<   %325 = icmp eq i32 %311, %324
<   br i1 %325, label %359, label %313
< 
< 326:                                              ; preds = %312, %333
<   %327 = phi i64 [ %334, %333 ], [ %310, %312 ]
<   %328 = getelementptr inbounds double, double* %305, i64 %327
<   %329 = load double, double* %328, align 8, !tbaa !2
<   %330 = fcmp olt double %329, %306
<   %331 = select i1 %330, double %306, double %329
<   %332 = fcmp ugt double %331, 0.000000e+00
<   br i1 %332, label %333, label %358
< 
< 333:                                              ; preds = %326
<   %334 = add nsw i64 %327, 1
<   %335 = trunc i64 %334 to i32
<   %336 = icmp eq i32 %311, %335
<   br i1 %336, label %359, label %326
< 
< 337:                                              ; preds = %303
<   br i1 %309, label %338, label %353
< 
< 338:                                              ; preds = %337, %345
<   %339 = phi i64 [ %346, %345 ], [ %310, %337 ]
<   %340 = getelementptr inbounds double, double* %305, i64 %339
<   %341 = load double, double* %340, align 8, !tbaa !2
<   %342 = fcmp ogt double %341, %308
<   %343 = select i1 %342, double %308, double %341
<   %344 = fcmp ugt double %343, 0.000000e+00
<   br i1 %344, label %345, label %358
< 
< 345:                                              ; preds = %338
<   %346 = add nsw i64 %339, 1
<   %347 = trunc i64 %346 to i32
<   %348 = icmp eq i32 %311, %347
<   br i1 %348, label %359, label %338
< 
< 349:                                              ; preds = %353
<   %350 = add nsw i64 %354, 1
<   %351 = trunc i64 %350 to i32
<   %352 = icmp eq i32 %311, %351
<   br i1 %352, label %359, label %353
< 
< 353:                                              ; preds = %337, %349
<   %354 = phi i64 [ %350, %349 ], [ %310, %337 ]
<   %355 = getelementptr inbounds double, double* %305, i64 %354
<   %356 = load double, double* %355, align 8, !tbaa !2
<   %357 = fcmp ugt double %356, 0.000000e+00
<   br i1 %357, label %349, label %358
< 
< 358:                                              ; preds = %353, %338, %326, %313
<   call void @exit(i32 -1) #29
---
> if.then136:                                       ; preds = %omp.inner.for.body119, %omp.inner.for.body119.us221, %omp.inner.for.body119.us, %omp.inner.for.body119.us.us
>   call void @exit(i32 -1) #23
13794,13805c10849,10855
< 359:                                              ; preds = %349, %345, %333, %322, %293
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %191)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %297) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %296) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %295) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %294) #10
<   br label %360
< 
< 360:                                              ; preds = %243, %359, %289
<   %361 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL31ApplyMaterialPropertiesForElemsR6DomainE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %361)
<           to label %362 unwind label %363
---
> omp.loop.exit142:                                 ; preds = %omp.inner.for.cond116, %omp.inner.for.cond116.us230, %omp.inner.for.cond116.us, %omp.inner.for.cond116.us.us, %omp.precond.then104
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %136)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %364) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %363) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %362) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %361) #7
>   br label %omp.precond.end143
13807c10857
< 362:                                              ; preds = %360
---
> omp.precond.end143:                               ; preds = %if.then52, %omp.loop.exit142, %if.end93
13810,13835c10860,10926
< 363:                                              ; preds = %360, %7
<   %364 = landingpad { i8*, i32 }
<           catch i8* null
<   %365 = extractvalue { i8*, i32 } %364, 0
<   call void @__clang_call_terminate(i8* %365) #29
<   unreachable
< 
< 366:                                              ; preds = %282
<   store double %286, double* %284, align 8, !tbaa !2
<   br label %367
< 
< 367:                                              ; preds = %366, %282
<   %368 = add nsw i64 %276, 2
<   %369 = trunc i64 %368 to i32
<   %370 = icmp eq i32 %260, %369
<   br i1 %370, label %288, label %275
< 
< 371:                                              ; preds = %233
<   store double %237, double* %235, align 8, !tbaa !2
<   br label %372
< 
< 372:                                              ; preds = %371, %233
<   %373 = add nsw i64 %227, 2
<   %374 = trunc i64 %373 to i32
<   %375 = icmp eq i32 %211, %374
<   br i1 %375, label %239, label %226
---
> if.then83.1:                                      ; preds = %omp.inner.for.inc88
>   store double %360, double* %arrayidx81.1, align 8, !tbaa !2
>   br label %omp.inner.for.inc88.1
> 
> omp.inner.for.inc88.1:                            ; preds = %if.then83.1, %omp.inner.for.inc88
>   %indvars.iv.next255.1 = add nsw i64 %indvars.iv254, 2
>   %arrayidx81.2 = getelementptr inbounds double, double* %257, i64 %indvars.iv.next255.1
>   %377 = load double, double* %arrayidx81.2, align 8, !tbaa !2
>   %378 = load double, double* %eosvmax, align 8, !tbaa !2
>   %cmp82.2 = fcmp ogt double %377, %378
>   br i1 %cmp82.2, label %if.then83.2, label %omp.inner.for.inc88.2
> 
> if.then83.2:                                      ; preds = %omp.inner.for.inc88.1
>   store double %378, double* %arrayidx81.2, align 8, !tbaa !2
>   br label %omp.inner.for.inc88.2
> 
> omp.inner.for.inc88.2:                            ; preds = %if.then83.2, %omp.inner.for.inc88.1
>   %indvars.iv.next255.2 = add nsw i64 %indvars.iv254, 3
>   %arrayidx81.3 = getelementptr inbounds double, double* %257, i64 %indvars.iv.next255.2
>   %379 = load double, double* %arrayidx81.3, align 8, !tbaa !2
>   %380 = load double, double* %eosvmax, align 8, !tbaa !2
>   %cmp82.3 = fcmp ogt double %379, %380
>   br i1 %cmp82.3, label %if.then83.3, label %omp.inner.for.inc88.3
> 
> if.then83.3:                                      ; preds = %omp.inner.for.inc88.2
>   store double %380, double* %arrayidx81.3, align 8, !tbaa !2
>   br label %omp.inner.for.inc88.3
> 
> omp.inner.for.inc88.3:                            ; preds = %if.then83.3, %omp.inner.for.inc88.2
>   %indvars.iv.next255.3 = add nsw i64 %indvars.iv254, 4
>   %lftr.wideiv257.3 = trunc i64 %indvars.iv.next255.3 to i32
>   %exitcond258.not.3 = icmp eq i32 %260, %lftr.wideiv257.3
>   br i1 %exitcond258.not.3, label %omp.loop.exit91, label %omp.inner.for.body77, !llvm.loop !111
> 
> if.then41.1:                                      ; preds = %omp.inner.for.inc45
>   store double %248, double* %arrayidx39.1, align 8, !tbaa !2
>   br label %omp.inner.for.inc45.1
> 
> omp.inner.for.inc45.1:                            ; preds = %if.then41.1, %omp.inner.for.inc45
>   %indvars.iv.next260.1 = add nsw i64 %indvars.iv259, 2
>   %arrayidx39.2 = getelementptr inbounds double, double* %145, i64 %indvars.iv.next260.1
>   %381 = load double, double* %arrayidx39.2, align 8, !tbaa !2
>   %382 = load double, double* %eosvmin, align 8, !tbaa !2
>   %cmp40.2 = fcmp olt double %381, %382
>   br i1 %cmp40.2, label %if.then41.2, label %omp.inner.for.inc45.2
> 
> if.then41.2:                                      ; preds = %omp.inner.for.inc45.1
>   store double %382, double* %arrayidx39.2, align 8, !tbaa !2
>   br label %omp.inner.for.inc45.2
> 
> omp.inner.for.inc45.2:                            ; preds = %if.then41.2, %omp.inner.for.inc45.1
>   %indvars.iv.next260.2 = add nsw i64 %indvars.iv259, 3
>   %arrayidx39.3 = getelementptr inbounds double, double* %145, i64 %indvars.iv.next260.2
>   %383 = load double, double* %arrayidx39.3, align 8, !tbaa !2
>   %384 = load double, double* %eosvmin, align 8, !tbaa !2
>   %cmp40.3 = fcmp olt double %383, %384
>   br i1 %cmp40.3, label %if.then41.3, label %omp.inner.for.inc45.3
> 
> if.then41.3:                                      ; preds = %omp.inner.for.inc45.2
>   store double %384, double* %arrayidx39.3, align 8, !tbaa !2
>   br label %omp.inner.for.inc45.3
> 
> omp.inner.for.inc45.3:                            ; preds = %if.then41.3, %omp.inner.for.inc45.2
>   %indvars.iv.next260.3 = add nsw i64 %indvars.iv259, 4
>   %lftr.wideiv262.3 = trunc i64 %indvars.iv.next260.3 to i32
>   %exitcond263.not.3 = icmp eq i32 %148, %lftr.wideiv262.3
>   br i1 %exitcond263.not.3, label %omp.loop.exit48, label %omp.inner.for.body35, !llvm.loop !112
13839,14299c10930,11557
< define internal void @.omp_outlined..51(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, i32* nocapture nonnull readonly align 4 dereferenceable(4) %2, i32** nocapture nonnull readonly align 8 dereferenceable(8) %3, double** nocapture nonnull readonly align 8 dereferenceable(8) %4, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %5, double** nocapture nonnull readonly align 8 dereferenceable(8) %6, double** nocapture nonnull readonly align 8 dereferenceable(8) %7, double** nocapture nonnull readonly align 8 dereferenceable(8) %8, double** nocapture nonnull readonly align 8 dereferenceable(8) %9, double** nocapture nonnull readonly align 8 dereferenceable(8) %10, double** nocapture nonnull readonly align 8 dereferenceable(8) %11, double** nocapture nonnull readonly align 8 dereferenceable(8) %12, double** nocapture nonnull readonly align 8 dereferenceable(8) %13, double* nocapture nonnull readonly align 8 dereferenceable(8) %14, double* nocapture nonnull readonly align 8 dereferenceable(8) %15, double** nocapture nonnull readonly align 8 dereferenceable(8) %16) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %18 = alloca i32, align 4
<   %19 = alloca i32, align 4
<   %20 = alloca i32, align 4
<   %21 = alloca i32, align 4
<   %22 = alloca i32, align 4
<   %23 = alloca i32, align 4
<   %24 = alloca i32, align 4
<   %25 = alloca i32, align 4
<   %26 = alloca i32, align 4
<   %27 = alloca i32, align 4
<   %28 = alloca i32, align 4
<   %29 = alloca i32, align 4
<   %30 = alloca i32, align 4
<   %31 = alloca i32, align 4
<   %32 = alloca i32, align 4
<   %33 = alloca i32, align 4
<   %34 = alloca i32, align 4
<   %35 = alloca i32, align 4
<   %36 = alloca i32, align 4
<   %37 = alloca i32, align 4
<   %38 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL15EvalEOSForElemsR6DomainPdiPiiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %38)
<           to label %39 unwind label %305
< 
< 39:                                               ; preds = %17
<   %40 = load i32, i32* %2, align 4, !tbaa !12
<   %41 = add nsw i32 %40, -1
<   %42 = icmp sgt i32 %40, 0
<   br i1 %42, label %45, label %43
< 
< 43:                                               ; preds = %39
<   %44 = load i32, i32* %0, align 4, !tbaa !12
<   br label %148
< 
< 45:                                               ; preds = %39
<   %46 = bitcast i32* %18 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %46) #10
<   store i32 0, i32* %18, align 4, !tbaa !12
<   %47 = bitcast i32* %19 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %47) #10
<   store i32 %41, i32* %19, align 4, !tbaa !12
<   %48 = bitcast i32* %20 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %48) #10
<   store i32 1, i32* %20, align 4, !tbaa !12
<   %49 = bitcast i32* %21 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %49) #10
<   store i32 0, i32* %21, align 4, !tbaa !12
<   %50 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %50, i32 34, i32* nonnull %21, i32* nonnull %18, i32* nonnull %19, i32* nonnull %20, i32 1, i32 1) #10
<   %51 = load i32, i32* %19, align 4, !tbaa !12
<   %52 = icmp slt i32 %51, %40
<   %53 = select i1 %52, i32 %51, i32 %41
<   store i32 %53, i32* %19, align 4, !tbaa !12
<   %54 = load i32, i32* %18, align 4, !tbaa !12
<   %55 = icmp sgt i32 %54, %53
<   br i1 %55, label %104, label %56
< 
< 56:                                               ; preds = %45
<   %57 = load i32*, i32** %3, align 8, !tbaa !6
<   %58 = getelementptr inbounds %class.Domain, %class.Domain* %5, i64 0, i32 38, i32 0, i32 0, i32 0
<   %59 = load double*, double** %58, align 8, !tbaa !22
<   %60 = load double*, double** %4, align 8, !tbaa !6
<   %61 = getelementptr inbounds %class.Domain, %class.Domain* %5, i64 0, i32 46, i32 0, i32 0, i32 0
<   %62 = load double*, double** %61, align 8, !tbaa !22
<   %63 = load double*, double** %6, align 8, !tbaa !6
<   %64 = getelementptr inbounds %class.Domain, %class.Domain* %5, i64 0, i32 39, i32 0, i32 0, i32 0
<   %65 = load double*, double** %64, align 8, !tbaa !22
<   %66 = load double*, double** %7, align 8, !tbaa !6
<   %67 = getelementptr inbounds %class.Domain, %class.Domain* %5, i64 0, i32 40, i32 0, i32 0, i32 0
<   %68 = load double*, double** %67, align 8, !tbaa !22
<   %69 = load double*, double** %8, align 8, !tbaa !6
<   %70 = getelementptr inbounds %class.Domain, %class.Domain* %5, i64 0, i32 42, i32 0, i32 0, i32 0
<   %71 = load double*, double** %70, align 8, !tbaa !22
<   %72 = load double*, double** %9, align 8, !tbaa !6
<   %73 = getelementptr inbounds %class.Domain, %class.Domain* %5, i64 0, i32 41, i32 0, i32 0, i32 0
<   %74 = load double*, double** %73, align 8, !tbaa !22
<   %75 = load double*, double** %10, align 8, !tbaa !6
<   %76 = sext i32 %54 to i64
<   %77 = add i32 %53, 1
<   br label %78
< 
< 78:                                               ; preds = %56, %78
<   %79 = phi i64 [ %76, %56 ], [ %101, %78 ]
<   %80 = getelementptr inbounds i32, i32* %57, i64 %79
<   %81 = load i32, i32* %80, align 4, !tbaa !12
<   %82 = sext i32 %81 to i64
<   %83 = getelementptr inbounds double, double* %59, i64 %82
<   %84 = load double, double* %83, align 8, !tbaa !2
<   %85 = getelementptr inbounds double, double* %60, i64 %79
<   store double %84, double* %85, align 8, !tbaa !2
<   %86 = getelementptr inbounds double, double* %62, i64 %82
<   %87 = load double, double* %86, align 8, !tbaa !2
<   %88 = getelementptr inbounds double, double* %63, i64 %79
<   store double %87, double* %88, align 8, !tbaa !2
<   %89 = getelementptr inbounds double, double* %65, i64 %82
<   %90 = load double, double* %89, align 8, !tbaa !2
<   %91 = getelementptr inbounds double, double* %66, i64 %79
<   store double %90, double* %91, align 8, !tbaa !2
<   %92 = getelementptr inbounds double, double* %68, i64 %82
<   %93 = load double, double* %92, align 8, !tbaa !2
<   %94 = getelementptr inbounds double, double* %69, i64 %79
<   store double %93, double* %94, align 8, !tbaa !2
<   %95 = getelementptr inbounds double, double* %71, i64 %82
<   %96 = load double, double* %95, align 8, !tbaa !2
<   %97 = getelementptr inbounds double, double* %72, i64 %79
<   store double %96, double* %97, align 8, !tbaa !2
<   %98 = getelementptr inbounds double, double* %74, i64 %82
<   %99 = load double, double* %98, align 8, !tbaa !2
<   %100 = getelementptr inbounds double, double* %75, i64 %79
<   store double %99, double* %100, align 8, !tbaa !2
<   %101 = add nsw i64 %79, 1
<   %102 = trunc i64 %101 to i32
<   %103 = icmp eq i32 %77, %102
<   br i1 %103, label %104, label %78
< 
< 104:                                              ; preds = %78, %45
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %50)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %49) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %48) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %47) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %46) #10
<   %105 = load i32, i32* %2, align 4, !tbaa !12
<   %106 = add nsw i32 %105, -1
<   %107 = icmp sgt i32 %105, 0
<   br i1 %107, label %108, label %148
< 
< 108:                                              ; preds = %104
<   %109 = bitcast i32* %22 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %109) #10
<   store i32 0, i32* %22, align 4, !tbaa !12
<   %110 = bitcast i32* %23 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %110) #10
<   store i32 %106, i32* %23, align 4, !tbaa !12
<   %111 = bitcast i32* %24 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %111) #10
<   store i32 1, i32* %24, align 4, !tbaa !12
<   %112 = bitcast i32* %25 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %112) #10
<   store i32 0, i32* %25, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %50, i32 34, i32* nonnull %25, i32* nonnull %22, i32* nonnull %23, i32* nonnull %24, i32 1, i32 1) #10
<   %113 = load i32, i32* %23, align 4, !tbaa !12
<   %114 = icmp slt i32 %113, %105
<   %115 = select i1 %114, i32 %113, i32 %106
<   store i32 %115, i32* %23, align 4, !tbaa !12
<   %116 = load i32, i32* %22, align 4, !tbaa !12
<   %117 = icmp sgt i32 %116, %115
<   br i1 %117, label %147, label %118
< 
< 118:                                              ; preds = %108
<   %119 = load i32*, i32** %3, align 8, !tbaa !6
<   %120 = load double*, double** %12, align 8, !tbaa !6
<   %121 = load double*, double** %11, align 8, !tbaa !6
<   %122 = load double*, double** %6, align 8, !tbaa !6
<   %123 = load double*, double** %13, align 8, !tbaa !6
<   %124 = sext i32 %116 to i64
<   %125 = add i32 %115, 1
<   br label %126
< 
< 126:                                              ; preds = %118, %126
<   %127 = phi i64 [ %124, %118 ], [ %144, %126 ]
<   %128 = getelementptr inbounds i32, i32* %119, i64 %127
<   %129 = load i32, i32* %128, align 4, !tbaa !12
<   %130 = sext i32 %129 to i64
<   %131 = getelementptr inbounds double, double* %120, i64 %130
<   %132 = load double, double* %131, align 8, !tbaa !2
<   %133 = fdiv double 1.000000e+00, %132
<   %134 = fadd double %133, -1.000000e+00
<   %135 = getelementptr inbounds double, double* %121, i64 %127
<   store double %134, double* %135, align 8, !tbaa !2
<   %136 = load double, double* %131, align 8, !tbaa !2
<   %137 = getelementptr inbounds double, double* %122, i64 %127
<   %138 = load double, double* %137, align 8, !tbaa !2
<   %139 = fmul double %138, 5.000000e-01
<   %140 = fsub double %136, %139
<   %141 = fdiv double 1.000000e+00, %140
<   %142 = fadd double %141, -1.000000e+00
<   %143 = getelementptr inbounds double, double* %123, i64 %127
<   store double %142, double* %143, align 8, !tbaa !2
<   %144 = add nsw i64 %127, 1
<   %145 = trunc i64 %144 to i32
<   %146 = icmp eq i32 %125, %145
<   br i1 %146, label %147, label %126
< 
< 147:                                              ; preds = %126, %108
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %50)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %112) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %111) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %110) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %109) #10
<   br label %148
< 
< 148:                                              ; preds = %43, %147, %104
<   %149 = phi i32 [ %44, %43 ], [ %50, %147 ], [ %50, %104 ]
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %149)
<   %150 = load double, double* %14, align 8, !tbaa !2
<   %151 = fcmp une double %150, 0.000000e+00
<   br i1 %151, label %152, label %213
< 
< 152:                                              ; preds = %148
<   %153 = load i32, i32* %2, align 4, !tbaa !12
<   %154 = add nsw i32 %153, -1
<   %155 = icmp sgt i32 %153, 0
<   br i1 %155, label %156, label %213
< 
< 156:                                              ; preds = %152
<   %157 = bitcast i32* %26 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %157) #10
<   store i32 0, i32* %26, align 4, !tbaa !12
<   %158 = bitcast i32* %27 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %158) #10
<   store i32 %154, i32* %27, align 4, !tbaa !12
<   %159 = bitcast i32* %28 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %159) #10
<   store i32 1, i32* %28, align 4, !tbaa !12
<   %160 = bitcast i32* %29 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %160) #10
<   store i32 0, i32* %29, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %149, i32 34, i32* nonnull %29, i32* nonnull %26, i32* nonnull %27, i32* nonnull %28, i32 1, i32 1) #10
<   %161 = load i32, i32* %27, align 4, !tbaa !12
<   %162 = icmp slt i32 %161, %153
<   %163 = select i1 %162, i32 %161, i32 %154
<   store i32 %163, i32* %27, align 4, !tbaa !12
<   %164 = load i32, i32* %26, align 4, !tbaa !12
<   %165 = icmp slt i32 %163, %164
<   br i1 %165, label %212, label %166
< 
< 166:                                              ; preds = %156
<   %167 = load i32*, i32** %3, align 8, !tbaa !6
<   %168 = load double*, double** %12, align 8, !tbaa !6
<   %169 = load double*, double** %11, align 8
<   %170 = load double*, double** %13, align 8
<   %171 = sext i32 %164 to i64
<   %172 = add i32 %163, 1
<   %173 = sub i32 %172, %164
<   %174 = and i32 %173, 1
<   %175 = icmp eq i32 %174, 0
<   br i1 %175, label %189, label %176
< 
< 176:                                              ; preds = %166
<   %177 = getelementptr inbounds i32, i32* %167, i64 %171
<   %178 = load i32, i32* %177, align 4, !tbaa !12
<   %179 = sext i32 %178 to i64
<   %180 = getelementptr inbounds double, double* %168, i64 %179
<   %181 = load double, double* %180, align 8, !tbaa !2
<   %182 = fcmp ugt double %181, %150
<   br i1 %182, label %187, label %183
< 
< 183:                                              ; preds = %176
<   %184 = getelementptr inbounds double, double* %169, i64 %171
<   %185 = load double, double* %184, align 8, !tbaa !2
<   %186 = getelementptr inbounds double, double* %170, i64 %171
<   store double %185, double* %186, align 8, !tbaa !2
<   br label %187
< 
< 187:                                              ; preds = %183, %176
<   %188 = add nsw i64 %171, 1
<   br label %189
< 
< 189:                                              ; preds = %187, %166
<   %190 = phi i64 [ %171, %166 ], [ %188, %187 ]
<   %191 = icmp eq i32 %163, %164
<   br i1 %191, label %212, label %192
< 
< 192:                                              ; preds = %189, %320
<   %193 = phi i64 [ %321, %320 ], [ %190, %189 ]
<   %194 = getelementptr inbounds i32, i32* %167, i64 %193
<   %195 = load i32, i32* %194, align 4, !tbaa !12
<   %196 = sext i32 %195 to i64
<   %197 = getelementptr inbounds double, double* %168, i64 %196
<   %198 = load double, double* %197, align 8, !tbaa !2
<   %199 = fcmp ugt double %198, %150
<   br i1 %199, label %204, label %200
< 
< 200:                                              ; preds = %192
<   %201 = getelementptr inbounds double, double* %169, i64 %193
<   %202 = load double, double* %201, align 8, !tbaa !2
<   %203 = getelementptr inbounds double, double* %170, i64 %193
<   store double %202, double* %203, align 8, !tbaa !2
<   br label %204
< 
< 204:                                              ; preds = %200, %192
<   %205 = add nsw i64 %193, 1
<   %206 = getelementptr inbounds i32, i32* %167, i64 %205
<   %207 = load i32, i32* %206, align 4, !tbaa !12
<   %208 = sext i32 %207 to i64
<   %209 = getelementptr inbounds double, double* %168, i64 %208
<   %210 = load double, double* %209, align 8, !tbaa !2
<   %211 = fcmp ugt double %210, %150
<   br i1 %211, label %320, label %316
< 
< 212:                                              ; preds = %189, %320, %156
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %149)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %160) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %159) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %158) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %157) #10
<   br label %213
< 
< 213:                                              ; preds = %152, %212, %148
<   %214 = load double, double* %15, align 8, !tbaa !2
<   %215 = fcmp une double %214, 0.000000e+00
<   br i1 %215, label %216, label %278
< 
< 216:                                              ; preds = %213
<   %217 = load i32, i32* %2, align 4, !tbaa !12
<   %218 = add nsw i32 %217, -1
<   %219 = icmp sgt i32 %217, 0
<   br i1 %219, label %220, label %302
< 
< 220:                                              ; preds = %216
<   %221 = bitcast i32* %30 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %221) #10
<   store i32 0, i32* %30, align 4, !tbaa !12
<   %222 = bitcast i32* %31 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %222) #10
<   store i32 %218, i32* %31, align 4, !tbaa !12
<   %223 = bitcast i32* %32 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %223) #10
<   store i32 1, i32* %32, align 4, !tbaa !12
<   %224 = bitcast i32* %33 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %224) #10
<   store i32 0, i32* %33, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %149, i32 34, i32* nonnull %33, i32* nonnull %30, i32* nonnull %31, i32* nonnull %32, i32 1, i32 1) #10
<   %225 = load i32, i32* %31, align 4, !tbaa !12
<   %226 = icmp slt i32 %225, %217
<   %227 = select i1 %226, i32 %225, i32 %218
<   store i32 %227, i32* %31, align 4, !tbaa !12
<   %228 = load i32, i32* %30, align 4, !tbaa !12
<   %229 = icmp slt i32 %227, %228
<   br i1 %229, label %277, label %230
< 
< 230:                                              ; preds = %220
<   %231 = load i32*, i32** %3, align 8, !tbaa !6
<   %232 = load double*, double** %12, align 8, !tbaa !6
<   %233 = load double*, double** %7, align 8
<   %234 = load double*, double** %11, align 8
<   %235 = load double*, double** %13, align 8
<   %236 = sext i32 %228 to i64
<   %237 = add i32 %227, 1
<   %238 = sub i32 %237, %228
<   %239 = and i32 %238, 1
<   %240 = icmp eq i32 %239, 0
<   br i1 %240, label %254, label %241
< 
< 241:                                              ; preds = %230
<   %242 = getelementptr inbounds i32, i32* %231, i64 %236
<   %243 = load i32, i32* %242, align 4, !tbaa !12
<   %244 = sext i32 %243 to i64
<   %245 = getelementptr inbounds double, double* %232, i64 %244
<   %246 = load double, double* %245, align 8, !tbaa !2
<   %247 = fcmp ult double %246, %214
<   br i1 %247, label %252, label %248
< 
< 248:                                              ; preds = %241
<   %249 = getelementptr inbounds double, double* %233, i64 %236
<   store double 0.000000e+00, double* %249, align 8, !tbaa !2
<   %250 = getelementptr inbounds double, double* %234, i64 %236
<   store double 0.000000e+00, double* %250, align 8, !tbaa !2
<   %251 = getelementptr inbounds double, double* %235, i64 %236
<   store double 0.000000e+00, double* %251, align 8, !tbaa !2
<   br label %252
< 
< 252:                                              ; preds = %248, %241
<   %253 = add nsw i64 %236, 1
<   br label %254
< 
< 254:                                              ; preds = %252, %230
<   %255 = phi i64 [ %236, %230 ], [ %253, %252 ]
<   %256 = icmp eq i32 %227, %228
<   br i1 %256, label %277, label %257
< 
< 257:                                              ; preds = %254, %312
<   %258 = phi i64 [ %313, %312 ], [ %255, %254 ]
<   %259 = getelementptr inbounds i32, i32* %231, i64 %258
<   %260 = load i32, i32* %259, align 4, !tbaa !12
<   %261 = sext i32 %260 to i64
<   %262 = getelementptr inbounds double, double* %232, i64 %261
<   %263 = load double, double* %262, align 8, !tbaa !2
<   %264 = fcmp ult double %263, %214
<   br i1 %264, label %269, label %265
< 
< 265:                                              ; preds = %257
<   %266 = getelementptr inbounds double, double* %233, i64 %258
<   store double 0.000000e+00, double* %266, align 8, !tbaa !2
<   %267 = getelementptr inbounds double, double* %234, i64 %258
<   store double 0.000000e+00, double* %267, align 8, !tbaa !2
<   %268 = getelementptr inbounds double, double* %235, i64 %258
<   store double 0.000000e+00, double* %268, align 8, !tbaa !2
<   br label %269
< 
< 269:                                              ; preds = %265, %257
<   %270 = add nsw i64 %258, 1
<   %271 = getelementptr inbounds i32, i32* %231, i64 %270
<   %272 = load i32, i32* %271, align 4, !tbaa !12
<   %273 = sext i32 %272 to i64
<   %274 = getelementptr inbounds double, double* %232, i64 %273
<   %275 = load double, double* %274, align 8, !tbaa !2
<   %276 = fcmp ult double %275, %214
<   br i1 %276, label %312, label %308
< 
< 277:                                              ; preds = %254, %312, %220
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %149)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %224) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %223) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %222) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %221) #10
<   br label %278
< 
< 278:                                              ; preds = %277, %213
<   %279 = load i32, i32* %2, align 4, !tbaa !12
<   %280 = add nsw i32 %279, -1
<   %281 = icmp sgt i32 %279, 0
<   br i1 %281, label %282, label %302
< 
< 282:                                              ; preds = %278
<   %283 = bitcast i32* %34 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %283) #10
<   store i32 0, i32* %34, align 4, !tbaa !12
<   %284 = bitcast i32* %35 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %284) #10
<   store i32 %280, i32* %35, align 4, !tbaa !12
<   %285 = bitcast i32* %36 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %285) #10
<   store i32 1, i32* %36, align 4, !tbaa !12
<   %286 = bitcast i32* %37 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %286) #10
<   store i32 0, i32* %37, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %149, i32 34, i32* nonnull %37, i32* nonnull %34, i32* nonnull %35, i32* nonnull %36, i32 1, i32 1) #10
<   %287 = load i32, i32* %35, align 4, !tbaa !12
<   %288 = icmp slt i32 %287, %279
<   %289 = select i1 %288, i32 %287, i32 %280
<   store i32 %289, i32* %35, align 4, !tbaa !12
<   %290 = load i32, i32* %34, align 4, !tbaa !12
<   %291 = icmp slt i32 %289, %290
<   br i1 %291, label %301, label %292
< 
< 292:                                              ; preds = %282
<   %293 = load double*, double** %16, align 8, !tbaa !6
<   %294 = sext i32 %290 to i64
<   %295 = getelementptr double, double* %293, i64 %294
<   %296 = bitcast double* %295 to i8*
<   %297 = sub i32 %289, %290
<   %298 = zext i32 %297 to i64
<   %299 = shl nuw nsw i64 %298, 3
<   %300 = add nuw nsw i64 %299, 8
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(1) %296, i8 0, i64 %300, i1 false)
<   br label %301
< 
< 301:                                              ; preds = %292, %282
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %149)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %286) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %285) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %284) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %283) #10
<   br label %302
< 
< 302:                                              ; preds = %216, %301, %278
<   %303 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL15EvalEOSForElemsR6DomainPdiPiiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %303)
<           to label %304 unwind label %305
---
> define internal void @.omp_outlined..35(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture nonnull readonly align 4 dereferenceable(4) %numElemReg, i32** nocapture nonnull readonly align 8 dereferenceable(8) %regElemList, double** nocapture nonnull readonly align 8 dereferenceable(8) %e_old, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %domain, double** nocapture nonnull readonly align 8 dereferenceable(8) %delvc, double** nocapture nonnull readonly align 8 dereferenceable(8) %p_old, double** nocapture nonnull readonly align 8 dereferenceable(8) %q_old, double** nocapture nonnull readonly align 8 dereferenceable(8) %qq_old, double** nocapture nonnull readonly align 8 dereferenceable(8) %ql_old, double** nocapture nonnull readonly align 8 dereferenceable(8) %compression, double** nocapture nonnull readonly align 8 dereferenceable(8) %vnewc, double** nocapture nonnull readonly align 8 dereferenceable(8) %compHalfStep, double* nocapture nonnull readonly align 8 dereferenceable(8) %eosvmin, double* nocapture nonnull readonly align 8 dereferenceable(8) %eosvmax, double** nocapture nonnull readonly align 8 dereferenceable(8) %work) #6 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
> entry:
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %.omp.lb37 = alloca i32, align 4
>   %.omp.ub38 = alloca i32, align 4
>   %.omp.stride39 = alloca i32, align 4
>   %.omp.is_last40 = alloca i32, align 4
>   %.omp.lb90 = alloca i32, align 4
>   %.omp.ub91 = alloca i32, align 4
>   %.omp.stride92 = alloca i32, align 4
>   %.omp.is_last93 = alloca i32, align 4
>   %.omp.lb138 = alloca i32, align 4
>   %.omp.ub139 = alloca i32, align 4
>   %.omp.stride140 = alloca i32, align 4
>   %.omp.is_last141 = alloca i32, align 4
>   %.omp.lb187 = alloca i32, align 4
>   %.omp.ub188 = alloca i32, align 4
>   %.omp.stride189 = alloca i32, align 4
>   %.omp.is_last190 = alloca i32, align 4
>   %0 = load i32, i32* %numElemReg, align 4, !tbaa !6
>   %sub4 = add nsw i32 %0, -1
>   %cmp = icmp sgt i32 %0, 0
>   br i1 %cmp, label %omp.precond.then, label %entry.omp.precond.end78_crit_edge
> 
> entry.omp.precond.end78_crit_edge:                ; preds = %entry
>   %.pre = load i32, i32* %.global_tid., align 4, !tbaa !6
>   br label %omp.precond.end78
> 
> omp.precond.then:                                 ; preds = %entry
>   %1 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %2 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #7
>   store i32 %sub4, i32* %.omp.ub, align 4, !tbaa !6
>   %3 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %4 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   %5 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %5, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %6 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp7.not = icmp slt i32 %6, %0
>   %cond = select i1 %cmp7.not, i32 %6, i32 %sub4
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %7 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp8.not337 = icmp sgt i32 %7, %cond
>   br i1 %cmp8.not337, label %omp.precond.end, label %omp.inner.for.body.lr.ph
> 
> omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
>   %8 = load i32*, i32** %regElemList, align 8, !tbaa !41
>   %_M_start.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 38, i32 0, i32 0, i32 0, i32 0
>   %9 = load double*, double** %_M_start.i.i, align 8, !tbaa !11
>   %10 = load double*, double** %e_old, align 8, !tbaa !41
>   %_M_start.i.i322 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 46, i32 0, i32 0, i32 0, i32 0
>   %11 = load double*, double** %_M_start.i.i322, align 8, !tbaa !11
>   %12 = load double*, double** %delvc, align 8, !tbaa !41
>   %_M_start.i.i319 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 39, i32 0, i32 0, i32 0, i32 0
>   %13 = load double*, double** %_M_start.i.i319, align 8, !tbaa !11
>   %14 = load double*, double** %p_old, align 8, !tbaa !41
>   %_M_start.i.i316 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 40, i32 0, i32 0, i32 0, i32 0
>   %15 = load double*, double** %_M_start.i.i316, align 8, !tbaa !11
>   %16 = load double*, double** %q_old, align 8, !tbaa !41
>   %_M_start.i.i313 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 42, i32 0, i32 0, i32 0, i32 0
>   %17 = load double*, double** %_M_start.i.i313, align 8, !tbaa !11
>   %18 = load double*, double** %qq_old, align 8, !tbaa !41
>   %_M_start.i.i310 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 41, i32 0, i32 0, i32 0, i32 0
>   %19 = load double*, double** %_M_start.i.i310, align 8, !tbaa !11
>   %20 = load double*, double** %ql_old, align 8, !tbaa !41
>   %21 = sext i32 %7 to i64
>   %22 = icmp sgt i32 %cond, %7
>   %smax354 = select i1 %22, i32 %cond, i32 %7
>   %23 = add i32 %smax354, 1
>   %24 = sub i32 %23, %7
>   %xtraiter362 = and i32 %24, 1
>   %lcmp.mod363.not = icmp eq i32 %xtraiter362, 0
>   br i1 %lcmp.mod363.not, label %omp.inner.for.body.prol.loopexit, label %omp.inner.for.body.prol
> 
> omp.inner.for.body.prol:                          ; preds = %omp.inner.for.body.lr.ph
>   %arrayidx.prol = getelementptr inbounds i32, i32* %8, i64 %21
>   %25 = load i32, i32* %arrayidx.prol, align 4, !tbaa !6
>   %conv.i.prol = sext i32 %25 to i64
>   %add.ptr.i.i.prol = getelementptr inbounds double, double* %9, i64 %conv.i.prol
>   %26 = bitcast double* %add.ptr.i.i.prol to i64*
>   %27 = load i64, i64* %26, align 8, !tbaa !2
>   %arrayidx10.prol = getelementptr inbounds double, double* %10, i64 %21
>   %28 = bitcast double* %arrayidx10.prol to i64*
>   store i64 %27, i64* %28, align 8, !tbaa !2
>   %add.ptr.i.i323.prol = getelementptr inbounds double, double* %11, i64 %conv.i.prol
>   %29 = bitcast double* %add.ptr.i.i323.prol to i64*
>   %30 = load i64, i64* %29, align 8, !tbaa !2
>   %arrayidx13.prol = getelementptr inbounds double, double* %12, i64 %21
>   %31 = bitcast double* %arrayidx13.prol to i64*
>   store i64 %30, i64* %31, align 8, !tbaa !2
>   %add.ptr.i.i320.prol = getelementptr inbounds double, double* %13, i64 %conv.i.prol
>   %32 = bitcast double* %add.ptr.i.i320.prol to i64*
>   %33 = load i64, i64* %32, align 8, !tbaa !2
>   %arrayidx16.prol = getelementptr inbounds double, double* %14, i64 %21
>   %34 = bitcast double* %arrayidx16.prol to i64*
>   store i64 %33, i64* %34, align 8, !tbaa !2
>   %add.ptr.i.i317.prol = getelementptr inbounds double, double* %15, i64 %conv.i.prol
>   %35 = bitcast double* %add.ptr.i.i317.prol to i64*
>   %36 = load i64, i64* %35, align 8, !tbaa !2
>   %arrayidx19.prol = getelementptr inbounds double, double* %16, i64 %21
>   %37 = bitcast double* %arrayidx19.prol to i64*
>   store i64 %36, i64* %37, align 8, !tbaa !2
>   %add.ptr.i.i314.prol = getelementptr inbounds double, double* %17, i64 %conv.i.prol
>   %38 = bitcast double* %add.ptr.i.i314.prol to i64*
>   %39 = load i64, i64* %38, align 8, !tbaa !2
>   %arrayidx22.prol = getelementptr inbounds double, double* %18, i64 %21
>   %40 = bitcast double* %arrayidx22.prol to i64*
>   store i64 %39, i64* %40, align 8, !tbaa !2
>   %add.ptr.i.i311.prol = getelementptr inbounds double, double* %19, i64 %conv.i.prol
>   %41 = bitcast double* %add.ptr.i.i311.prol to i64*
>   %42 = load i64, i64* %41, align 8, !tbaa !2
>   %arrayidx25.prol = getelementptr inbounds double, double* %20, i64 %21
>   %43 = bitcast double* %arrayidx25.prol to i64*
>   store i64 %42, i64* %43, align 8, !tbaa !2
>   %indvars.iv.next353.prol = add nsw i64 %21, 1
>   br label %omp.inner.for.body.prol.loopexit
> 
> omp.inner.for.body.prol.loopexit:                 ; preds = %omp.inner.for.body.lr.ph, %omp.inner.for.body.prol
>   %indvars.iv352.unr = phi i64 [ %21, %omp.inner.for.body.lr.ph ], [ %indvars.iv.next353.prol, %omp.inner.for.body.prol ]
>   %.not = icmp slt i32 %7, %cond
>   br i1 %.not, label %omp.inner.for.body, label %omp.precond.end
> 
> omp.inner.for.body:                               ; preds = %omp.inner.for.body.prol.loopexit, %omp.inner.for.body
>   %indvars.iv352 = phi i64 [ %indvars.iv.next353.1, %omp.inner.for.body ], [ %indvars.iv352.unr, %omp.inner.for.body.prol.loopexit ]
>   %arrayidx = getelementptr inbounds i32, i32* %8, i64 %indvars.iv352
>   %44 = load i32, i32* %arrayidx, align 4, !tbaa !6
>   %conv.i = sext i32 %44 to i64
>   %add.ptr.i.i = getelementptr inbounds double, double* %9, i64 %conv.i
>   %45 = bitcast double* %add.ptr.i.i to i64*
>   %46 = load i64, i64* %45, align 8, !tbaa !2
>   %arrayidx10 = getelementptr inbounds double, double* %10, i64 %indvars.iv352
>   %47 = bitcast double* %arrayidx10 to i64*
>   store i64 %46, i64* %47, align 8, !tbaa !2
>   %add.ptr.i.i323 = getelementptr inbounds double, double* %11, i64 %conv.i
>   %48 = bitcast double* %add.ptr.i.i323 to i64*
>   %49 = load i64, i64* %48, align 8, !tbaa !2
>   %arrayidx13 = getelementptr inbounds double, double* %12, i64 %indvars.iv352
>   %50 = bitcast double* %arrayidx13 to i64*
>   store i64 %49, i64* %50, align 8, !tbaa !2
>   %add.ptr.i.i320 = getelementptr inbounds double, double* %13, i64 %conv.i
>   %51 = bitcast double* %add.ptr.i.i320 to i64*
>   %52 = load i64, i64* %51, align 8, !tbaa !2
>   %arrayidx16 = getelementptr inbounds double, double* %14, i64 %indvars.iv352
>   %53 = bitcast double* %arrayidx16 to i64*
>   store i64 %52, i64* %53, align 8, !tbaa !2
>   %add.ptr.i.i317 = getelementptr inbounds double, double* %15, i64 %conv.i
>   %54 = bitcast double* %add.ptr.i.i317 to i64*
>   %55 = load i64, i64* %54, align 8, !tbaa !2
>   %arrayidx19 = getelementptr inbounds double, double* %16, i64 %indvars.iv352
>   %56 = bitcast double* %arrayidx19 to i64*
>   store i64 %55, i64* %56, align 8, !tbaa !2
>   %add.ptr.i.i314 = getelementptr inbounds double, double* %17, i64 %conv.i
>   %57 = bitcast double* %add.ptr.i.i314 to i64*
>   %58 = load i64, i64* %57, align 8, !tbaa !2
>   %arrayidx22 = getelementptr inbounds double, double* %18, i64 %indvars.iv352
>   %59 = bitcast double* %arrayidx22 to i64*
>   store i64 %58, i64* %59, align 8, !tbaa !2
>   %add.ptr.i.i311 = getelementptr inbounds double, double* %19, i64 %conv.i
>   %60 = bitcast double* %add.ptr.i.i311 to i64*
>   %61 = load i64, i64* %60, align 8, !tbaa !2
>   %arrayidx25 = getelementptr inbounds double, double* %20, i64 %indvars.iv352
>   %62 = bitcast double* %arrayidx25 to i64*
>   store i64 %61, i64* %62, align 8, !tbaa !2
>   %indvars.iv.next353 = add nsw i64 %indvars.iv352, 1
>   %arrayidx.1 = getelementptr inbounds i32, i32* %8, i64 %indvars.iv.next353
>   %63 = load i32, i32* %arrayidx.1, align 4, !tbaa !6
>   %conv.i.1 = sext i32 %63 to i64
>   %add.ptr.i.i.1 = getelementptr inbounds double, double* %9, i64 %conv.i.1
>   %64 = bitcast double* %add.ptr.i.i.1 to i64*
>   %65 = load i64, i64* %64, align 8, !tbaa !2
>   %arrayidx10.1 = getelementptr inbounds double, double* %10, i64 %indvars.iv.next353
>   %66 = bitcast double* %arrayidx10.1 to i64*
>   store i64 %65, i64* %66, align 8, !tbaa !2
>   %add.ptr.i.i323.1 = getelementptr inbounds double, double* %11, i64 %conv.i.1
>   %67 = bitcast double* %add.ptr.i.i323.1 to i64*
>   %68 = load i64, i64* %67, align 8, !tbaa !2
>   %arrayidx13.1 = getelementptr inbounds double, double* %12, i64 %indvars.iv.next353
>   %69 = bitcast double* %arrayidx13.1 to i64*
>   store i64 %68, i64* %69, align 8, !tbaa !2
>   %add.ptr.i.i320.1 = getelementptr inbounds double, double* %13, i64 %conv.i.1
>   %70 = bitcast double* %add.ptr.i.i320.1 to i64*
>   %71 = load i64, i64* %70, align 8, !tbaa !2
>   %arrayidx16.1 = getelementptr inbounds double, double* %14, i64 %indvars.iv.next353
>   %72 = bitcast double* %arrayidx16.1 to i64*
>   store i64 %71, i64* %72, align 8, !tbaa !2
>   %add.ptr.i.i317.1 = getelementptr inbounds double, double* %15, i64 %conv.i.1
>   %73 = bitcast double* %add.ptr.i.i317.1 to i64*
>   %74 = load i64, i64* %73, align 8, !tbaa !2
>   %arrayidx19.1 = getelementptr inbounds double, double* %16, i64 %indvars.iv.next353
>   %75 = bitcast double* %arrayidx19.1 to i64*
>   store i64 %74, i64* %75, align 8, !tbaa !2
>   %add.ptr.i.i314.1 = getelementptr inbounds double, double* %17, i64 %conv.i.1
>   %76 = bitcast double* %add.ptr.i.i314.1 to i64*
>   %77 = load i64, i64* %76, align 8, !tbaa !2
>   %arrayidx22.1 = getelementptr inbounds double, double* %18, i64 %indvars.iv.next353
>   %78 = bitcast double* %arrayidx22.1 to i64*
>   store i64 %77, i64* %78, align 8, !tbaa !2
>   %add.ptr.i.i311.1 = getelementptr inbounds double, double* %19, i64 %conv.i.1
>   %79 = bitcast double* %add.ptr.i.i311.1 to i64*
>   %80 = load i64, i64* %79, align 8, !tbaa !2
>   %arrayidx25.1 = getelementptr inbounds double, double* %20, i64 %indvars.iv.next353
>   %81 = bitcast double* %arrayidx25.1 to i64*
>   store i64 %80, i64* %81, align 8, !tbaa !2
>   %indvars.iv.next353.1 = add nsw i64 %indvars.iv352, 2
>   %lftr.wideiv355.1 = trunc i64 %indvars.iv.next353.1 to i32
>   %exitcond356.not.1 = icmp eq i32 %23, %lftr.wideiv355.1
>   br i1 %exitcond356.not.1, label %omp.precond.end, label %omp.inner.for.body
> 
> omp.precond.end:                                  ; preds = %omp.inner.for.body.prol.loopexit, %omp.inner.for.body, %omp.precond.then
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %5)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #7
>   %.pr = load i32, i32* %numElemReg, align 4, !tbaa !6
>   %sub33 = add nsw i32 %.pr, -1
>   %cmp35 = icmp sgt i32 %.pr, 0
>   br i1 %cmp35, label %omp.precond.then36, label %omp.precond.end78
> 
> omp.precond.then36:                               ; preds = %omp.precond.end
>   %82 = bitcast i32* %.omp.lb37 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %82) #7
>   store i32 0, i32* %.omp.lb37, align 4, !tbaa !6
>   %83 = bitcast i32* %.omp.ub38 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %83) #7
>   store i32 %sub33, i32* %.omp.ub38, align 4, !tbaa !6
>   %84 = bitcast i32* %.omp.stride39 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %84) #7
>   store i32 1, i32* %.omp.stride39, align 4, !tbaa !6
>   %85 = bitcast i32* %.omp.is_last40 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %85) #7
>   store i32 0, i32* %.omp.is_last40, align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %5, i32 34, i32* nonnull %.omp.is_last40, i32* nonnull %.omp.lb37, i32* nonnull %.omp.ub38, i32* nonnull %.omp.stride39, i32 1, i32 1) #7
>   %86 = load i32, i32* %.omp.ub38, align 4, !tbaa !6
>   %cmp43.not = icmp slt i32 %86, %.pr
>   %cond47 = select i1 %cmp43.not, i32 %86, i32 %sub33
>   store i32 %cond47, i32* %.omp.ub38, align 4, !tbaa !6
>   %87 = load i32, i32* %.omp.lb37, align 4, !tbaa !6
>   %cmp49.not335 = icmp sgt i32 %87, %cond47
>   br i1 %cmp49.not335, label %omp.loop.exit77, label %omp.inner.for.body51.lr.ph
> 
> omp.inner.for.body51.lr.ph:                       ; preds = %omp.precond.then36
>   %88 = load i32*, i32** %regElemList, align 8, !tbaa !41
>   %89 = load double*, double** %vnewc, align 8, !tbaa !41
>   %90 = load double*, double** %compression, align 8, !tbaa !41
>   %91 = load double*, double** %delvc, align 8, !tbaa !41
>   %92 = load double*, double** %compHalfStep, align 8, !tbaa !41
>   %93 = sext i32 %87 to i64
>   %94 = icmp sgt i32 %cond47, %87
>   %smax349 = select i1 %94, i32 %cond47, i32 %87
>   %95 = add i32 %smax349, 1
>   %96 = sub i32 %95, %87
>   %xtraiter360 = and i32 %96, 1
>   %lcmp.mod361.not = icmp eq i32 %xtraiter360, 0
>   br i1 %lcmp.mod361.not, label %omp.inner.for.body51.prol.loopexit, label %omp.inner.for.body51.prol
> 
> omp.inner.for.body51.prol:                        ; preds = %omp.inner.for.body51.lr.ph
>   %arrayidx56.prol = getelementptr inbounds i32, i32* %88, i64 %93
>   %97 = load i32, i32* %arrayidx56.prol, align 4, !tbaa !6
>   %idxprom57.prol = sext i32 %97 to i64
>   %arrayidx58.prol = getelementptr inbounds double, double* %89, i64 %idxprom57.prol
>   %98 = load double, double* %arrayidx58.prol, align 8, !tbaa !2
>   %div59.prol = fdiv double 1.000000e+00, %98
>   %sub60.prol = fadd double %div59.prol, -1.000000e+00
>   %arrayidx62.prol = getelementptr inbounds double, double* %90, i64 %93
>   store double %sub60.prol, double* %arrayidx62.prol, align 8, !tbaa !2
>   %99 = load double, double* %arrayidx58.prol, align 8, !tbaa !2
>   %arrayidx66.prol = getelementptr inbounds double, double* %91, i64 %93
>   %100 = load double, double* %arrayidx66.prol, align 8, !tbaa !2
>   %mul67.prol = fmul double %100, 5.000000e-01
>   %sub68.prol = fsub double %99, %mul67.prol
>   %div69.prol = fdiv double 1.000000e+00, %sub68.prol
>   %sub70.prol = fadd double %div69.prol, -1.000000e+00
>   %arrayidx72.prol = getelementptr inbounds double, double* %92, i64 %93
>   store double %sub70.prol, double* %arrayidx72.prol, align 8, !tbaa !2
>   %indvars.iv.next348.prol = add nsw i64 %93, 1
>   br label %omp.inner.for.body51.prol.loopexit
> 
> omp.inner.for.body51.prol.loopexit:               ; preds = %omp.inner.for.body51.lr.ph, %omp.inner.for.body51.prol
>   %indvars.iv347.unr = phi i64 [ %93, %omp.inner.for.body51.lr.ph ], [ %indvars.iv.next348.prol, %omp.inner.for.body51.prol ]
>   %.not364 = icmp slt i32 %87, %cond47
>   br i1 %.not364, label %omp.inner.for.body51, label %omp.loop.exit77
> 
> omp.inner.for.body51:                             ; preds = %omp.inner.for.body51.prol.loopexit, %omp.inner.for.body51
>   %indvars.iv347 = phi i64 [ %indvars.iv.next348.1, %omp.inner.for.body51 ], [ %indvars.iv347.unr, %omp.inner.for.body51.prol.loopexit ]
>   %arrayidx56 = getelementptr inbounds i32, i32* %88, i64 %indvars.iv347
>   %101 = load i32, i32* %arrayidx56, align 4, !tbaa !6
>   %idxprom57 = sext i32 %101 to i64
>   %arrayidx58 = getelementptr inbounds double, double* %89, i64 %idxprom57
>   %102 = load double, double* %arrayidx58, align 8, !tbaa !2
>   %div59 = fdiv double 1.000000e+00, %102
>   %sub60 = fadd double %div59, -1.000000e+00
>   %arrayidx62 = getelementptr inbounds double, double* %90, i64 %indvars.iv347
>   store double %sub60, double* %arrayidx62, align 8, !tbaa !2
>   %103 = load double, double* %arrayidx58, align 8, !tbaa !2
>   %arrayidx66 = getelementptr inbounds double, double* %91, i64 %indvars.iv347
>   %104 = load double, double* %arrayidx66, align 8, !tbaa !2
>   %mul67 = fmul double %104, 5.000000e-01
>   %sub68 = fsub double %103, %mul67
>   %div69 = fdiv double 1.000000e+00, %sub68
>   %sub70 = fadd double %div69, -1.000000e+00
>   %arrayidx72 = getelementptr inbounds double, double* %92, i64 %indvars.iv347
>   store double %sub70, double* %arrayidx72, align 8, !tbaa !2
>   %indvars.iv.next348 = add nsw i64 %indvars.iv347, 1
>   %arrayidx56.1 = getelementptr inbounds i32, i32* %88, i64 %indvars.iv.next348
>   %105 = load i32, i32* %arrayidx56.1, align 4, !tbaa !6
>   %idxprom57.1 = sext i32 %105 to i64
>   %arrayidx58.1 = getelementptr inbounds double, double* %89, i64 %idxprom57.1
>   %106 = load double, double* %arrayidx58.1, align 8, !tbaa !2
>   %div59.1 = fdiv double 1.000000e+00, %106
>   %sub60.1 = fadd double %div59.1, -1.000000e+00
>   %arrayidx62.1 = getelementptr inbounds double, double* %90, i64 %indvars.iv.next348
>   store double %sub60.1, double* %arrayidx62.1, align 8, !tbaa !2
>   %107 = load double, double* %arrayidx58.1, align 8, !tbaa !2
>   %arrayidx66.1 = getelementptr inbounds double, double* %91, i64 %indvars.iv.next348
>   %108 = load double, double* %arrayidx66.1, align 8, !tbaa !2
>   %mul67.1 = fmul double %108, 5.000000e-01
>   %sub68.1 = fsub double %107, %mul67.1
>   %div69.1 = fdiv double 1.000000e+00, %sub68.1
>   %sub70.1 = fadd double %div69.1, -1.000000e+00
>   %arrayidx72.1 = getelementptr inbounds double, double* %92, i64 %indvars.iv.next348
>   store double %sub70.1, double* %arrayidx72.1, align 8, !tbaa !2
>   %indvars.iv.next348.1 = add nsw i64 %indvars.iv347, 2
>   %lftr.wideiv350.1 = trunc i64 %indvars.iv.next348.1 to i32
>   %exitcond351.not.1 = icmp eq i32 %95, %lftr.wideiv350.1
>   br i1 %exitcond351.not.1, label %omp.loop.exit77, label %omp.inner.for.body51
> 
> omp.loop.exit77:                                  ; preds = %omp.inner.for.body51.prol.loopexit, %omp.inner.for.body51, %omp.precond.then36
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %5)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %85) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %84) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %83) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %82) #7
>   br label %omp.precond.end78
> 
> omp.precond.end78:                                ; preds = %entry.omp.precond.end78_crit_edge, %omp.loop.exit77, %omp.precond.end
>   %109 = phi i32 [ %.pre, %entry.omp.precond.end78_crit_edge ], [ %5, %omp.loop.exit77 ], [ %5, %omp.precond.end ]
>   call void @__kmpc_barrier(%struct.ident_t* nonnull @3, i32 %109) #7
>   %110 = load double, double* %eosvmin, align 8, !tbaa !2
>   %cmp79 = fcmp une double %110, 0.000000e+00
>   br i1 %cmp79, label %if.then, label %if.end125
> 
> if.then:                                          ; preds = %omp.precond.end78
>   %111 = load i32, i32* %numElemReg, align 4, !tbaa !6
>   %sub86 = add nsw i32 %111, -1
>   %cmp88 = icmp sgt i32 %111, 0
>   br i1 %cmp88, label %omp.precond.then89, label %if.end125
> 
> omp.precond.then89:                               ; preds = %if.then
>   %112 = bitcast i32* %.omp.lb90 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %112) #7
>   store i32 0, i32* %.omp.lb90, align 4, !tbaa !6
>   %113 = bitcast i32* %.omp.ub91 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %113) #7
>   store i32 %sub86, i32* %.omp.ub91, align 4, !tbaa !6
>   %114 = bitcast i32* %.omp.stride92 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %114) #7
>   store i32 1, i32* %.omp.stride92, align 4, !tbaa !6
>   %115 = bitcast i32* %.omp.is_last93 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %115) #7
>   store i32 0, i32* %.omp.is_last93, align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %109, i32 34, i32* nonnull %.omp.is_last93, i32* nonnull %.omp.lb90, i32* nonnull %.omp.ub91, i32* nonnull %.omp.stride92, i32 1, i32 1) #7
>   %116 = load i32, i32* %.omp.ub91, align 4, !tbaa !6
>   %cmp97.not = icmp slt i32 %116, %111
>   %cond101 = select i1 %cmp97.not, i32 %116, i32 %sub86
>   store i32 %cond101, i32* %.omp.ub91, align 4, !tbaa !6
>   %117 = load i32, i32* %.omp.lb90, align 4, !tbaa !6
>   %cmp103.not333 = icmp sgt i32 %117, %cond101
>   br i1 %cmp103.not333, label %omp.loop.exit123, label %omp.inner.for.body105.lr.ph
> 
> omp.inner.for.body105.lr.ph:                      ; preds = %omp.precond.then89
>   %118 = load i32*, i32** %regElemList, align 8, !tbaa !41
>   %119 = load double*, double** %vnewc, align 8, !tbaa !41
>   %120 = load double*, double** %compression, align 8
>   %121 = load double*, double** %compHalfStep, align 8
>   %122 = sext i32 %117 to i64
>   %123 = icmp sgt i32 %cond101, %117
>   %smax344 = select i1 %123, i32 %cond101, i32 %117
>   %124 = add i32 %smax344, 1
>   %125 = sub i32 %124, %117
>   %126 = sub i32 %smax344, %117
>   %xtraiter357 = and i32 %125, 3
>   %lcmp.mod358.not = icmp eq i32 %xtraiter357, 0
>   br i1 %lcmp.mod358.not, label %omp.inner.for.body105.prol.loopexit, label %omp.inner.for.body105.prol
> 
> omp.inner.for.body105.prol:                       ; preds = %omp.inner.for.body105.lr.ph, %if.end.prol
>   %indvars.iv342.prol = phi i64 [ %indvars.iv.next343.prol, %if.end.prol ], [ %122, %omp.inner.for.body105.lr.ph ]
>   %prol.iter359 = phi i32 [ %prol.iter359.sub, %if.end.prol ], [ %xtraiter357, %omp.inner.for.body105.lr.ph ]
>   %arrayidx110.prol = getelementptr inbounds i32, i32* %118, i64 %indvars.iv342.prol
>   %127 = load i32, i32* %arrayidx110.prol, align 4, !tbaa !6
>   %idxprom111.prol = sext i32 %127 to i64
>   %arrayidx112.prol = getelementptr inbounds double, double* %119, i64 %idxprom111.prol
>   %128 = load double, double* %arrayidx112.prol, align 8, !tbaa !2
>   %cmp113.prol = fcmp ugt double %128, %110
>   br i1 %cmp113.prol, label %if.end.prol, label %if.then114.prol
> 
> if.then114.prol:                                  ; preds = %omp.inner.for.body105.prol
>   %arrayidx116.prol = getelementptr inbounds double, double* %120, i64 %indvars.iv342.prol
>   %129 = bitcast double* %arrayidx116.prol to i64*
>   %130 = load i64, i64* %129, align 8, !tbaa !2
>   %arrayidx118.prol = getelementptr inbounds double, double* %121, i64 %indvars.iv342.prol
>   %131 = bitcast double* %arrayidx118.prol to i64*
>   store i64 %130, i64* %131, align 8, !tbaa !2
>   br label %if.end.prol
> 
> if.end.prol:                                      ; preds = %if.then114.prol, %omp.inner.for.body105.prol
>   %indvars.iv.next343.prol = add nsw i64 %indvars.iv342.prol, 1
>   %prol.iter359.sub = add i32 %prol.iter359, -1
>   %prol.iter359.cmp.not = icmp eq i32 %prol.iter359.sub, 0
>   br i1 %prol.iter359.cmp.not, label %omp.inner.for.body105.prol.loopexit, label %omp.inner.for.body105.prol, !llvm.loop !113
> 
> omp.inner.for.body105.prol.loopexit:              ; preds = %if.end.prol, %omp.inner.for.body105.lr.ph
>   %indvars.iv342.unr = phi i64 [ %122, %omp.inner.for.body105.lr.ph ], [ %indvars.iv.next343.prol, %if.end.prol ]
>   %132 = icmp ult i32 %126, 3
>   br i1 %132, label %omp.loop.exit123, label %omp.inner.for.body105
> 
> omp.inner.for.body105:                            ; preds = %omp.inner.for.body105.prol.loopexit, %if.end.3
>   %indvars.iv342 = phi i64 [ %indvars.iv.next343.3, %if.end.3 ], [ %indvars.iv342.unr, %omp.inner.for.body105.prol.loopexit ]
>   %arrayidx110 = getelementptr inbounds i32, i32* %118, i64 %indvars.iv342
>   %133 = load i32, i32* %arrayidx110, align 4, !tbaa !6
>   %idxprom111 = sext i32 %133 to i64
>   %arrayidx112 = getelementptr inbounds double, double* %119, i64 %idxprom111
>   %134 = load double, double* %arrayidx112, align 8, !tbaa !2
>   %cmp113 = fcmp ugt double %134, %110
>   br i1 %cmp113, label %if.end, label %if.then114
> 
> if.then114:                                       ; preds = %omp.inner.for.body105
>   %arrayidx116 = getelementptr inbounds double, double* %120, i64 %indvars.iv342
>   %135 = bitcast double* %arrayidx116 to i64*
>   %136 = load i64, i64* %135, align 8, !tbaa !2
>   %arrayidx118 = getelementptr inbounds double, double* %121, i64 %indvars.iv342
>   %137 = bitcast double* %arrayidx118 to i64*
>   store i64 %136, i64* %137, align 8, !tbaa !2
>   br label %if.end
> 
> if.end:                                           ; preds = %omp.inner.for.body105, %if.then114
>   %indvars.iv.next343 = add nsw i64 %indvars.iv342, 1
>   %arrayidx110.1 = getelementptr inbounds i32, i32* %118, i64 %indvars.iv.next343
>   %138 = load i32, i32* %arrayidx110.1, align 4, !tbaa !6
>   %idxprom111.1 = sext i32 %138 to i64
>   %arrayidx112.1 = getelementptr inbounds double, double* %119, i64 %idxprom111.1
>   %139 = load double, double* %arrayidx112.1, align 8, !tbaa !2
>   %cmp113.1 = fcmp ugt double %139, %110
>   br i1 %cmp113.1, label %if.end.1, label %if.then114.1
> 
> omp.loop.exit123:                                 ; preds = %omp.inner.for.body105.prol.loopexit, %if.end.3, %omp.precond.then89
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %109)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %115) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %114) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %113) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %112) #7
>   br label %if.end125
> 
> if.end125:                                        ; preds = %if.then, %omp.loop.exit123, %omp.precond.end78
>   %140 = load double, double* %eosvmax, align 8, !tbaa !2
>   %cmp126 = fcmp une double %140, 0.000000e+00
>   br i1 %cmp126, label %if.then127, label %if.end176
> 
> if.then127:                                       ; preds = %if.end125
>   %141 = load i32, i32* %numElemReg, align 4, !tbaa !6
>   %sub134 = add nsw i32 %141, -1
>   %cmp136 = icmp sgt i32 %141, 0
>   br i1 %cmp136, label %omp.precond.then137, label %omp.precond.end211
> 
> omp.precond.then137:                              ; preds = %if.then127
>   %142 = bitcast i32* %.omp.lb138 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %142) #7
>   store i32 0, i32* %.omp.lb138, align 4, !tbaa !6
>   %143 = bitcast i32* %.omp.ub139 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %143) #7
>   store i32 %sub134, i32* %.omp.ub139, align 4, !tbaa !6
>   %144 = bitcast i32* %.omp.stride140 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %144) #7
>   store i32 1, i32* %.omp.stride140, align 4, !tbaa !6
>   %145 = bitcast i32* %.omp.is_last141 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %145) #7
>   store i32 0, i32* %.omp.is_last141, align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %109, i32 34, i32* nonnull %.omp.is_last141, i32* nonnull %.omp.lb138, i32* nonnull %.omp.ub139, i32* nonnull %.omp.stride140, i32 1, i32 1) #7
>   %146 = load i32, i32* %.omp.ub139, align 4, !tbaa !6
>   %cmp145.not = icmp slt i32 %146, %141
>   %cond149 = select i1 %cmp145.not, i32 %146, i32 %sub134
>   store i32 %cond149, i32* %.omp.ub139, align 4, !tbaa !6
>   %147 = load i32, i32* %.omp.lb138, align 4, !tbaa !6
>   %cmp151.not331 = icmp sgt i32 %147, %cond149
>   br i1 %cmp151.not331, label %omp.loop.exit174, label %omp.inner.for.body153.lr.ph
> 
> omp.inner.for.body153.lr.ph:                      ; preds = %omp.precond.then137
>   %148 = load i32*, i32** %regElemList, align 8, !tbaa !41
>   %149 = load double*, double** %vnewc, align 8, !tbaa !41
>   %150 = load double*, double** %p_old, align 8
>   %151 = load double*, double** %compression, align 8
>   %152 = load double*, double** %compHalfStep, align 8
>   %153 = sext i32 %147 to i64
>   %154 = icmp sgt i32 %cond149, %147
>   %smax341 = select i1 %154, i32 %cond149, i32 %147
>   %155 = add i32 %smax341, 1
>   %156 = sub i32 %155, %147
>   %157 = sub i32 %smax341, %147
>   %xtraiter = and i32 %156, 3
>   %lcmp.mod.not = icmp eq i32 %xtraiter, 0
>   br i1 %lcmp.mod.not, label %omp.inner.for.body153.prol.loopexit, label %omp.inner.for.body153.prol
> 
> omp.inner.for.body153.prol:                       ; preds = %omp.inner.for.body153.lr.ph, %if.end169.prol
>   %indvars.iv.prol = phi i64 [ %indvars.iv.next.prol, %if.end169.prol ], [ %153, %omp.inner.for.body153.lr.ph ]
>   %prol.iter = phi i32 [ %prol.iter.sub, %if.end169.prol ], [ %xtraiter, %omp.inner.for.body153.lr.ph ]
>   %arrayidx158.prol = getelementptr inbounds i32, i32* %148, i64 %indvars.iv.prol
>   %158 = load i32, i32* %arrayidx158.prol, align 4, !tbaa !6
>   %idxprom159.prol = sext i32 %158 to i64
>   %arrayidx160.prol = getelementptr inbounds double, double* %149, i64 %idxprom159.prol
>   %159 = load double, double* %arrayidx160.prol, align 8, !tbaa !2
>   %cmp161.prol = fcmp ult double %159, %140
>   br i1 %cmp161.prol, label %if.end169.prol, label %if.then162.prol
> 
> if.then162.prol:                                  ; preds = %omp.inner.for.body153.prol
>   %arrayidx164.prol = getelementptr inbounds double, double* %150, i64 %indvars.iv.prol
>   store double 0.000000e+00, double* %arrayidx164.prol, align 8, !tbaa !2
>   %arrayidx166.prol = getelementptr inbounds double, double* %151, i64 %indvars.iv.prol
>   store double 0.000000e+00, double* %arrayidx166.prol, align 8, !tbaa !2
>   %arrayidx168.prol = getelementptr inbounds double, double* %152, i64 %indvars.iv.prol
>   store double 0.000000e+00, double* %arrayidx168.prol, align 8, !tbaa !2
>   br label %if.end169.prol
> 
> if.end169.prol:                                   ; preds = %if.then162.prol, %omp.inner.for.body153.prol
>   %indvars.iv.next.prol = add nsw i64 %indvars.iv.prol, 1
>   %prol.iter.sub = add i32 %prol.iter, -1
>   %prol.iter.cmp.not = icmp eq i32 %prol.iter.sub, 0
>   br i1 %prol.iter.cmp.not, label %omp.inner.for.body153.prol.loopexit, label %omp.inner.for.body153.prol, !llvm.loop !114
> 
> omp.inner.for.body153.prol.loopexit:              ; preds = %if.end169.prol, %omp.inner.for.body153.lr.ph
>   %indvars.iv.unr = phi i64 [ %153, %omp.inner.for.body153.lr.ph ], [ %indvars.iv.next.prol, %if.end169.prol ]
>   %160 = icmp ult i32 %157, 3
>   br i1 %160, label %omp.loop.exit174, label %omp.inner.for.body153
> 
> omp.inner.for.body153:                            ; preds = %omp.inner.for.body153.prol.loopexit, %if.end169.3
>   %indvars.iv = phi i64 [ %indvars.iv.next.3, %if.end169.3 ], [ %indvars.iv.unr, %omp.inner.for.body153.prol.loopexit ]
>   %arrayidx158 = getelementptr inbounds i32, i32* %148, i64 %indvars.iv
>   %161 = load i32, i32* %arrayidx158, align 4, !tbaa !6
>   %idxprom159 = sext i32 %161 to i64
>   %arrayidx160 = getelementptr inbounds double, double* %149, i64 %idxprom159
>   %162 = load double, double* %arrayidx160, align 8, !tbaa !2
>   %cmp161 = fcmp ult double %162, %140
>   br i1 %cmp161, label %if.end169, label %if.then162
> 
> if.then162:                                       ; preds = %omp.inner.for.body153
>   %arrayidx164 = getelementptr inbounds double, double* %150, i64 %indvars.iv
>   store double 0.000000e+00, double* %arrayidx164, align 8, !tbaa !2
>   %arrayidx166 = getelementptr inbounds double, double* %151, i64 %indvars.iv
>   store double 0.000000e+00, double* %arrayidx166, align 8, !tbaa !2
>   %arrayidx168 = getelementptr inbounds double, double* %152, i64 %indvars.iv
>   store double 0.000000e+00, double* %arrayidx168, align 8, !tbaa !2
>   br label %if.end169
> 
> if.end169:                                        ; preds = %omp.inner.for.body153, %if.then162
>   %indvars.iv.next = add nsw i64 %indvars.iv, 1
>   %arrayidx158.1 = getelementptr inbounds i32, i32* %148, i64 %indvars.iv.next
>   %163 = load i32, i32* %arrayidx158.1, align 4, !tbaa !6
>   %idxprom159.1 = sext i32 %163 to i64
>   %arrayidx160.1 = getelementptr inbounds double, double* %149, i64 %idxprom159.1
>   %164 = load double, double* %arrayidx160.1, align 8, !tbaa !2
>   %cmp161.1 = fcmp ult double %164, %140
>   br i1 %cmp161.1, label %if.end169.1, label %if.then162.1
> 
> omp.loop.exit174:                                 ; preds = %omp.inner.for.body153.prol.loopexit, %if.end169.3, %omp.precond.then137
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %109)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %145) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %144) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %143) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %142) #7
>   br label %if.end176
> 
> if.end176:                                        ; preds = %omp.loop.exit174, %if.end125
>   %.pr326 = load i32, i32* %numElemReg, align 4, !tbaa !6
>   %sub183 = add nsw i32 %.pr326, -1
>   %cmp185 = icmp sgt i32 %.pr326, 0
>   br i1 %cmp185, label %omp.precond.then186, label %omp.precond.end211
> 
> omp.precond.then186:                              ; preds = %if.end176
>   %165 = bitcast i32* %.omp.lb187 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %165) #7
>   store i32 0, i32* %.omp.lb187, align 4, !tbaa !6
>   %166 = bitcast i32* %.omp.ub188 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %166) #7
>   store i32 %sub183, i32* %.omp.ub188, align 4, !tbaa !6
>   %167 = bitcast i32* %.omp.stride189 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %167) #7
>   store i32 1, i32* %.omp.stride189, align 4, !tbaa !6
>   %168 = bitcast i32* %.omp.is_last190 to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %168) #7
>   store i32 0, i32* %.omp.is_last190, align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %109, i32 34, i32* nonnull %.omp.is_last190, i32* nonnull %.omp.lb187, i32* nonnull %.omp.ub188, i32* nonnull %.omp.stride189, i32 1, i32 1) #7
>   %169 = load i32, i32* %.omp.ub188, align 4, !tbaa !6
>   %cmp193.not = icmp slt i32 %169, %.pr326
>   %cond197 = select i1 %cmp193.not, i32 %169, i32 %sub183
>   store i32 %cond197, i32* %.omp.ub188, align 4, !tbaa !6
>   %170 = load i32, i32* %.omp.lb187, align 4, !tbaa !6
>   %cmp199.not329 = icmp slt i32 %cond197, %170
>   br i1 %cmp199.not329, label %omp.loop.exit210, label %omp.inner.for.body201.lr.ph
> 
> omp.inner.for.body201.lr.ph:                      ; preds = %omp.precond.then186
>   %171 = load double*, double** %work, align 8, !tbaa !41
>   %172 = sext i32 %170 to i64
>   %173 = icmp sgt i32 %cond197, %170
>   %scevgep = getelementptr double, double* %171, i64 %172
>   %scevgep339 = bitcast double* %scevgep to i8*
>   %174 = sub i32 %cond197, %170
>   %175 = select i1 %173, i32 %174, i32 0
>   %176 = zext i32 %175 to i64
>   %177 = shl nuw nsw i64 %176, 3
>   %178 = add nuw nsw i64 %177, 8
>   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(1) %scevgep339, i8 0, i64 %178, i1 false)
>   br label %omp.loop.exit210
> 
> omp.loop.exit210:                                 ; preds = %omp.inner.for.body201.lr.ph, %omp.precond.then186
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %109)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %168) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %167) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %166) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %165) #7
>   br label %omp.precond.end211
14301c11559
< 304:                                              ; preds = %302
---
> omp.precond.end211:                               ; preds = %if.then127, %omp.loop.exit210, %if.end176
14304,14337c11562,11666
< 305:                                              ; preds = %302, %17
<   %306 = landingpad { i8*, i32 }
<           catch i8* null
<   %307 = extractvalue { i8*, i32 } %306, 0
<   call void @__clang_call_terminate(i8* %307) #29
<   unreachable
< 
< 308:                                              ; preds = %269
<   %309 = getelementptr inbounds double, double* %233, i64 %270
<   store double 0.000000e+00, double* %309, align 8, !tbaa !2
<   %310 = getelementptr inbounds double, double* %234, i64 %270
<   store double 0.000000e+00, double* %310, align 8, !tbaa !2
<   %311 = getelementptr inbounds double, double* %235, i64 %270
<   store double 0.000000e+00, double* %311, align 8, !tbaa !2
<   br label %312
< 
< 312:                                              ; preds = %308, %269
<   %313 = add nsw i64 %258, 2
<   %314 = trunc i64 %313 to i32
<   %315 = icmp eq i32 %237, %314
<   br i1 %315, label %277, label %257
< 
< 316:                                              ; preds = %204
<   %317 = getelementptr inbounds double, double* %169, i64 %205
<   %318 = load double, double* %317, align 8, !tbaa !2
<   %319 = getelementptr inbounds double, double* %170, i64 %205
<   store double %318, double* %319, align 8, !tbaa !2
<   br label %320
< 
< 320:                                              ; preds = %316, %204
<   %321 = add nsw i64 %193, 2
<   %322 = trunc i64 %321 to i32
<   %323 = icmp eq i32 %172, %322
<   br i1 %323, label %212, label %192
---
> if.then162.1:                                     ; preds = %if.end169
>   %arrayidx164.1 = getelementptr inbounds double, double* %150, i64 %indvars.iv.next
>   store double 0.000000e+00, double* %arrayidx164.1, align 8, !tbaa !2
>   %arrayidx166.1 = getelementptr inbounds double, double* %151, i64 %indvars.iv.next
>   store double 0.000000e+00, double* %arrayidx166.1, align 8, !tbaa !2
>   %arrayidx168.1 = getelementptr inbounds double, double* %152, i64 %indvars.iv.next
>   store double 0.000000e+00, double* %arrayidx168.1, align 8, !tbaa !2
>   br label %if.end169.1
> 
> if.end169.1:                                      ; preds = %if.then162.1, %if.end169
>   %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
>   %arrayidx158.2 = getelementptr inbounds i32, i32* %148, i64 %indvars.iv.next.1
>   %179 = load i32, i32* %arrayidx158.2, align 4, !tbaa !6
>   %idxprom159.2 = sext i32 %179 to i64
>   %arrayidx160.2 = getelementptr inbounds double, double* %149, i64 %idxprom159.2
>   %180 = load double, double* %arrayidx160.2, align 8, !tbaa !2
>   %cmp161.2 = fcmp ult double %180, %140
>   br i1 %cmp161.2, label %if.end169.2, label %if.then162.2
> 
> if.then162.2:                                     ; preds = %if.end169.1
>   %arrayidx164.2 = getelementptr inbounds double, double* %150, i64 %indvars.iv.next.1
>   store double 0.000000e+00, double* %arrayidx164.2, align 8, !tbaa !2
>   %arrayidx166.2 = getelementptr inbounds double, double* %151, i64 %indvars.iv.next.1
>   store double 0.000000e+00, double* %arrayidx166.2, align 8, !tbaa !2
>   %arrayidx168.2 = getelementptr inbounds double, double* %152, i64 %indvars.iv.next.1
>   store double 0.000000e+00, double* %arrayidx168.2, align 8, !tbaa !2
>   br label %if.end169.2
> 
> if.end169.2:                                      ; preds = %if.then162.2, %if.end169.1
>   %indvars.iv.next.2 = add nsw i64 %indvars.iv, 3
>   %arrayidx158.3 = getelementptr inbounds i32, i32* %148, i64 %indvars.iv.next.2
>   %181 = load i32, i32* %arrayidx158.3, align 4, !tbaa !6
>   %idxprom159.3 = sext i32 %181 to i64
>   %arrayidx160.3 = getelementptr inbounds double, double* %149, i64 %idxprom159.3
>   %182 = load double, double* %arrayidx160.3, align 8, !tbaa !2
>   %cmp161.3 = fcmp ult double %182, %140
>   br i1 %cmp161.3, label %if.end169.3, label %if.then162.3
> 
> if.then162.3:                                     ; preds = %if.end169.2
>   %arrayidx164.3 = getelementptr inbounds double, double* %150, i64 %indvars.iv.next.2
>   store double 0.000000e+00, double* %arrayidx164.3, align 8, !tbaa !2
>   %arrayidx166.3 = getelementptr inbounds double, double* %151, i64 %indvars.iv.next.2
>   store double 0.000000e+00, double* %arrayidx166.3, align 8, !tbaa !2
>   %arrayidx168.3 = getelementptr inbounds double, double* %152, i64 %indvars.iv.next.2
>   store double 0.000000e+00, double* %arrayidx168.3, align 8, !tbaa !2
>   br label %if.end169.3
> 
> if.end169.3:                                      ; preds = %if.then162.3, %if.end169.2
>   %indvars.iv.next.3 = add nsw i64 %indvars.iv, 4
>   %lftr.wideiv.3 = trunc i64 %indvars.iv.next.3 to i32
>   %exitcond.not.3 = icmp eq i32 %155, %lftr.wideiv.3
>   br i1 %exitcond.not.3, label %omp.loop.exit174, label %omp.inner.for.body153
> 
> if.then114.1:                                     ; preds = %if.end
>   %arrayidx116.1 = getelementptr inbounds double, double* %120, i64 %indvars.iv.next343
>   %183 = bitcast double* %arrayidx116.1 to i64*
>   %184 = load i64, i64* %183, align 8, !tbaa !2
>   %arrayidx118.1 = getelementptr inbounds double, double* %121, i64 %indvars.iv.next343
>   %185 = bitcast double* %arrayidx118.1 to i64*
>   store i64 %184, i64* %185, align 8, !tbaa !2
>   br label %if.end.1
> 
> if.end.1:                                         ; preds = %if.then114.1, %if.end
>   %indvars.iv.next343.1 = add nsw i64 %indvars.iv342, 2
>   %arrayidx110.2 = getelementptr inbounds i32, i32* %118, i64 %indvars.iv.next343.1
>   %186 = load i32, i32* %arrayidx110.2, align 4, !tbaa !6
>   %idxprom111.2 = sext i32 %186 to i64
>   %arrayidx112.2 = getelementptr inbounds double, double* %119, i64 %idxprom111.2
>   %187 = load double, double* %arrayidx112.2, align 8, !tbaa !2
>   %cmp113.2 = fcmp ugt double %187, %110
>   br i1 %cmp113.2, label %if.end.2, label %if.then114.2
> 
> if.then114.2:                                     ; preds = %if.end.1
>   %arrayidx116.2 = getelementptr inbounds double, double* %120, i64 %indvars.iv.next343.1
>   %188 = bitcast double* %arrayidx116.2 to i64*
>   %189 = load i64, i64* %188, align 8, !tbaa !2
>   %arrayidx118.2 = getelementptr inbounds double, double* %121, i64 %indvars.iv.next343.1
>   %190 = bitcast double* %arrayidx118.2 to i64*
>   store i64 %189, i64* %190, align 8, !tbaa !2
>   br label %if.end.2
> 
> if.end.2:                                         ; preds = %if.then114.2, %if.end.1
>   %indvars.iv.next343.2 = add nsw i64 %indvars.iv342, 3
>   %arrayidx110.3 = getelementptr inbounds i32, i32* %118, i64 %indvars.iv.next343.2
>   %191 = load i32, i32* %arrayidx110.3, align 4, !tbaa !6
>   %idxprom111.3 = sext i32 %191 to i64
>   %arrayidx112.3 = getelementptr inbounds double, double* %119, i64 %idxprom111.3
>   %192 = load double, double* %arrayidx112.3, align 8, !tbaa !2
>   %cmp113.3 = fcmp ugt double %192, %110
>   br i1 %cmp113.3, label %if.end.3, label %if.then114.3
> 
> if.then114.3:                                     ; preds = %if.end.2
>   %arrayidx116.3 = getelementptr inbounds double, double* %120, i64 %indvars.iv.next343.2
>   %193 = bitcast double* %arrayidx116.3 to i64*
>   %194 = load i64, i64* %193, align 8, !tbaa !2
>   %arrayidx118.3 = getelementptr inbounds double, double* %121, i64 %indvars.iv.next343.2
>   %195 = bitcast double* %arrayidx118.3 to i64*
>   store i64 %194, i64* %195, align 8, !tbaa !2
>   br label %if.end.3
> 
> if.end.3:                                         ; preds = %if.then114.3, %if.end.2
>   %indvars.iv.next343.3 = add nsw i64 %indvars.iv342, 4
>   %lftr.wideiv345.3 = trunc i64 %indvars.iv.next343.3 to i32
>   %exitcond346.not.3 = icmp eq i32 %124, %lftr.wideiv345.3
>   br i1 %exitcond346.not.3, label %omp.loop.exit123, label %omp.inner.for.body105
14341,14476c11670,11859
< define internal void @.omp_outlined..53(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, i64 %2, i32** nocapture nonnull readonly align 8 dereferenceable(8) %3, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %4, double** nocapture nonnull readonly align 8 dereferenceable(8) %5, double** nocapture nonnull readonly align 8 dereferenceable(8) %6, double** nocapture nonnull readonly align 8 dereferenceable(8) %7) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %9 = alloca i32, align 4
<   %10 = alloca i32, align 4
<   %11 = alloca i32, align 4
<   %12 = alloca i32, align 4
<   %13 = trunc i64 %2 to i32
<   %14 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL15EvalEOSForElemsR6DomainPdiPiiE12apolloRegion_0, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %14)
<           to label %15 unwind label %99
< 
< 15:                                               ; preds = %8
<   %16 = add nsw i32 %13, -1
<   %17 = icmp sgt i32 %13, 0
<   br i1 %17, label %20, label %18
< 
< 18:                                               ; preds = %15
<   %19 = load i32, i32* %0, align 4, !tbaa !12
<   br label %95
< 
< 20:                                               ; preds = %15
<   %21 = bitcast i32* %9 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #10
<   store i32 0, i32* %9, align 4, !tbaa !12
<   %22 = bitcast i32* %10 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22) #10
<   store i32 %16, i32* %10, align 4, !tbaa !12
<   %23 = bitcast i32* %11 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %23) #10
<   store i32 1, i32* %11, align 4, !tbaa !12
<   %24 = bitcast i32* %12 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #10
<   store i32 0, i32* %12, align 4, !tbaa !12
<   %25 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %25, i32 34, i32* nonnull %12, i32* nonnull %9, i32* nonnull %10, i32* nonnull %11, i32 1, i32 1) #10
<   %26 = load i32, i32* %10, align 4, !tbaa !12
<   %27 = icmp slt i32 %26, %13
<   %28 = select i1 %27, i32 %26, i32 %16
<   store i32 %28, i32* %10, align 4, !tbaa !12
<   %29 = load i32, i32* %9, align 4, !tbaa !12
<   %30 = icmp slt i32 %28, %29
<   br i1 %30, label %94, label %31
< 
< 31:                                               ; preds = %20
<   %32 = load i32*, i32** %3, align 8, !tbaa !6
<   %33 = load double*, double** %5, align 8, !tbaa !6
<   %34 = getelementptr inbounds %class.Domain, %class.Domain* %4, i64 0, i32 39, i32 0, i32 0, i32 0
<   %35 = load double*, double** %34, align 8, !tbaa !22
<   %36 = load double*, double** %6, align 8, !tbaa !6
<   %37 = getelementptr inbounds %class.Domain, %class.Domain* %4, i64 0, i32 38, i32 0, i32 0, i32 0
<   %38 = load double*, double** %37, align 8, !tbaa !22
<   %39 = load double*, double** %7, align 8, !tbaa !6
<   %40 = getelementptr inbounds %class.Domain, %class.Domain* %4, i64 0, i32 40, i32 0, i32 0, i32 0
<   %41 = load double*, double** %40, align 8, !tbaa !22
<   %42 = sext i32 %29 to i64
<   %43 = add i32 %28, 1
<   %44 = sub i32 %43, %29
<   %45 = and i32 %44, 1
<   %46 = icmp eq i32 %45, 0
<   br i1 %46, label %61, label %47
< 
< 47:                                               ; preds = %31
<   %48 = getelementptr inbounds i32, i32* %32, i64 %42
<   %49 = load i32, i32* %48, align 4, !tbaa !12
<   %50 = getelementptr inbounds double, double* %33, i64 %42
<   %51 = load double, double* %50, align 8, !tbaa !2
<   %52 = sext i32 %49 to i64
<   %53 = getelementptr inbounds double, double* %35, i64 %52
<   store double %51, double* %53, align 8, !tbaa !2
<   %54 = getelementptr inbounds double, double* %36, i64 %42
<   %55 = load double, double* %54, align 8, !tbaa !2
<   %56 = getelementptr inbounds double, double* %38, i64 %52
<   store double %55, double* %56, align 8, !tbaa !2
<   %57 = getelementptr inbounds double, double* %39, i64 %42
<   %58 = load double, double* %57, align 8, !tbaa !2
<   %59 = getelementptr inbounds double, double* %41, i64 %52
<   store double %58, double* %59, align 8, !tbaa !2
<   %60 = add nsw i64 %42, 1
<   br label %61
< 
< 61:                                               ; preds = %47, %31
<   %62 = phi i64 [ %42, %31 ], [ %60, %47 ]
<   %63 = icmp eq i32 %28, %29
<   br i1 %63, label %94, label %64
< 
< 64:                                               ; preds = %61, %64
<   %65 = phi i64 [ %91, %64 ], [ %62, %61 ]
<   %66 = getelementptr inbounds i32, i32* %32, i64 %65
<   %67 = load i32, i32* %66, align 4, !tbaa !12
<   %68 = getelementptr inbounds double, double* %33, i64 %65
<   %69 = load double, double* %68, align 8, !tbaa !2
<   %70 = sext i32 %67 to i64
<   %71 = getelementptr inbounds double, double* %35, i64 %70
<   store double %69, double* %71, align 8, !tbaa !2
<   %72 = getelementptr inbounds double, double* %36, i64 %65
<   %73 = load double, double* %72, align 8, !tbaa !2
<   %74 = getelementptr inbounds double, double* %38, i64 %70
<   store double %73, double* %74, align 8, !tbaa !2
<   %75 = getelementptr inbounds double, double* %39, i64 %65
<   %76 = load double, double* %75, align 8, !tbaa !2
<   %77 = getelementptr inbounds double, double* %41, i64 %70
<   store double %76, double* %77, align 8, !tbaa !2
<   %78 = add nsw i64 %65, 1
<   %79 = getelementptr inbounds i32, i32* %32, i64 %78
<   %80 = load i32, i32* %79, align 4, !tbaa !12
<   %81 = getelementptr inbounds double, double* %33, i64 %78
<   %82 = load double, double* %81, align 8, !tbaa !2
<   %83 = sext i32 %80 to i64
<   %84 = getelementptr inbounds double, double* %35, i64 %83
<   store double %82, double* %84, align 8, !tbaa !2
<   %85 = getelementptr inbounds double, double* %36, i64 %78
<   %86 = load double, double* %85, align 8, !tbaa !2
<   %87 = getelementptr inbounds double, double* %38, i64 %83
<   store double %86, double* %87, align 8, !tbaa !2
<   %88 = getelementptr inbounds double, double* %39, i64 %78
<   %89 = load double, double* %88, align 8, !tbaa !2
<   %90 = getelementptr inbounds double, double* %41, i64 %83
<   store double %89, double* %90, align 8, !tbaa !2
<   %91 = add nsw i64 %65, 2
<   %92 = trunc i64 %91 to i32
<   %93 = icmp eq i32 %43, %92
<   br i1 %93, label %94, label %64
< 
< 94:                                               ; preds = %61, %64, %20
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %25)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %23) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #10
<   br label %95
< 
< 95:                                               ; preds = %18, %94
<   %96 = phi i32 [ %19, %18 ], [ %25, %94 ]
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %96)
<   %97 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL15EvalEOSForElemsR6DomainPdiPiiE12apolloRegion_0, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %97)
<           to label %98 unwind label %99
---
> define internal void @.omp_outlined..36(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i64 %numElemReg, i32** nocapture nonnull readonly align 8 dereferenceable(8) %regElemList, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %domain, double** nocapture nonnull readonly align 8 dereferenceable(8) %p_new, double** nocapture nonnull readonly align 8 dereferenceable(8) %e_new, double** nocapture nonnull readonly align 8 dereferenceable(8) %q_new) #6 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
> entry:
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %numElemReg.addr.sroa.0.0.extract.trunc = trunc i64 %numElemReg to i32
>   %sub3 = add nsw i32 %numElemReg.addr.sroa.0.0.extract.trunc, -1
>   %cmp = icmp sgt i32 %numElemReg.addr.sroa.0.0.extract.trunc, 0
>   br i1 %cmp, label %omp.precond.then, label %omp.precond.end
> 
> omp.precond.then:                                 ; preds = %entry
>   %0 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %1 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #7
>   store i32 %sub3, i32* %.omp.ub, align 4, !tbaa !6
>   %2 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %3 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   %4 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %4, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %5 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp5.not = icmp slt i32 %5, %numElemReg.addr.sroa.0.0.extract.trunc
>   %cond = select i1 %cmp5.not, i32 %5, i32 %sub3
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %6 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp6.not41 = icmp sgt i32 %6, %cond
>   br i1 %cmp6.not41, label %omp.loop.exit, label %omp.inner.for.body.lr.ph
> 
> omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
>   %7 = load i32*, i32** %regElemList, align 8, !tbaa !41
>   %8 = load double*, double** %p_new, align 8, !tbaa !41
>   %_M_start.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 39, i32 0, i32 0, i32 0, i32 0
>   %9 = load double*, double** %_M_start.i.i, align 8, !tbaa !11
>   %10 = load double*, double** %e_new, align 8, !tbaa !41
>   %_M_start.i.i39 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 38, i32 0, i32 0, i32 0, i32 0
>   %11 = load double*, double** %_M_start.i.i39, align 8, !tbaa !11
>   %12 = load double*, double** %q_new, align 8, !tbaa !41
>   %_M_start.i.i36 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 40, i32 0, i32 0, i32 0, i32 0
>   %13 = load double*, double** %_M_start.i.i36, align 8, !tbaa !11
>   %14 = sext i32 %6 to i64
>   %15 = icmp sgt i32 %cond, %6
>   %smax = select i1 %15, i32 %cond, i32 %6
>   %16 = add i32 %smax, 1
>   %17 = sub i32 %16, %6
>   %18 = sub i32 %smax, %6
>   %xtraiter = and i32 %17, 3
>   %lcmp.mod.not = icmp eq i32 %xtraiter, 0
>   br i1 %lcmp.mod.not, label %omp.inner.for.body.prol.loopexit, label %omp.inner.for.body.prol
> 
> omp.inner.for.body.prol:                          ; preds = %omp.inner.for.body.lr.ph, %omp.inner.for.body.prol
>   %indvars.iv.prol = phi i64 [ %indvars.iv.next.prol, %omp.inner.for.body.prol ], [ %14, %omp.inner.for.body.lr.ph ]
>   %prol.iter = phi i32 [ %prol.iter.sub, %omp.inner.for.body.prol ], [ %xtraiter, %omp.inner.for.body.lr.ph ]
>   %arrayidx.prol = getelementptr inbounds i32, i32* %7, i64 %indvars.iv.prol
>   %19 = load i32, i32* %arrayidx.prol, align 4, !tbaa !6
>   %arrayidx8.prol = getelementptr inbounds double, double* %8, i64 %indvars.iv.prol
>   %20 = bitcast double* %arrayidx8.prol to i64*
>   %21 = load i64, i64* %20, align 8, !tbaa !2
>   %conv.i.prol = sext i32 %19 to i64
>   %add.ptr.i.i.prol = getelementptr inbounds double, double* %9, i64 %conv.i.prol
>   %22 = bitcast double* %add.ptr.i.i.prol to i64*
>   store i64 %21, i64* %22, align 8, !tbaa !2
>   %arrayidx10.prol = getelementptr inbounds double, double* %10, i64 %indvars.iv.prol
>   %23 = bitcast double* %arrayidx10.prol to i64*
>   %24 = load i64, i64* %23, align 8, !tbaa !2
>   %add.ptr.i.i40.prol = getelementptr inbounds double, double* %11, i64 %conv.i.prol
>   %25 = bitcast double* %add.ptr.i.i40.prol to i64*
>   store i64 %24, i64* %25, align 8, !tbaa !2
>   %arrayidx13.prol = getelementptr inbounds double, double* %12, i64 %indvars.iv.prol
>   %26 = bitcast double* %arrayidx13.prol to i64*
>   %27 = load i64, i64* %26, align 8, !tbaa !2
>   %add.ptr.i.i37.prol = getelementptr inbounds double, double* %13, i64 %conv.i.prol
>   %28 = bitcast double* %add.ptr.i.i37.prol to i64*
>   store i64 %27, i64* %28, align 8, !tbaa !2
>   %indvars.iv.next.prol = add nsw i64 %indvars.iv.prol, 1
>   %prol.iter.sub = add i32 %prol.iter, -1
>   %prol.iter.cmp.not = icmp eq i32 %prol.iter.sub, 0
>   br i1 %prol.iter.cmp.not, label %omp.inner.for.body.prol.loopexit, label %omp.inner.for.body.prol, !llvm.loop !115
> 
> omp.inner.for.body.prol.loopexit:                 ; preds = %omp.inner.for.body.prol, %omp.inner.for.body.lr.ph
>   %indvars.iv.unr = phi i64 [ %14, %omp.inner.for.body.lr.ph ], [ %indvars.iv.next.prol, %omp.inner.for.body.prol ]
>   %29 = icmp ult i32 %18, 3
>   br i1 %29, label %omp.loop.exit, label %omp.inner.for.body
> 
> omp.inner.for.body:                               ; preds = %omp.inner.for.body.prol.loopexit, %omp.inner.for.body
>   %indvars.iv = phi i64 [ %indvars.iv.next.3, %omp.inner.for.body ], [ %indvars.iv.unr, %omp.inner.for.body.prol.loopexit ]
>   %arrayidx = getelementptr inbounds i32, i32* %7, i64 %indvars.iv
>   %30 = load i32, i32* %arrayidx, align 4, !tbaa !6
>   %arrayidx8 = getelementptr inbounds double, double* %8, i64 %indvars.iv
>   %31 = bitcast double* %arrayidx8 to i64*
>   %32 = load i64, i64* %31, align 8, !tbaa !2
>   %conv.i = sext i32 %30 to i64
>   %add.ptr.i.i = getelementptr inbounds double, double* %9, i64 %conv.i
>   %33 = bitcast double* %add.ptr.i.i to i64*
>   store i64 %32, i64* %33, align 8, !tbaa !2
>   %arrayidx10 = getelementptr inbounds double, double* %10, i64 %indvars.iv
>   %34 = bitcast double* %arrayidx10 to i64*
>   %35 = load i64, i64* %34, align 8, !tbaa !2
>   %add.ptr.i.i40 = getelementptr inbounds double, double* %11, i64 %conv.i
>   %36 = bitcast double* %add.ptr.i.i40 to i64*
>   store i64 %35, i64* %36, align 8, !tbaa !2
>   %arrayidx13 = getelementptr inbounds double, double* %12, i64 %indvars.iv
>   %37 = bitcast double* %arrayidx13 to i64*
>   %38 = load i64, i64* %37, align 8, !tbaa !2
>   %add.ptr.i.i37 = getelementptr inbounds double, double* %13, i64 %conv.i
>   %39 = bitcast double* %add.ptr.i.i37 to i64*
>   store i64 %38, i64* %39, align 8, !tbaa !2
>   %indvars.iv.next = add nsw i64 %indvars.iv, 1
>   %arrayidx.1 = getelementptr inbounds i32, i32* %7, i64 %indvars.iv.next
>   %40 = load i32, i32* %arrayidx.1, align 4, !tbaa !6
>   %arrayidx8.1 = getelementptr inbounds double, double* %8, i64 %indvars.iv.next
>   %41 = bitcast double* %arrayidx8.1 to i64*
>   %42 = load i64, i64* %41, align 8, !tbaa !2
>   %conv.i.1 = sext i32 %40 to i64
>   %add.ptr.i.i.1 = getelementptr inbounds double, double* %9, i64 %conv.i.1
>   %43 = bitcast double* %add.ptr.i.i.1 to i64*
>   store i64 %42, i64* %43, align 8, !tbaa !2
>   %arrayidx10.1 = getelementptr inbounds double, double* %10, i64 %indvars.iv.next
>   %44 = bitcast double* %arrayidx10.1 to i64*
>   %45 = load i64, i64* %44, align 8, !tbaa !2
>   %add.ptr.i.i40.1 = getelementptr inbounds double, double* %11, i64 %conv.i.1
>   %46 = bitcast double* %add.ptr.i.i40.1 to i64*
>   store i64 %45, i64* %46, align 8, !tbaa !2
>   %arrayidx13.1 = getelementptr inbounds double, double* %12, i64 %indvars.iv.next
>   %47 = bitcast double* %arrayidx13.1 to i64*
>   %48 = load i64, i64* %47, align 8, !tbaa !2
>   %add.ptr.i.i37.1 = getelementptr inbounds double, double* %13, i64 %conv.i.1
>   %49 = bitcast double* %add.ptr.i.i37.1 to i64*
>   store i64 %48, i64* %49, align 8, !tbaa !2
>   %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
>   %arrayidx.2 = getelementptr inbounds i32, i32* %7, i64 %indvars.iv.next.1
>   %50 = load i32, i32* %arrayidx.2, align 4, !tbaa !6
>   %arrayidx8.2 = getelementptr inbounds double, double* %8, i64 %indvars.iv.next.1
>   %51 = bitcast double* %arrayidx8.2 to i64*
>   %52 = load i64, i64* %51, align 8, !tbaa !2
>   %conv.i.2 = sext i32 %50 to i64
>   %add.ptr.i.i.2 = getelementptr inbounds double, double* %9, i64 %conv.i.2
>   %53 = bitcast double* %add.ptr.i.i.2 to i64*
>   store i64 %52, i64* %53, align 8, !tbaa !2
>   %arrayidx10.2 = getelementptr inbounds double, double* %10, i64 %indvars.iv.next.1
>   %54 = bitcast double* %arrayidx10.2 to i64*
>   %55 = load i64, i64* %54, align 8, !tbaa !2
>   %add.ptr.i.i40.2 = getelementptr inbounds double, double* %11, i64 %conv.i.2
>   %56 = bitcast double* %add.ptr.i.i40.2 to i64*
>   store i64 %55, i64* %56, align 8, !tbaa !2
>   %arrayidx13.2 = getelementptr inbounds double, double* %12, i64 %indvars.iv.next.1
>   %57 = bitcast double* %arrayidx13.2 to i64*
>   %58 = load i64, i64* %57, align 8, !tbaa !2
>   %add.ptr.i.i37.2 = getelementptr inbounds double, double* %13, i64 %conv.i.2
>   %59 = bitcast double* %add.ptr.i.i37.2 to i64*
>   store i64 %58, i64* %59, align 8, !tbaa !2
>   %indvars.iv.next.2 = add nsw i64 %indvars.iv, 3
>   %arrayidx.3 = getelementptr inbounds i32, i32* %7, i64 %indvars.iv.next.2
>   %60 = load i32, i32* %arrayidx.3, align 4, !tbaa !6
>   %arrayidx8.3 = getelementptr inbounds double, double* %8, i64 %indvars.iv.next.2
>   %61 = bitcast double* %arrayidx8.3 to i64*
>   %62 = load i64, i64* %61, align 8, !tbaa !2
>   %conv.i.3 = sext i32 %60 to i64
>   %add.ptr.i.i.3 = getelementptr inbounds double, double* %9, i64 %conv.i.3
>   %63 = bitcast double* %add.ptr.i.i.3 to i64*
>   store i64 %62, i64* %63, align 8, !tbaa !2
>   %arrayidx10.3 = getelementptr inbounds double, double* %10, i64 %indvars.iv.next.2
>   %64 = bitcast double* %arrayidx10.3 to i64*
>   %65 = load i64, i64* %64, align 8, !tbaa !2
>   %add.ptr.i.i40.3 = getelementptr inbounds double, double* %11, i64 %conv.i.3
>   %66 = bitcast double* %add.ptr.i.i40.3 to i64*
>   store i64 %65, i64* %66, align 8, !tbaa !2
>   %arrayidx13.3 = getelementptr inbounds double, double* %12, i64 %indvars.iv.next.2
>   %67 = bitcast double* %arrayidx13.3 to i64*
>   %68 = load i64, i64* %67, align 8, !tbaa !2
>   %add.ptr.i.i37.3 = getelementptr inbounds double, double* %13, i64 %conv.i.3
>   %69 = bitcast double* %add.ptr.i.i37.3 to i64*
>   store i64 %68, i64* %69, align 8, !tbaa !2
>   %indvars.iv.next.3 = add nsw i64 %indvars.iv, 4
>   %lftr.wideiv.3 = trunc i64 %indvars.iv.next.3 to i32
>   %exitcond.not.3 = icmp eq i32 %16, %lftr.wideiv.3
>   br i1 %exitcond.not.3, label %omp.loop.exit, label %omp.inner.for.body
> 
> omp.loop.exit:                                    ; preds = %omp.inner.for.body.prol.loopexit, %omp.inner.for.body, %omp.precond.then
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %4)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #7
>   br label %omp.precond.end
14478c11861
< 98:                                               ; preds = %95
---
> omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
14480,14486d11862
< 
< 99:                                               ; preds = %95, %8
<   %100 = landingpad { i8*, i32 }
<           catch i8* null
<   %101 = extractvalue { i8*, i32 } %100, 0
<   call void @__clang_call_terminate(i8* %101) #29
<   unreachable
14490,14591c11866,12010
< define internal void @.omp_outlined..55(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, i64 %2, double** nocapture nonnull readonly align 8 dereferenceable(8) %3, double** nocapture nonnull readonly align 8 dereferenceable(8) %4, double** nocapture nonnull readonly align 8 dereferenceable(8) %5, double** nocapture nonnull readonly align 8 dereferenceable(8) %6, double** nocapture nonnull readonly align 8 dereferenceable(8) %7, double** nocapture nonnull readonly align 8 dereferenceable(8) %8, i64 %9) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %11 = alloca i32, align 4
<   %12 = alloca i32, align 4
<   %13 = alloca i32, align 4
<   %14 = alloca i32, align 4
<   %15 = trunc i64 %2 to i32
<   %16 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %16)
<           to label %17 unwind label %74
< 
< 17:                                               ; preds = %10
<   %18 = add nsw i32 %15, -1
<   %19 = icmp sgt i32 %15, 0
<   br i1 %19, label %22, label %20
< 
< 20:                                               ; preds = %17
<   %21 = load i32, i32* %0, align 4, !tbaa !12
<   br label %70
< 
< 22:                                               ; preds = %17
<   %23 = bitcast i32* %11 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %23) #10
<   store i32 0, i32* %11, align 4, !tbaa !12
<   %24 = bitcast i32* %12 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #10
<   store i32 %18, i32* %12, align 4, !tbaa !12
<   %25 = bitcast i32* %13 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %25) #10
<   store i32 1, i32* %13, align 4, !tbaa !12
<   %26 = bitcast i32* %14 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %26) #10
<   store i32 0, i32* %14, align 4, !tbaa !12
<   %27 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %27, i32 34, i32* nonnull %14, i32* nonnull %11, i32* nonnull %12, i32* nonnull %13, i32 1, i32 1) #10
<   %28 = load i32, i32* %12, align 4, !tbaa !12
<   %29 = icmp slt i32 %28, %15
<   %30 = select i1 %29, i32 %28, i32 %18
<   store i32 %30, i32* %12, align 4, !tbaa !12
<   %31 = load i32, i32* %11, align 4, !tbaa !12
<   %32 = icmp sgt i32 %31, %30
<   br i1 %32, label %69, label %33
< 
< 33:                                               ; preds = %22
<   %34 = load double*, double** %4, align 8, !tbaa !6
<   %35 = load double*, double** %5, align 8, !tbaa !6
<   %36 = load double*, double** %6, align 8, !tbaa !6
<   %37 = load double*, double** %7, align 8, !tbaa !6
<   %38 = load double*, double** %8, align 8, !tbaa !6
<   %39 = load double*, double** %3, align 8, !tbaa !6
<   %40 = bitcast i64 %9 to double
<   %41 = sext i32 %31 to i64
<   %42 = add i32 %30, 1
<   br label %43
< 
< 43:                                               ; preds = %33, %65
<   %44 = phi i64 [ %41, %33 ], [ %66, %65 ]
<   %45 = getelementptr inbounds double, double* %34, i64 %44
<   %46 = load double, double* %45, align 8, !tbaa !2
<   %47 = getelementptr inbounds double, double* %35, i64 %44
<   %48 = load double, double* %47, align 8, !tbaa !2
<   %49 = fmul double %48, 5.000000e-01
<   %50 = getelementptr inbounds double, double* %36, i64 %44
<   %51 = load double, double* %50, align 8, !tbaa !2
<   %52 = getelementptr inbounds double, double* %37, i64 %44
<   %53 = load double, double* %52, align 8, !tbaa !2
<   %54 = fadd double %51, %53
<   %55 = fmul double %49, %54
<   %56 = fsub double %46, %55
<   %57 = getelementptr inbounds double, double* %38, i64 %44
<   %58 = load double, double* %57, align 8, !tbaa !2
<   %59 = fmul double %58, 5.000000e-01
<   %60 = fadd double %56, %59
<   %61 = getelementptr inbounds double, double* %39, i64 %44
<   store double %60, double* %61, align 8, !tbaa !2
<   %62 = fcmp olt double %60, %40
<   br i1 %62, label %63, label %65
< 
< 63:                                               ; preds = %43
<   %64 = bitcast double* %61 to i64*
<   store i64 %9, i64* %64, align 8, !tbaa !2
<   br label %65
< 
< 65:                                               ; preds = %63, %43
<   %66 = add nsw i64 %44, 1
<   %67 = trunc i64 %66 to i32
<   %68 = icmp eq i32 %42, %67
<   br i1 %68, label %69, label %43
< 
< 69:                                               ; preds = %65, %22
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %27)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %26) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %23) #10
<   br label %70
< 
< 70:                                               ; preds = %20, %69
<   %71 = phi i32 [ %21, %20 ], [ %27, %69 ]
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %71)
<   %72 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %72)
<           to label %73 unwind label %74
---
> define internal void @.omp_outlined..37(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i64 %length, double** nocapture nonnull readonly align 8 dereferenceable(8) %e_new, double** nocapture nonnull readonly align 8 dereferenceable(8) %e_old, double** nocapture nonnull readonly align 8 dereferenceable(8) %delvc, double** nocapture nonnull readonly align 8 dereferenceable(8) %p_old, double** nocapture nonnull readonly align 8 dereferenceable(8) %q_old, double** nocapture nonnull readonly align 8 dereferenceable(8) %work, i64 %emin) #6 {
> entry:
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %length.addr.sroa.0.0.extract.trunc = trunc i64 %length to i32
>   %sub3 = add nsw i32 %length.addr.sroa.0.0.extract.trunc, -1
>   %cmp = icmp sgt i32 %length.addr.sroa.0.0.extract.trunc, 0
>   br i1 %cmp, label %omp.precond.then, label %omp.precond.end
> 
> omp.precond.then:                                 ; preds = %entry
>   %0 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %1 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #7
>   store i32 %sub3, i32* %.omp.ub, align 4, !tbaa !6
>   %2 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %3 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   %4 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %4, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %5 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp5.not = icmp slt i32 %5, %length.addr.sroa.0.0.extract.trunc
>   %cond = select i1 %cmp5.not, i32 %5, i32 %sub3
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %6 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp6.not48 = icmp sgt i32 %6, %cond
>   br i1 %cmp6.not48, label %omp.loop.exit, label %omp.inner.for.body.lr.ph
> 
> omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
>   %7 = load double*, double** %e_old, align 8, !tbaa !41
>   %8 = load double*, double** %delvc, align 8, !tbaa !41
>   %9 = load double*, double** %p_old, align 8, !tbaa !41
>   %10 = load double*, double** %q_old, align 8, !tbaa !41
>   %11 = load double*, double** %work, align 8, !tbaa !41
>   %12 = load double*, double** %e_new, align 8, !tbaa !41
>   %13 = bitcast i64 %emin to double
>   %14 = sext i32 %6 to i64
>   %15 = icmp sgt i32 %cond, %6
>   %smax = select i1 %15, i32 %cond, i32 %6
>   %16 = add i32 %smax, 1
>   %17 = sub i32 %16, %6
>   %xtraiter = and i32 %17, 1
>   %lcmp.mod.not = icmp eq i32 %xtraiter, 0
>   br i1 %lcmp.mod.not, label %omp.inner.for.body.prol.loopexit, label %omp.inner.for.body.prol
> 
> omp.inner.for.body.prol:                          ; preds = %omp.inner.for.body.lr.ph
>   %arrayidx.prol = getelementptr inbounds double, double* %7, i64 %14
>   %18 = load double, double* %arrayidx.prol, align 8, !tbaa !2
>   %arrayidx8.prol = getelementptr inbounds double, double* %8, i64 %14
>   %19 = load double, double* %arrayidx8.prol, align 8, !tbaa !2
>   %mul9.prol = fmul double %19, 5.000000e-01
>   %arrayidx11.prol = getelementptr inbounds double, double* %9, i64 %14
>   %20 = load double, double* %arrayidx11.prol, align 8, !tbaa !2
>   %arrayidx13.prol = getelementptr inbounds double, double* %10, i64 %14
>   %21 = load double, double* %arrayidx13.prol, align 8, !tbaa !2
>   %add14.prol = fadd double %20, %21
>   %mul15.prol = fmul double %mul9.prol, %add14.prol
>   %sub16.prol = fsub double %18, %mul15.prol
>   %arrayidx18.prol = getelementptr inbounds double, double* %11, i64 %14
>   %22 = load double, double* %arrayidx18.prol, align 8, !tbaa !2
>   %mul19.prol = fmul double %22, 5.000000e-01
>   %add20.prol = fadd double %sub16.prol, %mul19.prol
>   %arrayidx22.prol = getelementptr inbounds double, double* %12, i64 %14
>   store double %add20.prol, double* %arrayidx22.prol, align 8, !tbaa !2
>   %cmp25.prol = fcmp olt double %add20.prol, %13
>   br i1 %cmp25.prol, label %if.then.prol, label %omp.inner.for.inc.prol
> 
> if.then.prol:                                     ; preds = %omp.inner.for.body.prol
>   %23 = bitcast double* %arrayidx22.prol to i64*
>   store i64 %emin, i64* %23, align 8, !tbaa !2
>   br label %omp.inner.for.inc.prol
> 
> omp.inner.for.inc.prol:                           ; preds = %if.then.prol, %omp.inner.for.body.prol
>   %indvars.iv.next.prol = add nsw i64 %14, 1
>   br label %omp.inner.for.body.prol.loopexit
> 
> omp.inner.for.body.prol.loopexit:                 ; preds = %omp.inner.for.body.lr.ph, %omp.inner.for.inc.prol
>   %indvars.iv.unr = phi i64 [ %14, %omp.inner.for.body.lr.ph ], [ %indvars.iv.next.prol, %omp.inner.for.inc.prol ]
>   %.not = icmp slt i32 %6, %cond
>   br i1 %.not, label %omp.inner.for.body, label %omp.loop.exit
> 
> omp.inner.for.body:                               ; preds = %omp.inner.for.body.prol.loopexit, %omp.inner.for.inc.1
>   %indvars.iv = phi i64 [ %indvars.iv.next.1, %omp.inner.for.inc.1 ], [ %indvars.iv.unr, %omp.inner.for.body.prol.loopexit ]
>   %arrayidx = getelementptr inbounds double, double* %7, i64 %indvars.iv
>   %24 = load double, double* %arrayidx, align 8, !tbaa !2
>   %arrayidx8 = getelementptr inbounds double, double* %8, i64 %indvars.iv
>   %25 = load double, double* %arrayidx8, align 8, !tbaa !2
>   %mul9 = fmul double %25, 5.000000e-01
>   %arrayidx11 = getelementptr inbounds double, double* %9, i64 %indvars.iv
>   %26 = load double, double* %arrayidx11, align 8, !tbaa !2
>   %arrayidx13 = getelementptr inbounds double, double* %10, i64 %indvars.iv
>   %27 = load double, double* %arrayidx13, align 8, !tbaa !2
>   %add14 = fadd double %26, %27
>   %mul15 = fmul double %mul9, %add14
>   %sub16 = fsub double %24, %mul15
>   %arrayidx18 = getelementptr inbounds double, double* %11, i64 %indvars.iv
>   %28 = load double, double* %arrayidx18, align 8, !tbaa !2
>   %mul19 = fmul double %28, 5.000000e-01
>   %add20 = fadd double %sub16, %mul19
>   %arrayidx22 = getelementptr inbounds double, double* %12, i64 %indvars.iv
>   store double %add20, double* %arrayidx22, align 8, !tbaa !2
>   %cmp25 = fcmp olt double %add20, %13
>   br i1 %cmp25, label %if.then, label %omp.inner.for.inc
> 
> if.then:                                          ; preds = %omp.inner.for.body
>   %29 = bitcast double* %arrayidx22 to i64*
>   store i64 %emin, i64* %29, align 8, !tbaa !2
>   br label %omp.inner.for.inc
> 
> omp.inner.for.inc:                                ; preds = %if.then, %omp.inner.for.body
>   %indvars.iv.next = add nsw i64 %indvars.iv, 1
>   %arrayidx.1 = getelementptr inbounds double, double* %7, i64 %indvars.iv.next
>   %30 = load double, double* %arrayidx.1, align 8, !tbaa !2
>   %arrayidx8.1 = getelementptr inbounds double, double* %8, i64 %indvars.iv.next
>   %31 = load double, double* %arrayidx8.1, align 8, !tbaa !2
>   %mul9.1 = fmul double %31, 5.000000e-01
>   %arrayidx11.1 = getelementptr inbounds double, double* %9, i64 %indvars.iv.next
>   %32 = load double, double* %arrayidx11.1, align 8, !tbaa !2
>   %arrayidx13.1 = getelementptr inbounds double, double* %10, i64 %indvars.iv.next
>   %33 = load double, double* %arrayidx13.1, align 8, !tbaa !2
>   %add14.1 = fadd double %32, %33
>   %mul15.1 = fmul double %mul9.1, %add14.1
>   %sub16.1 = fsub double %30, %mul15.1
>   %arrayidx18.1 = getelementptr inbounds double, double* %11, i64 %indvars.iv.next
>   %34 = load double, double* %arrayidx18.1, align 8, !tbaa !2
>   %mul19.1 = fmul double %34, 5.000000e-01
>   %add20.1 = fadd double %sub16.1, %mul19.1
>   %arrayidx22.1 = getelementptr inbounds double, double* %12, i64 %indvars.iv.next
>   store double %add20.1, double* %arrayidx22.1, align 8, !tbaa !2
>   %cmp25.1 = fcmp olt double %add20.1, %13
>   br i1 %cmp25.1, label %if.then.1, label %omp.inner.for.inc.1
> 
> omp.loop.exit:                                    ; preds = %omp.inner.for.body.prol.loopexit, %omp.inner.for.inc.1, %omp.precond.then
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %4)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #7
>   br label %omp.precond.end
14593c12012
< 73:                                               ; preds = %70
---
> omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
14596,14601c12015,12024
< 74:                                               ; preds = %70, %10
<   %75 = landingpad { i8*, i32 }
<           catch i8* null
<   %76 = extractvalue { i8*, i32 } %75, 0
<   call void @__clang_call_terminate(i8* %76) #29
<   unreachable
---
> if.then.1:                                        ; preds = %omp.inner.for.inc
>   %35 = bitcast double* %arrayidx22.1 to i64*
>   store i64 %emin, i64* %35, align 8, !tbaa !2
>   br label %omp.inner.for.inc.1
> 
> omp.inner.for.inc.1:                              ; preds = %if.then.1, %omp.inner.for.inc
>   %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
>   %lftr.wideiv.1 = trunc i64 %indvars.iv.next.1 to i32
>   %exitcond.not.1 = icmp eq i32 %16, %lftr.wideiv.1
>   br i1 %exitcond.not.1, label %omp.loop.exit, label %omp.inner.for.body
14604,14705c12027,12064
< ; Function Attrs: inlinehint norecurse uwtable
< define internal fastcc void @_ZL20CalcPressureForElemsPdS_S_S_S_S_dddiPi(double* %0, double* %1, double* %2, double* %3, double* %4, double* %5, double %6, double %7, double %8, i32 %9, i32* %10) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %12 = alloca %"class.std::allocator.30", align 1
<   %13 = alloca %"class.std::allocator.30", align 1
<   %14 = alloca %"class.std::allocator.30", align 1
<   %15 = alloca %"class.std::allocator.30", align 1
<   %16 = alloca double*, align 8
<   %17 = alloca double*, align 8
<   %18 = alloca double*, align 8
<   %19 = alloca double*, align 8
<   %20 = alloca double*, align 8
<   %21 = alloca double*, align 8
<   %22 = alloca i32*, align 8
<   %23 = alloca %"class.std::basic_string", align 8
<   %24 = alloca %"class.std::allocator.30", align 1
<   %25 = alloca %"class.std::vector.15", align 8
<   %26 = alloca %"class.std::basic_string", align 8
<   %27 = alloca %"class.std::allocator.30", align 1
<   %28 = alloca %"class.std::vector.15", align 8
<   store double* %0, double** %16, align 8, !tbaa !6
<   store double* %1, double** %17, align 8, !tbaa !6
<   store double* %2, double** %18, align 8, !tbaa !6
<   store double* %3, double** %19, align 8, !tbaa !6
<   store double* %4, double** %20, align 8, !tbaa !6
<   store double* %5, double** %21, align 8, !tbaa !6
<   store i32* %10, i32** %22, align 8, !tbaa !6
<   %29 = sitofp i32 %9 to float
<   %30 = tail call noalias nonnull i8* @_Znwm(i64 4) #26
<   %31 = bitcast i8* %30 to float*
<   store float %29, float* %31, align 4
<   %32 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcPressureForElemsPdS_S_S_S_S_dddiPiE12apolloRegion, align 8, !tbaa !6
<   %33 = icmp eq %"class.Apollo::Region"* %32, null
<   br i1 %33, label %34, label %89
< 
< 34:                                               ; preds = %11
<   %35 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %36 unwind label %62
< 
< 36:                                               ; preds = %34
<   %37 = bitcast %"class.std::basic_string"* %23 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #10
<   %38 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %24, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %38) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %23, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %24)
<           to label %39 unwind label %64
< 
< 39:                                               ; preds = %36
<   %40 = bitcast i8* %35 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %40, i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.64, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %23)
<           to label %41 unwind label %66
< 
< 41:                                               ; preds = %39
<   store i8* %35, i8** bitcast (%"class.Apollo::Region"** @_ZZL20CalcPressureForElemsPdS_S_S_S_S_dddiPiE12apolloRegion to i8**), align 8, !tbaa !6
<   %42 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %23, i64 0, i32 0, i32 0
<   %43 = load i8*, i8** %42, align 8, !tbaa !8
<   %44 = getelementptr inbounds i8, i8* %43, i64 -24
<   %45 = bitcast i8* %44 to %"struct.std::basic_string<char>::_Rep"*
<   %46 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %15, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %46) #10
<   %47 = icmp eq i8* %44, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %47, label %60, label %48, !prof !11
< 
< 48:                                               ; preds = %41
<   %49 = getelementptr inbounds i8, i8* %43, i64 -8
<   %50 = bitcast i8* %49 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %51, label %53
< 
< 51:                                               ; preds = %48
<   %52 = atomicrmw volatile add i32* %50, i32 -1 acq_rel
<   br label %56
< 
< 53:                                               ; preds = %48
<   %54 = load i32, i32* %50, align 4, !tbaa !12
<   %55 = add nsw i32 %54, -1
<   store i32 %55, i32* %50, align 4, !tbaa !12
<   br label %56
< 
< 56:                                               ; preds = %53, %51
<   %57 = phi i32 [ %52, %51 ], [ %54, %53 ]
<   %58 = icmp slt i32 %57, 1
<   br i1 %58, label %59, label %60
< 
< 59:                                               ; preds = %56
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %45, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %15) #10
<   br label %60
< 
< 60:                                               ; preds = %41, %56, %59
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %46) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %38) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #10
<   %61 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcPressureForElemsPdS_S_S_S_S_dddiPiE12apolloRegion, align 8, !tbaa !6
<   br label %89
< 
< 62:                                               ; preds = %89, %182, %205, %202, %123, %113, %110, %34
<   %63 = landingpad { i8*, i32 }
<           cleanup
<   br label %221
< 
< 64:                                               ; preds = %36
<   %65 = landingpad { i8*, i32 }
<           cleanup
<   br label %87
---
> ; Function Attrs: inlinehint norecurse nounwind uwtable
> define internal fastcc void @_ZL20CalcPressureForElemsPdS_S_S_S_S_dddiPi(double* %p_new, double* %bvc, double* %pbvc, double* %e_old, double* %compression, double* %vnewc, double %pmin, double %p_cut, double %eosvmax, i32 %length, i32* %regElemList) unnamed_addr #19 {
> entry:
>   %omp_global_thread_num10 = tail call i32 @__kmpc_global_thread_num(%struct.ident_t* nonnull @1)
>   %p_new.addr = alloca double*, align 8
>   %bvc.addr = alloca double*, align 8
>   %pbvc.addr = alloca double*, align 8
>   %e_old.addr = alloca double*, align 8
>   %compression.addr = alloca double*, align 8
>   %vnewc.addr = alloca double*, align 8
>   %regElemList.addr = alloca i32*, align 8
>   store double* %p_new, double** %p_new.addr, align 8, !tbaa !41
>   store double* %bvc, double** %bvc.addr, align 8, !tbaa !41
>   store double* %pbvc, double** %pbvc.addr, align 8, !tbaa !41
>   store double* %e_old, double** %e_old.addr, align 8, !tbaa !41
>   store double* %compression, double** %compression.addr, align 8, !tbaa !41
>   store double* %vnewc, double** %vnewc.addr, align 8, !tbaa !41
>   store i32* %regElemList, i32** %regElemList.addr, align 8, !tbaa !41
>   %length.casted.sroa.0.0.insert.ext = zext i32 %length to i64
>   %0 = load i8*, i8** @.apollo.region.handle.3, align 8
>   %1 = icmp eq i8* %0, null
>   br i1 %1, label %2, label %4
> 
> 2:                                                ; preds = %entry
>   %3 = tail call i8* @__apollo_region_create(i32 1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @6, i64 0, i64 0), i32 2) #7
>   store i8* %3, i8** @.apollo.region.handle.3, align 8
>   br label %4
> 
> 4:                                                ; preds = %entry, %2
>   %5 = phi i8* [ %0, %entry ], [ %3, %2 ]
>   tail call void @__apollo_region_begin(i8* %5) #7
>   %6 = uitofp i32 %length to float
>   tail call void @__apollo_region_set_feature(i8* %5, float %6) #7
>   %7 = tail call i32 @__apollo_region_get_policy(i8* %5) #7
>   switch i32 %7, label %.split [
>     i32 0, label %.split.sink.split
>     i32 1, label %.apollo.case.1
>   ]
14707,14869c12066,12067
< 66:                                               ; preds = %39
<   %67 = landingpad { i8*, i32 }
<           cleanup
<   %68 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %23, i64 0, i32 0, i32 0
<   %69 = load i8*, i8** %68, align 8, !tbaa !8
<   %70 = getelementptr inbounds i8, i8* %69, i64 -24
<   %71 = bitcast i8* %70 to %"struct.std::basic_string<char>::_Rep"*
<   %72 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %14, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %72) #10
<   %73 = icmp eq i8* %70, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %73, label %86, label %74, !prof !11
< 
< 74:                                               ; preds = %66
<   %75 = getelementptr inbounds i8, i8* %69, i64 -8
<   %76 = bitcast i8* %75 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %77, label %79
< 
< 77:                                               ; preds = %74
<   %78 = atomicrmw volatile add i32* %76, i32 -1 acq_rel
<   br label %82
< 
< 79:                                               ; preds = %74
<   %80 = load i32, i32* %76, align 4, !tbaa !12
<   %81 = add nsw i32 %80, -1
<   store i32 %81, i32* %76, align 4, !tbaa !12
<   br label %82
< 
< 82:                                               ; preds = %79, %77
<   %83 = phi i32 [ %78, %77 ], [ %80, %79 ]
<   %84 = icmp slt i32 %83, 1
<   br i1 %84, label %85, label %86
< 
< 85:                                               ; preds = %82
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %71, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %14) #10
<   br label %86
< 
< 86:                                               ; preds = %66, %82, %85
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %72) #10
<   br label %87
< 
< 87:                                               ; preds = %86, %64
<   %88 = phi { i8*, i32 } [ %67, %86 ], [ %65, %64 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %38) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #10
<   call void @_ZdlPv(i8* nonnull %35) #28
<   br label %221
< 
< 89:                                               ; preds = %60, %11
<   %90 = phi %"class.Apollo::Region"* [ %61, %60 ], [ %32, %11 ]
<   %91 = bitcast %"class.std::vector.15"* %25 to i8*
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %91, i8 0, i64 24, i1 false) #10
<   %92 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %93 unwind label %62
< 
< 93:                                               ; preds = %89
<   %94 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %25, i64 0, i32 0, i32 0, i32 0
<   %95 = bitcast %"class.std::vector.15"* %25 to i8**
<   store i8* %92, i8** %95, align 8, !tbaa !14
<   %96 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %25, i64 0, i32 0, i32 0, i32 1
<   %97 = bitcast float** %96 to i8**
<   %98 = getelementptr inbounds i8, i8* %92, i64 4
<   %99 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %25, i64 0, i32 0, i32 0, i32 2
<   %100 = bitcast float** %99 to i8**
<   store i8* %98, i8** %100, align 8, !tbaa !17
<   %101 = bitcast i8* %30 to i32*
<   %102 = bitcast i8* %92 to i32*
<   %103 = load i32, i32* %101, align 4
<   store i32 %103, i32* %102, align 4
<   store i8* %98, i8** %97, align 8, !tbaa !18
<   %104 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %90, %"class.std::vector.15"* nonnull %25)
<           to label %105 unwind label %151
< 
< 105:                                              ; preds = %93
<   %106 = load float*, float** %94, align 8, !tbaa !14
<   %107 = icmp eq float* %106, null
<   br i1 %107, label %110, label %108
< 
< 108:                                              ; preds = %105
<   %109 = bitcast float* %106 to i8*
<   call void @_ZdlPv(i8* nonnull %109) #10
<   br label %110
< 
< 110:                                              ; preds = %105, %108
<   %111 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcPressureForElemsPdS_S_S_S_S_dddiPiE12apolloRegion, align 8, !tbaa !6
<   %112 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %111)
<           to label %113 unwind label %62
< 
< 113:                                              ; preds = %110
<   %114 = icmp eq i32 %112, 1
<   %115 = select i1 %114, i32 1, i32 36
<   %116 = icmp eq i32 %112, 0
<   %117 = select i1 %116, i32 36, i32 %115
<   call void @omp_set_num_threads(i32 %117) #10
<   %118 = zext i32 %9 to i64
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 4, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, double**, double**, double**)* @.omp_outlined..65 to void (i32*, i32*, ...)*), i64 %118, double** nonnull %17, double** nonnull %20, double** nonnull %18)
<   %119 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcPressureForElemsPdS_S_S_S_S_dddiPiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %119)
<           to label %120 unwind label %62
< 
< 120:                                              ; preds = %113
<   store float %29, float* %31, align 4
<   %121 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcPressureForElemsPdS_S_S_S_S_dddiPiE12apolloRegion_0, align 8, !tbaa !6
<   %122 = icmp eq %"class.Apollo::Region"* %121, null
<   br i1 %122, label %123, label %182
< 
< 123:                                              ; preds = %120
<   %124 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %125 unwind label %62
< 
< 125:                                              ; preds = %123
<   %126 = bitcast %"class.std::basic_string"* %26 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %126) #10
<   %127 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %27, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %127) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %26, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %27)
<           to label %128 unwind label %157
< 
< 128:                                              ; preds = %125
<   %129 = bitcast i8* %124 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %129, i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.66, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %26)
<           to label %130 unwind label %159
< 
< 130:                                              ; preds = %128
<   store i8* %124, i8** bitcast (%"class.Apollo::Region"** @_ZZL20CalcPressureForElemsPdS_S_S_S_S_dddiPiE12apolloRegion_0 to i8**), align 8, !tbaa !6
<   %131 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %26, i64 0, i32 0, i32 0
<   %132 = load i8*, i8** %131, align 8, !tbaa !8
<   %133 = getelementptr inbounds i8, i8* %132, i64 -24
<   %134 = bitcast i8* %133 to %"struct.std::basic_string<char>::_Rep"*
<   %135 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %13, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %135) #10
<   %136 = icmp eq i8* %133, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %136, label %149, label %137, !prof !11
< 
< 137:                                              ; preds = %130
<   %138 = getelementptr inbounds i8, i8* %132, i64 -8
<   %139 = bitcast i8* %138 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %140, label %142
< 
< 140:                                              ; preds = %137
<   %141 = atomicrmw volatile add i32* %139, i32 -1 acq_rel
<   br label %145
< 
< 142:                                              ; preds = %137
<   %143 = load i32, i32* %139, align 4, !tbaa !12
<   %144 = add nsw i32 %143, -1
<   store i32 %144, i32* %139, align 4, !tbaa !12
<   br label %145
< 
< 145:                                              ; preds = %142, %140
<   %146 = phi i32 [ %141, %140 ], [ %143, %142 ]
<   %147 = icmp slt i32 %146, 1
<   br i1 %147, label %148, label %149
< 
< 148:                                              ; preds = %145
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %134, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %13) #10
<   br label %149
< 
< 149:                                              ; preds = %130, %145, %148
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %135) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %127) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %126) #10
<   %150 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcPressureForElemsPdS_S_S_S_S_dddiPiE12apolloRegion_0, align 8, !tbaa !6
<   br label %182
---
> .apollo.case.1:                                   ; preds = %4
>   br label %.split.sink.split
14871,14881c12069,12085
< 151:                                              ; preds = %93
<   %152 = landingpad { i8*, i32 }
<           cleanup
<   %153 = load float*, float** %94, align 8, !tbaa !14
<   %154 = icmp eq float* %153, null
<   br i1 %154, label %221, label %155
< 
< 155:                                              ; preds = %151
<   %156 = bitcast float* %153 to i8*
<   call void @_ZdlPv(i8* nonnull %156) #10
<   br label %221
---
> .split.sink.split:                                ; preds = %4, %.apollo.case.1
>   %.sink = phi i32 [ 1, %.apollo.case.1 ], [ 36, %4 ]
>   tail call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num10, i32 %.sink) #7
>   br label %.split
> 
> .split:                                           ; preds = %.split.sink.split, %4
>   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 4, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, double**, double**, double**)* @.omp_outlined..42 to void (i32*, i32*, ...)*), i64 %length.casted.sroa.0.0.insert.ext, double** nonnull %bvc.addr, double** nonnull %compression.addr, double** nonnull %pbvc.addr)
>   %8 = load i8*, i8** @.apollo.region.handle.3, align 8
>   call void @__apollo_region_end(i8* %8) #7
>   %9 = load i8*, i8** @.apollo.region.handle.14, align 8
>   %10 = icmp eq i8* %9, null
>   br i1 %10, label %11, label %13
> 
> 11:                                               ; preds = %.split
>   %12 = call i8* @__apollo_region_create(i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @17, i64 0, i64 0), i32 2) #7
>   store i8* %12, i8** @.apollo.region.handle.14, align 8
>   br label %13
14883,14886c12087,12095
< 157:                                              ; preds = %125
<   %158 = landingpad { i8*, i32 }
<           cleanup
<   br label %180
---
> 13:                                               ; preds = %.split, %11
>   %14 = phi i8* [ %9, %.split ], [ %12, %11 ]
>   call void @__apollo_region_begin(i8* %14) #7
>   call void @__apollo_region_set_feature(i8* %14, float %6) #7
>   %15 = call i32 @__apollo_region_get_policy(i8* %14) #7
>   switch i32 %15, label %.split9 [
>     i32 0, label %.split9.sink.split
>     i32 1, label %.apollo.case.112
>   ]
14888,14986c12097,12098
< 159:                                              ; preds = %128
<   %160 = landingpad { i8*, i32 }
<           cleanup
<   %161 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %26, i64 0, i32 0, i32 0
<   %162 = load i8*, i8** %161, align 8, !tbaa !8
<   %163 = getelementptr inbounds i8, i8* %162, i64 -24
<   %164 = bitcast i8* %163 to %"struct.std::basic_string<char>::_Rep"*
<   %165 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %12, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %165) #10
<   %166 = icmp eq i8* %163, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %166, label %179, label %167, !prof !11
< 
< 167:                                              ; preds = %159
<   %168 = getelementptr inbounds i8, i8* %162, i64 -8
<   %169 = bitcast i8* %168 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %170, label %172
< 
< 170:                                              ; preds = %167
<   %171 = atomicrmw volatile add i32* %169, i32 -1 acq_rel
<   br label %175
< 
< 172:                                              ; preds = %167
<   %173 = load i32, i32* %169, align 4, !tbaa !12
<   %174 = add nsw i32 %173, -1
<   store i32 %174, i32* %169, align 4, !tbaa !12
<   br label %175
< 
< 175:                                              ; preds = %172, %170
<   %176 = phi i32 [ %171, %170 ], [ %173, %172 ]
<   %177 = icmp slt i32 %176, 1
<   br i1 %177, label %178, label %179
< 
< 178:                                              ; preds = %175
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %164, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %12) #10
<   br label %179
< 
< 179:                                              ; preds = %159, %175, %178
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %165) #10
<   br label %180
< 
< 180:                                              ; preds = %179, %157
<   %181 = phi { i8*, i32 } [ %160, %179 ], [ %158, %157 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %127) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %126) #10
<   call void @_ZdlPv(i8* nonnull %124) #28
<   br label %221
< 
< 182:                                              ; preds = %149, %120
<   %183 = phi %"class.Apollo::Region"* [ %150, %149 ], [ %121, %120 ]
<   %184 = bitcast %"class.std::vector.15"* %28 to i8*
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %184, i8 0, i64 24, i1 false) #10
<   %185 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %186 unwind label %62
< 
< 186:                                              ; preds = %182
<   %187 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %28, i64 0, i32 0, i32 0, i32 0
<   %188 = bitcast %"class.std::vector.15"* %28 to i8**
<   store i8* %185, i8** %188, align 8, !tbaa !14
<   %189 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %28, i64 0, i32 0, i32 0, i32 1
<   %190 = bitcast float** %189 to i8**
<   %191 = getelementptr inbounds i8, i8* %185, i64 4
<   %192 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %28, i64 0, i32 0, i32 0, i32 2
<   %193 = bitcast float** %192 to i8**
<   store i8* %191, i8** %193, align 8, !tbaa !17
<   %194 = bitcast i8* %185 to i32*
<   %195 = load i32, i32* %101, align 4
<   store i32 %195, i32* %194, align 4
<   store i8* %191, i8** %190, align 8, !tbaa !18
<   %196 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %183, %"class.std::vector.15"* nonnull %28)
<           to label %197 unwind label %215
< 
< 197:                                              ; preds = %186
<   %198 = load float*, float** %187, align 8, !tbaa !14
<   %199 = icmp eq float* %198, null
<   br i1 %199, label %202, label %200
< 
< 200:                                              ; preds = %197
<   %201 = bitcast float* %198 to i8*
<   call void @_ZdlPv(i8* nonnull %201) #10
<   br label %202
< 
< 202:                                              ; preds = %197, %200
<   %203 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcPressureForElemsPdS_S_S_S_S_dddiPiE12apolloRegion_0, align 8, !tbaa !6
<   %204 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %203)
<           to label %205 unwind label %62
< 
< 205:                                              ; preds = %202
<   %206 = icmp eq i32 %204, 1
<   %207 = select i1 %206, i32 1, i32 36
<   %208 = icmp eq i32 %204, 0
<   %209 = select i1 %208, i32 36, i32 %207
<   call void @omp_set_num_threads(i32 %209) #10
<   %210 = bitcast double %7 to i64
<   %211 = bitcast double %8 to i64
<   %212 = bitcast double %6 to i64
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 9, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, i32**, double**, double**, double**, i64, double**, i64, i64)* @.omp_outlined..67 to void (i32*, i32*, ...)*), i64 %118, i32** nonnull %22, double** nonnull %16, double** nonnull %17, double** nonnull %19, i64 %210, double** nonnull %21, i64 %211, i64 %212)
<   %213 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcPressureForElemsPdS_S_S_S_S_dddiPiE12apolloRegion_0, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %213)
<           to label %214 unwind label %62
---
> .apollo.case.112:                                 ; preds = %13
>   br label %.split9.sink.split
14988,14989c12100,12111
< 214:                                              ; preds = %205
<   call void @_ZdlPv(i8* nonnull %30) #10
---
> .split9.sink.split:                               ; preds = %13, %.apollo.case.112
>   %.sink13 = phi i32 [ 1, %.apollo.case.112 ], [ 36, %13 ]
>   call void @__kmpc_push_num_threads(%struct.ident_t* nonnull @1, i32 %omp_global_thread_num10, i32 %.sink13) #7
>   br label %.split9
> 
> .split9:                                          ; preds = %.split9.sink.split, %13
>   %16 = bitcast double %pmin to i64
>   %17 = bitcast double %eosvmax to i64
>   %18 = bitcast double %p_cut to i64
>   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @1, i32 9, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, i32**, double**, double**, double**, i64, double**, i64, i64)* @.omp_outlined..43 to void (i32*, i32*, ...)*), i64 %length.casted.sroa.0.0.insert.ext, i32** nonnull %regElemList.addr, double** nonnull %p_new.addr, double** nonnull %bvc.addr, double** nonnull %e_old.addr, i64 %18, double** nonnull %vnewc.addr, i64 %17, i64 %16)
>   %19 = load i8*, i8** @.apollo.region.handle.14, align 8
>   call void @__apollo_region_end(i8* %19) #7
14991,15007d12112
< 
< 215:                                              ; preds = %186
<   %216 = landingpad { i8*, i32 }
<           cleanup
<   %217 = load float*, float** %187, align 8, !tbaa !14
<   %218 = icmp eq float* %217, null
<   br i1 %218, label %221, label %219
< 
< 219:                                              ; preds = %215
<   %220 = bitcast float* %217 to i8*
<   call void @_ZdlPv(i8* nonnull %220) #10
<   br label %221
< 
< 221:                                              ; preds = %219, %215, %155, %151, %180, %87, %62
<   %222 = phi { i8*, i32 } [ %63, %62 ], [ %181, %180 ], [ %88, %87 ], [ %152, %151 ], [ %152, %155 ], [ %216, %215 ], [ %216, %219 ]
<   call void @_ZdlPv(i8* nonnull %30) #10
<   resume { i8*, i32 } %222
15011,15167c12116,12257
< define internal void @.omp_outlined..57(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, i64 %2, double** nocapture nonnull readonly align 8 dereferenceable(8) %3, double** nocapture nonnull readonly align 8 dereferenceable(8) %4, double** nocapture nonnull readonly align 8 dereferenceable(8) %5, double** nocapture nonnull readonly align 8 dereferenceable(8) %6, double** nocapture nonnull readonly align 8 dereferenceable(8) %7, double** nocapture nonnull readonly align 8 dereferenceable(8) %8, double** nocapture nonnull readonly align 8 dereferenceable(8) %9, i64 %10, double** nocapture nonnull readonly align 8 dereferenceable(8) %11, double** nocapture nonnull readonly align 8 dereferenceable(8) %12, double** nocapture nonnull readonly align 8 dereferenceable(8) %13, double** nocapture nonnull readonly align 8 dereferenceable(8) %14) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %16 = alloca i32, align 4
<   %17 = alloca i32, align 4
<   %18 = alloca i32, align 4
<   %19 = alloca i32, align 4
<   %20 = trunc i64 %2 to i32
<   %21 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_0, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %21)
<           to label %22 unwind label %130
< 
< 22:                                               ; preds = %15
<   %23 = add nsw i32 %20, -1
<   %24 = icmp sgt i32 %20, 0
<   br i1 %24, label %27, label %25
< 
< 25:                                               ; preds = %22
<   %26 = load i32, i32* %0, align 4, !tbaa !12
<   br label %126
< 
< 27:                                               ; preds = %22
<   %28 = bitcast i32* %16 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #10
<   store i32 0, i32* %16, align 4, !tbaa !12
<   %29 = bitcast i32* %17 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %29) #10
<   store i32 %23, i32* %17, align 4, !tbaa !12
<   %30 = bitcast i32* %18 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30) #10
<   store i32 1, i32* %18, align 4, !tbaa !12
<   %31 = bitcast i32* %19 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %31) #10
<   store i32 0, i32* %19, align 4, !tbaa !12
<   %32 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %32, i32 34, i32* nonnull %19, i32* nonnull %16, i32* nonnull %17, i32* nonnull %18, i32 1, i32 1) #10
<   %33 = load i32, i32* %17, align 4, !tbaa !12
<   %34 = icmp slt i32 %33, %20
<   %35 = select i1 %34, i32 %33, i32 %23
<   store i32 %35, i32* %17, align 4, !tbaa !12
<   %36 = load i32, i32* %16, align 4, !tbaa !12
<   %37 = icmp sgt i32 %36, %35
<   br i1 %37, label %125, label %38
< 
< 38:                                               ; preds = %27
<   %39 = bitcast i64 %10 to double
<   %40 = sext i32 %36 to i64
<   %41 = load double*, double** %4, align 8, !tbaa !6
<   br label %42
< 
< 42:                                               ; preds = %38, %92
<   %43 = phi i32 [ %35, %38 ], [ %94, %92 ]
<   %44 = phi double* [ %41, %38 ], [ %95, %92 ]
<   %45 = phi i32 [ %35, %38 ], [ %96, %92 ]
<   %46 = phi double* [ %41, %38 ], [ %97, %92 ]
<   %47 = phi i64 [ %40, %38 ], [ %122, %92 ]
<   %48 = load double*, double** %3, align 8, !tbaa !6
<   %49 = getelementptr inbounds double, double* %48, i64 %47
<   %50 = load double, double* %49, align 8, !tbaa !2
<   %51 = fadd double %50, 1.000000e+00
<   %52 = fdiv double 1.000000e+00, %51
<   %53 = getelementptr inbounds double, double* %46, i64 %47
<   %54 = load double, double* %53, align 8, !tbaa !2
<   %55 = fcmp ogt double %54, 0.000000e+00
<   br i1 %55, label %92, label %56
< 
< 56:                                               ; preds = %42
<   %57 = load double*, double** %6, align 8, !tbaa !6
<   %58 = getelementptr inbounds double, double* %57, i64 %47
<   %59 = load double, double* %58, align 8, !tbaa !2
<   %60 = load double*, double** %7, align 8, !tbaa !6
<   %61 = getelementptr inbounds double, double* %60, i64 %47
<   %62 = load double, double* %61, align 8, !tbaa !2
<   %63 = fmul double %59, %62
<   %64 = fmul double %52, %52
<   %65 = load double*, double** %8, align 8, !tbaa !6
<   %66 = getelementptr inbounds double, double* %65, i64 %47
<   %67 = load double, double* %66, align 8, !tbaa !2
<   %68 = fmul double %64, %67
<   %69 = load double*, double** %9, align 8, !tbaa !6
<   %70 = getelementptr inbounds double, double* %69, i64 %47
<   %71 = load double, double* %70, align 8, !tbaa !2
<   %72 = fmul double %68, %71
<   %73 = fadd double %63, %72
<   %74 = fdiv double %73, %39
<   %75 = fcmp ugt double %74, 0x3842E7922A37D1A0
<   br i1 %75, label %76, label %80
< 
< 76:                                               ; preds = %56
<   %77 = call double @sqrt(double %74) #10
<   %78 = load double*, double** %4, align 8, !tbaa !6
<   %79 = load i32, i32* %17, align 4, !tbaa !12
<   br label %80
< 
< 80:                                               ; preds = %56, %76
<   %81 = phi i32 [ %79, %76 ], [ %43, %56 ]
<   %82 = phi double* [ %78, %76 ], [ %44, %56 ]
<   %83 = phi double [ %77, %76 ], [ 0x3C18987CEE7F439D, %56 ]
<   %84 = load double*, double** %11, align 8, !tbaa !6
<   %85 = getelementptr inbounds double, double* %84, i64 %47
<   %86 = load double, double* %85, align 8, !tbaa !2
<   %87 = fmul double %83, %86
<   %88 = load double*, double** %12, align 8, !tbaa !6
<   %89 = getelementptr inbounds double, double* %88, i64 %47
<   %90 = load double, double* %89, align 8, !tbaa !2
<   %91 = fadd double %87, %90
<   br label %92
< 
< 92:                                               ; preds = %42, %80
<   %93 = phi double [ %91, %80 ], [ 0.000000e+00, %42 ]
<   %94 = phi i32 [ %81, %80 ], [ %43, %42 ]
<   %95 = phi double* [ %82, %80 ], [ %44, %42 ]
<   %96 = phi i32 [ %81, %80 ], [ %45, %42 ]
<   %97 = phi double* [ %82, %80 ], [ %46, %42 ]
<   %98 = load double*, double** %5, align 8, !tbaa !6
<   %99 = getelementptr inbounds double, double* %98, i64 %47
<   store double %93, double* %99, align 8, !tbaa !2
<   %100 = load double*, double** %7, align 8, !tbaa !6
<   %101 = getelementptr inbounds double, double* %100, i64 %47
<   %102 = load double, double* %101, align 8, !tbaa !2
<   %103 = getelementptr inbounds double, double* %97, i64 %47
<   %104 = load double, double* %103, align 8, !tbaa !2
<   %105 = fmul double %104, 5.000000e-01
<   %106 = load double*, double** %13, align 8, !tbaa !6
<   %107 = getelementptr inbounds double, double* %106, i64 %47
<   %108 = load double, double* %107, align 8, !tbaa !2
<   %109 = load double*, double** %14, align 8, !tbaa !6
<   %110 = getelementptr inbounds double, double* %109, i64 %47
<   %111 = load double, double* %110, align 8, !tbaa !2
<   %112 = fadd double %108, %111
<   %113 = fmul double %112, 3.000000e+00
<   %114 = load double*, double** %9, align 8, !tbaa !6
<   %115 = getelementptr inbounds double, double* %114, i64 %47
<   %116 = load double, double* %115, align 8, !tbaa !2
<   %117 = fadd double %116, %93
<   %118 = fmul double %117, 4.000000e+00
<   %119 = fsub double %113, %118
<   %120 = fmul double %105, %119
<   %121 = fadd double %102, %120
<   store double %121, double* %101, align 8, !tbaa !2
<   %122 = add nsw i64 %47, 1
<   %123 = sext i32 %96 to i64
<   %124 = icmp slt i64 %47, %123
<   br i1 %124, label %42, label %125
< 
< 125:                                              ; preds = %92, %27
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %32)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %29) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #10
<   br label %126
< 
< 126:                                              ; preds = %25, %125
<   %127 = phi i32 [ %26, %25 ], [ %32, %125 ]
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %127)
<   %128 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_0, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %128)
<           to label %129 unwind label %130
---
> define internal void @.omp_outlined..38(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i64 %length, double** nocapture nonnull readonly align 8 dereferenceable(8) %compHalfStep, double** nocapture nonnull readonly align 8 dereferenceable(8) %delvc, double** nocapture nonnull readonly align 8 dereferenceable(8) %q_new, double** nocapture nonnull readonly align 8 dereferenceable(8) %pbvc, double** nocapture nonnull readonly align 8 dereferenceable(8) %e_new, double** nocapture nonnull readonly align 8 dereferenceable(8) %bvc, double** nocapture nonnull readonly align 8 dereferenceable(8) %pHalfStep, i64 %rho0, double** nocapture nonnull readonly align 8 dereferenceable(8) %ql_old, double** nocapture nonnull readonly align 8 dereferenceable(8) %qq_old, double** nocapture nonnull readonly align 8 dereferenceable(8) %p_old, double** nocapture nonnull readonly align 8 dereferenceable(8) %q_old) #6 {
> entry:
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %length.addr.sroa.0.0.extract.trunc = trunc i64 %length to i32
>   %sub3 = add nsw i32 %length.addr.sroa.0.0.extract.trunc, -1
>   %cmp = icmp sgt i32 %length.addr.sroa.0.0.extract.trunc, 0
>   br i1 %cmp, label %omp.precond.then, label %omp.precond.end
> 
> omp.precond.then:                                 ; preds = %entry
>   %0 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %1 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #7
>   store i32 %sub3, i32* %.omp.ub, align 4, !tbaa !6
>   %2 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %3 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   %4 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %4, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %5 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp5.not = icmp slt i32 %5, %length.addr.sroa.0.0.extract.trunc
>   %cond = select i1 %cmp5.not, i32 %5, i32 %sub3
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %6 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp6.not95 = icmp sgt i32 %6, %cond
>   br i1 %cmp6.not95, label %omp.loop.exit, label %omp.inner.for.body.lr.ph
> 
> omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
>   %7 = bitcast i64 %rho0 to double
>   %8 = sext i32 %6 to i64
>   %.pre = load double*, double** %delvc, align 8, !tbaa !41
>   br label %omp.inner.for.body
> 
> omp.inner.for.body:                               ; preds = %if.end39, %omp.inner.for.body.lr.ph
>   %.pre98102 = phi i32 [ %.pre98103, %if.end39 ], [ %cond, %omp.inner.for.body.lr.ph ]
>   %.pre9799 = phi double* [ %.pre97100, %if.end39 ], [ %.pre, %omp.inner.for.body.lr.ph ]
>   %9 = phi i32 [ %26, %if.end39 ], [ %cond, %omp.inner.for.body.lr.ph ]
>   %10 = phi double* [ %27, %if.end39 ], [ %.pre, %omp.inner.for.body.lr.ph ]
>   %indvars.iv = phi i64 [ %indvars.iv.next, %if.end39 ], [ %8, %omp.inner.for.body.lr.ph ]
>   %11 = load double*, double** %compHalfStep, align 8, !tbaa !41
>   %arrayidx = getelementptr inbounds double, double* %11, i64 %indvars.iv
>   %12 = load double, double* %arrayidx, align 8, !tbaa !2
>   %add7 = fadd double %12, 1.000000e+00
>   %div8 = fdiv double 1.000000e+00, %add7
>   %arrayidx10 = getelementptr inbounds double, double* %10, i64 %indvars.iv
>   %13 = load double, double* %arrayidx10, align 8, !tbaa !2
>   %cmp11 = fcmp ogt double %13, 0.000000e+00
>   br i1 %cmp11, label %if.end39, label %if.else
> 
> if.else:                                          ; preds = %omp.inner.for.body
>   %14 = load double*, double** %pbvc, align 8, !tbaa !41
>   %arrayidx15 = getelementptr inbounds double, double* %14, i64 %indvars.iv
>   %15 = load double, double* %arrayidx15, align 8, !tbaa !2
>   %16 = load double*, double** %e_new, align 8, !tbaa !41
>   %arrayidx17 = getelementptr inbounds double, double* %16, i64 %indvars.iv
>   %17 = load double, double* %arrayidx17, align 8, !tbaa !2
>   %mul18 = fmul double %15, %17
>   %mul19 = fmul double %div8, %div8
>   %18 = load double*, double** %bvc, align 8, !tbaa !41
>   %arrayidx21 = getelementptr inbounds double, double* %18, i64 %indvars.iv
>   %19 = load double, double* %arrayidx21, align 8, !tbaa !2
>   %mul22 = fmul double %mul19, %19
>   %20 = load double*, double** %pHalfStep, align 8, !tbaa !41
>   %arrayidx24 = getelementptr inbounds double, double* %20, i64 %indvars.iv
>   %21 = load double, double* %arrayidx24, align 8, !tbaa !2
>   %mul25 = fmul double %mul22, %21
>   %add26 = fadd double %mul18, %mul25
>   %div27 = fdiv double %add26, %7
>   %cmp28 = fcmp ugt double %div27, 0x3842E7922A37D1A0
>   br i1 %cmp28, label %if.else30, label %if.end
> 
> if.else30:                                        ; preds = %if.else
>   %call.i = call double @sqrt(double %div27) #7
>   %.pre97.pre = load double*, double** %delvc, align 8, !tbaa !41
>   %.pre98.pre = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   br label %if.end
> 
> if.end:                                           ; preds = %if.else, %if.else30
>   %.pre98 = phi i32 [ %.pre98.pre, %if.else30 ], [ %.pre98102, %if.else ]
>   %.pre97 = phi double* [ %.pre97.pre, %if.else30 ], [ %.pre9799, %if.else ]
>   %ssc.0 = phi double [ %call.i, %if.else30 ], [ 0x3C18987CEE7F439D, %if.else ]
>   %22 = load double*, double** %ql_old, align 8, !tbaa !41
>   %arrayidx32 = getelementptr inbounds double, double* %22, i64 %indvars.iv
>   %23 = load double, double* %arrayidx32, align 8, !tbaa !2
>   %mul33 = fmul double %ssc.0, %23
>   %24 = load double*, double** %qq_old, align 8, !tbaa !41
>   %arrayidx35 = getelementptr inbounds double, double* %24, i64 %indvars.iv
>   %25 = load double, double* %arrayidx35, align 8, !tbaa !2
>   %add36 = fadd double %mul33, %25
>   br label %if.end39
> 
> if.end39:                                         ; preds = %omp.inner.for.body, %if.end
>   %add36.sink = phi double [ %add36, %if.end ], [ 0.000000e+00, %omp.inner.for.body ]
>   %.pre98103 = phi i32 [ %.pre98, %if.end ], [ %.pre98102, %omp.inner.for.body ]
>   %.pre97100 = phi double* [ %.pre97, %if.end ], [ %.pre9799, %omp.inner.for.body ]
>   %26 = phi i32 [ %.pre98, %if.end ], [ %9, %omp.inner.for.body ]
>   %27 = phi double* [ %.pre97, %if.end ], [ %10, %omp.inner.for.body ]
>   %28 = load double*, double** %q_new, align 8, !tbaa !41
>   %arrayidx38 = getelementptr inbounds double, double* %28, i64 %indvars.iv
>   store double %add36.sink, double* %arrayidx38, align 8, !tbaa !2
>   %29 = load double*, double** %e_new, align 8, !tbaa !41
>   %arrayidx41 = getelementptr inbounds double, double* %29, i64 %indvars.iv
>   %30 = load double, double* %arrayidx41, align 8, !tbaa !2
>   %arrayidx43 = getelementptr inbounds double, double* %27, i64 %indvars.iv
>   %31 = load double, double* %arrayidx43, align 8, !tbaa !2
>   %mul44 = fmul double %31, 5.000000e-01
>   %32 = load double*, double** %p_old, align 8, !tbaa !41
>   %arrayidx46 = getelementptr inbounds double, double* %32, i64 %indvars.iv
>   %33 = load double, double* %arrayidx46, align 8, !tbaa !2
>   %34 = load double*, double** %q_old, align 8, !tbaa !41
>   %arrayidx48 = getelementptr inbounds double, double* %34, i64 %indvars.iv
>   %35 = load double, double* %arrayidx48, align 8, !tbaa !2
>   %add49 = fadd double %33, %35
>   %mul50 = fmul double %add49, 3.000000e+00
>   %36 = load double*, double** %pHalfStep, align 8, !tbaa !41
>   %arrayidx52 = getelementptr inbounds double, double* %36, i64 %indvars.iv
>   %37 = load double, double* %arrayidx52, align 8, !tbaa !2
>   %add55 = fadd double %37, %add36.sink
>   %mul56 = fmul double %add55, 4.000000e+00
>   %sub57 = fsub double %mul50, %mul56
>   %mul58 = fmul double %mul44, %sub57
>   %add59 = fadd double %30, %mul58
>   store double %add59, double* %arrayidx41, align 8, !tbaa !2
>   %indvars.iv.next = add nsw i64 %indvars.iv, 1
>   %38 = sext i32 %26 to i64
>   %cmp6.not.not = icmp slt i64 %indvars.iv, %38
>   br i1 %cmp6.not.not, label %omp.inner.for.body, label %omp.loop.exit
> 
> omp.loop.exit:                                    ; preds = %if.end39, %omp.precond.then
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %4)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #7
>   br label %omp.precond.end
15169c12259
< 129:                                              ; preds = %126
---
> omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
15171,15177d12260
< 
< 130:                                              ; preds = %126, %15
<   %131 = landingpad { i8*, i32 }
<           catch i8* null
<   %132 = extractvalue { i8*, i32 } %131, 0
<   call void @__clang_call_terminate(i8* %132) #29
<   unreachable
15181,15271c12264,12381
< define internal void @.omp_outlined..59(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, i64 %2, double** nocapture nonnull readonly align 8 dereferenceable(8) %3, double** nocapture nonnull readonly align 8 dereferenceable(8) %4, i64 %5, i64 %6) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %8 = alloca i32, align 4
<   %9 = alloca i32, align 4
<   %10 = alloca i32, align 4
<   %11 = alloca i32, align 4
<   %12 = trunc i64 %2 to i32
<   %13 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_1, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %13)
<           to label %14 unwind label %60
< 
< 14:                                               ; preds = %7
<   %15 = add nsw i32 %12, -1
<   %16 = icmp sgt i32 %12, 0
<   br i1 %16, label %19, label %17
< 
< 17:                                               ; preds = %14
<   %18 = load i32, i32* %0, align 4, !tbaa !12
<   br label %56
< 
< 19:                                               ; preds = %14
<   %20 = bitcast i32* %8 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #10
<   store i32 0, i32* %8, align 4, !tbaa !12
<   %21 = bitcast i32* %9 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #10
<   store i32 %15, i32* %9, align 4, !tbaa !12
<   %22 = bitcast i32* %10 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22) #10
<   store i32 1, i32* %10, align 4, !tbaa !12
<   %23 = bitcast i32* %11 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %23) #10
<   store i32 0, i32* %11, align 4, !tbaa !12
<   %24 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %24, i32 34, i32* nonnull %11, i32* nonnull %8, i32* nonnull %9, i32* nonnull %10, i32 1, i32 1) #10
<   %25 = load i32, i32* %9, align 4, !tbaa !12
<   %26 = icmp slt i32 %25, %12
<   %27 = select i1 %26, i32 %25, i32 %15
<   store i32 %27, i32* %9, align 4, !tbaa !12
<   %28 = load i32, i32* %8, align 4, !tbaa !12
<   %29 = icmp sgt i32 %28, %27
<   br i1 %29, label %55, label %30
< 
< 30:                                               ; preds = %19
<   %31 = load double*, double** %4, align 8, !tbaa !6
<   %32 = load double*, double** %3, align 8, !tbaa !6
<   %33 = bitcast i64 %5 to double
<   %34 = bitcast i64 %6 to double
<   %35 = sext i32 %28 to i64
<   %36 = add i32 %27, 1
<   br label %37
< 
< 37:                                               ; preds = %30, %51
<   %38 = phi i64 [ %35, %30 ], [ %52, %51 ]
<   %39 = getelementptr inbounds double, double* %31, i64 %38
<   %40 = load double, double* %39, align 8, !tbaa !2
<   %41 = fmul double %40, 5.000000e-01
<   %42 = getelementptr inbounds double, double* %32, i64 %38
<   %43 = load double, double* %42, align 8, !tbaa !2
<   %44 = fadd double %41, %43
<   %45 = call double @llvm.fabs.f64(double %44) #10
<   %46 = fcmp olt double %45, %33
<   %47 = select i1 %46, double 0.000000e+00, double %44
<   store double %47, double* %42, align 8, !tbaa !2
<   %48 = fcmp olt double %47, %34
<   br i1 %48, label %49, label %51
< 
< 49:                                               ; preds = %37
<   %50 = bitcast double* %42 to i64*
<   store i64 %6, i64* %50, align 8, !tbaa !2
<   br label %51
< 
< 51:                                               ; preds = %49, %37
<   %52 = add nsw i64 %38, 1
<   %53 = trunc i64 %52 to i32
<   %54 = icmp eq i32 %36, %53
<   br i1 %54, label %55, label %37
< 
< 55:                                               ; preds = %51, %19
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %24)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %23) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #10
<   br label %56
< 
< 56:                                               ; preds = %17, %55
<   %57 = phi i32 [ %18, %17 ], [ %24, %55 ]
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %57)
<   %58 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_1, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %58)
<           to label %59 unwind label %60
---
> define internal void @.omp_outlined..39(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i64 %length, double** nocapture nonnull readonly align 8 dereferenceable(8) %e_new, double** nocapture nonnull readonly align 8 dereferenceable(8) %work, i64 %e_cut, i64 %emin) #6 {
> entry:
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %length.addr.sroa.0.0.extract.trunc = trunc i64 %length to i32
>   %sub4 = add nsw i32 %length.addr.sroa.0.0.extract.trunc, -1
>   %cmp = icmp sgt i32 %length.addr.sroa.0.0.extract.trunc, 0
>   br i1 %cmp, label %omp.precond.then, label %omp.precond.end
> 
> omp.precond.then:                                 ; preds = %entry
>   %0 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %1 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #7
>   store i32 %sub4, i32* %.omp.ub, align 4, !tbaa !6
>   %2 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %3 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   %4 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %4, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %5 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp6.not = icmp slt i32 %5, %length.addr.sroa.0.0.extract.trunc
>   %cond = select i1 %cmp6.not, i32 %5, i32 %sub4
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %6 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp7.not42 = icmp sgt i32 %6, %cond
>   br i1 %cmp7.not42, label %omp.loop.exit, label %omp.inner.for.body.lr.ph
> 
> omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
>   %7 = load double*, double** %work, align 8, !tbaa !41
>   %8 = load double*, double** %e_new, align 8, !tbaa !41
>   %9 = bitcast i64 %e_cut to double
>   %10 = bitcast i64 %emin to double
>   %11 = sext i32 %6 to i64
>   %12 = icmp sgt i32 %cond, %6
>   %smax = select i1 %12, i32 %cond, i32 %6
>   %13 = add i32 %smax, 1
>   %14 = sub i32 %13, %6
>   %xtraiter = and i32 %14, 1
>   %lcmp.mod.not = icmp eq i32 %xtraiter, 0
>   br i1 %lcmp.mod.not, label %omp.inner.for.body.prol.loopexit, label %omp.inner.for.body.prol
> 
> omp.inner.for.body.prol:                          ; preds = %omp.inner.for.body.lr.ph
>   %arrayidx.prol = getelementptr inbounds double, double* %7, i64 %11
>   %15 = load double, double* %arrayidx.prol, align 8, !tbaa !2
>   %mul8.prol = fmul double %15, 5.000000e-01
>   %arrayidx10.prol = getelementptr inbounds double, double* %8, i64 %11
>   %16 = load double, double* %arrayidx10.prol, align 8, !tbaa !2
>   %add11.prol = fadd double %mul8.prol, %16
>   %17 = call double @llvm.fabs.f64(double %add11.prol) #7
>   %cmp14.prol = fcmp olt double %17, %9
>   %storemerge.prol = select i1 %cmp14.prol, double 0.000000e+00, double %add11.prol
>   store double %storemerge.prol, double* %arrayidx10.prol, align 8, !tbaa !2
>   %cmp19.prol = fcmp olt double %storemerge.prol, %10
>   br i1 %cmp19.prol, label %if.then20.prol, label %omp.inner.for.inc.prol
> 
> if.then20.prol:                                   ; preds = %omp.inner.for.body.prol
>   %18 = bitcast double* %arrayidx10.prol to i64*
>   store i64 %emin, i64* %18, align 8, !tbaa !2
>   br label %omp.inner.for.inc.prol
> 
> omp.inner.for.inc.prol:                           ; preds = %if.then20.prol, %omp.inner.for.body.prol
>   %indvars.iv.next.prol = add nsw i64 %11, 1
>   br label %omp.inner.for.body.prol.loopexit
> 
> omp.inner.for.body.prol.loopexit:                 ; preds = %omp.inner.for.body.lr.ph, %omp.inner.for.inc.prol
>   %indvars.iv.unr = phi i64 [ %11, %omp.inner.for.body.lr.ph ], [ %indvars.iv.next.prol, %omp.inner.for.inc.prol ]
>   %.not = icmp slt i32 %6, %cond
>   br i1 %.not, label %omp.inner.for.body, label %omp.loop.exit
> 
> omp.inner.for.body:                               ; preds = %omp.inner.for.body.prol.loopexit, %omp.inner.for.inc.1
>   %indvars.iv = phi i64 [ %indvars.iv.next.1, %omp.inner.for.inc.1 ], [ %indvars.iv.unr, %omp.inner.for.body.prol.loopexit ]
>   %arrayidx = getelementptr inbounds double, double* %7, i64 %indvars.iv
>   %19 = load double, double* %arrayidx, align 8, !tbaa !2
>   %mul8 = fmul double %19, 5.000000e-01
>   %arrayidx10 = getelementptr inbounds double, double* %8, i64 %indvars.iv
>   %20 = load double, double* %arrayidx10, align 8, !tbaa !2
>   %add11 = fadd double %mul8, %20
>   %21 = call double @llvm.fabs.f64(double %add11) #7
>   %cmp14 = fcmp olt double %21, %9
>   %storemerge = select i1 %cmp14, double 0.000000e+00, double %add11
>   store double %storemerge, double* %arrayidx10, align 8, !tbaa !2
>   %cmp19 = fcmp olt double %storemerge, %10
>   br i1 %cmp19, label %if.then20, label %omp.inner.for.inc
> 
> if.then20:                                        ; preds = %omp.inner.for.body
>   %22 = bitcast double* %arrayidx10 to i64*
>   store i64 %emin, i64* %22, align 8, !tbaa !2
>   br label %omp.inner.for.inc
> 
> omp.inner.for.inc:                                ; preds = %if.then20, %omp.inner.for.body
>   %indvars.iv.next = add nsw i64 %indvars.iv, 1
>   %arrayidx.1 = getelementptr inbounds double, double* %7, i64 %indvars.iv.next
>   %23 = load double, double* %arrayidx.1, align 8, !tbaa !2
>   %mul8.1 = fmul double %23, 5.000000e-01
>   %arrayidx10.1 = getelementptr inbounds double, double* %8, i64 %indvars.iv.next
>   %24 = load double, double* %arrayidx10.1, align 8, !tbaa !2
>   %add11.1 = fadd double %mul8.1, %24
>   %25 = call double @llvm.fabs.f64(double %add11.1) #7
>   %cmp14.1 = fcmp olt double %25, %9
>   %storemerge.1 = select i1 %cmp14.1, double 0.000000e+00, double %add11.1
>   store double %storemerge.1, double* %arrayidx10.1, align 8, !tbaa !2
>   %cmp19.1 = fcmp olt double %storemerge.1, %10
>   br i1 %cmp19.1, label %if.then20.1, label %omp.inner.for.inc.1
> 
> omp.loop.exit:                                    ; preds = %omp.inner.for.body.prol.loopexit, %omp.inner.for.inc.1, %omp.precond.then
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %4)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #7
>   br label %omp.precond.end
15273c12383
< 59:                                               ; preds = %56
---
> omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
15276,15281c12386,12395
< 60:                                               ; preds = %56, %7
<   %61 = landingpad { i8*, i32 }
<           catch i8* null
<   %62 = extractvalue { i8*, i32 } %61, 0
<   call void @__clang_call_terminate(i8* %62) #29
<   unreachable
---
> if.then20.1:                                      ; preds = %omp.inner.for.inc
>   %26 = bitcast double* %arrayidx10.1 to i64*
>   store i64 %emin, i64* %26, align 8, !tbaa !2
>   br label %omp.inner.for.inc.1
> 
> omp.inner.for.inc.1:                              ; preds = %if.then20.1, %omp.inner.for.inc
>   %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
>   %lftr.wideiv.1 = trunc i64 %indvars.iv.next.1 to i32
>   %exitcond.not.1 = icmp eq i32 %13, %lftr.wideiv.1
>   br i1 %exitcond.not.1, label %omp.loop.exit, label %omp.inner.for.body
15285,15461c12399,12548
< define internal void @.omp_outlined..61(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, i64 %2, i32** nocapture nonnull readonly align 8 dereferenceable(8) %3, double** nocapture nonnull readonly align 8 dereferenceable(8) %4, double** nocapture nonnull readonly align 8 dereferenceable(8) %5, double** nocapture nonnull readonly align 8 dereferenceable(8) %6, double** nocapture nonnull readonly align 8 dereferenceable(8) %7, double** nocapture nonnull readonly align 8 dereferenceable(8) %8, double** nocapture nonnull readonly align 8 dereferenceable(8) %9, i64 %10, double** nocapture nonnull readonly align 8 dereferenceable(8) %11, double** nocapture nonnull readonly align 8 dereferenceable(8) %12, double** nocapture nonnull readonly align 8 dereferenceable(8) %13, double** nocapture nonnull readonly align 8 dereferenceable(8) %14, double** nocapture nonnull readonly align 8 dereferenceable(8) %15, double** nocapture nonnull readonly align 8 dereferenceable(8) %16, i64 %17, i64 %18) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %20 = alloca i32, align 4
<   %21 = alloca i32, align 4
<   %22 = alloca i32, align 4
<   %23 = alloca i32, align 4
<   %24 = trunc i64 %2 to i32
<   %25 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_2, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %25)
<           to label %26 unwind label %150
< 
< 26:                                               ; preds = %19
<   %27 = add nsw i32 %24, -1
<   %28 = icmp sgt i32 %24, 0
<   br i1 %28, label %31, label %29
< 
< 29:                                               ; preds = %26
<   %30 = load i32, i32* %0, align 4, !tbaa !12
<   br label %146
< 
< 31:                                               ; preds = %26
<   %32 = bitcast i32* %20 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32) #10
<   store i32 0, i32* %20, align 4, !tbaa !12
<   %33 = bitcast i32* %21 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %33) #10
<   store i32 %27, i32* %21, align 4, !tbaa !12
<   %34 = bitcast i32* %22 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %34) #10
<   store i32 1, i32* %22, align 4, !tbaa !12
<   %35 = bitcast i32* %23 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %35) #10
<   store i32 0, i32* %23, align 4, !tbaa !12
<   %36 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %36, i32 34, i32* nonnull %23, i32* nonnull %20, i32* nonnull %21, i32* nonnull %22, i32 1, i32 1) #10
<   %37 = load i32, i32* %21, align 4, !tbaa !12
<   %38 = icmp slt i32 %37, %24
<   %39 = select i1 %38, i32 %37, i32 %27
<   store i32 %39, i32* %21, align 4, !tbaa !12
<   %40 = load i32, i32* %20, align 4, !tbaa !12
<   %41 = icmp sgt i32 %40, %39
<   br i1 %41, label %145, label %42
< 
< 42:                                               ; preds = %31
<   %43 = bitcast i64 %10 to double
<   %44 = bitcast i64 %17 to double
<   %45 = bitcast i64 %18 to double
<   %46 = sext i32 %40 to i64
<   %47 = load double*, double** %4, align 8, !tbaa !6
<   br label %48
< 
< 48:                                               ; preds = %42, %140
<   %49 = phi double* [ %47, %42 ], [ %97, %140 ]
<   %50 = phi double* [ %47, %42 ], [ %98, %140 ]
<   %51 = phi i64 [ %46, %42 ], [ %141, %140 ]
<   %52 = getelementptr inbounds double, double* %50, i64 %51
<   %53 = load double, double* %52, align 8, !tbaa !2
<   %54 = fcmp ogt double %53, 0.000000e+00
<   br i1 %54, label %96, label %55
< 
< 55:                                               ; preds = %48
<   %56 = load i32*, i32** %3, align 8, !tbaa !6
<   %57 = getelementptr inbounds i32, i32* %56, i64 %51
<   %58 = load i32, i32* %57, align 4, !tbaa !12
<   %59 = load double*, double** %5, align 8, !tbaa !6
<   %60 = getelementptr inbounds double, double* %59, i64 %51
<   %61 = load double, double* %60, align 8, !tbaa !2
<   %62 = load double*, double** %6, align 8, !tbaa !6
<   %63 = getelementptr inbounds double, double* %62, i64 %51
<   %64 = load double, double* %63, align 8, !tbaa !2
<   %65 = fmul double %61, %64
<   %66 = load double*, double** %7, align 8, !tbaa !6
<   %67 = sext i32 %58 to i64
<   %68 = getelementptr inbounds double, double* %66, i64 %67
<   %69 = load double, double* %68, align 8, !tbaa !2
<   %70 = fmul double %69, %69
<   %71 = load double*, double** %8, align 8, !tbaa !6
<   %72 = getelementptr inbounds double, double* %71, i64 %51
<   %73 = load double, double* %72, align 8, !tbaa !2
<   %74 = fmul double %70, %73
<   %75 = load double*, double** %9, align 8, !tbaa !6
<   %76 = getelementptr inbounds double, double* %75, i64 %51
<   %77 = load double, double* %76, align 8, !tbaa !2
<   %78 = fmul double %74, %77
<   %79 = fadd double %65, %78
<   %80 = fdiv double %79, %43
<   %81 = fcmp ugt double %80, 0x3842E7922A37D1A0
<   br i1 %81, label %82, label %85
< 
< 82:                                               ; preds = %55
<   %83 = call double @sqrt(double %80) #10
<   %84 = load double*, double** %4, align 8, !tbaa !6
<   br label %85
< 
< 85:                                               ; preds = %55, %82
<   %86 = phi double* [ %84, %82 ], [ %49, %55 ]
<   %87 = phi double [ %83, %82 ], [ 0x3C18987CEE7F439D, %55 ]
<   %88 = load double*, double** %11, align 8, !tbaa !6
<   %89 = getelementptr inbounds double, double* %88, i64 %51
<   %90 = load double, double* %89, align 8, !tbaa !2
<   %91 = fmul double %87, %90
<   %92 = load double*, double** %12, align 8, !tbaa !6
<   %93 = getelementptr inbounds double, double* %92, i64 %51
<   %94 = load double, double* %93, align 8, !tbaa !2
<   %95 = fadd double %91, %94
<   br label %96
< 
< 96:                                               ; preds = %48, %85
<   %97 = phi double* [ %86, %85 ], [ %49, %48 ]
<   %98 = phi double* [ %86, %85 ], [ %50, %48 ]
<   %99 = phi double [ %95, %85 ], [ 0.000000e+00, %48 ]
<   %100 = load double*, double** %6, align 8, !tbaa !6
<   %101 = getelementptr inbounds double, double* %100, i64 %51
<   %102 = load double, double* %101, align 8, !tbaa !2
<   %103 = load double*, double** %13, align 8, !tbaa !6
<   %104 = getelementptr inbounds double, double* %103, i64 %51
<   %105 = load double, double* %104, align 8, !tbaa !2
<   %106 = load double*, double** %14, align 8, !tbaa !6
<   %107 = getelementptr inbounds double, double* %106, i64 %51
<   %108 = load double, double* %107, align 8, !tbaa !2
<   %109 = load double*, double** %15, align 8, !tbaa !6
<   %110 = getelementptr inbounds double, double* %109, i64 %51
<   %111 = load double, double* %110, align 8, !tbaa !2
<   %112 = load double*, double** %16, align 8, !tbaa !6
<   %113 = getelementptr inbounds double, double* %112, i64 %51
<   %114 = load double, double* %113, align 8, !tbaa !2
<   %115 = insertelement <2 x double> poison, double %105, i32 0
<   %116 = insertelement <2 x double> %115, double %111, i32 1
<   %117 = insertelement <2 x double> poison, double %108, i32 0
<   %118 = insertelement <2 x double> %117, double %114, i32 1
<   %119 = fadd <2 x double> %116, %118
<   %120 = fmul <2 x double> %119, <double 7.000000e+00, double 8.000000e+00>
<   %121 = shufflevector <2 x double> %120, <2 x double> poison, <2 x i32> <i32 1, i32 undef>
<   %122 = fsub <2 x double> %120, %121
<   %123 = extractelement <2 x double> %122, i32 0
<   %124 = load double*, double** %9, align 8, !tbaa !6
<   %125 = getelementptr inbounds double, double* %124, i64 %51
<   %126 = load double, double* %125, align 8, !tbaa !2
<   %127 = fadd double %99, %126
<   %128 = fadd double %123, %127
<   %129 = getelementptr inbounds double, double* %98, i64 %51
<   %130 = load double, double* %129, align 8, !tbaa !2
<   %131 = fmul double %128, %130
<   %132 = fmul double %131, 0x3FC5555555555555
<   %133 = fsub double %102, %132
<   %134 = call double @llvm.fabs.f64(double %133) #10
<   %135 = fcmp olt double %134, %44
<   %136 = select i1 %135, double 0.000000e+00, double %133
<   store double %136, double* %101, align 8, !tbaa !2
<   %137 = fcmp olt double %136, %45
<   br i1 %137, label %138, label %140
< 
< 138:                                              ; preds = %96
<   %139 = bitcast double* %101 to i64*
<   store i64 %18, i64* %139, align 8, !tbaa !2
<   br label %140
< 
< 140:                                              ; preds = %138, %96
<   %141 = add nsw i64 %51, 1
<   %142 = load i32, i32* %21, align 4, !tbaa !12
<   %143 = sext i32 %142 to i64
<   %144 = icmp slt i64 %51, %143
<   br i1 %144, label %48, label %145
< 
< 145:                                              ; preds = %140, %31
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %36)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %35) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %34) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %33) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #10
<   br label %146
< 
< 146:                                              ; preds = %29, %145
<   %147 = phi i32 [ %30, %29 ], [ %36, %145 ]
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %147)
<   %148 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_2, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %148)
<           to label %149 unwind label %150
---
> define internal void @.omp_outlined..40(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i64 %length, i32** nocapture nonnull readonly align 8 dereferenceable(8) %regElemList, double** nocapture nonnull readonly align 8 dereferenceable(8) %delvc, double** nocapture nonnull readonly align 8 dereferenceable(8) %pbvc, double** nocapture nonnull readonly align 8 dereferenceable(8) %e_new, double** nocapture nonnull readonly align 8 dereferenceable(8) %vnewc, double** nocapture nonnull readonly align 8 dereferenceable(8) %bvc, double** nocapture nonnull readonly align 8 dereferenceable(8) %p_new, i64 %rho0, double** nocapture nonnull readonly align 8 dereferenceable(8) %ql_old, double** nocapture nonnull readonly align 8 dereferenceable(8) %qq_old, double** nocapture nonnull readonly align 8 dereferenceable(8) %p_old, double** nocapture nonnull readonly align 8 dereferenceable(8) %q_old, double** nocapture nonnull readonly align 8 dereferenceable(8) %pHalfStep, double** nocapture nonnull readonly align 8 dereferenceable(8) %q_new, i64 %e_cut, i64 %emin) #6 {
> entry:
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %length.addr.sroa.0.0.extract.trunc = trunc i64 %length to i32
>   %sub5 = add nsw i32 %length.addr.sroa.0.0.extract.trunc, -1
>   %cmp = icmp sgt i32 %length.addr.sroa.0.0.extract.trunc, 0
>   br i1 %cmp, label %omp.precond.then, label %omp.precond.end
> 
> omp.precond.then:                                 ; preds = %entry
>   %0 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %1 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #7
>   store i32 %sub5, i32* %.omp.ub, align 4, !tbaa !6
>   %2 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %3 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   %4 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %4, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %5 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp7.not = icmp slt i32 %5, %length.addr.sroa.0.0.extract.trunc
>   %cond = select i1 %cmp7.not, i32 %5, i32 %sub5
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %6 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp8.not120 = icmp sgt i32 %6, %cond
>   br i1 %cmp8.not120, label %omp.loop.exit, label %omp.inner.for.body.lr.ph
> 
> omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
>   %7 = bitcast i64 %rho0 to double
>   %8 = bitcast i64 %e_cut to double
>   %9 = bitcast i64 %emin to double
>   %10 = sext i32 %6 to i64
>   %.pre = load double*, double** %delvc, align 8, !tbaa !41
>   br label %omp.inner.for.body
> 
> omp.inner.for.body:                               ; preds = %if.end80, %omp.inner.for.body.lr.ph
>   %.pre122123 = phi double* [ %.pre122124, %if.end80 ], [ %.pre, %omp.inner.for.body.lr.ph ]
>   %11 = phi double* [ %29, %if.end80 ], [ %.pre, %omp.inner.for.body.lr.ph ]
>   %indvars.iv = phi i64 [ %indvars.iv.next, %if.end80 ], [ %10, %omp.inner.for.body.lr.ph ]
>   %arrayidx10 = getelementptr inbounds double, double* %11, i64 %indvars.iv
>   %12 = load double, double* %arrayidx10, align 8, !tbaa !2
>   %cmp11 = fcmp ogt double %12, 0.000000e+00
>   br i1 %cmp11, label %if.end39, label %if.else
> 
> if.else:                                          ; preds = %omp.inner.for.body
>   %13 = load i32*, i32** %regElemList, align 8, !tbaa !41
>   %arrayidx = getelementptr inbounds i32, i32* %13, i64 %indvars.iv
>   %14 = load i32, i32* %arrayidx, align 4, !tbaa !6
>   %15 = load double*, double** %pbvc, align 8, !tbaa !41
>   %arrayidx13 = getelementptr inbounds double, double* %15, i64 %indvars.iv
>   %16 = load double, double* %arrayidx13, align 8, !tbaa !2
>   %17 = load double*, double** %e_new, align 8, !tbaa !41
>   %arrayidx15 = getelementptr inbounds double, double* %17, i64 %indvars.iv
>   %18 = load double, double* %arrayidx15, align 8, !tbaa !2
>   %mul16 = fmul double %16, %18
>   %19 = load double*, double** %vnewc, align 8, !tbaa !41
>   %idxprom17 = sext i32 %14 to i64
>   %arrayidx18 = getelementptr inbounds double, double* %19, i64 %idxprom17
>   %20 = load double, double* %arrayidx18, align 8, !tbaa !2
>   %mul21 = fmul double %20, %20
>   %21 = load double*, double** %bvc, align 8, !tbaa !41
>   %arrayidx23 = getelementptr inbounds double, double* %21, i64 %indvars.iv
>   %22 = load double, double* %arrayidx23, align 8, !tbaa !2
>   %mul24 = fmul double %mul21, %22
>   %23 = load double*, double** %p_new, align 8, !tbaa !41
>   %arrayidx26 = getelementptr inbounds double, double* %23, i64 %indvars.iv
>   %24 = load double, double* %arrayidx26, align 8, !tbaa !2
>   %mul27 = fmul double %mul24, %24
>   %add28 = fadd double %mul16, %mul27
>   %div29 = fdiv double %add28, %7
>   %cmp30 = fcmp ugt double %div29, 0x3842E7922A37D1A0
>   br i1 %cmp30, label %if.else32, label %if.end
> 
> if.else32:                                        ; preds = %if.else
>   %call.i = call double @sqrt(double %div29) #7
>   %.pre122.pre = load double*, double** %delvc, align 8, !tbaa !41
>   br label %if.end
> 
> if.end:                                           ; preds = %if.else, %if.else32
>   %.pre122 = phi double* [ %.pre122.pre, %if.else32 ], [ %.pre122123, %if.else ]
>   %ssc.0 = phi double [ %call.i, %if.else32 ], [ 0x3C18987CEE7F439D, %if.else ]
>   %25 = load double*, double** %ql_old, align 8, !tbaa !41
>   %arrayidx34 = getelementptr inbounds double, double* %25, i64 %indvars.iv
>   %26 = load double, double* %arrayidx34, align 8, !tbaa !2
>   %mul35 = fmul double %ssc.0, %26
>   %27 = load double*, double** %qq_old, align 8, !tbaa !41
>   %arrayidx37 = getelementptr inbounds double, double* %27, i64 %indvars.iv
>   %28 = load double, double* %arrayidx37, align 8, !tbaa !2
>   %add38 = fadd double %mul35, %28
>   br label %if.end39
> 
> if.end39:                                         ; preds = %omp.inner.for.body, %if.end
>   %.pre122124 = phi double* [ %.pre122, %if.end ], [ %.pre122123, %omp.inner.for.body ]
>   %29 = phi double* [ %.pre122, %if.end ], [ %11, %omp.inner.for.body ]
>   %q_tilde.0 = phi double [ %add38, %if.end ], [ 0.000000e+00, %omp.inner.for.body ]
>   %30 = load double*, double** %e_new, align 8, !tbaa !41
>   %arrayidx41 = getelementptr inbounds double, double* %30, i64 %indvars.iv
>   %31 = load double, double* %arrayidx41, align 8, !tbaa !2
>   %32 = load double*, double** %p_old, align 8, !tbaa !41
>   %arrayidx43 = getelementptr inbounds double, double* %32, i64 %indvars.iv
>   %33 = load double, double* %arrayidx43, align 8, !tbaa !2
>   %34 = load double*, double** %q_old, align 8, !tbaa !41
>   %arrayidx45 = getelementptr inbounds double, double* %34, i64 %indvars.iv
>   %35 = load double, double* %arrayidx45, align 8, !tbaa !2
>   %add46 = fadd double %33, %35
>   %mul47 = fmul double %add46, 7.000000e+00
>   %36 = load double*, double** %pHalfStep, align 8, !tbaa !41
>   %arrayidx49 = getelementptr inbounds double, double* %36, i64 %indvars.iv
>   %37 = load double, double* %arrayidx49, align 8, !tbaa !2
>   %38 = load double*, double** %q_new, align 8, !tbaa !41
>   %arrayidx51 = getelementptr inbounds double, double* %38, i64 %indvars.iv
>   %39 = load double, double* %arrayidx51, align 8, !tbaa !2
>   %add52 = fadd double %37, %39
>   %mul53 = fmul double %add52, 8.000000e+00
>   %sub54 = fsub double %mul47, %mul53
>   %40 = load double*, double** %p_new, align 8, !tbaa !41
>   %arrayidx56 = getelementptr inbounds double, double* %40, i64 %indvars.iv
>   %41 = load double, double* %arrayidx56, align 8, !tbaa !2
>   %add57 = fadd double %q_tilde.0, %41
>   %add58 = fadd double %sub54, %add57
>   %arrayidx60 = getelementptr inbounds double, double* %29, i64 %indvars.iv
>   %42 = load double, double* %arrayidx60, align 8, !tbaa !2
>   %mul61 = fmul double %add58, %42
>   %mul62 = fmul double %mul61, 0x3FC5555555555555
>   %sub63 = fsub double %31, %mul62
>   %43 = call double @llvm.fabs.f64(double %sub63) #7
>   %cmp69 = fcmp olt double %43, %8
>   %storemerge = select i1 %cmp69, double 0.000000e+00, double %sub63
>   store double %storemerge, double* %arrayidx41, align 8, !tbaa !2
>   %cmp76 = fcmp olt double %storemerge, %9
>   br i1 %cmp76, label %if.then77, label %if.end80
> 
> if.then77:                                        ; preds = %if.end39
>   %44 = bitcast double* %arrayidx41 to i64*
>   store i64 %emin, i64* %44, align 8, !tbaa !2
>   br label %if.end80
> 
> if.end80:                                         ; preds = %if.then77, %if.end39
>   %indvars.iv.next = add nsw i64 %indvars.iv, 1
>   %45 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %46 = sext i32 %45 to i64
>   %cmp8.not.not = icmp slt i64 %indvars.iv, %46
>   br i1 %cmp8.not.not, label %omp.inner.for.body, label %omp.loop.exit
15463,15464c12550,12556
< 149:                                              ; preds = %146
<   ret void
---
> omp.loop.exit:                                    ; preds = %if.end80, %omp.precond.then
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %4)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #7
>   br label %omp.precond.end
15466,15471c12558,12559
< 150:                                              ; preds = %146, %19
<   %151 = landingpad { i8*, i32 }
<           catch i8* null
<   %152 = extractvalue { i8*, i32 } %151, 0
<   call void @__clang_call_terminate(i8* %152) #29
<   unreachable
---
> omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
>   ret void
15475,15488c12563,12678
< define internal void @.omp_outlined..63(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, i64 %2, i32** nocapture nonnull readonly align 8 dereferenceable(8) %3, double** nocapture nonnull readonly align 8 dereferenceable(8) %4, double** nocapture nonnull readonly align 8 dereferenceable(8) %5, double** nocapture nonnull readonly align 8 dereferenceable(8) %6, double** nocapture nonnull readonly align 8 dereferenceable(8) %7, double** nocapture nonnull readonly align 8 dereferenceable(8) %8, double** nocapture nonnull readonly align 8 dereferenceable(8) %9, i64 %10, double** nocapture nonnull readonly align 8 dereferenceable(8) %11, double** nocapture nonnull readonly align 8 dereferenceable(8) %12, double** nocapture nonnull readonly align 8 dereferenceable(8) %13, i64 %14) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %16 = alloca i32, align 4
<   %17 = alloca i32, align 4
<   %18 = alloca i32, align 4
<   %19 = alloca i32, align 4
<   %20 = trunc i64 %2 to i32
<   %21 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_3, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %21)
<           to label %22 unwind label %102
< 
< 22:                                               ; preds = %15
<   %23 = add nsw i32 %20, -1
<   %24 = icmp sgt i32 %20, 0
<   br i1 %24, label %27, label %25
---
> define internal void @.omp_outlined..41(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i64 %length, i32** nocapture nonnull readonly align 8 dereferenceable(8) %regElemList, double** nocapture nonnull readonly align 8 dereferenceable(8) %delvc, double** nocapture nonnull readonly align 8 dereferenceable(8) %pbvc, double** nocapture nonnull readonly align 8 dereferenceable(8) %e_new, double** nocapture nonnull readonly align 8 dereferenceable(8) %vnewc, double** nocapture nonnull readonly align 8 dereferenceable(8) %bvc, double** nocapture nonnull readonly align 8 dereferenceable(8) %p_new, i64 %rho0, double** nocapture nonnull readonly align 8 dereferenceable(8) %q_new, double** nocapture nonnull readonly align 8 dereferenceable(8) %ql_old, double** nocapture nonnull readonly align 8 dereferenceable(8) %qq_old, i64 %q_cut) #6 {
> entry:
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %length.addr.sroa.0.0.extract.trunc = trunc i64 %length to i32
>   %sub4 = add nsw i32 %length.addr.sroa.0.0.extract.trunc, -1
>   %cmp = icmp sgt i32 %length.addr.sroa.0.0.extract.trunc, 0
>   br i1 %cmp, label %omp.precond.then, label %omp.precond.end
> 
> omp.precond.then:                                 ; preds = %entry
>   %0 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %1 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #7
>   store i32 %sub4, i32* %.omp.ub, align 4, !tbaa !6
>   %2 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %3 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   %4 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %4, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %5 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp6.not = icmp slt i32 %5, %length.addr.sroa.0.0.extract.trunc
>   %cond = select i1 %cmp6.not, i32 %5, i32 %sub4
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %6 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp7.not75 = icmp sgt i32 %6, %cond
>   br i1 %cmp7.not75, label %omp.loop.exit, label %omp.inner.for.body.lr.ph
> 
> omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
>   %7 = bitcast i64 %rho0 to double
>   %8 = bitcast i64 %q_cut to double
>   %9 = sext i32 %6 to i64
>   br label %omp.inner.for.body
> 
> omp.inner.for.body:                               ; preds = %if.end47, %omp.inner.for.body.lr.ph
>   %indvars.iv = phi i64 [ %indvars.iv.next, %if.end47 ], [ %9, %omp.inner.for.body.lr.ph ]
>   %10 = load double*, double** %delvc, align 8, !tbaa !41
>   %arrayidx9 = getelementptr inbounds double, double* %10, i64 %indvars.iv
>   %11 = load double, double* %arrayidx9, align 8, !tbaa !2
>   %cmp10 = fcmp ugt double %11, 0.000000e+00
>   br i1 %cmp10, label %if.end47, label %if.then
> 
> if.then:                                          ; preds = %omp.inner.for.body
>   %12 = load i32*, i32** %regElemList, align 8, !tbaa !41
>   %arrayidx = getelementptr inbounds i32, i32* %12, i64 %indvars.iv
>   %13 = load i32, i32* %arrayidx, align 4, !tbaa !6
>   %14 = load double*, double** %pbvc, align 8, !tbaa !41
>   %arrayidx12 = getelementptr inbounds double, double* %14, i64 %indvars.iv
>   %15 = load double, double* %arrayidx12, align 8, !tbaa !2
>   %16 = load double*, double** %e_new, align 8, !tbaa !41
>   %arrayidx14 = getelementptr inbounds double, double* %16, i64 %indvars.iv
>   %17 = load double, double* %arrayidx14, align 8, !tbaa !2
>   %mul15 = fmul double %15, %17
>   %18 = load double*, double** %vnewc, align 8, !tbaa !41
>   %idxprom16 = sext i32 %13 to i64
>   %arrayidx17 = getelementptr inbounds double, double* %18, i64 %idxprom16
>   %19 = load double, double* %arrayidx17, align 8, !tbaa !2
>   %mul20 = fmul double %19, %19
>   %20 = load double*, double** %bvc, align 8, !tbaa !41
>   %arrayidx22 = getelementptr inbounds double, double* %20, i64 %indvars.iv
>   %21 = load double, double* %arrayidx22, align 8, !tbaa !2
>   %mul23 = fmul double %mul20, %21
>   %22 = load double*, double** %p_new, align 8, !tbaa !41
>   %arrayidx25 = getelementptr inbounds double, double* %22, i64 %indvars.iv
>   %23 = load double, double* %arrayidx25, align 8, !tbaa !2
>   %mul26 = fmul double %mul23, %23
>   %add27 = fadd double %mul15, %mul26
>   %div28 = fdiv double %add27, %7
>   %cmp29 = fcmp ugt double %div28, 0x3842E7922A37D1A0
>   br i1 %cmp29, label %if.else, label %if.end
> 
> if.else:                                          ; preds = %if.then
>   %call.i = call double @sqrt(double %div28) #7
>   br label %if.end
> 
> if.end:                                           ; preds = %if.then, %if.else
>   %ssc.0 = phi double [ %call.i, %if.else ], [ 0x3C18987CEE7F439D, %if.then ]
>   %24 = load double*, double** %ql_old, align 8, !tbaa !41
>   %arrayidx32 = getelementptr inbounds double, double* %24, i64 %indvars.iv
>   %25 = load double, double* %arrayidx32, align 8, !tbaa !2
>   %mul33 = fmul double %ssc.0, %25
>   %26 = load double*, double** %qq_old, align 8, !tbaa !41
>   %arrayidx35 = getelementptr inbounds double, double* %26, i64 %indvars.iv
>   %27 = load double, double* %arrayidx35, align 8, !tbaa !2
>   %add36 = fadd double %mul33, %27
>   %28 = load double*, double** %q_new, align 8, !tbaa !41
>   %arrayidx38 = getelementptr inbounds double, double* %28, i64 %indvars.iv
>   store double %add36, double* %arrayidx38, align 8, !tbaa !2
>   %29 = call double @llvm.fabs.f64(double %add36) #7
>   %cmp42 = fcmp olt double %29, %8
>   br i1 %cmp42, label %if.then43, label %if.end47
> 
> if.then43:                                        ; preds = %if.end
>   store double 0.000000e+00, double* %arrayidx38, align 8, !tbaa !2
>   br label %if.end47
> 
> if.end47:                                         ; preds = %if.end, %if.then43, %omp.inner.for.body
>   %indvars.iv.next = add nsw i64 %indvars.iv, 1
>   %30 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %31 = sext i32 %30 to i64
>   %cmp7.not.not = icmp slt i64 %indvars.iv, %31
>   br i1 %cmp7.not.not, label %omp.inner.for.body, label %omp.loop.exit
> 
> omp.loop.exit:                                    ; preds = %if.end47, %omp.precond.then
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %4)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #7
>   br label %omp.precond.end
15490,15607c12680
< 25:                                               ; preds = %22
<   %26 = load i32, i32* %0, align 4, !tbaa !12
<   br label %98
< 
< 27:                                               ; preds = %22
<   %28 = bitcast i32* %16 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #10
<   store i32 0, i32* %16, align 4, !tbaa !12
<   %29 = bitcast i32* %17 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %29) #10
<   store i32 %23, i32* %17, align 4, !tbaa !12
<   %30 = bitcast i32* %18 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30) #10
<   store i32 1, i32* %18, align 4, !tbaa !12
<   %31 = bitcast i32* %19 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %31) #10
<   store i32 0, i32* %19, align 4, !tbaa !12
<   %32 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %32, i32 34, i32* nonnull %19, i32* nonnull %16, i32* nonnull %17, i32* nonnull %18, i32 1, i32 1) #10
<   %33 = load i32, i32* %17, align 4, !tbaa !12
<   %34 = icmp slt i32 %33, %20
<   %35 = select i1 %34, i32 %33, i32 %23
<   store i32 %35, i32* %17, align 4, !tbaa !12
<   %36 = load i32, i32* %16, align 4, !tbaa !12
<   %37 = icmp sgt i32 %36, %35
<   br i1 %37, label %97, label %38
< 
< 38:                                               ; preds = %27
<   %39 = bitcast i64 %10 to double
<   %40 = bitcast i64 %14 to double
<   %41 = sext i32 %36 to i64
<   br label %42
< 
< 42:                                               ; preds = %38, %92
<   %43 = phi i64 [ %41, %38 ], [ %93, %92 ]
<   %44 = load double*, double** %4, align 8, !tbaa !6
<   %45 = getelementptr inbounds double, double* %44, i64 %43
<   %46 = load double, double* %45, align 8, !tbaa !2
<   %47 = fcmp ugt double %46, 0.000000e+00
<   br i1 %47, label %92, label %48
< 
< 48:                                               ; preds = %42
<   %49 = load i32*, i32** %3, align 8, !tbaa !6
<   %50 = getelementptr inbounds i32, i32* %49, i64 %43
<   %51 = load i32, i32* %50, align 4, !tbaa !12
<   %52 = load double*, double** %5, align 8, !tbaa !6
<   %53 = getelementptr inbounds double, double* %52, i64 %43
<   %54 = load double, double* %53, align 8, !tbaa !2
<   %55 = load double*, double** %6, align 8, !tbaa !6
<   %56 = getelementptr inbounds double, double* %55, i64 %43
<   %57 = load double, double* %56, align 8, !tbaa !2
<   %58 = fmul double %54, %57
<   %59 = load double*, double** %7, align 8, !tbaa !6
<   %60 = sext i32 %51 to i64
<   %61 = getelementptr inbounds double, double* %59, i64 %60
<   %62 = load double, double* %61, align 8, !tbaa !2
<   %63 = fmul double %62, %62
<   %64 = load double*, double** %8, align 8, !tbaa !6
<   %65 = getelementptr inbounds double, double* %64, i64 %43
<   %66 = load double, double* %65, align 8, !tbaa !2
<   %67 = fmul double %63, %66
<   %68 = load double*, double** %9, align 8, !tbaa !6
<   %69 = getelementptr inbounds double, double* %68, i64 %43
<   %70 = load double, double* %69, align 8, !tbaa !2
<   %71 = fmul double %67, %70
<   %72 = fadd double %58, %71
<   %73 = fdiv double %72, %39
<   %74 = fcmp ugt double %73, 0x3842E7922A37D1A0
<   br i1 %74, label %75, label %77
< 
< 75:                                               ; preds = %48
<   %76 = call double @sqrt(double %73) #10
<   br label %77
< 
< 77:                                               ; preds = %48, %75
<   %78 = phi double [ %76, %75 ], [ 0x3C18987CEE7F439D, %48 ]
<   %79 = load double*, double** %12, align 8, !tbaa !6
<   %80 = getelementptr inbounds double, double* %79, i64 %43
<   %81 = load double, double* %80, align 8, !tbaa !2
<   %82 = fmul double %78, %81
<   %83 = load double*, double** %13, align 8, !tbaa !6
<   %84 = getelementptr inbounds double, double* %83, i64 %43
<   %85 = load double, double* %84, align 8, !tbaa !2
<   %86 = fadd double %82, %85
<   %87 = load double*, double** %11, align 8, !tbaa !6
<   %88 = getelementptr inbounds double, double* %87, i64 %43
<   store double %86, double* %88, align 8, !tbaa !2
<   %89 = call double @llvm.fabs.f64(double %86) #10
<   %90 = fcmp olt double %89, %40
<   br i1 %90, label %91, label %92
< 
< 91:                                               ; preds = %77
<   store double 0.000000e+00, double* %88, align 8, !tbaa !2
<   br label %92
< 
< 92:                                               ; preds = %77, %91, %42
<   %93 = add nsw i64 %43, 1
<   %94 = load i32, i32* %17, align 4, !tbaa !12
<   %95 = sext i32 %94 to i64
<   %96 = icmp slt i64 %43, %95
<   br i1 %96, label %42, label %97
< 
< 97:                                               ; preds = %92, %27
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %32)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %29) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #10
<   br label %98
< 
< 98:                                               ; preds = %25, %97
<   %99 = phi i32 [ %26, %25 ], [ %32, %97 ]
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %99)
<   %100 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddiPiE12apolloRegion_3, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %100)
<           to label %101 unwind label %102
< 
< 101:                                              ; preds = %98
---
> omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
15609,15615d12681
< 
< 102:                                              ; preds = %98, %15
<   %103 = landingpad { i8*, i32 }
<           catch i8* null
<   %104 = extractvalue { i8*, i32 } %103, 0
<   call void @__clang_call_terminate(i8* %104) #29
<   unreachable
15619,15864c12685,13006
< define internal void @.omp_outlined..65(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, i64 %2, double** nocapture nonnull readonly align 8 dereferenceable(8) %3, double** nocapture nonnull readonly align 8 dereferenceable(8) %4, double** nocapture nonnull readonly align 8 dereferenceable(8) %5) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %7 = alloca i32, align 4
<   %8 = alloca i32, align 4
<   %9 = alloca i32, align 4
<   %10 = alloca i32, align 4
<   %11 = trunc i64 %2 to i32
<   %12 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcPressureForElemsPdS_S_S_S_S_dddiPiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %12)
<           to label %13 unwind label %182
< 
< 13:                                               ; preds = %6
<   %14 = add nsw i32 %11, -1
<   %15 = icmp sgt i32 %11, 0
<   br i1 %15, label %18, label %16
< 
< 16:                                               ; preds = %13
<   %17 = load i32, i32* %0, align 4, !tbaa !12
<   br label %178
< 
< 18:                                               ; preds = %13
<   %19 = bitcast i32* %7 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #10
<   store i32 0, i32* %7, align 4, !tbaa !12
<   %20 = bitcast i32* %8 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #10
<   store i32 %14, i32* %8, align 4, !tbaa !12
<   %21 = bitcast i32* %9 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #10
<   store i32 1, i32* %9, align 4, !tbaa !12
<   %22 = bitcast i32* %10 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22) #10
<   store i32 0, i32* %10, align 4, !tbaa !12
<   %23 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %23, i32 34, i32* nonnull %10, i32* nonnull %7, i32* nonnull %8, i32* nonnull %9, i32 1, i32 1) #10
<   %24 = load i32, i32* %8, align 4, !tbaa !12
<   %25 = icmp slt i32 %24, %11
<   %26 = select i1 %25, i32 %24, i32 %14
<   store i32 %26, i32* %8, align 4, !tbaa !12
<   %27 = load i32, i32* %7, align 4, !tbaa !12
<   %28 = icmp slt i32 %26, %27
<   br i1 %28, label %177, label %29
< 
< 29:                                               ; preds = %18
<   %30 = load double*, double** %4, align 8, !tbaa !6
<   %31 = load double*, double** %3, align 8, !tbaa !6
<   %32 = load double*, double** %5, align 8, !tbaa !6
<   %33 = sext i32 %27 to i64
<   %34 = add i32 %26, 1
<   %35 = sub i32 %26, %27
<   %36 = zext i32 %35 to i64
<   %37 = add nuw nsw i64 %36, 1
<   %38 = icmp ult i32 %35, 3
<   br i1 %38, label %141, label %39
< 
< 39:                                               ; preds = %29
<   %40 = getelementptr double, double* %31, i64 %33
<   %41 = sub i32 %26, %27
<   %42 = zext i32 %41 to i64
<   %43 = add nsw i64 %33, %42
<   %44 = add nsw i64 %43, 1
<   %45 = getelementptr double, double* %31, i64 %44
<   %46 = getelementptr double, double* %32, i64 %33
<   %47 = getelementptr double, double* %32, i64 %44
<   %48 = getelementptr double, double* %30, i64 %33
<   %49 = getelementptr double, double* %30, i64 %44
<   %50 = icmp ult double* %40, %47
<   %51 = icmp ult double* %46, %45
<   %52 = and i1 %50, %51
<   %53 = icmp ult double* %40, %49
<   %54 = icmp ult double* %48, %45
<   %55 = and i1 %53, %54
<   %56 = or i1 %52, %55
<   %57 = icmp ult double* %46, %49
<   %58 = icmp ult double* %48, %47
<   %59 = and i1 %57, %58
<   %60 = or i1 %56, %59
<   br i1 %60, label %141, label %61
< 
< 61:                                               ; preds = %39
<   %62 = and i64 %37, 8589934588
<   %63 = add nsw i64 %62, %33
<   %64 = add nsw i64 %62, -4
<   %65 = lshr exact i64 %64, 2
<   %66 = add nuw nsw i64 %65, 1
<   %67 = and i64 %66, 1
<   %68 = icmp eq i64 %64, 0
<   br i1 %68, label %116, label %69
< 
< 69:                                               ; preds = %61
<   %70 = and i64 %66, 9223372036854775806
<   br label %71
< 
< 71:                                               ; preds = %71, %69
<   %72 = phi i64 [ 0, %69 ], [ %113, %71 ]
<   %73 = phi i64 [ %70, %69 ], [ %114, %71 ]
<   %74 = add i64 %72, %33
<   %75 = getelementptr inbounds double, double* %30, i64 %74
<   %76 = bitcast double* %75 to <2 x double>*
<   %77 = load <2 x double>, <2 x double>* %76, align 8, !tbaa !2, !alias.scope !115
<   %78 = getelementptr inbounds double, double* %75, i64 2
<   %79 = bitcast double* %78 to <2 x double>*
<   %80 = load <2 x double>, <2 x double>* %79, align 8, !tbaa !2, !alias.scope !115
<   %81 = fadd <2 x double> %77, <double 1.000000e+00, double 1.000000e+00>
<   %82 = fadd <2 x double> %80, <double 1.000000e+00, double 1.000000e+00>
<   %83 = fmul <2 x double> %81, <double 0x3FE5555555555555, double 0x3FE5555555555555>
<   %84 = fmul <2 x double> %82, <double 0x3FE5555555555555, double 0x3FE5555555555555>
<   %85 = getelementptr inbounds double, double* %31, i64 %74
<   %86 = bitcast double* %85 to <2 x double>*
<   store <2 x double> %83, <2 x double>* %86, align 8, !tbaa !2, !alias.scope !118, !noalias !120
<   %87 = getelementptr inbounds double, double* %85, i64 2
<   %88 = bitcast double* %87 to <2 x double>*
<   store <2 x double> %84, <2 x double>* %88, align 8, !tbaa !2, !alias.scope !118, !noalias !120
<   %89 = getelementptr inbounds double, double* %32, i64 %74
<   %90 = bitcast double* %89 to <2 x double>*
<   store <2 x double> <double 0x3FE5555555555555, double 0x3FE5555555555555>, <2 x double>* %90, align 8, !tbaa !2, !alias.scope !122, !noalias !115
<   %91 = getelementptr inbounds double, double* %89, i64 2
<   %92 = bitcast double* %91 to <2 x double>*
<   store <2 x double> <double 0x3FE5555555555555, double 0x3FE5555555555555>, <2 x double>* %92, align 8, !tbaa !2, !alias.scope !122, !noalias !115
<   %93 = or i64 %72, 4
<   %94 = add i64 %93, %33
<   %95 = getelementptr inbounds double, double* %30, i64 %94
<   %96 = bitcast double* %95 to <2 x double>*
<   %97 = load <2 x double>, <2 x double>* %96, align 8, !tbaa !2, !alias.scope !115
<   %98 = getelementptr inbounds double, double* %95, i64 2
<   %99 = bitcast double* %98 to <2 x double>*
<   %100 = load <2 x double>, <2 x double>* %99, align 8, !tbaa !2, !alias.scope !115
<   %101 = fadd <2 x double> %97, <double 1.000000e+00, double 1.000000e+00>
<   %102 = fadd <2 x double> %100, <double 1.000000e+00, double 1.000000e+00>
<   %103 = fmul <2 x double> %101, <double 0x3FE5555555555555, double 0x3FE5555555555555>
<   %104 = fmul <2 x double> %102, <double 0x3FE5555555555555, double 0x3FE5555555555555>
<   %105 = getelementptr inbounds double, double* %31, i64 %94
<   %106 = bitcast double* %105 to <2 x double>*
<   store <2 x double> %103, <2 x double>* %106, align 8, !tbaa !2, !alias.scope !118, !noalias !120
<   %107 = getelementptr inbounds double, double* %105, i64 2
<   %108 = bitcast double* %107 to <2 x double>*
<   store <2 x double> %104, <2 x double>* %108, align 8, !tbaa !2, !alias.scope !118, !noalias !120
<   %109 = getelementptr inbounds double, double* %32, i64 %94
<   %110 = bitcast double* %109 to <2 x double>*
<   store <2 x double> <double 0x3FE5555555555555, double 0x3FE5555555555555>, <2 x double>* %110, align 8, !tbaa !2, !alias.scope !122, !noalias !115
<   %111 = getelementptr inbounds double, double* %109, i64 2
<   %112 = bitcast double* %111 to <2 x double>*
<   store <2 x double> <double 0x3FE5555555555555, double 0x3FE5555555555555>, <2 x double>* %112, align 8, !tbaa !2, !alias.scope !122, !noalias !115
<   %113 = add i64 %72, 8
<   %114 = add i64 %73, -2
<   %115 = icmp eq i64 %114, 0
<   br i1 %115, label %116, label %71, !llvm.loop !123
< 
< 116:                                              ; preds = %71, %61
<   %117 = phi i64 [ 0, %61 ], [ %113, %71 ]
<   %118 = icmp eq i64 %67, 0
<   br i1 %118, label %139, label %119
< 
< 119:                                              ; preds = %116
<   %120 = add i64 %117, %33
<   %121 = getelementptr inbounds double, double* %30, i64 %120
<   %122 = bitcast double* %121 to <2 x double>*
<   %123 = load <2 x double>, <2 x double>* %122, align 8, !tbaa !2, !alias.scope !115
<   %124 = getelementptr inbounds double, double* %121, i64 2
<   %125 = bitcast double* %124 to <2 x double>*
<   %126 = load <2 x double>, <2 x double>* %125, align 8, !tbaa !2, !alias.scope !115
<   %127 = fadd <2 x double> %123, <double 1.000000e+00, double 1.000000e+00>
<   %128 = fadd <2 x double> %126, <double 1.000000e+00, double 1.000000e+00>
<   %129 = fmul <2 x double> %127, <double 0x3FE5555555555555, double 0x3FE5555555555555>
<   %130 = fmul <2 x double> %128, <double 0x3FE5555555555555, double 0x3FE5555555555555>
<   %131 = getelementptr inbounds double, double* %31, i64 %120
<   %132 = bitcast double* %131 to <2 x double>*
<   store <2 x double> %129, <2 x double>* %132, align 8, !tbaa !2, !alias.scope !118, !noalias !120
<   %133 = getelementptr inbounds double, double* %131, i64 2
<   %134 = bitcast double* %133 to <2 x double>*
<   store <2 x double> %130, <2 x double>* %134, align 8, !tbaa !2, !alias.scope !118, !noalias !120
<   %135 = getelementptr inbounds double, double* %32, i64 %120
<   %136 = bitcast double* %135 to <2 x double>*
<   store <2 x double> <double 0x3FE5555555555555, double 0x3FE5555555555555>, <2 x double>* %136, align 8, !tbaa !2, !alias.scope !122, !noalias !115
<   %137 = getelementptr inbounds double, double* %135, i64 2
<   %138 = bitcast double* %137 to <2 x double>*
<   store <2 x double> <double 0x3FE5555555555555, double 0x3FE5555555555555>, <2 x double>* %138, align 8, !tbaa !2, !alias.scope !122, !noalias !115
<   br label %139
< 
< 139:                                              ; preds = %116, %119
<   %140 = icmp eq i64 %37, %62
<   br i1 %140, label %177, label %141
< 
< 141:                                              ; preds = %39, %29, %139
<   %142 = phi i64 [ %33, %39 ], [ %33, %29 ], [ %63, %139 ]
<   %143 = add i32 %26, 1
<   %144 = trunc i64 %142 to i32
<   %145 = sub i32 %143, %144
<   %146 = and i32 %145, 1
<   %147 = icmp eq i32 %146, 0
<   br i1 %147, label %156, label %148
< 
< 148:                                              ; preds = %141
<   %149 = getelementptr inbounds double, double* %30, i64 %142
<   %150 = load double, double* %149, align 8, !tbaa !2
<   %151 = fadd double %150, 1.000000e+00
<   %152 = fmul double %151, 0x3FE5555555555555
<   %153 = getelementptr inbounds double, double* %31, i64 %142
<   store double %152, double* %153, align 8, !tbaa !2
<   %154 = getelementptr inbounds double, double* %32, i64 %142
<   store double 0x3FE5555555555555, double* %154, align 8, !tbaa !2
<   %155 = add nsw i64 %142, 1
<   br label %156
< 
< 156:                                              ; preds = %148, %141
<   %157 = phi i64 [ %142, %141 ], [ %155, %148 ]
<   %158 = icmp eq i32 %26, %144
<   br i1 %158, label %177, label %159
< 
< 159:                                              ; preds = %156, %159
<   %160 = phi i64 [ %174, %159 ], [ %157, %156 ]
<   %161 = getelementptr inbounds double, double* %30, i64 %160
<   %162 = load double, double* %161, align 8, !tbaa !2
<   %163 = fadd double %162, 1.000000e+00
<   %164 = fmul double %163, 0x3FE5555555555555
<   %165 = getelementptr inbounds double, double* %31, i64 %160
<   store double %164, double* %165, align 8, !tbaa !2
<   %166 = getelementptr inbounds double, double* %32, i64 %160
<   store double 0x3FE5555555555555, double* %166, align 8, !tbaa !2
<   %167 = add nsw i64 %160, 1
<   %168 = getelementptr inbounds double, double* %30, i64 %167
<   %169 = load double, double* %168, align 8, !tbaa !2
<   %170 = fadd double %169, 1.000000e+00
<   %171 = fmul double %170, 0x3FE5555555555555
<   %172 = getelementptr inbounds double, double* %31, i64 %167
<   store double %171, double* %172, align 8, !tbaa !2
<   %173 = getelementptr inbounds double, double* %32, i64 %167
<   store double 0x3FE5555555555555, double* %173, align 8, !tbaa !2
<   %174 = add nsw i64 %160, 2
<   %175 = trunc i64 %174 to i32
<   %176 = icmp eq i32 %34, %175
<   br i1 %176, label %177, label %159, !llvm.loop !124
< 
< 177:                                              ; preds = %156, %159, %139, %18
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %23)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #10
<   br label %178
< 
< 178:                                              ; preds = %16, %177
<   %179 = phi i32 [ %17, %16 ], [ %23, %177 ]
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %179)
<   %180 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcPressureForElemsPdS_S_S_S_S_dddiPiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %180)
<           to label %181 unwind label %182
---
> define internal void @.omp_outlined..42(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i64 %length, double** nocapture nonnull readonly align 8 dereferenceable(8) %bvc, double** nocapture nonnull readonly align 8 dereferenceable(8) %compression, double** nocapture nonnull readonly align 8 dereferenceable(8) %pbvc) #6 {
> entry:
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %length.addr.sroa.0.0.extract.trunc = trunc i64 %length to i32
>   %sub2 = add nsw i32 %length.addr.sroa.0.0.extract.trunc, -1
>   %cmp = icmp sgt i32 %length.addr.sroa.0.0.extract.trunc, 0
>   br i1 %cmp, label %omp.precond.then, label %omp.precond.end
> 
> omp.precond.then:                                 ; preds = %entry
>   %0 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %1 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #7
>   store i32 %sub2, i32* %.omp.ub, align 4, !tbaa !6
>   %2 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %3 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   %4 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %4, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %5 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp4.not = icmp slt i32 %5, %length.addr.sroa.0.0.extract.trunc
>   %cond = select i1 %cmp4.not, i32 %5, i32 %sub2
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %6 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp5.not28 = icmp sgt i32 %6, %cond
>   br i1 %cmp5.not28, label %omp.loop.exit, label %omp.inner.for.body.lr.ph
> 
> omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
>   %7 = load double*, double** %compression, align 8, !tbaa !41
>   %8 = load double*, double** %bvc, align 8, !tbaa !41
>   %9 = load double*, double** %pbvc, align 8, !tbaa !41
>   %10 = sext i32 %6 to i64
>   %11 = icmp sgt i32 %cond, %6
>   %smax = select i1 %11, i32 %cond, i32 %6
>   %12 = add i32 %smax, 1
>   %13 = sub i32 %smax, %6
>   %14 = zext i32 %13 to i64
>   %15 = add nuw nsw i64 %14, 1
>   %min.iters.check = icmp ult i32 %13, 15
>   br i1 %min.iters.check, label %omp.inner.for.body.preheader, label %vector.memcheck
> 
> vector.memcheck:                                  ; preds = %omp.inner.for.body.lr.ph
>   %scevgep = getelementptr double, double* %8, i64 %10
>   %16 = sub i32 %smax, %6
>   %17 = zext i32 %16 to i64
>   %18 = add nsw i64 %10, %17
>   %19 = add nsw i64 %18, 1
>   %scevgep31 = getelementptr double, double* %8, i64 %19
>   %scevgep33 = getelementptr double, double* %9, i64 %10
>   %scevgep35 = getelementptr double, double* %9, i64 %19
>   %scevgep37 = getelementptr double, double* %7, i64 %10
>   %scevgep39 = getelementptr double, double* %7, i64 %19
>   %bound0 = icmp ult double* %scevgep, %scevgep35
>   %bound1 = icmp ult double* %scevgep33, %scevgep31
>   %found.conflict = and i1 %bound0, %bound1
>   %bound041 = icmp ult double* %scevgep, %scevgep39
>   %bound142 = icmp ult double* %scevgep37, %scevgep31
>   %found.conflict43 = and i1 %bound041, %bound142
>   %conflict.rdx = or i1 %found.conflict, %found.conflict43
>   %bound044 = icmp ult double* %scevgep33, %scevgep39
>   %bound145 = icmp ult double* %scevgep37, %scevgep35
>   %found.conflict46 = and i1 %bound044, %bound145
>   %conflict.rdx47 = or i1 %conflict.rdx, %found.conflict46
>   br i1 %conflict.rdx47, label %omp.inner.for.body.preheader, label %vector.ph
> 
> vector.ph:                                        ; preds = %vector.memcheck
>   %n.vec = and i64 %15, 8589934576
>   %ind.end = add nsw i64 %n.vec, %10
>   %20 = add nsw i64 %n.vec, -16
>   %21 = lshr exact i64 %20, 4
>   %22 = add nuw nsw i64 %21, 1
>   %xtraiter51 = and i64 %22, 1
>   %23 = icmp eq i64 %20, 0
>   br i1 %23, label %middle.block.unr-lcssa, label %vector.ph.new
> 
> vector.ph.new:                                    ; preds = %vector.ph
>   %unroll_iter = and i64 %22, 2305843009213693950
>   br label %vector.body
> 
> vector.body:                                      ; preds = %vector.body, %vector.ph.new
>   %index = phi i64 [ 0, %vector.ph.new ], [ %index.next.1, %vector.body ]
>   %niter = phi i64 [ %unroll_iter, %vector.ph.new ], [ %niter.nsub.1, %vector.body ]
>   %offset.idx = add i64 %index, %10
>   %24 = getelementptr inbounds double, double* %7, i64 %offset.idx
>   %25 = bitcast double* %24 to <4 x double>*
>   %wide.load = load <4 x double>, <4 x double>* %25, align 8, !tbaa !2, !alias.scope !116
>   %26 = getelementptr inbounds double, double* %24, i64 4
>   %27 = bitcast double* %26 to <4 x double>*
>   %wide.load48 = load <4 x double>, <4 x double>* %27, align 8, !tbaa !2, !alias.scope !116
>   %28 = getelementptr inbounds double, double* %24, i64 8
>   %29 = bitcast double* %28 to <4 x double>*
>   %wide.load49 = load <4 x double>, <4 x double>* %29, align 8, !tbaa !2, !alias.scope !116
>   %30 = getelementptr inbounds double, double* %24, i64 12
>   %31 = bitcast double* %30 to <4 x double>*
>   %wide.load50 = load <4 x double>, <4 x double>* %31, align 8, !tbaa !2, !alias.scope !116
>   %32 = fadd <4 x double> %wide.load, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
>   %33 = fadd <4 x double> %wide.load48, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
>   %34 = fadd <4 x double> %wide.load49, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
>   %35 = fadd <4 x double> %wide.load50, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
>   %36 = fmul <4 x double> %32, <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>
>   %37 = fmul <4 x double> %33, <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>
>   %38 = fmul <4 x double> %34, <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>
>   %39 = fmul <4 x double> %35, <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>
>   %40 = getelementptr inbounds double, double* %8, i64 %offset.idx
>   %41 = bitcast double* %40 to <4 x double>*
>   store <4 x double> %36, <4 x double>* %41, align 8, !tbaa !2, !alias.scope !119, !noalias !121
>   %42 = getelementptr inbounds double, double* %40, i64 4
>   %43 = bitcast double* %42 to <4 x double>*
>   store <4 x double> %37, <4 x double>* %43, align 8, !tbaa !2, !alias.scope !119, !noalias !121
>   %44 = getelementptr inbounds double, double* %40, i64 8
>   %45 = bitcast double* %44 to <4 x double>*
>   store <4 x double> %38, <4 x double>* %45, align 8, !tbaa !2, !alias.scope !119, !noalias !121
>   %46 = getelementptr inbounds double, double* %40, i64 12
>   %47 = bitcast double* %46 to <4 x double>*
>   store <4 x double> %39, <4 x double>* %47, align 8, !tbaa !2, !alias.scope !119, !noalias !121
>   %48 = getelementptr inbounds double, double* %9, i64 %offset.idx
>   %49 = bitcast double* %48 to <4 x double>*
>   store <4 x double> <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>, <4 x double>* %49, align 8, !tbaa !2, !alias.scope !123, !noalias !116
>   %50 = getelementptr inbounds double, double* %48, i64 4
>   %51 = bitcast double* %50 to <4 x double>*
>   store <4 x double> <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>, <4 x double>* %51, align 8, !tbaa !2, !alias.scope !123, !noalias !116
>   %52 = getelementptr inbounds double, double* %48, i64 8
>   %53 = bitcast double* %52 to <4 x double>*
>   store <4 x double> <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>, <4 x double>* %53, align 8, !tbaa !2, !alias.scope !123, !noalias !116
>   %54 = getelementptr inbounds double, double* %48, i64 12
>   %55 = bitcast double* %54 to <4 x double>*
>   store <4 x double> <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>, <4 x double>* %55, align 8, !tbaa !2, !alias.scope !123, !noalias !116
>   %index.next = or i64 %index, 16
>   %offset.idx.1 = add i64 %index.next, %10
>   %56 = getelementptr inbounds double, double* %7, i64 %offset.idx.1
>   %57 = bitcast double* %56 to <4 x double>*
>   %wide.load.1 = load <4 x double>, <4 x double>* %57, align 8, !tbaa !2, !alias.scope !116
>   %58 = getelementptr inbounds double, double* %56, i64 4
>   %59 = bitcast double* %58 to <4 x double>*
>   %wide.load48.1 = load <4 x double>, <4 x double>* %59, align 8, !tbaa !2, !alias.scope !116
>   %60 = getelementptr inbounds double, double* %56, i64 8
>   %61 = bitcast double* %60 to <4 x double>*
>   %wide.load49.1 = load <4 x double>, <4 x double>* %61, align 8, !tbaa !2, !alias.scope !116
>   %62 = getelementptr inbounds double, double* %56, i64 12
>   %63 = bitcast double* %62 to <4 x double>*
>   %wide.load50.1 = load <4 x double>, <4 x double>* %63, align 8, !tbaa !2, !alias.scope !116
>   %64 = fadd <4 x double> %wide.load.1, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
>   %65 = fadd <4 x double> %wide.load48.1, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
>   %66 = fadd <4 x double> %wide.load49.1, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
>   %67 = fadd <4 x double> %wide.load50.1, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
>   %68 = fmul <4 x double> %64, <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>
>   %69 = fmul <4 x double> %65, <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>
>   %70 = fmul <4 x double> %66, <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>
>   %71 = fmul <4 x double> %67, <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>
>   %72 = getelementptr inbounds double, double* %8, i64 %offset.idx.1
>   %73 = bitcast double* %72 to <4 x double>*
>   store <4 x double> %68, <4 x double>* %73, align 8, !tbaa !2, !alias.scope !119, !noalias !121
>   %74 = getelementptr inbounds double, double* %72, i64 4
>   %75 = bitcast double* %74 to <4 x double>*
>   store <4 x double> %69, <4 x double>* %75, align 8, !tbaa !2, !alias.scope !119, !noalias !121
>   %76 = getelementptr inbounds double, double* %72, i64 8
>   %77 = bitcast double* %76 to <4 x double>*
>   store <4 x double> %70, <4 x double>* %77, align 8, !tbaa !2, !alias.scope !119, !noalias !121
>   %78 = getelementptr inbounds double, double* %72, i64 12
>   %79 = bitcast double* %78 to <4 x double>*
>   store <4 x double> %71, <4 x double>* %79, align 8, !tbaa !2, !alias.scope !119, !noalias !121
>   %80 = getelementptr inbounds double, double* %9, i64 %offset.idx.1
>   %81 = bitcast double* %80 to <4 x double>*
>   store <4 x double> <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>, <4 x double>* %81, align 8, !tbaa !2, !alias.scope !123, !noalias !116
>   %82 = getelementptr inbounds double, double* %80, i64 4
>   %83 = bitcast double* %82 to <4 x double>*
>   store <4 x double> <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>, <4 x double>* %83, align 8, !tbaa !2, !alias.scope !123, !noalias !116
>   %84 = getelementptr inbounds double, double* %80, i64 8
>   %85 = bitcast double* %84 to <4 x double>*
>   store <4 x double> <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>, <4 x double>* %85, align 8, !tbaa !2, !alias.scope !123, !noalias !116
>   %86 = getelementptr inbounds double, double* %80, i64 12
>   %87 = bitcast double* %86 to <4 x double>*
>   store <4 x double> <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>, <4 x double>* %87, align 8, !tbaa !2, !alias.scope !123, !noalias !116
>   %index.next.1 = add i64 %index, 32
>   %niter.nsub.1 = add i64 %niter, -2
>   %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
>   br i1 %niter.ncmp.1, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !124
> 
> middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
>   %index.unr = phi i64 [ 0, %vector.ph ], [ %index.next.1, %vector.body ]
>   %lcmp.mod52.not = icmp eq i64 %xtraiter51, 0
>   br i1 %lcmp.mod52.not, label %middle.block, label %vector.body.epil
> 
> vector.body.epil:                                 ; preds = %middle.block.unr-lcssa
>   %offset.idx.epil = add i64 %index.unr, %10
>   %88 = getelementptr inbounds double, double* %7, i64 %offset.idx.epil
>   %89 = bitcast double* %88 to <4 x double>*
>   %wide.load.epil = load <4 x double>, <4 x double>* %89, align 8, !tbaa !2, !alias.scope !116
>   %90 = getelementptr inbounds double, double* %88, i64 4
>   %91 = bitcast double* %90 to <4 x double>*
>   %wide.load48.epil = load <4 x double>, <4 x double>* %91, align 8, !tbaa !2, !alias.scope !116
>   %92 = getelementptr inbounds double, double* %88, i64 8
>   %93 = bitcast double* %92 to <4 x double>*
>   %wide.load49.epil = load <4 x double>, <4 x double>* %93, align 8, !tbaa !2, !alias.scope !116
>   %94 = getelementptr inbounds double, double* %88, i64 12
>   %95 = bitcast double* %94 to <4 x double>*
>   %wide.load50.epil = load <4 x double>, <4 x double>* %95, align 8, !tbaa !2, !alias.scope !116
>   %96 = fadd <4 x double> %wide.load.epil, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
>   %97 = fadd <4 x double> %wide.load48.epil, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
>   %98 = fadd <4 x double> %wide.load49.epil, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
>   %99 = fadd <4 x double> %wide.load50.epil, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
>   %100 = fmul <4 x double> %96, <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>
>   %101 = fmul <4 x double> %97, <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>
>   %102 = fmul <4 x double> %98, <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>
>   %103 = fmul <4 x double> %99, <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>
>   %104 = getelementptr inbounds double, double* %8, i64 %offset.idx.epil
>   %105 = bitcast double* %104 to <4 x double>*
>   store <4 x double> %100, <4 x double>* %105, align 8, !tbaa !2, !alias.scope !119, !noalias !121
>   %106 = getelementptr inbounds double, double* %104, i64 4
>   %107 = bitcast double* %106 to <4 x double>*
>   store <4 x double> %101, <4 x double>* %107, align 8, !tbaa !2, !alias.scope !119, !noalias !121
>   %108 = getelementptr inbounds double, double* %104, i64 8
>   %109 = bitcast double* %108 to <4 x double>*
>   store <4 x double> %102, <4 x double>* %109, align 8, !tbaa !2, !alias.scope !119, !noalias !121
>   %110 = getelementptr inbounds double, double* %104, i64 12
>   %111 = bitcast double* %110 to <4 x double>*
>   store <4 x double> %103, <4 x double>* %111, align 8, !tbaa !2, !alias.scope !119, !noalias !121
>   %112 = getelementptr inbounds double, double* %9, i64 %offset.idx.epil
>   %113 = bitcast double* %112 to <4 x double>*
>   store <4 x double> <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>, <4 x double>* %113, align 8, !tbaa !2, !alias.scope !123, !noalias !116
>   %114 = getelementptr inbounds double, double* %112, i64 4
>   %115 = bitcast double* %114 to <4 x double>*
>   store <4 x double> <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>, <4 x double>* %115, align 8, !tbaa !2, !alias.scope !123, !noalias !116
>   %116 = getelementptr inbounds double, double* %112, i64 8
>   %117 = bitcast double* %116 to <4 x double>*
>   store <4 x double> <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>, <4 x double>* %117, align 8, !tbaa !2, !alias.scope !123, !noalias !116
>   %118 = getelementptr inbounds double, double* %112, i64 12
>   %119 = bitcast double* %118 to <4 x double>*
>   store <4 x double> <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>, <4 x double>* %119, align 8, !tbaa !2, !alias.scope !123, !noalias !116
>   br label %middle.block
> 
> middle.block:                                     ; preds = %middle.block.unr-lcssa, %vector.body.epil
>   %cmp.n = icmp eq i64 %15, %n.vec
>   br i1 %cmp.n, label %omp.loop.exit, label %omp.inner.for.body.preheader
> 
> omp.inner.for.body.preheader:                     ; preds = %middle.block, %vector.memcheck, %omp.inner.for.body.lr.ph
>   %indvars.iv.ph = phi i64 [ %10, %vector.memcheck ], [ %10, %omp.inner.for.body.lr.ph ], [ %ind.end, %middle.block ]
>   %120 = add i32 %smax, 1
>   %121 = trunc i64 %indvars.iv.ph to i32
>   %122 = sub i32 %120, %121
>   %123 = sub i32 %smax, %121
>   %xtraiter = and i32 %122, 3
>   %lcmp.mod.not = icmp eq i32 %xtraiter, 0
>   br i1 %lcmp.mod.not, label %omp.inner.for.body.prol.loopexit, label %omp.inner.for.body.prol
> 
> omp.inner.for.body.prol:                          ; preds = %omp.inner.for.body.preheader, %omp.inner.for.body.prol
>   %indvars.iv.prol = phi i64 [ %indvars.iv.next.prol, %omp.inner.for.body.prol ], [ %indvars.iv.ph, %omp.inner.for.body.preheader ]
>   %prol.iter = phi i32 [ %prol.iter.sub, %omp.inner.for.body.prol ], [ %xtraiter, %omp.inner.for.body.preheader ]
>   %arrayidx.prol = getelementptr inbounds double, double* %7, i64 %indvars.iv.prol
>   %124 = load double, double* %arrayidx.prol, align 8, !tbaa !2
>   %add6.prol = fadd double %124, 1.000000e+00
>   %mul7.prol = fmul double %add6.prol, 0x3FE5555555555555
>   %arrayidx9.prol = getelementptr inbounds double, double* %8, i64 %indvars.iv.prol
>   store double %mul7.prol, double* %arrayidx9.prol, align 8, !tbaa !2
>   %arrayidx11.prol = getelementptr inbounds double, double* %9, i64 %indvars.iv.prol
>   store double 0x3FE5555555555555, double* %arrayidx11.prol, align 8, !tbaa !2
>   %indvars.iv.next.prol = add nsw i64 %indvars.iv.prol, 1
>   %prol.iter.sub = add i32 %prol.iter, -1
>   %prol.iter.cmp.not = icmp eq i32 %prol.iter.sub, 0
>   br i1 %prol.iter.cmp.not, label %omp.inner.for.body.prol.loopexit, label %omp.inner.for.body.prol, !llvm.loop !125
> 
> omp.inner.for.body.prol.loopexit:                 ; preds = %omp.inner.for.body.prol, %omp.inner.for.body.preheader
>   %indvars.iv.unr = phi i64 [ %indvars.iv.ph, %omp.inner.for.body.preheader ], [ %indvars.iv.next.prol, %omp.inner.for.body.prol ]
>   %125 = icmp ult i32 %123, 3
>   br i1 %125, label %omp.loop.exit, label %omp.inner.for.body
> 
> omp.inner.for.body:                               ; preds = %omp.inner.for.body.prol.loopexit, %omp.inner.for.body
>   %indvars.iv = phi i64 [ %indvars.iv.next.3, %omp.inner.for.body ], [ %indvars.iv.unr, %omp.inner.for.body.prol.loopexit ]
>   %arrayidx = getelementptr inbounds double, double* %7, i64 %indvars.iv
>   %126 = load double, double* %arrayidx, align 8, !tbaa !2
>   %add6 = fadd double %126, 1.000000e+00
>   %mul7 = fmul double %add6, 0x3FE5555555555555
>   %arrayidx9 = getelementptr inbounds double, double* %8, i64 %indvars.iv
>   store double %mul7, double* %arrayidx9, align 8, !tbaa !2
>   %arrayidx11 = getelementptr inbounds double, double* %9, i64 %indvars.iv
>   store double 0x3FE5555555555555, double* %arrayidx11, align 8, !tbaa !2
>   %indvars.iv.next = add nsw i64 %indvars.iv, 1
>   %arrayidx.1 = getelementptr inbounds double, double* %7, i64 %indvars.iv.next
>   %127 = load double, double* %arrayidx.1, align 8, !tbaa !2
>   %add6.1 = fadd double %127, 1.000000e+00
>   %mul7.1 = fmul double %add6.1, 0x3FE5555555555555
>   %arrayidx9.1 = getelementptr inbounds double, double* %8, i64 %indvars.iv.next
>   store double %mul7.1, double* %arrayidx9.1, align 8, !tbaa !2
>   %arrayidx11.1 = getelementptr inbounds double, double* %9, i64 %indvars.iv.next
>   store double 0x3FE5555555555555, double* %arrayidx11.1, align 8, !tbaa !2
>   %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
>   %arrayidx.2 = getelementptr inbounds double, double* %7, i64 %indvars.iv.next.1
>   %128 = load double, double* %arrayidx.2, align 8, !tbaa !2
>   %add6.2 = fadd double %128, 1.000000e+00
>   %mul7.2 = fmul double %add6.2, 0x3FE5555555555555
>   %arrayidx9.2 = getelementptr inbounds double, double* %8, i64 %indvars.iv.next.1
>   store double %mul7.2, double* %arrayidx9.2, align 8, !tbaa !2
>   %arrayidx11.2 = getelementptr inbounds double, double* %9, i64 %indvars.iv.next.1
>   store double 0x3FE5555555555555, double* %arrayidx11.2, align 8, !tbaa !2
>   %indvars.iv.next.2 = add nsw i64 %indvars.iv, 3
>   %arrayidx.3 = getelementptr inbounds double, double* %7, i64 %indvars.iv.next.2
>   %129 = load double, double* %arrayidx.3, align 8, !tbaa !2
>   %add6.3 = fadd double %129, 1.000000e+00
>   %mul7.3 = fmul double %add6.3, 0x3FE5555555555555
>   %arrayidx9.3 = getelementptr inbounds double, double* %8, i64 %indvars.iv.next.2
>   store double %mul7.3, double* %arrayidx9.3, align 8, !tbaa !2
>   %arrayidx11.3 = getelementptr inbounds double, double* %9, i64 %indvars.iv.next.2
>   store double 0x3FE5555555555555, double* %arrayidx11.3, align 8, !tbaa !2
>   %indvars.iv.next.3 = add nsw i64 %indvars.iv, 4
>   %lftr.wideiv.3 = trunc i64 %indvars.iv.next.3 to i32
>   %exitcond.not.3 = icmp eq i32 %12, %lftr.wideiv.3
>   br i1 %exitcond.not.3, label %omp.loop.exit, label %omp.inner.for.body, !llvm.loop !126
> 
> omp.loop.exit:                                    ; preds = %omp.inner.for.body.prol.loopexit, %omp.inner.for.body, %middle.block, %omp.precond.then
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %4)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #7
>   br label %omp.precond.end
15866c13008
< 181:                                              ; preds = %178
---
> omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
15868,15874d13009
< 
< 182:                                              ; preds = %178, %6
<   %183 = landingpad { i8*, i32 }
<           catch i8* null
<   %184 = extractvalue { i8*, i32 } %183, 0
<   call void @__clang_call_terminate(i8* %184) #29
<   unreachable
15878,15986c13013,13167
< define internal void @.omp_outlined..67(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, i64 %2, i32** nocapture nonnull readonly align 8 dereferenceable(8) %3, double** nocapture nonnull readonly align 8 dereferenceable(8) %4, double** nocapture nonnull readonly align 8 dereferenceable(8) %5, double** nocapture nonnull readonly align 8 dereferenceable(8) %6, i64 %7, double** nocapture nonnull readonly align 8 dereferenceable(8) %8, i64 %9, i64 %10) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %12 = alloca i32, align 4
<   %13 = alloca i32, align 4
<   %14 = alloca i32, align 4
<   %15 = alloca i32, align 4
<   %16 = trunc i64 %2 to i32
<   %17 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcPressureForElemsPdS_S_S_S_S_dddiPiE12apolloRegion_0, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %17)
<           to label %18 unwind label %77
< 
< 18:                                               ; preds = %11
<   %19 = add nsw i32 %16, -1
<   %20 = icmp sgt i32 %16, 0
<   br i1 %20, label %23, label %21
< 
< 21:                                               ; preds = %18
<   %22 = load i32, i32* %0, align 4, !tbaa !12
<   br label %73
< 
< 23:                                               ; preds = %18
<   %24 = bitcast i32* %12 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #10
<   store i32 0, i32* %12, align 4, !tbaa !12
<   %25 = bitcast i32* %13 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %25) #10
<   store i32 %19, i32* %13, align 4, !tbaa !12
<   %26 = bitcast i32* %14 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %26) #10
<   store i32 1, i32* %14, align 4, !tbaa !12
<   %27 = bitcast i32* %15 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %27) #10
<   store i32 0, i32* %15, align 4, !tbaa !12
<   %28 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %28, i32 34, i32* nonnull %15, i32* nonnull %12, i32* nonnull %13, i32* nonnull %14, i32 1, i32 1) #10
<   %29 = load i32, i32* %13, align 4, !tbaa !12
<   %30 = icmp slt i32 %29, %16
<   %31 = select i1 %30, i32 %29, i32 %19
<   store i32 %31, i32* %13, align 4, !tbaa !12
<   %32 = load i32, i32* %12, align 4, !tbaa !12
<   %33 = icmp sgt i32 %32, %31
<   br i1 %33, label %72, label %34
< 
< 34:                                               ; preds = %23
<   %35 = load i32*, i32** %3, align 8, !tbaa !6
<   %36 = load double*, double** %5, align 8, !tbaa !6
<   %37 = load double*, double** %6, align 8, !tbaa !6
<   %38 = load double*, double** %4, align 8, !tbaa !6
<   %39 = bitcast i64 %7 to double
<   %40 = load double*, double** %8, align 8, !tbaa !6
<   %41 = bitcast i64 %9 to double
<   %42 = bitcast i64 %10 to double
<   %43 = sext i32 %32 to i64
<   %44 = add i32 %31, 1
<   br label %45
< 
< 45:                                               ; preds = %34, %68
<   %46 = phi i64 [ %43, %34 ], [ %69, %68 ]
<   %47 = getelementptr inbounds i32, i32* %35, i64 %46
<   %48 = load i32, i32* %47, align 4, !tbaa !12
<   %49 = getelementptr inbounds double, double* %36, i64 %46
<   %50 = load double, double* %49, align 8, !tbaa !2
<   %51 = getelementptr inbounds double, double* %37, i64 %46
<   %52 = load double, double* %51, align 8, !tbaa !2
<   %53 = fmul double %50, %52
<   %54 = getelementptr inbounds double, double* %38, i64 %46
<   %55 = call double @llvm.fabs.f64(double %53) #10
<   %56 = fcmp olt double %55, %39
<   %57 = select i1 %56, double 0.000000e+00, double %53
<   store double %57, double* %54, align 8, !tbaa !2
<   %58 = sext i32 %48 to i64
<   %59 = getelementptr inbounds double, double* %40, i64 %58
<   %60 = load double, double* %59, align 8, !tbaa !2
<   %61 = fcmp ult double %60, %41
<   br i1 %61, label %63, label %62
< 
< 62:                                               ; preds = %45
<   store double 0.000000e+00, double* %54, align 8, !tbaa !2
<   br label %63
< 
< 63:                                               ; preds = %62, %45
<   %64 = phi double [ 0.000000e+00, %62 ], [ %57, %45 ]
<   %65 = fcmp olt double %64, %42
<   br i1 %65, label %66, label %68
< 
< 66:                                               ; preds = %63
<   %67 = bitcast double* %54 to i64*
<   store i64 %10, i64* %67, align 8, !tbaa !2
<   br label %68
< 
< 68:                                               ; preds = %66, %63
<   %69 = add nsw i64 %46, 1
<   %70 = trunc i64 %69 to i32
<   %71 = icmp eq i32 %44, %70
<   br i1 %71, label %72, label %45
< 
< 72:                                               ; preds = %68, %23
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %28)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %27) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %26) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #10
<   br label %73
< 
< 73:                                               ; preds = %21, %72
<   %74 = phi i32 [ %22, %21 ], [ %28, %72 ]
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %74)
<   %75 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL20CalcPressureForElemsPdS_S_S_S_S_dddiPiE12apolloRegion_0, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %75)
<           to label %76 unwind label %77
---
> define internal void @.omp_outlined..43(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i64 %length, i32** nocapture nonnull readonly align 8 dereferenceable(8) %regElemList, double** nocapture nonnull readonly align 8 dereferenceable(8) %p_new, double** nocapture nonnull readonly align 8 dereferenceable(8) %bvc, double** nocapture nonnull readonly align 8 dereferenceable(8) %e_old, i64 %p_cut, double** nocapture nonnull readonly align 8 dereferenceable(8) %vnewc, i64 %eosvmax, i64 %pmin) #6 {
> entry:
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %length.addr.sroa.0.0.extract.trunc = trunc i64 %length to i32
>   %sub5 = add nsw i32 %length.addr.sroa.0.0.extract.trunc, -1
>   %cmp = icmp sgt i32 %length.addr.sroa.0.0.extract.trunc, 0
>   br i1 %cmp, label %omp.precond.then, label %omp.precond.end
> 
> omp.precond.then:                                 ; preds = %entry
>   %0 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %1 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #7
>   store i32 %sub5, i32* %.omp.ub, align 4, !tbaa !6
>   %2 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %3 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   %4 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %4, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %5 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp7.not = icmp slt i32 %5, %length.addr.sroa.0.0.extract.trunc
>   %cond = select i1 %cmp7.not, i32 %5, i32 %sub5
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %6 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp8.not57 = icmp sgt i32 %6, %cond
>   br i1 %cmp8.not57, label %omp.loop.exit, label %omp.inner.for.body.lr.ph
> 
> omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
>   %7 = load i32*, i32** %regElemList, align 8, !tbaa !41
>   %8 = load double*, double** %bvc, align 8, !tbaa !41
>   %9 = load double*, double** %e_old, align 8, !tbaa !41
>   %10 = load double*, double** %p_new, align 8, !tbaa !41
>   %11 = bitcast i64 %p_cut to double
>   %12 = load double*, double** %vnewc, align 8, !tbaa !41
>   %13 = bitcast i64 %eosvmax to double
>   %14 = bitcast i64 %pmin to double
>   %15 = sext i32 %6 to i64
>   %16 = icmp sgt i32 %cond, %6
>   %smax = select i1 %16, i32 %cond, i32 %6
>   %17 = add i32 %smax, 1
>   %18 = sub i32 %17, %6
>   %xtraiter = and i32 %18, 1
>   %lcmp.mod.not = icmp eq i32 %xtraiter, 0
>   br i1 %lcmp.mod.not, label %omp.inner.for.body.prol.loopexit, label %omp.inner.for.body.prol
> 
> omp.inner.for.body.prol:                          ; preds = %omp.inner.for.body.lr.ph
>   %arrayidx.prol = getelementptr inbounds i32, i32* %7, i64 %15
>   %19 = load i32, i32* %arrayidx.prol, align 4, !tbaa !6
>   %arrayidx10.prol = getelementptr inbounds double, double* %8, i64 %15
>   %20 = load double, double* %arrayidx10.prol, align 8, !tbaa !2
>   %arrayidx12.prol = getelementptr inbounds double, double* %9, i64 %15
>   %21 = load double, double* %arrayidx12.prol, align 8, !tbaa !2
>   %mul13.prol = fmul double %20, %21
>   %arrayidx15.prol = getelementptr inbounds double, double* %10, i64 %15
>   %22 = call double @llvm.fabs.f64(double %mul13.prol) #7
>   %cmp18.prol = fcmp olt double %22, %11
>   %storemerge.prol = select i1 %cmp18.prol, double 0.000000e+00, double %mul13.prol
>   store double %storemerge.prol, double* %arrayidx15.prol, align 8, !tbaa !2
>   %idxprom21.prol = sext i32 %19 to i64
>   %arrayidx22.prol = getelementptr inbounds double, double* %12, i64 %idxprom21.prol
>   %23 = load double, double* %arrayidx22.prol, align 8, !tbaa !2
>   %cmp23.prol = fcmp ult double %23, %13
>   br i1 %cmp23.prol, label %if.end27.prol, label %if.then24.prol
> 
> if.then24.prol:                                   ; preds = %omp.inner.for.body.prol
>   store double 0.000000e+00, double* %arrayidx15.prol, align 8, !tbaa !2
>   br label %if.end27.prol
> 
> if.end27.prol:                                    ; preds = %if.then24.prol, %omp.inner.for.body.prol
>   %24 = phi double [ %storemerge.prol, %omp.inner.for.body.prol ], [ 0.000000e+00, %if.then24.prol ]
>   %cmp30.prol = fcmp olt double %24, %14
>   br i1 %cmp30.prol, label %if.then31.prol, label %if.end34.prol
> 
> if.then31.prol:                                   ; preds = %if.end27.prol
>   %25 = bitcast double* %arrayidx15.prol to i64*
>   store i64 %pmin, i64* %25, align 8, !tbaa !2
>   br label %if.end34.prol
> 
> if.end34.prol:                                    ; preds = %if.then31.prol, %if.end27.prol
>   %indvars.iv.next.prol = add nsw i64 %15, 1
>   br label %omp.inner.for.body.prol.loopexit
> 
> omp.inner.for.body.prol.loopexit:                 ; preds = %omp.inner.for.body.lr.ph, %if.end34.prol
>   %indvars.iv.unr = phi i64 [ %15, %omp.inner.for.body.lr.ph ], [ %indvars.iv.next.prol, %if.end34.prol ]
>   %.not = icmp slt i32 %6, %cond
>   br i1 %.not, label %omp.inner.for.body, label %omp.loop.exit
> 
> omp.inner.for.body:                               ; preds = %omp.inner.for.body.prol.loopexit, %if.end34.1
>   %indvars.iv = phi i64 [ %indvars.iv.next.1, %if.end34.1 ], [ %indvars.iv.unr, %omp.inner.for.body.prol.loopexit ]
>   %arrayidx = getelementptr inbounds i32, i32* %7, i64 %indvars.iv
>   %26 = load i32, i32* %arrayidx, align 4, !tbaa !6
>   %arrayidx10 = getelementptr inbounds double, double* %8, i64 %indvars.iv
>   %27 = load double, double* %arrayidx10, align 8, !tbaa !2
>   %arrayidx12 = getelementptr inbounds double, double* %9, i64 %indvars.iv
>   %28 = load double, double* %arrayidx12, align 8, !tbaa !2
>   %mul13 = fmul double %27, %28
>   %arrayidx15 = getelementptr inbounds double, double* %10, i64 %indvars.iv
>   %29 = call double @llvm.fabs.f64(double %mul13) #7
>   %cmp18 = fcmp olt double %29, %11
>   %storemerge = select i1 %cmp18, double 0.000000e+00, double %mul13
>   store double %storemerge, double* %arrayidx15, align 8, !tbaa !2
>   %idxprom21 = sext i32 %26 to i64
>   %arrayidx22 = getelementptr inbounds double, double* %12, i64 %idxprom21
>   %30 = load double, double* %arrayidx22, align 8, !tbaa !2
>   %cmp23 = fcmp ult double %30, %13
>   br i1 %cmp23, label %if.end27, label %if.then24
> 
> if.then24:                                        ; preds = %omp.inner.for.body
>   store double 0.000000e+00, double* %arrayidx15, align 8, !tbaa !2
>   br label %if.end27
> 
> if.end27:                                         ; preds = %omp.inner.for.body, %if.then24
>   %31 = phi double [ %storemerge, %omp.inner.for.body ], [ 0.000000e+00, %if.then24 ]
>   %cmp30 = fcmp olt double %31, %14
>   br i1 %cmp30, label %if.then31, label %if.end34
> 
> if.then31:                                        ; preds = %if.end27
>   %32 = bitcast double* %arrayidx15 to i64*
>   store i64 %pmin, i64* %32, align 8, !tbaa !2
>   br label %if.end34
> 
> if.end34:                                         ; preds = %if.then31, %if.end27
>   %indvars.iv.next = add nsw i64 %indvars.iv, 1
>   %arrayidx.1 = getelementptr inbounds i32, i32* %7, i64 %indvars.iv.next
>   %33 = load i32, i32* %arrayidx.1, align 4, !tbaa !6
>   %arrayidx10.1 = getelementptr inbounds double, double* %8, i64 %indvars.iv.next
>   %34 = load double, double* %arrayidx10.1, align 8, !tbaa !2
>   %arrayidx12.1 = getelementptr inbounds double, double* %9, i64 %indvars.iv.next
>   %35 = load double, double* %arrayidx12.1, align 8, !tbaa !2
>   %mul13.1 = fmul double %34, %35
>   %arrayidx15.1 = getelementptr inbounds double, double* %10, i64 %indvars.iv.next
>   %36 = call double @llvm.fabs.f64(double %mul13.1) #7
>   %cmp18.1 = fcmp olt double %36, %11
>   %storemerge.1 = select i1 %cmp18.1, double 0.000000e+00, double %mul13.1
>   store double %storemerge.1, double* %arrayidx15.1, align 8, !tbaa !2
>   %idxprom21.1 = sext i32 %33 to i64
>   %arrayidx22.1 = getelementptr inbounds double, double* %12, i64 %idxprom21.1
>   %37 = load double, double* %arrayidx22.1, align 8, !tbaa !2
>   %cmp23.1 = fcmp ult double %37, %13
>   br i1 %cmp23.1, label %if.end27.1, label %if.then24.1
> 
> omp.loop.exit:                                    ; preds = %omp.inner.for.body.prol.loopexit, %if.end34.1, %omp.precond.then
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %4)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #7
>   br label %omp.precond.end
15988c13169
< 76:                                               ; preds = %73
---
> omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
15991,15996c13172,13190
< 77:                                               ; preds = %73, %11
<   %78 = landingpad { i8*, i32 }
<           catch i8* null
<   %79 = extractvalue { i8*, i32 } %78, 0
<   call void @__clang_call_terminate(i8* %79) #29
<   unreachable
---
> if.then24.1:                                      ; preds = %if.end34
>   store double 0.000000e+00, double* %arrayidx15.1, align 8, !tbaa !2
>   br label %if.end27.1
> 
> if.end27.1:                                       ; preds = %if.then24.1, %if.end34
>   %38 = phi double [ %storemerge.1, %if.end34 ], [ 0.000000e+00, %if.then24.1 ]
>   %cmp30.1 = fcmp olt double %38, %14
>   br i1 %cmp30.1, label %if.then31.1, label %if.end34.1
> 
> if.then31.1:                                      ; preds = %if.end27.1
>   %39 = bitcast double* %arrayidx15.1 to i64*
>   store i64 %pmin, i64* %39, align 8, !tbaa !2
>   br label %if.end34.1
> 
> if.end34.1:                                       ; preds = %if.then31.1, %if.end27.1
>   %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
>   %lftr.wideiv.1 = trunc i64 %indvars.iv.next.1 to i32
>   %exitcond.not.1 = icmp eq i32 %17, %lftr.wideiv.1
>   br i1 %exitcond.not.1, label %omp.loop.exit, label %omp.inner.for.body
16000,16108c13194,13287
< define internal void @.omp_outlined..69(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, i32* nocapture nonnull readonly align 4 dereferenceable(4) %2, i32** nocapture nonnull readonly align 8 dereferenceable(8) %3, double** nocapture nonnull readonly align 8 dereferenceable(8) %4, double** nocapture nonnull readonly align 8 dereferenceable(8) %5, double** nocapture nonnull readonly align 8 dereferenceable(8) %6, double** nocapture nonnull readonly align 8 dereferenceable(8) %7, double** nocapture nonnull readonly align 8 dereferenceable(8) %8, i64 %9, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %10, i64 %11) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %13 = alloca i32, align 4
<   %14 = alloca i32, align 4
<   %15 = alloca i32, align 4
<   %16 = alloca i32, align 4
<   %17 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL22CalcSoundSpeedForElemsR6DomainPddS1_S1_S1_S1_diPiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %17)
<           to label %18 unwind label %84
< 
< 18:                                               ; preds = %12
<   %19 = load i32, i32* %2, align 4, !tbaa !12
<   %20 = add nsw i32 %19, -1
<   %21 = icmp sgt i32 %19, 0
<   br i1 %21, label %24, label %22
< 
< 22:                                               ; preds = %18
<   %23 = load i32, i32* %0, align 4, !tbaa !12
<   br label %80
< 
< 24:                                               ; preds = %18
<   %25 = bitcast i32* %13 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %25) #10
<   store i32 0, i32* %13, align 4, !tbaa !12
<   %26 = bitcast i32* %14 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %26) #10
<   store i32 %20, i32* %14, align 4, !tbaa !12
<   %27 = bitcast i32* %15 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %27) #10
<   store i32 1, i32* %15, align 4, !tbaa !12
<   %28 = bitcast i32* %16 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #10
<   store i32 0, i32* %16, align 4, !tbaa !12
<   %29 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %29, i32 34, i32* nonnull %16, i32* nonnull %13, i32* nonnull %14, i32* nonnull %15, i32 1, i32 1) #10
<   %30 = load i32, i32* %14, align 4, !tbaa !12
<   %31 = icmp slt i32 %30, %19
<   %32 = select i1 %31, i32 %30, i32 %20
<   store i32 %32, i32* %14, align 4, !tbaa !12
<   %33 = load i32, i32* %13, align 4, !tbaa !12
<   %34 = icmp sgt i32 %33, %32
<   br i1 %34, label %79, label %35
< 
< 35:                                               ; preds = %24
<   %36 = bitcast i64 %9 to double
<   %37 = getelementptr inbounds %class.Domain, %class.Domain* %10, i64 0, i32 49, i32 0, i32 0, i32 0
<   %38 = sext i32 %33 to i64
<   br label %39
< 
< 39:                                               ; preds = %35, %71
<   %40 = phi i32 [ %32, %35 ], [ %72, %71 ]
<   %41 = phi i64 [ %38, %35 ], [ %76, %71 ]
<   %42 = load i32*, i32** %3, align 8, !tbaa !6
<   %43 = getelementptr inbounds i32, i32* %42, i64 %41
<   %44 = load i32, i32* %43, align 4, !tbaa !12
<   %45 = load double*, double** %4, align 8, !tbaa !6
<   %46 = getelementptr inbounds double, double* %45, i64 %41
<   %47 = load double, double* %46, align 8, !tbaa !2
<   %48 = load double*, double** %5, align 8, !tbaa !6
<   %49 = getelementptr inbounds double, double* %48, i64 %41
<   %50 = load double, double* %49, align 8, !tbaa !2
<   %51 = fmul double %47, %50
<   %52 = load double*, double** %6, align 8, !tbaa !6
<   %53 = sext i32 %44 to i64
<   %54 = getelementptr inbounds double, double* %52, i64 %53
<   %55 = load double, double* %54, align 8, !tbaa !2
<   %56 = fmul double %55, %55
<   %57 = load double*, double** %7, align 8, !tbaa !6
<   %58 = getelementptr inbounds double, double* %57, i64 %41
<   %59 = load double, double* %58, align 8, !tbaa !2
<   %60 = fmul double %56, %59
<   %61 = load double*, double** %8, align 8, !tbaa !6
<   %62 = getelementptr inbounds double, double* %61, i64 %41
<   %63 = load double, double* %62, align 8, !tbaa !2
<   %64 = fmul double %60, %63
<   %65 = fadd double %51, %64
<   %66 = fdiv double %65, %36
<   %67 = fcmp ugt double %66, 0x3842E7922A37D1A0
<   br i1 %67, label %68, label %71
< 
< 68:                                               ; preds = %39
<   %69 = call double @sqrt(double %66) #10
<   %70 = load i32, i32* %14, align 4, !tbaa !12
<   br label %71
< 
< 71:                                               ; preds = %39, %68
<   %72 = phi i32 [ %70, %68 ], [ %40, %39 ]
<   %73 = phi double [ %69, %68 ], [ 0x3C18987CEE7F439D, %39 ]
<   %74 = load double*, double** %37, align 8, !tbaa !22
<   %75 = getelementptr inbounds double, double* %74, i64 %53
<   store double %73, double* %75, align 8, !tbaa !2
<   %76 = add nsw i64 %41, 1
<   %77 = sext i32 %72 to i64
<   %78 = icmp slt i64 %41, %77
<   br i1 %78, label %39, label %79
< 
< 79:                                               ; preds = %71, %24
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %29)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %27) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %26) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25) #10
<   br label %80
< 
< 80:                                               ; preds = %22, %79
<   %81 = phi i32 [ %23, %22 ], [ %29, %79 ]
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %81)
<   %82 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL22CalcSoundSpeedForElemsR6DomainPddS1_S1_S1_S1_diPiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %82)
<           to label %83 unwind label %84
---
> define internal void @.omp_outlined..44(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture nonnull readonly align 4 dereferenceable(4) %len, i32** nocapture nonnull readonly align 8 dereferenceable(8) %regElemList, double** nocapture nonnull readonly align 8 dereferenceable(8) %pbvc, double** nocapture nonnull readonly align 8 dereferenceable(8) %enewc, double** nocapture nonnull readonly align 8 dereferenceable(8) %vnewc, double** nocapture nonnull readonly align 8 dereferenceable(8) %bvc, double** nocapture nonnull readonly align 8 dereferenceable(8) %pnewc, i64 %rho0, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %domain, i64 %ss4o3) #6 {
> entry:
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %0 = load i32, i32* %len, align 4, !tbaa !6
>   %sub4 = add nsw i32 %0, -1
>   %cmp = icmp sgt i32 %0, 0
>   br i1 %cmp, label %omp.precond.then, label %omp.precond.end
> 
> omp.precond.then:                                 ; preds = %entry
>   %1 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %2 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #7
>   store i32 %sub4, i32* %.omp.ub, align 4, !tbaa !6
>   %3 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %4 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   %5 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %5, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %6 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp6.not = icmp slt i32 %6, %0
>   %cond = select i1 %cmp6.not, i32 %6, i32 %sub4
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %7 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp7.not50 = icmp sgt i32 %7, %cond
>   br i1 %cmp7.not50, label %omp.loop.exit, label %omp.inner.for.body.lr.ph
> 
> omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
>   %8 = bitcast i64 %rho0 to double
>   %_M_start.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 49, i32 0, i32 0, i32 0, i32 0
>   %9 = sext i32 %7 to i64
>   br label %omp.inner.for.body
> 
> omp.inner.for.body:                               ; preds = %if.end, %omp.inner.for.body.lr.ph
>   %10 = phi i32 [ %23, %if.end ], [ %cond, %omp.inner.for.body.lr.ph ]
>   %indvars.iv = phi i64 [ %indvars.iv.next, %if.end ], [ %9, %omp.inner.for.body.lr.ph ]
>   %11 = load i32*, i32** %regElemList, align 8, !tbaa !41
>   %arrayidx = getelementptr inbounds i32, i32* %11, i64 %indvars.iv
>   %12 = load i32, i32* %arrayidx, align 4, !tbaa !6
>   %13 = load double*, double** %pbvc, align 8, !tbaa !41
>   %arrayidx9 = getelementptr inbounds double, double* %13, i64 %indvars.iv
>   %14 = load double, double* %arrayidx9, align 8, !tbaa !2
>   %15 = load double*, double** %enewc, align 8, !tbaa !41
>   %arrayidx11 = getelementptr inbounds double, double* %15, i64 %indvars.iv
>   %16 = load double, double* %arrayidx11, align 8, !tbaa !2
>   %mul12 = fmul double %14, %16
>   %17 = load double*, double** %vnewc, align 8, !tbaa !41
>   %idxprom13 = sext i32 %12 to i64
>   %arrayidx14 = getelementptr inbounds double, double* %17, i64 %idxprom13
>   %18 = load double, double* %arrayidx14, align 8, !tbaa !2
>   %mul17 = fmul double %18, %18
>   %19 = load double*, double** %bvc, align 8, !tbaa !41
>   %arrayidx19 = getelementptr inbounds double, double* %19, i64 %indvars.iv
>   %20 = load double, double* %arrayidx19, align 8, !tbaa !2
>   %mul20 = fmul double %mul17, %20
>   %21 = load double*, double** %pnewc, align 8, !tbaa !41
>   %arrayidx22 = getelementptr inbounds double, double* %21, i64 %indvars.iv
>   %22 = load double, double* %arrayidx22, align 8, !tbaa !2
>   %mul23 = fmul double %mul20, %22
>   %add24 = fadd double %mul12, %mul23
>   %div25 = fdiv double %add24, %8
>   %cmp26 = fcmp ugt double %div25, 0x3842E7922A37D1A0
>   br i1 %cmp26, label %if.else, label %if.end
> 
> if.else:                                          ; preds = %omp.inner.for.body
>   %call.i = call double @sqrt(double %div25) #7
>   %.pre = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   br label %if.end
> 
> if.end:                                           ; preds = %omp.inner.for.body, %if.else
>   %23 = phi i32 [ %.pre, %if.else ], [ %10, %omp.inner.for.body ]
>   %ssTmp.0 = phi double [ %call.i, %if.else ], [ 0x3C18987CEE7F439D, %omp.inner.for.body ]
>   %24 = load double*, double** %_M_start.i.i, align 8, !tbaa !11
>   %add.ptr.i.i = getelementptr inbounds double, double* %24, i64 %idxprom13
>   store double %ssTmp.0, double* %add.ptr.i.i, align 8, !tbaa !2
>   %indvars.iv.next = add nsw i64 %indvars.iv, 1
>   %25 = sext i32 %23 to i64
>   %cmp7.not.not = icmp slt i64 %indvars.iv, %25
>   br i1 %cmp7.not.not, label %omp.inner.for.body, label %omp.loop.exit
> 
> omp.loop.exit:                                    ; preds = %if.end, %omp.precond.then
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %5)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #7
>   br label %omp.precond.end
16110c13289
< 83:                                               ; preds = %80
---
> omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
16112,16118d13290
< 
< 84:                                               ; preds = %80, %12
<   %85 = landingpad { i8*, i32 }
<           catch i8* null
<   %86 = extractvalue { i8*, i32 } %85, 0
<   call void @__clang_call_terminate(i8* %86) #29
<   unreachable
16122,16295c13294,13501
< define internal void @.omp_outlined..71(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, i64 %2, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %3, i64 %4) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %6 = alloca i32, align 4
<   %7 = alloca i32, align 4
<   %8 = alloca i32, align 4
<   %9 = alloca i32, align 4
<   %10 = trunc i64 %2 to i32
<   %11 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL21UpdateVolumesForElemsR6DomaindiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %11)
<           to label %12 unwind label %128
< 
< 12:                                               ; preds = %5
<   %13 = add nsw i32 %10, -1
<   %14 = icmp sgt i32 %10, 0
<   br i1 %14, label %17, label %15
< 
< 15:                                               ; preds = %12
<   %16 = load i32, i32* %0, align 4, !tbaa !12
<   br label %124
< 
< 17:                                               ; preds = %12
<   %18 = bitcast i32* %6 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #10
<   store i32 0, i32* %6, align 4, !tbaa !12
<   %19 = bitcast i32* %7 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #10
<   store i32 %13, i32* %7, align 4, !tbaa !12
<   %20 = bitcast i32* %8 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #10
<   store i32 1, i32* %8, align 4, !tbaa !12
<   %21 = bitcast i32* %9 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #10
<   store i32 0, i32* %9, align 4, !tbaa !12
<   %22 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %22, i32 34, i32* nonnull %9, i32* nonnull %6, i32* nonnull %7, i32* nonnull %8, i32 1, i32 1) #10
<   %23 = load i32, i32* %7, align 4, !tbaa !12
<   %24 = icmp slt i32 %23, %10
<   %25 = select i1 %24, i32 %23, i32 %13
<   store i32 %25, i32* %7, align 4, !tbaa !12
<   %26 = load i32, i32* %6, align 4, !tbaa !12
<   %27 = icmp slt i32 %25, %26
<   br i1 %27, label %123, label %28
< 
< 28:                                               ; preds = %17
<   %29 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 45, i32 0, i32 0, i32 0
<   %30 = load double*, double** %29, align 8, !tbaa !22
<   %31 = bitcast i64 %4 to double
<   %32 = getelementptr inbounds %class.Domain, %class.Domain* %3, i64 0, i32 43, i32 0, i32 0, i32 0
<   %33 = load double*, double** %32, align 8, !tbaa !22
<   %34 = sext i32 %26 to i64
<   %35 = add i32 %25, 1
<   %36 = sub i32 %25, %26
<   %37 = zext i32 %36 to i64
<   %38 = add nuw nsw i64 %37, 1
<   %39 = icmp ult i32 %36, 3
<   br i1 %39, label %84, label %40
< 
< 40:                                               ; preds = %28
<   %41 = getelementptr double, double* %33, i64 %34
<   %42 = sub i32 %25, %26
<   %43 = zext i32 %42 to i64
<   %44 = add nsw i64 %34, %43
<   %45 = add nsw i64 %44, 1
<   %46 = getelementptr double, double* %33, i64 %45
<   %47 = getelementptr double, double* %30, i64 %34
<   %48 = getelementptr double, double* %30, i64 %45
<   %49 = icmp ult double* %41, %48
<   %50 = icmp ult double* %47, %46
<   %51 = and i1 %49, %50
<   br i1 %51, label %84, label %52
< 
< 52:                                               ; preds = %40
<   %53 = and i64 %38, 8589934588
<   %54 = add nsw i64 %53, %34
<   %55 = insertelement <2 x double> poison, double %31, i32 0
<   %56 = shufflevector <2 x double> %55, <2 x double> poison, <2 x i32> zeroinitializer
<   %57 = insertelement <2 x double> poison, double %31, i32 0
<   %58 = shufflevector <2 x double> %57, <2 x double> poison, <2 x i32> zeroinitializer
<   br label %59
< 
< 59:                                               ; preds = %59, %52
<   %60 = phi i64 [ 0, %52 ], [ %80, %59 ]
<   %61 = add i64 %60, %34
<   %62 = getelementptr inbounds double, double* %30, i64 %61
<   %63 = bitcast double* %62 to <2 x double>*
<   %64 = load <2 x double>, <2 x double>* %63, align 8, !tbaa !2, !alias.scope !125
<   %65 = getelementptr inbounds double, double* %62, i64 2
<   %66 = bitcast double* %65 to <2 x double>*
<   %67 = load <2 x double>, <2 x double>* %66, align 8, !tbaa !2, !alias.scope !125
<   %68 = fadd <2 x double> %64, <double -1.000000e+00, double -1.000000e+00>
<   %69 = fadd <2 x double> %67, <double -1.000000e+00, double -1.000000e+00>
<   %70 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %68)
<   %71 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %69)
<   %72 = fcmp olt <2 x double> %70, %56
<   %73 = fcmp olt <2 x double> %71, %58
<   %74 = select <2 x i1> %72, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %64
<   %75 = select <2 x i1> %73, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %67
<   %76 = getelementptr inbounds double, double* %33, i64 %61
<   %77 = bitcast double* %76 to <2 x double>*
<   store <2 x double> %74, <2 x double>* %77, align 8, !tbaa !2, !alias.scope !128, !noalias !125
<   %78 = getelementptr inbounds double, double* %76, i64 2
<   %79 = bitcast double* %78 to <2 x double>*
<   store <2 x double> %75, <2 x double>* %79, align 8, !tbaa !2, !alias.scope !128, !noalias !125
<   %80 = add i64 %60, 4
<   %81 = icmp eq i64 %80, %53
<   br i1 %81, label %82, label %59, !llvm.loop !130
< 
< 82:                                               ; preds = %59
<   %83 = icmp eq i64 %38, %53
<   br i1 %83, label %123, label %84
< 
< 84:                                               ; preds = %40, %28, %82
<   %85 = phi i64 [ %34, %40 ], [ %34, %28 ], [ %54, %82 ]
<   %86 = add i32 %25, 1
<   %87 = trunc i64 %85 to i32
<   %88 = sub i32 %86, %87
<   %89 = and i32 %88, 1
<   %90 = icmp eq i32 %89, 0
<   br i1 %90, label %100, label %91
< 
< 91:                                               ; preds = %84
<   %92 = getelementptr inbounds double, double* %30, i64 %85
<   %93 = load double, double* %92, align 8, !tbaa !2
<   %94 = fadd double %93, -1.000000e+00
<   %95 = call double @llvm.fabs.f64(double %94) #10
<   %96 = fcmp olt double %95, %31
<   %97 = select i1 %96, double 1.000000e+00, double %93
<   %98 = getelementptr inbounds double, double* %33, i64 %85
<   store double %97, double* %98, align 8, !tbaa !2
<   %99 = add nsw i64 %85, 1
<   br label %100
< 
< 100:                                              ; preds = %91, %84
<   %101 = phi i64 [ %85, %84 ], [ %99, %91 ]
<   %102 = icmp eq i32 %25, %87
<   br i1 %102, label %123, label %103
< 
< 103:                                              ; preds = %100, %103
<   %104 = phi i64 [ %120, %103 ], [ %101, %100 ]
<   %105 = getelementptr inbounds double, double* %30, i64 %104
<   %106 = load double, double* %105, align 8, !tbaa !2
<   %107 = fadd double %106, -1.000000e+00
<   %108 = call double @llvm.fabs.f64(double %107) #10
<   %109 = fcmp olt double %108, %31
<   %110 = select i1 %109, double 1.000000e+00, double %106
<   %111 = getelementptr inbounds double, double* %33, i64 %104
<   store double %110, double* %111, align 8, !tbaa !2
<   %112 = add nsw i64 %104, 1
<   %113 = getelementptr inbounds double, double* %30, i64 %112
<   %114 = load double, double* %113, align 8, !tbaa !2
<   %115 = fadd double %114, -1.000000e+00
<   %116 = call double @llvm.fabs.f64(double %115) #10
<   %117 = fcmp olt double %116, %31
<   %118 = select i1 %117, double 1.000000e+00, double %114
<   %119 = getelementptr inbounds double, double* %33, i64 %112
<   store double %118, double* %119, align 8, !tbaa !2
<   %120 = add nsw i64 %104, 2
<   %121 = trunc i64 %120 to i32
<   %122 = icmp eq i32 %35, %121
<   br i1 %122, label %123, label %103, !llvm.loop !131
< 
< 123:                                              ; preds = %100, %103, %82, %17
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %22)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #10
<   br label %124
< 
< 124:                                              ; preds = %15, %123
<   %125 = phi i32 [ %16, %15 ], [ %22, %123 ]
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %125)
<   %126 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL21UpdateVolumesForElemsR6DomaindiE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %126)
<           to label %127 unwind label %128
---
> define internal void @.omp_outlined..45(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i64 %length, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %domain, i64 %v_cut) #6 {
> entry:
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %length.addr.sroa.0.0.extract.trunc = trunc i64 %length to i32
>   %sub4 = add nsw i32 %length.addr.sroa.0.0.extract.trunc, -1
>   %cmp = icmp sgt i32 %length.addr.sroa.0.0.extract.trunc, 0
>   br i1 %cmp, label %omp.precond.then, label %omp.precond.end
> 
> omp.precond.then:                                 ; preds = %entry
>   %0 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %1 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #7
>   store i32 %sub4, i32* %.omp.ub, align 4, !tbaa !6
>   %2 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %3 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   %4 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %4, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %5 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp6.not = icmp slt i32 %5, %length.addr.sroa.0.0.extract.trunc
>   %cond = select i1 %cmp6.not, i32 %5, i32 %sub4
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %6 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp7.not31 = icmp sgt i32 %6, %cond
>   br i1 %cmp7.not31, label %omp.loop.exit, label %omp.inner.for.body.lr.ph
> 
> omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
>   %_M_start.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 45, i32 0, i32 0, i32 0, i32 0
>   %7 = load double*, double** %_M_start.i.i, align 8, !tbaa !11
>   %8 = bitcast i64 %v_cut to double
>   %_M_start.i.i29 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 43, i32 0, i32 0, i32 0, i32 0
>   %9 = load double*, double** %_M_start.i.i29, align 8, !tbaa !11
>   %10 = sext i32 %6 to i64
>   %11 = icmp sgt i32 %cond, %6
>   %smax = select i1 %11, i32 %cond, i32 %6
>   %12 = add i32 %smax, 1
>   %13 = sub i32 %smax, %6
>   %14 = zext i32 %13 to i64
>   %15 = add nuw nsw i64 %14, 1
>   %min.iters.check = icmp ult i32 %13, 15
>   br i1 %min.iters.check, label %omp.inner.for.body.preheader, label %vector.memcheck
> 
> vector.memcheck:                                  ; preds = %omp.inner.for.body.lr.ph
>   %scevgep = getelementptr double, double* %9, i64 %10
>   %16 = sub i32 %smax, %6
>   %17 = zext i32 %16 to i64
>   %18 = add nsw i64 %10, %17
>   %19 = add nsw i64 %18, 1
>   %scevgep34 = getelementptr double, double* %9, i64 %19
>   %scevgep36 = getelementptr double, double* %7, i64 %10
>   %scevgep38 = getelementptr double, double* %7, i64 %19
>   %bound0 = icmp ult double* %scevgep, %scevgep38
>   %bound1 = icmp ult double* %scevgep36, %scevgep34
>   %found.conflict = and i1 %bound0, %bound1
>   br i1 %found.conflict, label %omp.inner.for.body.preheader, label %vector.ph
> 
> vector.ph:                                        ; preds = %vector.memcheck
>   %n.vec = and i64 %15, 8589934576
>   %ind.end = add nsw i64 %n.vec, %10
>   %broadcast.splatinsert = insertelement <4 x double> undef, double %8, i32 0
>   %broadcast.splat = shufflevector <4 x double> %broadcast.splatinsert, <4 x double> undef, <4 x i32> zeroinitializer
>   %broadcast.splatinsert43 = insertelement <4 x double> undef, double %8, i32 0
>   %broadcast.splat44 = shufflevector <4 x double> %broadcast.splatinsert43, <4 x double> undef, <4 x i32> zeroinitializer
>   %broadcast.splatinsert45 = insertelement <4 x double> undef, double %8, i32 0
>   %broadcast.splat46 = shufflevector <4 x double> %broadcast.splatinsert45, <4 x double> undef, <4 x i32> zeroinitializer
>   %broadcast.splatinsert47 = insertelement <4 x double> undef, double %8, i32 0
>   %broadcast.splat48 = shufflevector <4 x double> %broadcast.splatinsert47, <4 x double> undef, <4 x i32> zeroinitializer
>   br label %vector.body
> 
> vector.body:                                      ; preds = %vector.body, %vector.ph
>   %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
>   %offset.idx = add i64 %index, %10
>   %20 = getelementptr inbounds double, double* %7, i64 %offset.idx
>   %21 = bitcast double* %20 to <4 x double>*
>   %wide.load = load <4 x double>, <4 x double>* %21, align 8, !tbaa !2, !alias.scope !127
>   %22 = getelementptr inbounds double, double* %20, i64 4
>   %23 = bitcast double* %22 to <4 x double>*
>   %wide.load40 = load <4 x double>, <4 x double>* %23, align 8, !tbaa !2, !alias.scope !127
>   %24 = getelementptr inbounds double, double* %20, i64 8
>   %25 = bitcast double* %24 to <4 x double>*
>   %wide.load41 = load <4 x double>, <4 x double>* %25, align 8, !tbaa !2, !alias.scope !127
>   %26 = getelementptr inbounds double, double* %20, i64 12
>   %27 = bitcast double* %26 to <4 x double>*
>   %wide.load42 = load <4 x double>, <4 x double>* %27, align 8, !tbaa !2, !alias.scope !127
>   %28 = fadd <4 x double> %wide.load, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
>   %29 = fadd <4 x double> %wide.load40, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
>   %30 = fadd <4 x double> %wide.load41, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
>   %31 = fadd <4 x double> %wide.load42, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
>   %32 = call <4 x double> @llvm.fabs.v4f64(<4 x double> %28)
>   %33 = call <4 x double> @llvm.fabs.v4f64(<4 x double> %29)
>   %34 = call <4 x double> @llvm.fabs.v4f64(<4 x double> %30)
>   %35 = call <4 x double> @llvm.fabs.v4f64(<4 x double> %31)
>   %36 = fcmp olt <4 x double> %32, %broadcast.splat
>   %37 = fcmp olt <4 x double> %33, %broadcast.splat44
>   %38 = fcmp olt <4 x double> %34, %broadcast.splat46
>   %39 = fcmp olt <4 x double> %35, %broadcast.splat48
>   %40 = select <4 x i1> %36, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %wide.load
>   %41 = select <4 x i1> %37, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %wide.load40
>   %42 = select <4 x i1> %38, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %wide.load41
>   %43 = select <4 x i1> %39, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %wide.load42
>   %44 = getelementptr inbounds double, double* %9, i64 %offset.idx
>   %45 = bitcast double* %44 to <4 x double>*
>   store <4 x double> %40, <4 x double>* %45, align 8, !tbaa !2, !alias.scope !130, !noalias !127
>   %46 = getelementptr inbounds double, double* %44, i64 4
>   %47 = bitcast double* %46 to <4 x double>*
>   store <4 x double> %41, <4 x double>* %47, align 8, !tbaa !2, !alias.scope !130, !noalias !127
>   %48 = getelementptr inbounds double, double* %44, i64 8
>   %49 = bitcast double* %48 to <4 x double>*
>   store <4 x double> %42, <4 x double>* %49, align 8, !tbaa !2, !alias.scope !130, !noalias !127
>   %50 = getelementptr inbounds double, double* %44, i64 12
>   %51 = bitcast double* %50 to <4 x double>*
>   store <4 x double> %43, <4 x double>* %51, align 8, !tbaa !2, !alias.scope !130, !noalias !127
>   %index.next = add i64 %index, 16
>   %52 = icmp eq i64 %index.next, %n.vec
>   br i1 %52, label %middle.block, label %vector.body, !llvm.loop !132
> 
> middle.block:                                     ; preds = %vector.body
>   %cmp.n = icmp eq i64 %15, %n.vec
>   br i1 %cmp.n, label %omp.loop.exit, label %omp.inner.for.body.preheader
> 
> omp.inner.for.body.preheader:                     ; preds = %middle.block, %vector.memcheck, %omp.inner.for.body.lr.ph
>   %indvars.iv.ph = phi i64 [ %10, %vector.memcheck ], [ %10, %omp.inner.for.body.lr.ph ], [ %ind.end, %middle.block ]
>   %53 = add i32 %smax, 1
>   %54 = trunc i64 %indvars.iv.ph to i32
>   %55 = sub i32 %53, %54
>   %56 = sub i32 %smax, %54
>   %xtraiter = and i32 %55, 3
>   %lcmp.mod.not = icmp eq i32 %xtraiter, 0
>   br i1 %lcmp.mod.not, label %omp.inner.for.body.prol.loopexit, label %omp.inner.for.body.prol
> 
> omp.inner.for.body.prol:                          ; preds = %omp.inner.for.body.preheader, %omp.inner.for.body.prol
>   %indvars.iv.prol = phi i64 [ %indvars.iv.next.prol, %omp.inner.for.body.prol ], [ %indvars.iv.ph, %omp.inner.for.body.preheader ]
>   %prol.iter = phi i32 [ %prol.iter.sub, %omp.inner.for.body.prol ], [ %xtraiter, %omp.inner.for.body.preheader ]
>   %add.ptr.i.i.prol = getelementptr inbounds double, double* %7, i64 %indvars.iv.prol
>   %57 = load double, double* %add.ptr.i.i.prol, align 8, !tbaa !2
>   %sub8.prol = fadd double %57, -1.000000e+00
>   %58 = call double @llvm.fabs.f64(double %sub8.prol) #7
>   %cmp10.prol = fcmp olt double %58, %8
>   %tmpV.0.prol = select i1 %cmp10.prol, double 1.000000e+00, double %57
>   %add.ptr.i.i30.prol = getelementptr inbounds double, double* %9, i64 %indvars.iv.prol
>   store double %tmpV.0.prol, double* %add.ptr.i.i30.prol, align 8, !tbaa !2
>   %indvars.iv.next.prol = add nsw i64 %indvars.iv.prol, 1
>   %prol.iter.sub = add i32 %prol.iter, -1
>   %prol.iter.cmp.not = icmp eq i32 %prol.iter.sub, 0
>   br i1 %prol.iter.cmp.not, label %omp.inner.for.body.prol.loopexit, label %omp.inner.for.body.prol, !llvm.loop !133
> 
> omp.inner.for.body.prol.loopexit:                 ; preds = %omp.inner.for.body.prol, %omp.inner.for.body.preheader
>   %indvars.iv.unr = phi i64 [ %indvars.iv.ph, %omp.inner.for.body.preheader ], [ %indvars.iv.next.prol, %omp.inner.for.body.prol ]
>   %59 = icmp ult i32 %56, 3
>   br i1 %59, label %omp.loop.exit, label %omp.inner.for.body
> 
> omp.inner.for.body:                               ; preds = %omp.inner.for.body.prol.loopexit, %omp.inner.for.body
>   %indvars.iv = phi i64 [ %indvars.iv.next.3, %omp.inner.for.body ], [ %indvars.iv.unr, %omp.inner.for.body.prol.loopexit ]
>   %add.ptr.i.i = getelementptr inbounds double, double* %7, i64 %indvars.iv
>   %60 = load double, double* %add.ptr.i.i, align 8, !tbaa !2
>   %sub8 = fadd double %60, -1.000000e+00
>   %61 = call double @llvm.fabs.f64(double %sub8) #7
>   %cmp10 = fcmp olt double %61, %8
>   %tmpV.0 = select i1 %cmp10, double 1.000000e+00, double %60
>   %add.ptr.i.i30 = getelementptr inbounds double, double* %9, i64 %indvars.iv
>   store double %tmpV.0, double* %add.ptr.i.i30, align 8, !tbaa !2
>   %indvars.iv.next = add nsw i64 %indvars.iv, 1
>   %add.ptr.i.i.1 = getelementptr inbounds double, double* %7, i64 %indvars.iv.next
>   %62 = load double, double* %add.ptr.i.i.1, align 8, !tbaa !2
>   %sub8.1 = fadd double %62, -1.000000e+00
>   %63 = call double @llvm.fabs.f64(double %sub8.1) #7
>   %cmp10.1 = fcmp olt double %63, %8
>   %tmpV.0.1 = select i1 %cmp10.1, double 1.000000e+00, double %62
>   %add.ptr.i.i30.1 = getelementptr inbounds double, double* %9, i64 %indvars.iv.next
>   store double %tmpV.0.1, double* %add.ptr.i.i30.1, align 8, !tbaa !2
>   %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
>   %add.ptr.i.i.2 = getelementptr inbounds double, double* %7, i64 %indvars.iv.next.1
>   %64 = load double, double* %add.ptr.i.i.2, align 8, !tbaa !2
>   %sub8.2 = fadd double %64, -1.000000e+00
>   %65 = call double @llvm.fabs.f64(double %sub8.2) #7
>   %cmp10.2 = fcmp olt double %65, %8
>   %tmpV.0.2 = select i1 %cmp10.2, double 1.000000e+00, double %64
>   %add.ptr.i.i30.2 = getelementptr inbounds double, double* %9, i64 %indvars.iv.next.1
>   store double %tmpV.0.2, double* %add.ptr.i.i30.2, align 8, !tbaa !2
>   %indvars.iv.next.2 = add nsw i64 %indvars.iv, 3
>   %add.ptr.i.i.3 = getelementptr inbounds double, double* %7, i64 %indvars.iv.next.2
>   %66 = load double, double* %add.ptr.i.i.3, align 8, !tbaa !2
>   %sub8.3 = fadd double %66, -1.000000e+00
>   %67 = call double @llvm.fabs.f64(double %sub8.3) #7
>   %cmp10.3 = fcmp olt double %67, %8
>   %tmpV.0.3 = select i1 %cmp10.3, double 1.000000e+00, double %66
>   %add.ptr.i.i30.3 = getelementptr inbounds double, double* %9, i64 %indvars.iv.next.2
>   store double %tmpV.0.3, double* %add.ptr.i.i30.3, align 8, !tbaa !2
>   %indvars.iv.next.3 = add nsw i64 %indvars.iv, 4
>   %lftr.wideiv.3 = trunc i64 %indvars.iv.next.3 to i32
>   %exitcond.not.3 = icmp eq i32 %12, %lftr.wideiv.3
>   br i1 %exitcond.not.3, label %omp.loop.exit, label %omp.inner.for.body, !llvm.loop !134
> 
> omp.loop.exit:                                    ; preds = %omp.inner.for.body.prol.loopexit, %omp.inner.for.body, %middle.block, %omp.precond.then
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %4)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #7
>   br label %omp.precond.end
16297c13503
< 127:                                              ; preds = %124
---
> omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
16299,16305d13504
< 
< 128:                                              ; preds = %124, %5
<   %129 = landingpad { i8*, i32 }
<           catch i8* null
<   %130 = extractvalue { i8*, i32 } %129, 0
<   call void @__clang_call_terminate(i8* %130) #29
<   unreachable
16308,16586c13507,13658
< ; Function Attrs: inlinehint norecurse uwtable
< define internal fastcc void @_ZL29CalcCourantConstraintForElemsR6DomainiPidRd(%class.Domain* nonnull align 8 dereferenceable(1312) %0, i32 %1, i32* %2, double %3, double* nonnull align 8 dereferenceable(8) %4) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %6 = alloca %"class.std::allocator.30", align 1
<   %7 = alloca %"class.std::allocator.30", align 1
<   %8 = alloca i32*, align 8
<   %9 = alloca %"class.std::basic_string", align 8
<   %10 = alloca %"class.std::allocator.30", align 1
<   %11 = alloca %"class.std::vector.15", align 8
<   store i32* %2, i32** %8, align 8, !tbaa !6
<   %12 = sitofp i32 %1 to float
<   %13 = tail call noalias nonnull i8* @_Znwm(i64 4) #26
<   %14 = bitcast i8* %13 to float*
<   store float %12, float* %14, align 4
<   %15 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL29CalcCourantConstraintForElemsR6DomainiPidRdE12apolloRegion, align 8, !tbaa !6
<   %16 = icmp eq %"class.Apollo::Region"* %15, null
<   br i1 %16, label %17, label %72
< 
< 17:                                               ; preds = %5
<   %18 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %19 unwind label %45
< 
< 19:                                               ; preds = %17
<   %20 = bitcast %"class.std::basic_string"* %9 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #10
<   %21 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %10, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %21) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %9, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %10)
<           to label %22 unwind label %47
< 
< 22:                                               ; preds = %19
<   %23 = bitcast i8* %18 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %23, i32 1, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.72, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %9)
<           to label %24 unwind label %49
< 
< 24:                                               ; preds = %22
<   store i8* %18, i8** bitcast (%"class.Apollo::Region"** @_ZZL29CalcCourantConstraintForElemsR6DomainiPidRdE12apolloRegion to i8**), align 8, !tbaa !6
<   %25 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %9, i64 0, i32 0, i32 0
<   %26 = load i8*, i8** %25, align 8, !tbaa !8
<   %27 = getelementptr inbounds i8, i8* %26, i64 -24
<   %28 = bitcast i8* %27 to %"struct.std::basic_string<char>::_Rep"*
<   %29 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %7, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %29) #10
<   %30 = icmp eq i8* %27, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %30, label %43, label %31, !prof !11
< 
< 31:                                               ; preds = %24
<   %32 = getelementptr inbounds i8, i8* %26, i64 -8
<   %33 = bitcast i8* %32 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %34, label %36
< 
< 34:                                               ; preds = %31
<   %35 = atomicrmw volatile add i32* %33, i32 -1 acq_rel
<   br label %39
< 
< 36:                                               ; preds = %31
<   %37 = load i32, i32* %33, align 4, !tbaa !12
<   %38 = add nsw i32 %37, -1
<   store i32 %38, i32* %33, align 4, !tbaa !12
<   br label %39
< 
< 39:                                               ; preds = %36, %34
<   %40 = phi i32 [ %35, %34 ], [ %37, %36 ]
<   %41 = icmp slt i32 %40, 1
<   br i1 %41, label %42, label %43
< 
< 42:                                               ; preds = %39
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %28, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %7) #10
<   br label %43
< 
< 43:                                               ; preds = %24, %39, %42
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %29) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %21) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #10
<   %44 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL29CalcCourantConstraintForElemsR6DomainiPidRdE12apolloRegion, align 8, !tbaa !6
<   br label %72
< 
< 45:                                               ; preds = %72, %93, %17
<   %46 = landingpad { i8*, i32 }
<           cleanup
<   br label %159
< 
< 47:                                               ; preds = %19
<   %48 = landingpad { i8*, i32 }
<           cleanup
<   br label %70
< 
< 49:                                               ; preds = %22
<   %50 = landingpad { i8*, i32 }
<           cleanup
<   %51 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %9, i64 0, i32 0, i32 0
<   %52 = load i8*, i8** %51, align 8, !tbaa !8
<   %53 = getelementptr inbounds i8, i8* %52, i64 -24
<   %54 = bitcast i8* %53 to %"struct.std::basic_string<char>::_Rep"*
<   %55 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %6, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %55) #10
<   %56 = icmp eq i8* %53, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %56, label %69, label %57, !prof !11
< 
< 57:                                               ; preds = %49
<   %58 = getelementptr inbounds i8, i8* %52, i64 -8
<   %59 = bitcast i8* %58 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %60, label %62
< 
< 60:                                               ; preds = %57
<   %61 = atomicrmw volatile add i32* %59, i32 -1 acq_rel
<   br label %65
< 
< 62:                                               ; preds = %57
<   %63 = load i32, i32* %59, align 4, !tbaa !12
<   %64 = add nsw i32 %63, -1
<   store i32 %64, i32* %59, align 4, !tbaa !12
<   br label %65
< 
< 65:                                               ; preds = %62, %60
<   %66 = phi i32 [ %61, %60 ], [ %63, %62 ]
<   %67 = icmp slt i32 %66, 1
<   br i1 %67, label %68, label %69
< 
< 68:                                               ; preds = %65
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %54, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %6) #10
<   br label %69
< 
< 69:                                               ; preds = %49, %65, %68
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %55) #10
<   br label %70
< 
< 70:                                               ; preds = %69, %47
<   %71 = phi { i8*, i32 } [ %50, %69 ], [ %48, %47 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %21) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #10
<   call void @_ZdlPv(i8* nonnull %18) #28
<   br label %159
< 
< 72:                                               ; preds = %43, %5
<   %73 = phi %"class.Apollo::Region"* [ %44, %43 ], [ %15, %5 ]
<   %74 = bitcast %"class.std::vector.15"* %11 to i8*
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %74, i8 0, i64 24, i1 false) #10
<   %75 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %76 unwind label %45
< 
< 76:                                               ; preds = %72
<   %77 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %11, i64 0, i32 0, i32 0, i32 0
<   %78 = bitcast %"class.std::vector.15"* %11 to i8**
<   store i8* %75, i8** %78, align 8, !tbaa !14
<   %79 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %11, i64 0, i32 0, i32 0, i32 1
<   %80 = bitcast float** %79 to i8**
<   %81 = getelementptr inbounds i8, i8* %75, i64 4
<   %82 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %11, i64 0, i32 0, i32 0, i32 2
<   %83 = bitcast float** %82 to i8**
<   store i8* %81, i8** %83, align 8, !tbaa !17
<   %84 = bitcast i8* %13 to i32*
<   %85 = bitcast i8* %75 to i32*
<   %86 = load i32, i32* %84, align 4
<   store i32 %86, i32* %85, align 4
<   store i8* %81, i8** %80, align 8, !tbaa !18
<   %87 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %73, %"class.std::vector.15"* nonnull %11)
<           to label %88 unwind label %130
< 
< 88:                                               ; preds = %76
<   %89 = load float*, float** %77, align 8, !tbaa !14
<   %90 = icmp eq float* %89, null
<   br i1 %90, label %93, label %91
< 
< 91:                                               ; preds = %88
<   %92 = bitcast float* %89 to i8*
<   call void @_ZdlPv(i8* nonnull %92) #10
<   br label %93
< 
< 93:                                               ; preds = %88, %91
<   %94 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL29CalcCourantConstraintForElemsR6DomainiPidRdE12apolloRegion, align 8, !tbaa !6
<   %95 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %94)
<           to label %96 unwind label %45
< 
< 96:                                               ; preds = %93
<   %97 = icmp eq i32 %95, 1
<   %98 = select i1 %97, i32 1, i32 36
<   %99 = icmp eq i32 %95, 0
<   %100 = select i1 %99, i32 36, i32 %98
<   call void @omp_set_num_threads(i32 %100) #10
<   %101 = call i32 @omp_get_max_threads()
<   %102 = zext i32 %101 to i64
<   %103 = call i8* @llvm.stacksave()
<   %104 = alloca i32, i64 %102, align 16
<   %105 = alloca double, i64 %102, align 16
<   %106 = bitcast double %3 to i64
<   %107 = zext i32 %1 to i64
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 9, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i64, double*, i64, i32**, %class.Domain*, i64, double*, i64, i32*)* @.omp_outlined..73 to void (i32*, i32*, ...)*), i64 %106, double* nonnull %4, i64 %107, i32** nonnull %8, %class.Domain* nonnull %0, i64 %102, double* nonnull %105, i64 %102, i32* nonnull %104)
<   %108 = icmp sgt i32 %101, 1
<   br i1 %108, label %109, label %127
< 
< 109:                                              ; preds = %96
<   %110 = load double, double* %105, align 16, !tbaa !2
<   %111 = add nsw i64 %102, -1
<   %112 = and i64 %111, 1
<   %113 = icmp eq i32 %101, 2
<   br i1 %113, label %116, label %114
< 
< 114:                                              ; preds = %109
<   %115 = and i64 %111, -2
<   br label %138
< 
< 116:                                              ; preds = %164, %109
<   %117 = phi double [ %110, %109 ], [ %165, %164 ]
<   %118 = phi i64 [ 1, %109 ], [ %166, %164 ]
<   %119 = icmp eq i64 %112, 0
<   br i1 %119, label %127, label %120
< 
< 120:                                              ; preds = %116
<   %121 = getelementptr inbounds double, double* %105, i64 %118
<   %122 = load double, double* %121, align 8, !tbaa !2
<   %123 = fcmp olt double %122, %117
<   br i1 %123, label %124, label %127
< 
< 124:                                              ; preds = %120
<   store double %122, double* %105, align 16, !tbaa !2
<   %125 = getelementptr inbounds i32, i32* %104, i64 %118
<   %126 = load i32, i32* %125, align 4, !tbaa !12
<   store i32 %126, i32* %104, align 16, !tbaa !12
<   br label %127
< 
< 127:                                              ; preds = %116, %120, %124, %96
<   %128 = load i32, i32* %104, align 16, !tbaa !12
<   %129 = icmp eq i32 %128, -1
<   br i1 %129, label %156, label %154
< 
< 130:                                              ; preds = %76
<   %131 = landingpad { i8*, i32 }
<           cleanup
<   %132 = load float*, float** %77, align 8, !tbaa !14
<   %133 = icmp eq float* %132, null
<   br i1 %133, label %159, label %134
< 
< 134:                                              ; preds = %130
<   %135 = bitcast float* %132 to i8*
<   call void @_ZdlPv(i8* nonnull %135) #10
<   br label %159
< 
< 136:                                              ; preds = %156
<   %137 = landingpad { i8*, i32 }
<           cleanup
<   br label %159
< 
< 138:                                              ; preds = %164, %114
<   %139 = phi double [ %110, %114 ], [ %165, %164 ]
<   %140 = phi i64 [ 1, %114 ], [ %166, %164 ]
<   %141 = phi i64 [ %115, %114 ], [ %167, %164 ]
<   %142 = getelementptr inbounds double, double* %105, i64 %140
<   %143 = load double, double* %142, align 8, !tbaa !2
<   %144 = fcmp olt double %143, %139
<   br i1 %144, label %145, label %148
< 
< 145:                                              ; preds = %138
<   store double %143, double* %105, align 16, !tbaa !2
<   %146 = getelementptr inbounds i32, i32* %104, i64 %140
<   %147 = load i32, i32* %146, align 4, !tbaa !12
<   store i32 %147, i32* %104, align 16, !tbaa !12
<   br label %148
< 
< 148:                                              ; preds = %138, %145
<   %149 = phi double [ %139, %138 ], [ %143, %145 ]
<   %150 = add nuw nsw i64 %140, 1
<   %151 = getelementptr inbounds double, double* %105, i64 %150
<   %152 = load double, double* %151, align 8, !tbaa !2
<   %153 = fcmp olt double %152, %149
<   br i1 %153, label %161, label %164
< 
< 154:                                              ; preds = %127
<   %155 = load double, double* %105, align 16, !tbaa !2
<   store double %155, double* %4, align 8, !tbaa !2
<   br label %156
< 
< 156:                                              ; preds = %154, %127
<   %157 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL29CalcCourantConstraintForElemsR6DomainiPidRdE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %157)
<           to label %158 unwind label %136
< 
< 158:                                              ; preds = %156
<   call void @llvm.stackrestore(i8* %103)
<   call void @_ZdlPv(i8* nonnull %13) #10
---
> ; Function Attrs: norecurse nounwind uwtable
> define internal void @.omp_outlined..46(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture nonnull align 4 dereferenceable(4) %threads, i32** nocapture nonnull align 8 dereferenceable(8) %courant_elem_per_thread, double** nocapture nonnull align 8 dereferenceable(8) %dtcourant_per_thread, i64 %qqc, double* nocapture nonnull readonly align 8 dereferenceable(8) %dtcourant, i64 %length, i32** nocapture nonnull readonly align 8 dereferenceable(8) %regElemlist, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %domain) #6 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
> entry:
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %length.addr.sroa.0.0.extract.trunc = trunc i64 %length to i32
>   %0 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   %1 = tail call i32 @__kmpc_master(%struct.ident_t* nonnull @1, i32 %0) #7
>   %.not = icmp eq i32 %1, 0
>   br i1 %.not, label %invoke.cont11, label %invoke.cont
> 
> invoke.cont:                                      ; preds = %entry
>   %call = tail call i32 @omp_get_num_threads()
>   store i32 %call, i32* %threads, align 4, !tbaa !6
>   %conv3 = sext i32 %call to i64
>   %2 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %conv3, i64 4)
>   %3 = extractvalue { i64, i1 } %2, 1
>   %4 = extractvalue { i64, i1 } %2, 0
>   %5 = select i1 %3, i64 -1, i64 %4
>   %call5 = invoke noalias nonnull i8* @_Znam(i64 %5) #24
>           to label %invoke.cont4 unwind label %terminate.handler
> 
> invoke.cont4:                                     ; preds = %invoke.cont
>   %6 = bitcast i32** %courant_elem_per_thread to i8**
>   store i8* %call5, i8** %6, align 8, !tbaa !41
>   %7 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %conv3, i64 8)
>   %8 = extractvalue { i64, i1 } %7, 1
>   %9 = extractvalue { i64, i1 } %7, 0
>   %10 = select i1 %8, i64 -1, i64 %9
>   %call8 = invoke noalias nonnull i8* @_Znam(i64 %10) #24
>           to label %invoke.cont7 unwind label %terminate.handler
> 
> invoke.cont7:                                     ; preds = %invoke.cont4
>   %11 = bitcast double** %dtcourant_per_thread to i8**
>   store i8* %call8, i8** %11, align 8, !tbaa !41
>   tail call void @__kmpc_end_master(%struct.ident_t* nonnull @1, i32 %0) #7
>   br label %invoke.cont11
> 
> invoke.cont11:                                    ; preds = %invoke.cont7, %entry
>   tail call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %0) #7
>   %12 = bitcast i64 %qqc to double
>   %mul = fmul double %12, 6.400000e+01
>   %mul9 = fmul double %mul, %12
>   %13 = load double, double* %dtcourant, align 8, !tbaa !2
>   %call12 = tail call i32 @omp_get_thread_num()
>   %sub16 = add nsw i32 %length.addr.sroa.0.0.extract.trunc, -1
>   %cmp = icmp sgt i32 %length.addr.sroa.0.0.extract.trunc, 0
>   br i1 %cmp, label %omp.precond.then, label %omp.precond.end
> 
> omp.precond.then:                                 ; preds = %invoke.cont11
>   %14 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %15 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #7
>   store i32 %sub16, i32* %.omp.ub, align 4, !tbaa !6
>   %16 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %17 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %0, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %18 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp18.not = icmp slt i32 %18, %length.addr.sroa.0.0.extract.trunc
>   %cond = select i1 %cmp18.not, i32 %18, i32 %sub16
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %19 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp19.not118 = icmp sgt i32 %19, %cond
>   br i1 %cmp19.not118, label %omp.loop.exit, label %omp.inner.for.body.lr.ph
> 
> omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
>   %_M_start.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 49, i32 0, i32 0, i32 0, i32 0
>   %_M_start.i.i104 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 47, i32 0, i32 0, i32 0, i32 0
>   %_M_start.i.i116 = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 48, i32 0, i32 0, i32 0, i32 0
>   %20 = sext i32 %19 to i64
>   %.pre = load double*, double** %_M_start.i.i104, align 8, !tbaa !11
>   br label %omp.inner.for.body
> 
> omp.inner.for.body:                               ; preds = %if.end, %omp.inner.for.body.lr.ph
>   %21 = phi double* [ %31, %if.end ], [ %.pre, %omp.inner.for.body.lr.ph ]
>   %indvars.iv = phi i64 [ %indvars.iv.next, %if.end ], [ %20, %omp.inner.for.body.lr.ph ]
>   %dtcourant_tmp.0121 = phi double [ %dtcourant_tmp.1, %if.end ], [ %13, %omp.inner.for.body.lr.ph ]
>   %courant_elem.0120 = phi i32 [ %courant_elem.1, %if.end ], [ -1, %omp.inner.for.body.lr.ph ]
>   %22 = load i32*, i32** %regElemlist, align 8, !tbaa !41
>   %arrayidx = getelementptr inbounds i32, i32* %22, i64 %indvars.iv
>   %23 = load i32, i32* %arrayidx, align 4, !tbaa !6
>   %conv.i = sext i32 %23 to i64
>   %24 = load double*, double** %_M_start.i.i, align 8, !tbaa !11
>   %add.ptr.i.i = getelementptr inbounds double, double* %24, i64 %conv.i
>   %25 = load double, double* %add.ptr.i.i, align 8, !tbaa !2
>   %mul23 = fmul double %25, %25
>   %add.ptr.i.i105 = getelementptr inbounds double, double* %21, i64 %conv.i
>   %26 = load double, double* %add.ptr.i.i105, align 8, !tbaa !2
>   %cmp25 = fcmp olt double %26, 0.000000e+00
>   br i1 %cmp25, label %if.then, label %if.end
> 
> if.then:                                          ; preds = %omp.inner.for.body
>   %27 = load double*, double** %_M_start.i.i116, align 8, !tbaa !11
>   %add.ptr.i.i117 = getelementptr inbounds double, double* %27, i64 %conv.i
>   %28 = load double, double* %add.ptr.i.i117, align 8, !tbaa !2
>   %mul27 = fmul double %mul9, %28
>   %mul29 = fmul double %28, %mul27
>   %mul31 = fmul double %26, %mul29
>   %mul33 = fmul double %26, %mul31
>   %add34 = fadd double %mul23, %mul33
>   br label %if.end
> 
> if.end:                                           ; preds = %if.then, %omp.inner.for.body
>   %dtf.0 = phi double [ %add34, %if.then ], [ %mul23, %omp.inner.for.body ]
>   %call.i = call double @sqrt(double %dtf.0) #7
>   %29 = load double*, double** %_M_start.i.i116, align 8, !tbaa !11
>   %add.ptr.i.i102 = getelementptr inbounds double, double* %29, i64 %conv.i
>   %30 = load double, double* %add.ptr.i.i102, align 8, !tbaa !2
>   %div37 = fdiv double %30, %call.i
>   %31 = load double*, double** %_M_start.i.i104, align 8, !tbaa !11
>   %add.ptr.i.i99 = getelementptr inbounds double, double* %31, i64 %conv.i
>   %32 = load double, double* %add.ptr.i.i99, align 8, !tbaa !2
>   %cmp39 = fcmp une double %32, 0.000000e+00
>   %cmp41 = fcmp olt double %div37, %dtcourant_tmp.0121
>   %or.cond = and i1 %cmp41, %cmp39
>   %courant_elem.1 = select i1 %or.cond, i32 %23, i32 %courant_elem.0120
>   %dtcourant_tmp.1 = select i1 %or.cond, double %div37, double %dtcourant_tmp.0121
>   %indvars.iv.next = add nsw i64 %indvars.iv, 1
>   %33 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %34 = sext i32 %33 to i64
>   %cmp19.not.not = icmp slt i64 %indvars.iv, %34
>   br i1 %cmp19.not.not, label %omp.inner.for.body, label %omp.loop.exit
> 
> omp.loop.exit:                                    ; preds = %if.end, %omp.precond.then
>   %courant_elem.0.lcssa = phi i32 [ -1, %omp.precond.then ], [ %courant_elem.1, %if.end ]
>   %dtcourant_tmp.0.lcssa = phi double [ %13, %omp.precond.then ], [ %dtcourant_tmp.1, %if.end ]
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %0)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #7
>   br label %omp.precond.end
> 
> omp.precond.end:                                  ; preds = %omp.loop.exit, %invoke.cont11
>   %courant_elem.2 = phi i32 [ %courant_elem.0.lcssa, %omp.loop.exit ], [ -1, %invoke.cont11 ]
>   %dtcourant_tmp.2 = phi double [ %dtcourant_tmp.0.lcssa, %omp.loop.exit ], [ %13, %invoke.cont11 ]
>   call void @__kmpc_barrier(%struct.ident_t* nonnull @3, i32 %0) #7
>   %35 = load double*, double** %dtcourant_per_thread, align 8, !tbaa !41
>   %idxprom46 = sext i32 %call12 to i64
>   %arrayidx47 = getelementptr inbounds double, double* %35, i64 %idxprom46
>   store double %dtcourant_tmp.2, double* %arrayidx47, align 8, !tbaa !2
>   %36 = load i32*, i32** %courant_elem_per_thread, align 8, !tbaa !41
>   %arrayidx49 = getelementptr inbounds i32, i32* %36, i64 %idxprom46
>   store i32 %courant_elem.2, i32* %arrayidx49, align 4, !tbaa !6
16589,16606c13661,13667
< 159:                                              ; preds = %134, %130, %70, %136, %45
<   %160 = phi { i8*, i32 } [ %137, %136 ], [ %46, %45 ], [ %71, %70 ], [ %131, %130 ], [ %131, %134 ]
<   call void @_ZdlPv(i8* nonnull %13) #10
<   resume { i8*, i32 } %160
< 
< 161:                                              ; preds = %148
<   store double %152, double* %105, align 16, !tbaa !2
<   %162 = getelementptr inbounds i32, i32* %104, i64 %150
<   %163 = load i32, i32* %162, align 4, !tbaa !12
<   store i32 %163, i32* %104, align 16, !tbaa !12
<   br label %164
< 
< 164:                                              ; preds = %161, %148
<   %165 = phi double [ %149, %148 ], [ %152, %161 ]
<   %166 = add nuw nsw i64 %140, 2
<   %167 = add i64 %141, -2
<   %168 = icmp eq i64 %167, 0
<   br i1 %168, label %116, label %138, !llvm.loop !132
---
> terminate.handler:                                ; preds = %invoke.cont, %invoke.cont4
>   %37 = landingpad { i8*, i32 }
>           catch i8* null
>   %38 = extractvalue { i8*, i32 } %37, 0
>   tail call void @__kmpc_end_master(%struct.ident_t* nonnull @1, i32 %0) #7
>   tail call void @__clang_call_terminate(i8* %38) #23
>   unreachable
16609,16832c13670,13671
< ; Function Attrs: inlinehint norecurse uwtable
< define internal fastcc void @_ZL27CalcHydroConstraintForElemsR6DomainiPidRd(%class.Domain* nonnull align 8 dereferenceable(1312) %0, i32 %1, i32* %2, double %3, double* nonnull align 8 dereferenceable(8) %4) unnamed_addr #16 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %6 = alloca %"class.std::allocator.30", align 1
<   %7 = alloca %"class.std::allocator.30", align 1
<   %8 = alloca i32*, align 8
<   %9 = alloca %"class.std::basic_string", align 8
<   %10 = alloca %"class.std::allocator.30", align 1
<   %11 = alloca %"class.std::vector.15", align 8
<   store i32* %2, i32** %8, align 8, !tbaa !6
<   %12 = sitofp i32 %1 to float
<   %13 = tail call noalias nonnull i8* @_Znwm(i64 4) #26
<   %14 = bitcast i8* %13 to float*
<   store float %12, float* %14, align 4
<   %15 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL27CalcHydroConstraintForElemsR6DomainiPidRdE12apolloRegion, align 8, !tbaa !6
<   %16 = icmp eq %"class.Apollo::Region"* %15, null
<   br i1 %16, label %17, label %72
< 
< 17:                                               ; preds = %5
<   %18 = invoke noalias nonnull dereferenceable(808) i8* @_Znwm(i64 808) #27
<           to label %19 unwind label %45
< 
< 19:                                               ; preds = %17
<   %20 = bitcast %"class.std::basic_string"* %9 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #10
<   %21 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %10, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %21) #10
<   invoke void @_ZNSsC1EPKcRKSaIcE(%"class.std::basic_string"* nonnull dereferenceable(8) %9, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %10)
<           to label %22 unwind label %47
< 
< 22:                                               ; preds = %19
<   %23 = bitcast i8* %18 to %"class.Apollo::Region"*
<   invoke void @_ZN6Apollo6RegionC1EiPKciPNS_16CallbackDataPoolERKSs(%"class.Apollo::Region"* nonnull dereferenceable(808) %23, i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.74, i64 0, i64 0), i32 2, %"struct.Apollo::CallbackDataPool"* null, %"class.std::basic_string"* nonnull align 8 dereferenceable(8) %9)
<           to label %24 unwind label %49
< 
< 24:                                               ; preds = %22
<   store i8* %18, i8** bitcast (%"class.Apollo::Region"** @_ZZL27CalcHydroConstraintForElemsR6DomainiPidRdE12apolloRegion to i8**), align 8, !tbaa !6
<   %25 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %9, i64 0, i32 0, i32 0
<   %26 = load i8*, i8** %25, align 8, !tbaa !8
<   %27 = getelementptr inbounds i8, i8* %26, i64 -24
<   %28 = bitcast i8* %27 to %"struct.std::basic_string<char>::_Rep"*
<   %29 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %7, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %29) #10
<   %30 = icmp eq i8* %27, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %30, label %43, label %31, !prof !11
< 
< 31:                                               ; preds = %24
<   %32 = getelementptr inbounds i8, i8* %26, i64 -8
<   %33 = bitcast i8* %32 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %34, label %36
< 
< 34:                                               ; preds = %31
<   %35 = atomicrmw volatile add i32* %33, i32 -1 acq_rel
<   br label %39
< 
< 36:                                               ; preds = %31
<   %37 = load i32, i32* %33, align 4, !tbaa !12
<   %38 = add nsw i32 %37, -1
<   store i32 %38, i32* %33, align 4, !tbaa !12
<   br label %39
< 
< 39:                                               ; preds = %36, %34
<   %40 = phi i32 [ %35, %34 ], [ %37, %36 ]
<   %41 = icmp slt i32 %40, 1
<   br i1 %41, label %42, label %43
< 
< 42:                                               ; preds = %39
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %28, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %7) #10
<   br label %43
< 
< 43:                                               ; preds = %24, %39, %42
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %29) #10
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %21) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #10
<   %44 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL27CalcHydroConstraintForElemsR6DomainiPidRdE12apolloRegion, align 8, !tbaa !6
<   br label %72
< 
< 45:                                               ; preds = %72, %93, %17
<   %46 = landingpad { i8*, i32 }
<           cleanup
<   br label %159
< 
< 47:                                               ; preds = %19
<   %48 = landingpad { i8*, i32 }
<           cleanup
<   br label %70
< 
< 49:                                               ; preds = %22
<   %50 = landingpad { i8*, i32 }
<           cleanup
<   %51 = getelementptr inbounds %"class.std::basic_string", %"class.std::basic_string"* %9, i64 0, i32 0, i32 0
<   %52 = load i8*, i8** %51, align 8, !tbaa !8
<   %53 = getelementptr inbounds i8, i8* %52, i64 -24
<   %54 = bitcast i8* %53 to %"struct.std::basic_string<char>::_Rep"*
<   %55 = getelementptr inbounds %"class.std::allocator.30", %"class.std::allocator.30"* %6, i64 0, i32 0
<   call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %55) #10
<   %56 = icmp eq i8* %53, bitcast ([0 x i64]* @_ZNSs4_Rep20_S_empty_rep_storageE to i8*)
<   br i1 %56, label %69, label %57, !prof !11
< 
< 57:                                               ; preds = %49
<   %58 = getelementptr inbounds i8, i8* %52, i64 -8
<   %59 = bitcast i8* %58 to i32*
<   br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %60, label %62
< 
< 60:                                               ; preds = %57
<   %61 = atomicrmw volatile add i32* %59, i32 -1 acq_rel
<   br label %65
< 
< 62:                                               ; preds = %57
<   %63 = load i32, i32* %59, align 4, !tbaa !12
<   %64 = add nsw i32 %63, -1
<   store i32 %64, i32* %59, align 4, !tbaa !12
<   br label %65
< 
< 65:                                               ; preds = %62, %60
<   %66 = phi i32 [ %61, %60 ], [ %63, %62 ]
<   %67 = icmp slt i32 %66, 1
<   br i1 %67, label %68, label %69
< 
< 68:                                               ; preds = %65
<   call void @_ZNSs4_Rep10_M_destroyERKSaIcE(%"struct.std::basic_string<char>::_Rep"* nonnull dereferenceable(24) %54, %"class.std::allocator.30"* nonnull align 1 dereferenceable(1) %6) #10
<   br label %69
< 
< 69:                                               ; preds = %49, %65, %68
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %55) #10
<   br label %70
< 
< 70:                                               ; preds = %69, %47
<   %71 = phi { i8*, i32 } [ %50, %69 ], [ %48, %47 ]
<   call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %21) #10
<   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #10
<   call void @_ZdlPv(i8* nonnull %18) #28
<   br label %159
< 
< 72:                                               ; preds = %43, %5
<   %73 = phi %"class.Apollo::Region"* [ %44, %43 ], [ %15, %5 ]
<   %74 = bitcast %"class.std::vector.15"* %11 to i8*
<   call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %74, i8 0, i64 24, i1 false) #10
<   %75 = invoke noalias nonnull i8* @_Znwm(i64 4) #26
<           to label %76 unwind label %45
< 
< 76:                                               ; preds = %72
<   %77 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %11, i64 0, i32 0, i32 0, i32 0
<   %78 = bitcast %"class.std::vector.15"* %11 to i8**
<   store i8* %75, i8** %78, align 8, !tbaa !14
<   %79 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %11, i64 0, i32 0, i32 0, i32 1
<   %80 = bitcast float** %79 to i8**
<   %81 = getelementptr inbounds i8, i8* %75, i64 4
<   %82 = getelementptr inbounds %"class.std::vector.15", %"class.std::vector.15"* %11, i64 0, i32 0, i32 0, i32 2
<   %83 = bitcast float** %82 to i8**
<   store i8* %81, i8** %83, align 8, !tbaa !17
<   %84 = bitcast i8* %13 to i32*
<   %85 = bitcast i8* %75 to i32*
<   %86 = load i32, i32* %84, align 4
<   store i32 %86, i32* %85, align 4
<   store i8* %81, i8** %80, align 8, !tbaa !18
<   %87 = invoke %"struct.Apollo::RegionContext"* @_ZN6Apollo6Region5beginESt6vectorIfSaIfEE(%"class.Apollo::Region"* nonnull dereferenceable(808) %73, %"class.std::vector.15"* nonnull %11)
<           to label %88 unwind label %130
< 
< 88:                                               ; preds = %76
<   %89 = load float*, float** %77, align 8, !tbaa !14
<   %90 = icmp eq float* %89, null
<   br i1 %90, label %93, label %91
< 
< 91:                                               ; preds = %88
<   %92 = bitcast float* %89 to i8*
<   call void @_ZdlPv(i8* nonnull %92) #10
<   br label %93
< 
< 93:                                               ; preds = %88, %91
<   %94 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL27CalcHydroConstraintForElemsR6DomainiPidRdE12apolloRegion, align 8, !tbaa !6
<   %95 = invoke i32 @_ZN6Apollo6Region14getPolicyIndexEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %94)
<           to label %96 unwind label %45
< 
< 96:                                               ; preds = %93
<   %97 = icmp eq i32 %95, 1
<   %98 = select i1 %97, i32 1, i32 36
<   %99 = icmp eq i32 %95, 0
<   %100 = select i1 %99, i32 36, i32 %98
<   call void @omp_set_num_threads(i32 %100) #10
<   %101 = call i32 @omp_get_max_threads()
<   %102 = zext i32 %101 to i64
<   %103 = call i8* @llvm.stacksave()
<   %104 = alloca i32, i64 %102, align 16
<   %105 = alloca double, i64 %102, align 16
<   %106 = zext i32 %1 to i64
<   %107 = bitcast double %3 to i64
<   call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* nonnull @3, i32 9, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, double*, i64, i32**, %class.Domain*, i64, i64, double*, i64, i32*)* @.omp_outlined..75 to void (i32*, i32*, ...)*), double* nonnull %4, i64 %106, i32** nonnull %8, %class.Domain* nonnull %0, i64 %107, i64 %102, double* nonnull %105, i64 %102, i32* nonnull %104)
<   %108 = icmp sgt i32 %101, 1
<   br i1 %108, label %109, label %127
< 
< 109:                                              ; preds = %96
<   %110 = load double, double* %105, align 16, !tbaa !2
<   %111 = add nsw i64 %102, -1
<   %112 = and i64 %111, 1
<   %113 = icmp eq i32 %101, 2
<   br i1 %113, label %116, label %114
< 
< 114:                                              ; preds = %109
<   %115 = and i64 %111, -2
<   br label %138
< 
< 116:                                              ; preds = %164, %109
<   %117 = phi double [ %110, %109 ], [ %165, %164 ]
<   %118 = phi i64 [ 1, %109 ], [ %166, %164 ]
<   %119 = icmp eq i64 %112, 0
<   br i1 %119, label %127, label %120
< 
< 120:                                              ; preds = %116
<   %121 = getelementptr inbounds double, double* %105, i64 %118
<   %122 = load double, double* %121, align 8, !tbaa !2
<   %123 = fcmp olt double %122, %117
<   br i1 %123, label %124, label %127
< 
< 124:                                              ; preds = %120
<   store double %122, double* %105, align 16, !tbaa !2
<   %125 = getelementptr inbounds i32, i32* %104, i64 %118
<   %126 = load i32, i32* %125, align 4, !tbaa !12
<   store i32 %126, i32* %104, align 16, !tbaa !12
<   br label %127
< 
< 127:                                              ; preds = %116, %120, %124, %96
<   %128 = load i32, i32* %104, align 16, !tbaa !12
<   %129 = icmp eq i32 %128, -1
<   br i1 %129, label %156, label %154
---
> ; Function Attrs: nounwind readnone speculatable willreturn
> declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #18
16834,16888c13673,13674
< 130:                                              ; preds = %76
<   %131 = landingpad { i8*, i32 }
<           cleanup
<   %132 = load float*, float** %77, align 8, !tbaa !14
<   %133 = icmp eq float* %132, null
<   br i1 %133, label %159, label %134
< 
< 134:                                              ; preds = %130
<   %135 = bitcast float* %132 to i8*
<   call void @_ZdlPv(i8* nonnull %135) #10
<   br label %159
< 
< 136:                                              ; preds = %156
<   %137 = landingpad { i8*, i32 }
<           cleanup
<   br label %159
< 
< 138:                                              ; preds = %164, %114
<   %139 = phi double [ %110, %114 ], [ %165, %164 ]
<   %140 = phi i64 [ 1, %114 ], [ %166, %164 ]
<   %141 = phi i64 [ %115, %114 ], [ %167, %164 ]
<   %142 = getelementptr inbounds double, double* %105, i64 %140
<   %143 = load double, double* %142, align 8, !tbaa !2
<   %144 = fcmp olt double %143, %139
<   br i1 %144, label %145, label %148
< 
< 145:                                              ; preds = %138
<   store double %143, double* %105, align 16, !tbaa !2
<   %146 = getelementptr inbounds i32, i32* %104, i64 %140
<   %147 = load i32, i32* %146, align 4, !tbaa !12
<   store i32 %147, i32* %104, align 16, !tbaa !12
<   br label %148
< 
< 148:                                              ; preds = %138, %145
<   %149 = phi double [ %139, %138 ], [ %143, %145 ]
<   %150 = add nuw nsw i64 %140, 1
<   %151 = getelementptr inbounds double, double* %105, i64 %150
<   %152 = load double, double* %151, align 8, !tbaa !2
<   %153 = fcmp olt double %152, %149
<   br i1 %153, label %161, label %164
< 
< 154:                                              ; preds = %127
<   %155 = load double, double* %105, align 16, !tbaa !2
<   store double %155, double* %4, align 8, !tbaa !2
<   br label %156
< 
< 156:                                              ; preds = %154, %127
<   %157 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL27CalcHydroConstraintForElemsR6DomainiPidRdE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region3endEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %157)
<           to label %158 unwind label %136
< 
< 158:                                              ; preds = %156
<   call void @llvm.stackrestore(i8* %103)
<   call void @_ZdlPv(i8* nonnull %13) #10
<   ret void
---
> ; Function Attrs: nobuiltin nofree allocsize(0)
> declare dso_local noalias nonnull i8* @_Znam(i64) local_unnamed_addr #12
16890,16908c13676,13677
< 159:                                              ; preds = %134, %130, %70, %136, %45
<   %160 = phi { i8*, i32 } [ %137, %136 ], [ %46, %45 ], [ %71, %70 ], [ %131, %130 ], [ %131, %134 ]
<   call void @_ZdlPv(i8* nonnull %13) #10
<   resume { i8*, i32 } %160
< 
< 161:                                              ; preds = %148
<   store double %152, double* %105, align 16, !tbaa !2
<   %162 = getelementptr inbounds i32, i32* %104, i64 %150
<   %163 = load i32, i32* %162, align 4, !tbaa !12
<   store i32 %163, i32* %104, align 16, !tbaa !12
<   br label %164
< 
< 164:                                              ; preds = %161, %148
<   %165 = phi double [ %149, %148 ], [ %152, %161 ]
<   %166 = add nuw nsw i64 %140, 2
<   %167 = add i64 %141, -2
<   %168 = icmp eq i64 %167, 0
<   br i1 %168, label %116, label %138, !llvm.loop !133
< }
---
> ; Function Attrs: nounwind
> declare dso_local i32 @omp_get_thread_num() local_unnamed_addr #7
16910,16911c13679,13680
< ; Function Attrs: nofree nosync nounwind willreturn
< declare i8* @llvm.stacksave() #23
---
> ; Function Attrs: nobuiltin nounwind
> declare dso_local void @_ZdaPv(i8*) local_unnamed_addr #13
16914,17050c13683,13851
< define internal void @.omp_outlined..73(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, i64 %2, double* nocapture nonnull readonly align 8 dereferenceable(8) %3, i64 %4, i32** nocapture nonnull readonly align 8 dereferenceable(8) %5, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %6, i64 %7, double* nocapture nonnull align 8 dereferenceable(8) %8, i64 %9, i32* nocapture nonnull align 4 dereferenceable(4) %10) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %12 = alloca i32, align 4
<   %13 = alloca i32, align 4
<   %14 = alloca i32, align 4
<   %15 = alloca i32, align 4
<   %16 = trunc i64 %4 to i32
<   %17 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL29CalcCourantConstraintForElemsR6DomainiPidRdE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %17)
<           to label %18 unwind label %104
< 
< 18:                                               ; preds = %11
<   %19 = bitcast i64 %2 to double
<   %20 = fmul double %19, 6.400000e+01
<   %21 = fmul double %20, %19
<   %22 = load double, double* %3, align 8, !tbaa !2
<   %23 = tail call i32 @omp_get_thread_num()
<   %24 = add nsw i32 %16, -1
<   %25 = icmp sgt i32 %16, 0
<   br i1 %25, label %28, label %26
< 
< 26:                                               ; preds = %18
<   %27 = load i32, i32* %0, align 4, !tbaa !12
<   br label %95
< 
< 28:                                               ; preds = %18
<   %29 = bitcast i32* %12 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %29) #10
<   store i32 0, i32* %12, align 4, !tbaa !12
<   %30 = bitcast i32* %13 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30) #10
<   store i32 %24, i32* %13, align 4, !tbaa !12
<   %31 = bitcast i32* %14 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %31) #10
<   store i32 1, i32* %14, align 4, !tbaa !12
<   %32 = bitcast i32* %15 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32) #10
<   store i32 0, i32* %15, align 4, !tbaa !12
<   %33 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %33, i32 34, i32* nonnull %15, i32* nonnull %12, i32* nonnull %13, i32* nonnull %14, i32 1, i32 1) #10
<   %34 = load i32, i32* %13, align 4, !tbaa !12
<   %35 = icmp slt i32 %34, %16
<   %36 = select i1 %35, i32 %34, i32 %24
<   store i32 %36, i32* %13, align 4, !tbaa !12
<   %37 = load i32, i32* %12, align 4, !tbaa !12
<   %38 = icmp sgt i32 %37, %36
<   br i1 %38, label %92, label %39
< 
< 39:                                               ; preds = %28
<   %40 = getelementptr inbounds %class.Domain, %class.Domain* %6, i64 0, i32 49, i32 0, i32 0, i32 0
<   %41 = getelementptr inbounds %class.Domain, %class.Domain* %6, i64 0, i32 47, i32 0, i32 0, i32 0
<   %42 = getelementptr inbounds %class.Domain, %class.Domain* %6, i64 0, i32 48, i32 0, i32 0, i32 0
<   %43 = sext i32 %37 to i64
<   %44 = load double*, double** %41, align 8, !tbaa !22
<   br label %48
< 
< 45:                                               ; preds = %95
<   %46 = landingpad { i8*, i32 }
<           catch i8* null
<   %47 = extractvalue { i8*, i32 } %46, 0
<   call void @__clang_call_terminate(i8* %47) #29
<   unreachable
< 
< 48:                                               ; preds = %39, %73
<   %49 = phi double* [ %44, %39 ], [ %80, %73 ]
<   %50 = phi i64 [ %43, %39 ], [ %88, %73 ]
<   %51 = phi double [ %22, %39 ], [ %87, %73 ]
<   %52 = phi i32 [ -1, %39 ], [ %86, %73 ]
<   %53 = load i32*, i32** %5, align 8, !tbaa !6
<   %54 = getelementptr inbounds i32, i32* %53, i64 %50
<   %55 = load i32, i32* %54, align 4, !tbaa !12
<   %56 = sext i32 %55 to i64
<   %57 = load double*, double** %40, align 8, !tbaa !22
<   %58 = getelementptr inbounds double, double* %57, i64 %56
<   %59 = load double, double* %58, align 8, !tbaa !2
<   %60 = fmul double %59, %59
<   %61 = getelementptr inbounds double, double* %49, i64 %56
<   %62 = load double, double* %61, align 8, !tbaa !2
<   %63 = fcmp olt double %62, 0.000000e+00
<   br i1 %63, label %64, label %73
< 
< 64:                                               ; preds = %48
<   %65 = load double*, double** %42, align 8, !tbaa !22
<   %66 = getelementptr inbounds double, double* %65, i64 %56
<   %67 = load double, double* %66, align 8, !tbaa !2
<   %68 = fmul double %21, %67
<   %69 = fmul double %67, %68
<   %70 = fmul double %62, %69
<   %71 = fmul double %62, %70
<   %72 = fadd double %60, %71
<   br label %73
< 
< 73:                                               ; preds = %64, %48
<   %74 = phi double [ %72, %64 ], [ %60, %48 ]
<   %75 = call double @sqrt(double %74) #10
<   %76 = load double*, double** %42, align 8, !tbaa !22
<   %77 = getelementptr inbounds double, double* %76, i64 %56
<   %78 = load double, double* %77, align 8, !tbaa !2
<   %79 = fdiv double %78, %75
<   %80 = load double*, double** %41, align 8, !tbaa !22
<   %81 = getelementptr inbounds double, double* %80, i64 %56
<   %82 = load double, double* %81, align 8, !tbaa !2
<   %83 = fcmp une double %82, 0.000000e+00
<   %84 = fcmp olt double %79, %51
<   %85 = and i1 %84, %83
<   %86 = select i1 %85, i32 %55, i32 %52
<   %87 = select i1 %85, double %79, double %51
<   %88 = add nsw i64 %50, 1
<   %89 = load i32, i32* %13, align 4, !tbaa !12
<   %90 = sext i32 %89 to i64
<   %91 = icmp slt i64 %50, %90
<   br i1 %91, label %48, label %92
< 
< 92:                                               ; preds = %73, %28
<   %93 = phi i32 [ -1, %28 ], [ %86, %73 ]
<   %94 = phi double [ %22, %28 ], [ %87, %73 ]
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %33)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %29) #10
<   br label %95
< 
< 95:                                               ; preds = %26, %92
<   %96 = phi i32 [ %33, %92 ], [ %27, %26 ]
<   %97 = phi i32 [ %93, %92 ], [ -1, %26 ]
<   %98 = phi double [ %94, %92 ], [ %22, %26 ]
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %96)
<   %99 = sext i32 %23 to i64
<   %100 = getelementptr inbounds double, double* %8, i64 %99
<   store double %98, double* %100, align 8, !tbaa !2
<   %101 = getelementptr inbounds i32, i32* %10, i64 %99
<   store i32 %97, i32* %101, align 4, !tbaa !12
<   %102 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL29CalcCourantConstraintForElemsR6DomainiPidRdE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %102)
<           to label %103 unwind label %45
< 
< 103:                                              ; preds = %95
---
> define internal void @.omp_outlined..47(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture nonnull align 4 dereferenceable(4) %threads, i32** nocapture nonnull align 8 dereferenceable(8) %hydro_elem_per_thread, double** nocapture nonnull align 8 dereferenceable(8) %dthydro_per_thread, double* nocapture nonnull readonly align 8 dereferenceable(8) %dthydro, i64 %length, i32** nocapture nonnull readonly align 8 dereferenceable(8) %regElemlist, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %domain, i64 %dvovmax) #6 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
> entry:
>   %.omp.lb = alloca i32, align 4
>   %.omp.ub = alloca i32, align 4
>   %.omp.stride = alloca i32, align 4
>   %.omp.is_last = alloca i32, align 4
>   %length.addr.sroa.0.0.extract.trunc = trunc i64 %length to i32
>   %0 = load i32, i32* %.global_tid., align 4, !tbaa !6
>   %1 = tail call i32 @__kmpc_master(%struct.ident_t* nonnull @1, i32 %0) #7
>   %.not = icmp eq i32 %1, 0
>   br i1 %.not, label %invoke.cont10, label %invoke.cont
> 
> invoke.cont:                                      ; preds = %entry
>   %call = tail call i32 @omp_get_num_threads()
>   store i32 %call, i32* %threads, align 4, !tbaa !6
>   %conv3 = sext i32 %call to i64
>   %2 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %conv3, i64 4)
>   %3 = extractvalue { i64, i1 } %2, 1
>   %4 = extractvalue { i64, i1 } %2, 0
>   %5 = select i1 %3, i64 -1, i64 %4
>   %call5 = invoke noalias nonnull i8* @_Znam(i64 %5) #24
>           to label %invoke.cont4 unwind label %terminate.handler
> 
> invoke.cont4:                                     ; preds = %invoke.cont
>   %6 = bitcast i32** %hydro_elem_per_thread to i8**
>   store i8* %call5, i8** %6, align 8, !tbaa !41
>   %7 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %conv3, i64 8)
>   %8 = extractvalue { i64, i1 } %7, 1
>   %9 = extractvalue { i64, i1 } %7, 0
>   %10 = select i1 %8, i64 -1, i64 %9
>   %call8 = invoke noalias nonnull i8* @_Znam(i64 %10) #24
>           to label %invoke.cont7 unwind label %terminate.handler
> 
> invoke.cont7:                                     ; preds = %invoke.cont4
>   %11 = bitcast double** %dthydro_per_thread to i8**
>   store i8* %call8, i8** %11, align 8, !tbaa !41
>   tail call void @__kmpc_end_master(%struct.ident_t* nonnull @1, i32 %0) #7
>   br label %invoke.cont10
> 
> invoke.cont10:                                    ; preds = %invoke.cont7, %entry
>   tail call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %0) #7
>   %12 = load double, double* %dthydro, align 8, !tbaa !2
>   %call11 = tail call i32 @omp_get_thread_num()
>   %sub15 = add nsw i32 %length.addr.sroa.0.0.extract.trunc, -1
>   %cmp = icmp sgt i32 %length.addr.sroa.0.0.extract.trunc, 0
>   br i1 %cmp, label %omp.precond.then, label %omp.precond.end
> 
> omp.precond.then:                                 ; preds = %invoke.cont10
>   %13 = bitcast i32* %.omp.lb to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #7
>   store i32 0, i32* %.omp.lb, align 4, !tbaa !6
>   %14 = bitcast i32* %.omp.ub to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #7
>   store i32 %sub15, i32* %.omp.ub, align 4, !tbaa !6
>   %15 = bitcast i32* %.omp.stride to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #7
>   store i32 1, i32* %.omp.stride, align 4, !tbaa !6
>   %16 = bitcast i32* %.omp.is_last to i8*
>   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #7
>   store i32 0, i32* %.omp.is_last, align 4, !tbaa !6
>   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @0, i32 %0, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #7
>   %17 = load i32, i32* %.omp.ub, align 4, !tbaa !6
>   %cmp17.not = icmp slt i32 %17, %length.addr.sroa.0.0.extract.trunc
>   %cond = select i1 %cmp17.not, i32 %17, i32 %sub15
>   store i32 %cond, i32* %.omp.ub, align 4, !tbaa !6
>   %18 = load i32, i32* %.omp.lb, align 4, !tbaa !6
>   %cmp18.not60 = icmp sgt i32 %18, %cond
>   br i1 %cmp18.not60, label %omp.loop.exit, label %omp.inner.for.body.lr.ph
> 
> omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
>   %19 = load i32*, i32** %regElemlist, align 8, !tbaa !41
>   %_M_start.i.i = getelementptr inbounds %class.Domain, %class.Domain* %domain, i64 0, i32 47, i32 0, i32 0, i32 0, i32 0
>   %20 = load double*, double** %_M_start.i.i, align 8, !tbaa !11
>   %21 = bitcast i64 %dvovmax to double
>   %22 = sext i32 %18 to i64
>   %23 = icmp sgt i32 %cond, %18
>   %smax = select i1 %23, i32 %cond, i32 %18
>   %24 = add i32 %smax, 1
>   %25 = sub i32 %24, %18
>   %xtraiter = and i32 %25, 1
>   %.not65 = icmp slt i32 %18, %cond
>   br i1 %.not65, label %omp.inner.for.body.lr.ph.new, label %omp.loop.exit.loopexit.unr-lcssa
> 
> omp.inner.for.body.lr.ph.new:                     ; preds = %omp.inner.for.body.lr.ph
>   %unroll_iter = and i32 %25, -2
>   br label %omp.inner.for.body
> 
> omp.inner.for.body:                               ; preds = %if.end27.1, %omp.inner.for.body.lr.ph.new
>   %indvars.iv = phi i64 [ %22, %omp.inner.for.body.lr.ph.new ], [ %indvars.iv.next.1, %if.end27.1 ]
>   %dthydro_tmp.063 = phi double [ %12, %omp.inner.for.body.lr.ph.new ], [ %dthydro_tmp.2.1, %if.end27.1 ]
>   %hydro_elem.062 = phi i32 [ -1, %omp.inner.for.body.lr.ph.new ], [ %hydro_elem.2.1, %if.end27.1 ]
>   %niter = phi i32 [ %unroll_iter, %omp.inner.for.body.lr.ph.new ], [ %niter.nsub.1, %if.end27.1 ]
>   %arrayidx = getelementptr inbounds i32, i32* %19, i64 %indvars.iv
>   %26 = load i32, i32* %arrayidx, align 4, !tbaa !6
>   %conv.i = sext i32 %26 to i64
>   %add.ptr.i.i = getelementptr inbounds double, double* %20, i64 %conv.i
>   %27 = load double, double* %add.ptr.i.i, align 8, !tbaa !2
>   %cmp20 = fcmp une double %27, 0.000000e+00
>   br i1 %cmp20, label %if.then, label %if.end27
> 
> if.then:                                          ; preds = %omp.inner.for.body
>   %28 = call double @llvm.fabs.f64(double %27) #7
>   %add23 = fadd double %28, 0x3BC79CA10C924223
>   %div24 = fdiv double %21, %add23
>   %cmp25 = fcmp ogt double %dthydro_tmp.063, %div24
>   %hydro_elem.1 = select i1 %cmp25, i32 %26, i32 %hydro_elem.062
>   %dthydro_tmp.1 = select i1 %cmp25, double %div24, double %dthydro_tmp.063
>   br label %if.end27
> 
> if.end27:                                         ; preds = %if.then, %omp.inner.for.body
>   %hydro_elem.2 = phi i32 [ %hydro_elem.062, %omp.inner.for.body ], [ %hydro_elem.1, %if.then ]
>   %dthydro_tmp.2 = phi double [ %dthydro_tmp.063, %omp.inner.for.body ], [ %dthydro_tmp.1, %if.then ]
>   %indvars.iv.next = add nsw i64 %indvars.iv, 1
>   %arrayidx.1 = getelementptr inbounds i32, i32* %19, i64 %indvars.iv.next
>   %29 = load i32, i32* %arrayidx.1, align 4, !tbaa !6
>   %conv.i.1 = sext i32 %29 to i64
>   %add.ptr.i.i.1 = getelementptr inbounds double, double* %20, i64 %conv.i.1
>   %30 = load double, double* %add.ptr.i.i.1, align 8, !tbaa !2
>   %cmp20.1 = fcmp une double %30, 0.000000e+00
>   br i1 %cmp20.1, label %if.then.1, label %if.end27.1
> 
> omp.loop.exit.loopexit.unr-lcssa:                 ; preds = %if.end27.1, %omp.inner.for.body.lr.ph
>   %hydro_elem.2.lcssa.ph = phi i32 [ undef, %omp.inner.for.body.lr.ph ], [ %hydro_elem.2.1, %if.end27.1 ]
>   %dthydro_tmp.2.lcssa.ph = phi double [ undef, %omp.inner.for.body.lr.ph ], [ %dthydro_tmp.2.1, %if.end27.1 ]
>   %indvars.iv.unr = phi i64 [ %22, %omp.inner.for.body.lr.ph ], [ %indvars.iv.next.1, %if.end27.1 ]
>   %dthydro_tmp.063.unr = phi double [ %12, %omp.inner.for.body.lr.ph ], [ %dthydro_tmp.2.1, %if.end27.1 ]
>   %hydro_elem.062.unr = phi i32 [ -1, %omp.inner.for.body.lr.ph ], [ %hydro_elem.2.1, %if.end27.1 ]
>   %lcmp.mod.not = icmp eq i32 %xtraiter, 0
>   br i1 %lcmp.mod.not, label %omp.loop.exit, label %omp.inner.for.body.epil
> 
> omp.inner.for.body.epil:                          ; preds = %omp.loop.exit.loopexit.unr-lcssa
>   %arrayidx.epil = getelementptr inbounds i32, i32* %19, i64 %indvars.iv.unr
>   %31 = load i32, i32* %arrayidx.epil, align 4, !tbaa !6
>   %conv.i.epil = sext i32 %31 to i64
>   %add.ptr.i.i.epil = getelementptr inbounds double, double* %20, i64 %conv.i.epil
>   %32 = load double, double* %add.ptr.i.i.epil, align 8, !tbaa !2
>   %cmp20.epil = fcmp une double %32, 0.000000e+00
>   br i1 %cmp20.epil, label %if.then.epil, label %omp.loop.exit
> 
> if.then.epil:                                     ; preds = %omp.inner.for.body.epil
>   %33 = call double @llvm.fabs.f64(double %32) #7
>   %add23.epil = fadd double %33, 0x3BC79CA10C924223
>   %div24.epil = fdiv double %21, %add23.epil
>   %cmp25.epil = fcmp ogt double %dthydro_tmp.063.unr, %div24.epil
>   %hydro_elem.1.epil = select i1 %cmp25.epil, i32 %31, i32 %hydro_elem.062.unr
>   %dthydro_tmp.1.epil = select i1 %cmp25.epil, double %div24.epil, double %dthydro_tmp.063.unr
>   br label %omp.loop.exit
> 
> omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit.unr-lcssa, %omp.inner.for.body.epil, %if.then.epil, %omp.precond.then
>   %hydro_elem.0.lcssa = phi i32 [ -1, %omp.precond.then ], [ %hydro_elem.2.lcssa.ph, %omp.loop.exit.loopexit.unr-lcssa ], [ %hydro_elem.062.unr, %omp.inner.for.body.epil ], [ %hydro_elem.1.epil, %if.then.epil ]
>   %dthydro_tmp.0.lcssa = phi double [ %12, %omp.precond.then ], [ %dthydro_tmp.2.lcssa.ph, %omp.loop.exit.loopexit.unr-lcssa ], [ %dthydro_tmp.063.unr, %omp.inner.for.body.epil ], [ %dthydro_tmp.1.epil, %if.then.epil ]
>   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @0, i32 %0)
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #7
>   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #7
>   br label %omp.precond.end
> 
> omp.precond.end:                                  ; preds = %omp.loop.exit, %invoke.cont10
>   %hydro_elem.3 = phi i32 [ %hydro_elem.0.lcssa, %omp.loop.exit ], [ -1, %invoke.cont10 ]
>   %dthydro_tmp.3 = phi double [ %dthydro_tmp.0.lcssa, %omp.loop.exit ], [ %12, %invoke.cont10 ]
>   call void @__kmpc_barrier(%struct.ident_t* nonnull @3, i32 %0) #7
>   %34 = load double*, double** %dthydro_per_thread, align 8, !tbaa !41
>   %idxprom29 = sext i32 %call11 to i64
>   %arrayidx30 = getelementptr inbounds double, double* %34, i64 %idxprom29
>   store double %dthydro_tmp.3, double* %arrayidx30, align 8, !tbaa !2
>   %35 = load i32*, i32** %hydro_elem_per_thread, align 8, !tbaa !41
>   %arrayidx32 = getelementptr inbounds i32, i32* %35, i64 %idxprom29
>   store i32 %hydro_elem.3, i32* %arrayidx32, align 4, !tbaa !6
17053,17054c13854,13855
< 104:                                              ; preds = %11
<   %105 = landingpad { i8*, i32 }
---
> terminate.handler:                                ; preds = %invoke.cont, %invoke.cont4
>   %36 = landingpad { i8*, i32 }
17056,17057c13857,13859
<   %106 = extractvalue { i8*, i32 } %105, 0
<   tail call void @__clang_call_terminate(i8* %106) #29
---
>   %37 = extractvalue { i8*, i32 } %36, 0
>   tail call void @__kmpc_end_master(%struct.ident_t* nonnull @1, i32 %0) #7
>   tail call void @__clang_call_terminate(i8* %37) #23
17058a13861,13877
> 
> if.then.1:                                        ; preds = %if.end27
>   %38 = call double @llvm.fabs.f64(double %30) #7
>   %add23.1 = fadd double %38, 0x3BC79CA10C924223
>   %div24.1 = fdiv double %21, %add23.1
>   %cmp25.1 = fcmp ogt double %dthydro_tmp.2, %div24.1
>   %hydro_elem.1.1 = select i1 %cmp25.1, i32 %29, i32 %hydro_elem.2
>   %dthydro_tmp.1.1 = select i1 %cmp25.1, double %div24.1, double %dthydro_tmp.2
>   br label %if.end27.1
> 
> if.end27.1:                                       ; preds = %if.then.1, %if.end27
>   %hydro_elem.2.1 = phi i32 [ %hydro_elem.2, %if.end27 ], [ %hydro_elem.1.1, %if.then.1 ]
>   %dthydro_tmp.2.1 = phi double [ %dthydro_tmp.2, %if.end27 ], [ %dthydro_tmp.1.1, %if.then.1 ]
>   %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
>   %niter.nsub.1 = add i32 %niter, -2
>   %niter.ncmp.1 = icmp eq i32 %niter.nsub.1, 0
>   br i1 %niter.ncmp.1, label %omp.loop.exit.loopexit.unr-lcssa, label %omp.inner.for.body
17061,17062c13880
< ; Function Attrs: nounwind
< declare dso_local i32 @omp_get_thread_num() local_unnamed_addr #10
---
> declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"*, double) local_unnamed_addr #0
17064,17065c13882,13888
< ; Function Attrs: nofree nosync nounwind willreturn
< declare void @llvm.stackrestore(i8*) #23
---
> ; Function Attrs: uwtable
> define internal void @_GLOBAL__sub_I_lulesh.cc() #20 section ".text.startup" {
> entry:
>   tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
>   %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
>   ret void
> }
17067,17119c13890,13891
< ; Function Attrs: norecurse nounwind uwtable
< define internal void @.omp_outlined..75(i32* noalias nocapture readonly %0, i32* noalias nocapture readnone %1, double* nocapture nonnull readonly align 8 dereferenceable(8) %2, i64 %3, i32** nocapture nonnull readonly align 8 dereferenceable(8) %4, %class.Domain* nocapture nonnull readonly align 8 dereferenceable(1312) %5, i64 %6, i64 %7, double* nocapture nonnull align 8 dereferenceable(8) %8, i64 %9, i32* nocapture nonnull align 4 dereferenceable(4) %10) #8 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
<   %12 = alloca i32, align 4
<   %13 = alloca i32, align 4
<   %14 = alloca i32, align 4
<   %15 = alloca i32, align 4
<   %16 = trunc i64 %3 to i32
<   %17 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL27CalcHydroConstraintForElemsR6DomainiPidRdE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region17apolloThreadBeginEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %17)
<           to label %18 unwind label %81
< 
< 18:                                               ; preds = %11
<   %19 = load double, double* %2, align 8, !tbaa !2
<   %20 = tail call i32 @omp_get_thread_num()
<   %21 = add nsw i32 %16, -1
<   %22 = icmp sgt i32 %16, 0
<   br i1 %22, label %25, label %23
< 
< 23:                                               ; preds = %18
<   %24 = load i32, i32* %0, align 4, !tbaa !12
<   br label %72
< 
< 25:                                               ; preds = %18
<   %26 = bitcast i32* %12 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %26) #10
<   store i32 0, i32* %12, align 4, !tbaa !12
<   %27 = bitcast i32* %13 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %27) #10
<   store i32 %21, i32* %13, align 4, !tbaa !12
<   %28 = bitcast i32* %14 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #10
<   store i32 1, i32* %14, align 4, !tbaa !12
<   %29 = bitcast i32* %15 to i8*
<   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %29) #10
<   store i32 0, i32* %15, align 4, !tbaa !12
<   %30 = load i32, i32* %0, align 4, !tbaa !12
<   call void @__kmpc_for_static_init_4(%struct.ident_t* nonnull @1, i32 %30, i32 34, i32* nonnull %15, i32* nonnull %12, i32* nonnull %13, i32* nonnull %14, i32 1, i32 1) #10
<   %31 = load i32, i32* %13, align 4, !tbaa !12
<   %32 = icmp slt i32 %31, %16
<   %33 = select i1 %32, i32 %31, i32 %21
<   store i32 %33, i32* %13, align 4, !tbaa !12
<   %34 = load i32, i32* %12, align 4, !tbaa !12
<   %35 = icmp sgt i32 %34, %33
<   br i1 %35, label %69, label %36
< 
< 36:                                               ; preds = %25
<   %37 = load i32*, i32** %4, align 8, !tbaa !6
<   %38 = getelementptr inbounds %class.Domain, %class.Domain* %5, i64 0, i32 47, i32 0, i32 0, i32 0
<   %39 = load double*, double** %38, align 8, !tbaa !22
<   %40 = bitcast i64 %6 to double
<   %41 = sext i32 %34 to i64
<   %42 = add i32 %33, 1
<   br label %46
---
> ; Function Attrs: argmemonly
> declare i8* @__apollo_region_create(i32, i8*, i32) local_unnamed_addr #21
17121,17126c13893,13894
< 43:                                               ; preds = %72
<   %44 = landingpad { i8*, i32 }
<           catch i8* null
<   %45 = extractvalue { i8*, i32 } %44, 0
<   call void @__clang_call_terminate(i8* %45) #29
<   unreachable
---
> ; Function Attrs: argmemonly
> declare void @__apollo_region_begin(i8*) local_unnamed_addr #21
17128,17179c13896,13897
< 46:                                               ; preds = %36, %63
<   %47 = phi i64 [ %41, %36 ], [ %66, %63 ]
<   %48 = phi double [ %19, %36 ], [ %65, %63 ]
<   %49 = phi i32 [ -1, %36 ], [ %64, %63 ]
<   %50 = getelementptr inbounds i32, i32* %37, i64 %47
<   %51 = load i32, i32* %50, align 4, !tbaa !12
<   %52 = sext i32 %51 to i64
<   %53 = getelementptr inbounds double, double* %39, i64 %52
<   %54 = load double, double* %53, align 8, !tbaa !2
<   %55 = fcmp une double %54, 0.000000e+00
<   br i1 %55, label %56, label %63
< 
< 56:                                               ; preds = %46
<   %57 = call double @llvm.fabs.f64(double %54) #10
<   %58 = fadd double %57, 0x3BC79CA10C924223
<   %59 = fdiv double %40, %58
<   %60 = fcmp ogt double %48, %59
<   %61 = select i1 %60, i32 %51, i32 %49
<   %62 = select i1 %60, double %59, double %48
<   br label %63
< 
< 63:                                               ; preds = %56, %46
<   %64 = phi i32 [ %49, %46 ], [ %61, %56 ]
<   %65 = phi double [ %48, %46 ], [ %62, %56 ]
<   %66 = add nsw i64 %47, 1
<   %67 = trunc i64 %66 to i32
<   %68 = icmp eq i32 %42, %67
<   br i1 %68, label %69, label %46
< 
< 69:                                               ; preds = %63, %25
<   %70 = phi i32 [ -1, %25 ], [ %64, %63 ]
<   %71 = phi double [ %19, %25 ], [ %65, %63 ]
<   call void @__kmpc_for_static_fini(%struct.ident_t* nonnull @1, i32 %30)
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %29) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %27) #10
<   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %26) #10
<   br label %72
< 
< 72:                                               ; preds = %23, %69
<   %73 = phi i32 [ %30, %69 ], [ %24, %23 ]
<   %74 = phi i32 [ %70, %69 ], [ -1, %23 ]
<   %75 = phi double [ %71, %69 ], [ %19, %23 ]
<   call void @__kmpc_barrier(%struct.ident_t* nonnull @2, i32 %73)
<   %76 = sext i32 %20 to i64
<   %77 = getelementptr inbounds double, double* %8, i64 %76
<   store double %75, double* %77, align 8, !tbaa !2
<   %78 = getelementptr inbounds i32, i32* %10, i64 %76
<   store i32 %74, i32* %78, align 4, !tbaa !12
<   %79 = load %"class.Apollo::Region"*, %"class.Apollo::Region"** @_ZZL27CalcHydroConstraintForElemsR6DomainiPidRdE12apolloRegion, align 8, !tbaa !6
<   invoke void @_ZN6Apollo6Region15apolloThreadEndEv(%"class.Apollo::Region"* nonnull dereferenceable(808) %79)
<           to label %80 unwind label %43
---
> ; Function Attrs: argmemonly
> declare void @__apollo_region_set_feature(i8*, float) local_unnamed_addr #21
17181,17182c13899,13900
< 80:                                               ; preds = %72
<   ret void
---
> ; Function Attrs: argmemonly
> declare i32 @__apollo_region_get_policy(i8*) local_unnamed_addr #21
17184,17190c13902,13903
< 81:                                               ; preds = %11
<   %82 = landingpad { i8*, i32 }
<           catch i8* null
<   %83 = extractvalue { i8*, i32 } %82, 0
<   tail call void @__clang_call_terminate(i8* %83) #29
<   unreachable
< }
---
> ; Function Attrs: argmemonly
> declare void @__apollo_region_end(i8*) local_unnamed_addr #21
17192c13905,13906
< declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* nonnull dereferenceable(8), double) local_unnamed_addr #0
---
> ; Function Attrs: nounwind
> declare i32 @__kmpc_global_thread_num(%struct.ident_t*) local_unnamed_addr #7
17194,17199c13908,13909
< ; Function Attrs: uwtable
< define internal void @_GLOBAL__sub_I_lulesh.cc() #5 section ".text.startup" {
<   tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull dereferenceable(1) @_ZStL8__ioinit)
<   %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #10
<   ret void
< }
---
> ; Function Attrs: inaccessiblemem_or_argmemonly
> declare void @__kmpc_push_num_threads(%struct.ident_t*, i32, i32) local_unnamed_addr #16
17201,17202c13911,13912
< ; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
< declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #24
---
> ; Function Attrs: argmemonly nounwind willreturn writeonly
> declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #22
17204,17205c13914,13915
< ; Function Attrs: nofree nosync nounwind readonly willreturn
< declare <2 x double> @llvm.masked.gather.v2f64.v2p0f64(<2 x double*>, i32 immarg, <2 x i1>, <2 x double>) #25
---
> ; Function Attrs: argmemonly nounwind willreturn
> declare void @llvm.masked.store.v4f64.p0v4f64(<4 x double>, <4 x double>*, i32 immarg, <4 x i1>) #4
17207,17208c13917,13918
< ; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
< declare <2 x double> @llvm.fabs.v2f64(<2 x double>) #21
---
> ; Function Attrs: nounwind readnone speculatable willreturn
> declare <4 x double> @llvm.fabs.v4f64(<4 x double>) #18
17210,17211c13920,13921
< attributes #0 = { "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
< attributes #1 = { nounwind "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
---
> attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="broadwell" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+rtm,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt,-amx-bf16,-amx-int8,-amx-tile,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clflushopt,-clwb,-clzero,-enqcmd,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-serialize,-sgx,-sha,-shstk,-sse4a,-tbm,-tsxldtrk,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop,-xsavec,-xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
> attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="broadwell" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+rtm,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt,-amx-bf16,-amx-int8,-amx-tile,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clflushopt,-clwb,-clzero,-enqcmd,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-serialize,-sgx,-sha,-shstk,-sse4a,-tbm,-tsxldtrk,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop,-xsavec,-xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
17213,17218c13923,13928
< attributes #3 = { norecurse nounwind readonly uwtable willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
< attributes #4 = { argmemonly nofree nosync nounwind willreturn }
< attributes #5 = { uwtable "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
< attributes #6 = { nobuiltin nofree allocsize(0) "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
< attributes #7 = { nobuiltin nounwind "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
< attributes #8 = { norecurse nounwind uwtable "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
---
> attributes #3 = { norecurse nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="broadwell" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+rtm,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt,-amx-bf16,-amx-int8,-amx-tile,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clflushopt,-clwb,-clzero,-enqcmd,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-serialize,-sgx,-sha,-shstk,-sse4a,-tbm,-tsxldtrk,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop,-xsavec,-xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
> attributes #4 = { argmemonly nounwind willreturn }
> attributes #5 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="broadwell" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+rtm,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt,-amx-bf16,-amx-int8,-amx-tile,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clflushopt,-clwb,-clzero,-enqcmd,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-serialize,-sgx,-sha,-shstk,-sse4a,-tbm,-tsxldtrk,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop,-xsavec,-xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
> attributes #6 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="broadwell" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+rtm,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt,-amx-bf16,-amx-int8,-amx-tile,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clflushopt,-clwb,-clzero,-enqcmd,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-serialize,-sgx,-sha,-shstk,-sse4a,-tbm,-tsxldtrk,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop,-xsavec,-xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
> attributes #7 = { nounwind }
> attributes #8 = { inlinehint nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="broadwell" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+rtm,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt,-amx-bf16,-amx-int8,-amx-tile,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clflushopt,-clwb,-clzero,-enqcmd,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-serialize,-sgx,-sha,-shstk,-sse4a,-tbm,-tsxldtrk,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop,-xsavec,-xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
17220,17241c13930,13947
< attributes #10 = { nounwind }
< attributes #11 = { inlinehint nofree norecurse nounwind uwtable willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
< attributes #12 = { convergent nounwind }
< attributes #13 = { nofree nounwind willreturn "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
< attributes #14 = { norecurse uwtable "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
< attributes #15 = { nofree nounwind "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
< attributes #16 = { inlinehint norecurse uwtable "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
< attributes #17 = { noreturn nounwind "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
< attributes #18 = { inaccessiblememonly nofree nounwind willreturn "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
< attributes #19 = { nofree nounwind readnone willreturn "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
< attributes #20 = { inaccessiblemem_or_argmemonly nounwind willreturn "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
< attributes #21 = { nofree nosync nounwind readnone speculatable willreturn }
< attributes #22 = { nounwind uwtable willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
< attributes #23 = { nofree nosync nounwind willreturn }
< attributes #24 = { argmemonly nofree nosync nounwind willreturn writeonly }
< attributes #25 = { nofree nosync nounwind readonly willreturn }
< attributes #26 = { allocsize(0) }
< attributes #27 = { builtin allocsize(0) }
< attributes #28 = { builtin nounwind }
< attributes #29 = { noreturn nounwind }
< attributes #30 = { nounwind readnone willreturn }
< attributes #31 = { cold }
---
> attributes #10 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="broadwell" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+rtm,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt,-amx-bf16,-amx-int8,-amx-tile,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clflushopt,-clwb,-clzero,-enqcmd,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-serialize,-sgx,-sha,-shstk,-sse4a,-tbm,-tsxldtrk,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop,-xsavec,-xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
> attributes #11 = { norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="broadwell" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+rtm,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt,-amx-bf16,-amx-int8,-amx-tile,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clflushopt,-clwb,-clzero,-enqcmd,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-serialize,-sgx,-sha,-shstk,-sse4a,-tbm,-tsxldtrk,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop,-xsavec,-xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
> attributes #12 = { nobuiltin nofree allocsize(0) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="broadwell" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+rtm,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt,-amx-bf16,-amx-int8,-amx-tile,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clflushopt,-clwb,-clzero,-enqcmd,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-serialize,-sgx,-sha,-shstk,-sse4a,-tbm,-tsxldtrk,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop,-xsavec,-xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
> attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="broadwell" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+rtm,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt,-amx-bf16,-amx-int8,-amx-tile,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clflushopt,-clwb,-clzero,-enqcmd,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-serialize,-sgx,-sha,-shstk,-sse4a,-tbm,-tsxldtrk,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop,-xsavec,-xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
> attributes #14 = { inlinehint norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="broadwell" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+rtm,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt,-amx-bf16,-amx-int8,-amx-tile,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clflushopt,-clwb,-clzero,-enqcmd,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-serialize,-sgx,-sha,-shstk,-sse4a,-tbm,-tsxldtrk,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop,-xsavec,-xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
> attributes #15 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="broadwell" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+rtm,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt,-amx-bf16,-amx-int8,-amx-tile,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clflushopt,-clwb,-clzero,-enqcmd,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-serialize,-sgx,-sha,-shstk,-sse4a,-tbm,-tsxldtrk,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop,-xsavec,-xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
> attributes #16 = { inaccessiblemem_or_argmemonly }
> attributes #17 = { nofree nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="broadwell" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+rtm,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt,-amx-bf16,-amx-int8,-amx-tile,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clflushopt,-clwb,-clzero,-enqcmd,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-serialize,-sgx,-sha,-shstk,-sse4a,-tbm,-tsxldtrk,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop,-xsavec,-xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
> attributes #18 = { nounwind readnone speculatable willreturn }
> attributes #19 = { inlinehint norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="broadwell" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+rtm,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt,-amx-bf16,-amx-int8,-amx-tile,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clflushopt,-clwb,-clzero,-enqcmd,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-serialize,-sgx,-sha,-shstk,-sse4a,-tbm,-tsxldtrk,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop,-xsavec,-xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
> attributes #20 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="broadwell" "target-features"="+64bit,+adx,+aes,+avx,+avx2,+bmi,+bmi2,+cmov,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+rtm,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt,-amx-bf16,-amx-int8,-amx-tile,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-cldemote,-clflushopt,-clwb,-clzero,-enqcmd,-fma4,-gfni,-lwp,-movdir64b,-movdiri,-mwaitx,-pconfig,-pku,-prefetchwt1,-ptwrite,-rdpid,-serialize,-sgx,-sha,-shstk,-sse4a,-tbm,-tsxldtrk,-vaes,-vpclmulqdq,-waitpkg,-wbnoinvd,-xop,-xsavec,-xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
> attributes #21 = { argmemonly }
> attributes #22 = { argmemonly nounwind willreturn writeonly }
> attributes #23 = { noreturn nounwind }
> attributes #24 = { builtin allocsize(0) }
> attributes #25 = { builtin nounwind }
> attributes #26 = { nounwind readnone }
> attributes #27 = { cold }
17248c13954
< !1 = !{!"clang version 12.0.0"}
---
> !1 = !{!"clang version 12.0.0 (git@github.com:ggeorgakoudis/llvm-project.git 7b7c4345de43b7f9e95673b77e85c144344ada0a)"}
17254,17380c13960,14087
< !7 = !{!"any pointer", !4, i64 0}
< !8 = !{!9, !7, i64 0}
< !9 = !{!"_ZTSSs", !10, i64 0}
< !10 = !{!"_ZTSNSs12_Alloc_hiderE", !7, i64 0}
< !11 = !{!"branch_weights", i32 2000, i32 1}
< !12 = !{!13, !13, i64 0}
< !13 = !{!"int", !4, i64 0}
< !14 = !{!15, !7, i64 0}
< !15 = !{!"_ZTSSt12_Vector_baseIfSaIfEE", !16, i64 0}
< !16 = !{!"_ZTSNSt12_Vector_baseIfSaIfEE12_Vector_implE", !7, i64 0, !7, i64 8, !7, i64 16}
< !17 = !{!15, !7, i64 16}
< !18 = !{!15, !7, i64 8}
< !19 = !{!20, !7, i64 0}
< !20 = !{!"_ZTSSt12_Vector_baseIiSaIiEE", !21, i64 0}
< !21 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE12_Vector_implE", !7, i64 0, !7, i64 8, !7, i64 16}
< !22 = !{!23, !7, i64 0}
< !23 = !{!"_ZTSSt12_Vector_baseIdSaIdEE", !24, i64 0}
< !24 = !{!"_ZTSNSt12_Vector_baseIdSaIdEE12_Vector_implE", !7, i64 0, !7, i64 8, !7, i64 16}
< !25 = !{!26, !7, i64 608}
< !26 = !{!"_ZTS6Domain", !27, i64 0, !27, i64 24, !27, i64 48, !27, i64 72, !27, i64 96, !27, i64 120, !27, i64 144, !27, i64 168, !27, i64 192, !27, i64 216, !27, i64 240, !27, i64 264, !27, i64 288, !28, i64 312, !28, i64 336, !28, i64 360, !13, i64 384, !13, i64 388, !7, i64 392, !7, i64 400, !7, i64 408, !28, i64 416, !28, i64 440, !28, i64 464, !28, i64 488, !28, i64 512, !28, i64 536, !28, i64 560, !28, i64 584, !7, i64 608, !7, i64 616, !7, i64 624, !7, i64 632, !7, i64 640, !7, i64 648, !7, i64 656, !7, i64 664, !7, i64 672, !27, i64 680, !27, i64 704, !27, i64 728, !27, i64 752, !27, i64 776, !27, i64 800, !27, i64 824, !27, i64 848, !27, i64 872, !27, i64 896, !27, i64 920, !27, i64 944, !27, i64 968, !3, i64 992, !3, i64 1000, !3, i64 1008, !3, i64 1016, !3, i64 1024, !3, i64 1032, !3, i64 1040, !3, i64 1048, !3, i64 1056, !3, i64 1064, !3, i64 1072, !3, i64 1080, !3, i64 1088, !3, i64 1096, !3, i64 1104, !3, i64 1112, !3, i64 1120, !3, i64 1128, !3, i64 1136, !3, i64 1144, !3, i64 1152, !13, i64 1160, !3, i64 1168, !3, i64 1176, !3, i64 1184, !3, i64 1192, !3, i64 1200, !3, i64 1208, !3, i64 1216, !13, i64 1224, !13, i64 1228, !13, i64 1232, !13, i64 1236, !13, i64 1240, !13, i64 1244, !13, i64 1248, !13, i64 1252, !13, i64 1256, !13, i64 1260, !13, i64 1264, !13, i64 1268, !7, i64 1272, !7, i64 1280, !13, i64 1288, !13, i64 1292, !13, i64 1296, !13, i64 1300, !13, i64 1304, !13, i64 1308}
< !27 = !{!"_ZTSSt6vectorIdSaIdEE"}
< !28 = !{!"_ZTSSt6vectorIiSaIiEE"}
< !29 = !{!26, !7, i64 616}
< !30 = !{!26, !7, i64 624}
< !31 = !{!32}
< !32 = !{i64 2, i64 -1, i64 -1, i1 true}
< !33 = !{!34, !13, i64 32}
< !34 = !{!"_ZTS11cmdLineOpts", !13, i64 0, !13, i64 4, !13, i64 8, !13, i64 12, !13, i64 16, !13, i64 20, !13, i64 24, !13, i64 28, !13, i64 32}
< !35 = !{!34, !13, i64 20}
< !36 = !{!34, !13, i64 4}
< !37 = !{!"branch_weights", i32 1, i32 1048575}
< !38 = !{!34, !13, i64 8}
< !39 = !{!34, !13, i64 28}
< !40 = !{!34, !13, i64 0}
< !41 = !{!26, !3, i64 1024}
< !42 = !{!26, !3, i64 1032}
< !43 = !{!26, !7, i64 392}
< !44 = !{!26, !7, i64 408}
< !45 = !{!26, !3, i64 1088}
< !46 = !{!26, !3, i64 1128}
< !47 = distinct !{!47, !48}
< !48 = !{!"llvm.loop.mustprogress"}
< !49 = !{!34, !13, i64 16}
< !50 = !{!51, !51, i64 0}
< !51 = !{!"vtable pointer", !5, i64 0}
< !52 = !{!53, !53, i64 0}
< !53 = !{!"_ZTSSt13_Ios_Fmtflags", !4, i64 0}
< !54 = distinct !{!54, !48}
< !55 = !{!56, !57, i64 0}
< !56 = !{!"_ZTS7timeval", !57, i64 0, !57, i64 8}
< !57 = !{!"long", !4, i64 0}
< !58 = !{!56, !57, i64 8}
< !59 = !{!34, !13, i64 24}
< !60 = !{!34, !13, i64 12}
< !61 = !{!26, !7, i64 656}
< !62 = !{!26, !7, i64 664}
< !63 = !{!26, !7, i64 672}
< !64 = !{!26, !7, i64 632}
< !65 = !{!26, !7, i64 640}
< !66 = !{!26, !7, i64 648}
< !67 = !{!26, !3, i64 1064}
< !68 = !{!26, !3, i64 1056}
< !69 = !{!26, !3, i64 1072}
< !70 = !{!26, !3, i64 1080}
< !71 = distinct !{!71, !48}
< !72 = !{!26, !3, i64 1048}
< !73 = distinct !{!73, !48}
< !74 = !{!26, !3, i64 1104}
< !75 = !{!26, !3, i64 1096}
< !76 = !{!26, !3, i64 992}
< !77 = !{!26, !3, i64 1000}
< !78 = !{!26, !3, i64 1040}
< !79 = !{!26, !3, i64 1008}
< !80 = !{!26, !3, i64 1112}
< !81 = !{!26, !3, i64 1120}
< !82 = !{!26, !3, i64 1136}
< !83 = distinct !{!83, !48}
< !84 = distinct !{!84, !48}
< !85 = !{!26, !3, i64 1016}
< !86 = !{!87}
< !87 = distinct !{!87, !88}
< !88 = distinct !{!88, !"LVerDomain"}
< !89 = !{!90, !91}
< !90 = distinct !{!90, !88}
< !91 = distinct !{!91, !88}
< !92 = !{!90}
< !93 = !{!91}
< !94 = distinct !{!94, !95}
< !95 = !{!"llvm.loop.isvectorized", i32 1}
< !96 = distinct !{!96, !95}
< !97 = !{!26, !7, i64 1272}
< !98 = !{!26, !7, i64 1280}
< !99 = distinct !{!99, !48}
< !100 = distinct !{!100, !48}
< !101 = distinct !{!101, !48}
< !102 = distinct !{!102, !103}
< !103 = !{!"llvm.loop.unroll.disable"}
< !104 = distinct !{!104, !103}
< !105 = distinct !{!105, !103}
< !106 = !{!107}
< !107 = distinct !{!107, !108}
< !108 = distinct !{!108, !"LVerDomain"}
< !109 = !{!110}
< !110 = distinct !{!110, !108}
< !111 = distinct !{!111, !95}
< !112 = distinct !{!112, !103}
< !113 = distinct !{!113, !103}
< !114 = distinct !{!114, !95}
< !115 = !{!116}
< !116 = distinct !{!116, !117}
< !117 = distinct !{!117, !"LVerDomain"}
< !118 = !{!119}
< !119 = distinct !{!119, !117}
< !120 = !{!121, !116}
< !121 = distinct !{!121, !117}
< !122 = !{!121}
< !123 = distinct !{!123, !95}
< !124 = distinct !{!124, !95}
< !125 = !{!126}
< !126 = distinct !{!126, !127}
< !127 = distinct !{!127, !"LVerDomain"}
< !128 = !{!129}
< !129 = distinct !{!129, !127}
< !130 = distinct !{!130, !95}
< !131 = distinct !{!131, !95}
< !132 = distinct !{!132, !48}
< !133 = distinct !{!133, !48}
---
> !7 = !{!"int", !4, i64 0}
> !8 = !{!9, !10, i64 0}
> !9 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !10, i64 0, !10, i64 8, !10, i64 16}
> !10 = !{!"any pointer", !4, i64 0}
> !11 = !{!12, !10, i64 0}
> !12 = !{!"_ZTSNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataE", !10, i64 0, !10, i64 8, !10, i64 16}
> !13 = !{!14, !10, i64 608}
> !14 = !{!"_ZTS6Domain", !15, i64 0, !15, i64 24, !15, i64 48, !15, i64 72, !15, i64 96, !15, i64 120, !15, i64 144, !15, i64 168, !15, i64 192, !15, i64 216, !15, i64 240, !15, i64 264, !15, i64 288, !16, i64 312, !16, i64 336, !16, i64 360, !7, i64 384, !7, i64 388, !10, i64 392, !10, i64 400, !10, i64 408, !16, i64 416, !16, i64 440, !16, i64 464, !16, i64 488, !16, i64 512, !16, i64 536, !16, i64 560, !16, i64 584, !10, i64 608, !10, i64 616, !10, i64 624, !10, i64 632, !10, i64 640, !10, i64 648, !10, i64 656, !10, i64 664, !10, i64 672, !15, i64 680, !15, i64 704, !15, i64 728, !15, i64 752, !15, i64 776, !15, i64 800, !15, i64 824, !15, i64 848, !15, i64 872, !15, i64 896, !15, i64 920, !15, i64 944, !15, i64 968, !3, i64 992, !3, i64 1000, !3, i64 1008, !3, i64 1016, !3, i64 1024, !3, i64 1032, !3, i64 1040, !3, i64 1048, !3, i64 1056, !3, i64 1064, !3, i64 1072, !3, i64 1080, !3, i64 1088, !3, i64 1096, !3, i64 1104, !3, i64 1112, !3, i64 1120, !3, i64 1128, !3, i64 1136, !3, i64 1144, !3, i64 1152, !7, i64 1160, !3, i64 1168, !3, i64 1176, !3, i64 1184, !3, i64 1192, !3, i64 1200, !3, i64 1208, !3, i64 1216, !7, i64 1224, !7, i64 1228, !7, i64 1232, !7, i64 1236, !7, i64 1240, !7, i64 1244, !7, i64 1248, !7, i64 1252, !7, i64 1256, !7, i64 1260, !7, i64 1264, !7, i64 1268, !10, i64 1272, !10, i64 1280, !7, i64 1288, !7, i64 1292, !7, i64 1296, !7, i64 1300, !7, i64 1304, !7, i64 1308}
> !15 = !{!"_ZTSSt6vectorIdSaIdEE"}
> !16 = !{!"_ZTSSt6vectorIiSaIiEE"}
> !17 = !{!14, !10, i64 616}
> !18 = !{!14, !10, i64 624}
> !19 = !{!20}
> !20 = !{i64 2, i64 -1, i64 -1, i1 true}
> !21 = !{!22, !7, i64 32}
> !22 = !{!"_ZTS11cmdLineOpts", !7, i64 0, !7, i64 4, !7, i64 8, !7, i64 12, !7, i64 16, !7, i64 20, !7, i64 24, !7, i64 28, !7, i64 32}
> !23 = !{!22, !7, i64 20}
> !24 = !{!22, !7, i64 4}
> !25 = !{!22, !7, i64 8}
> !26 = !{!22, !7, i64 28}
> !27 = !{!22, !7, i64 0}
> !28 = !{!22, !7, i64 16}
> !29 = !{!30, !30, i64 0}
> !30 = !{!"vtable pointer", !5, i64 0}
> !31 = !{!32, !32, i64 0}
> !32 = !{!"_ZTSSt13_Ios_Fmtflags", !4, i64 0}
> !33 = !{!34, !35, i64 0}
> !34 = !{!"_ZTS7timeval", !35, i64 0, !35, i64 8}
> !35 = !{!"long", !4, i64 0}
> !36 = !{!34, !35, i64 8}
> !37 = !{!22, !7, i64 24}
> !38 = !{!22, !7, i64 12}
> !39 = !{!14, !3, i64 1024}
> !40 = !{!14, !3, i64 1032}
> !41 = !{!10, !10, i64 0}
> !42 = !{!14, !10, i64 656}
> !43 = !{!14, !10, i64 664}
> !44 = !{!14, !10, i64 672}
> !45 = !{!14, !10, i64 632}
> !46 = !{!14, !10, i64 640}
> !47 = !{!14, !10, i64 648}
> !48 = !{!14, !10, i64 392}
> !49 = !{!14, !3, i64 1064}
> !50 = !{!14, !3, i64 1056}
> !51 = !{!14, !3, i64 1072}
> !52 = !{!14, !3, i64 1080}
> !53 = !{!14, !3, i64 1048}
> !54 = !{!14, !3, i64 1104}
> !55 = !{!14, !3, i64 1096}
> !56 = !{!14, !10, i64 408}
> !57 = !{!14, !3, i64 992}
> !58 = !{!14, !3, i64 1000}
> !59 = !{!14, !3, i64 1040}
> !60 = !{!14, !3, i64 1008}
> !61 = !{!14, !3, i64 1112}
> !62 = !{!14, !3, i64 1120}
> !63 = !{!14, !3, i64 1136}
> !64 = !{!14, !3, i64 1016}
> !65 = !{!14, !3, i64 1088}
> !66 = !{!14, !3, i64 1128}
> !67 = !{!68}
> !68 = distinct !{!68, !69}
> !69 = distinct !{!69, !"LVerDomain"}
> !70 = !{!71, !72}
> !71 = distinct !{!71, !69}
> !72 = distinct !{!72, !69}
> !73 = !{!71}
> !74 = !{!72}
> !75 = distinct !{!75, !76}
> !76 = !{!"llvm.loop.isvectorized", i32 1}
> !77 = distinct !{!77, !78}
> !78 = !{!"llvm.loop.unroll.disable"}
> !79 = distinct !{!79, !76}
> !80 = distinct !{!80, !78}
> !81 = !{!14, !10, i64 1272}
> !82 = !{!14, !10, i64 1280}
> !83 = distinct !{!83, !78}
> !84 = distinct !{!84, !78}
> !85 = distinct !{!85, !78}
> !86 = distinct !{!86, !78}
> !87 = distinct !{!87, !78}
> !88 = !{!89}
> !89 = distinct !{!89, !90}
> !90 = distinct !{!90, !"LVerDomain"}
> !91 = !{!92}
> !92 = distinct !{!92, !90}
> !93 = distinct !{!93, !76}
> !94 = distinct !{!94, !78}
> !95 = distinct !{!95, !78}
> !96 = distinct !{!96, !76}
> !97 = !{!98}
> !98 = distinct !{!98, !99}
> !99 = distinct !{!99, !"LVerDomain"}
> !100 = !{!101}
> !101 = distinct !{!101, !99}
> !102 = distinct !{!102, !76}
> !103 = distinct !{!103, !78}
> !104 = !{!105}
> !105 = distinct !{!105, !106}
> !106 = distinct !{!106, !"LVerDomain"}
> !107 = !{!108}
> !108 = distinct !{!108, !106}
> !109 = distinct !{!109, !76}
> !110 = distinct !{!110, !78}
> !111 = distinct !{!111, !76}
> !112 = distinct !{!112, !76}
> !113 = distinct !{!113, !78}
> !114 = distinct !{!114, !78}
> !115 = distinct !{!115, !78}
> !116 = !{!117}
> !117 = distinct !{!117, !118}
> !118 = distinct !{!118, !"LVerDomain"}
> !119 = !{!120}
> !120 = distinct !{!120, !118}
> !121 = !{!122, !117}
> !122 = distinct !{!122, !118}
> !123 = !{!122}
> !124 = distinct !{!124, !76}
> !125 = distinct !{!125, !78}
> !126 = distinct !{!126, !76}
> !127 = !{!128}
> !128 = distinct !{!128, !129}
> !129 = distinct !{!129, !"LVerDomain"}
> !130 = !{!131}
> !131 = distinct !{!131, !129}
> !132 = distinct !{!132, !76}
> !133 = distinct !{!133, !78}
> !134 = distinct !{!134, !76}
