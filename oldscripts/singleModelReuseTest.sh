#!/bin/bash

SUFFIX="luleshdata"
MAX_POL=1
PROC_BIND="close"
PLACES=cores
WAIT_POL="active"
APOLLO_PERIOD=2100728
THREAD_CAP=36
POLICY="RoundRobin"
#POLICY="Load,dtree-latest-rank-0-lulesh.cc.apollo.region.l2388.yaml"
STORE_MODELS=1
TRACE_CSV=0
PERF_CNTRS="PAPI_DP_OPS,PAPI_TOT_INS"
ENABLE_MLTPX=0

# Create a single model from training with ALL iterations
OMP_NUM_THREADS=$THREAD_CAP \
OMP_WAIT_POLICY=$WAIT_POL \
OMP_PROC_BIND=$PROC_BIND \
OMP_PLACES=$PLACES \
APOLLO_TRACE_CSV_FOLDER_SUFFIX="-$SUFFIX" \
APOLLO_COLLECTIVE_TRAINING=0 \
APOLLO_LOCAL_TRAINING=1 \
APOLLO_RETRAIN_ENABLE=0 \
APOLLO_INIT_MODEL=$POLICY \
APOLLO_STORE_MODELS=$STORE_MODELS \
APOLLO_TRACE_CSV=$TRACE_CSV \
APOLLO_SINGLE_MODEL=1 \
APOLLO_REGION_MODEL=0 \
APOLLO_GLOBAL_TRAIN_PERIOD=$APOLLO_PERIOD \
APOLLO_ENABLE_PERF_CNTRS=1 \
APOLLO_PERF_CNTRS_MLTPX=$ENABLE_MLTPX \
APOLLO_PERF_CNTRS=$PERF_CNTRS \
srun --partition=pdebug -n1 -N1 --export=ALL ./lulesh2.0 -s 30 -r 100 -b 0 -c 0 -i 1000

function doRunWithYAML {

	# Run with the specified YAML file
	OMP_NUM_THREADS=$THREAD_CAP \
	OMP_WAIT_POLICY=$WAIT_POL \
	OMP_PROC_BIND=$PROC_BIND \
	OMP_PLACES=$PLACES \
	APOLLO_TRACE_CSV_FOLDER_SUFFIX="-$SUFFIX" \
	APOLLO_COLLECTIVE_TRAINING=0 \
	APOLLO_LOCAL_TRAINING=1 \
	APOLLO_RETRAIN_ENABLE=0 \
	APOLLO_INIT_MODEL=$POLICY \
	APOLLO_STORE_MODELS=$STORE_MODELS \
	APOLLO_TRACE_CSV=$TRACE_CSV \
	APOLLO_SINGLE_MODEL=1 \
	APOLLO_REGION_MODEL=0 \
	APOLLO_GLOBAL_TRAIN_PERIOD=$APOLLO_PERIOD \
	APOLLO_ENABLE_PERF_CNTRS=1 \
	APOLLO_PERF_CNTRS_MLTPX=$ENABLE_MLTPX \
	APOLLO_PERF_CNTRS=$PERF_CNTRS \
	srun --partition=pdebug -n1 -N1 --export=ALL ./lulesh2.0 -s $PROBLEM_SIZE -r 100 -b 0 -c 0 -i 1000

}

# Don't store or trace anything
STORE_MODELS=0
TRACE_CSV=0

# All YAML files are the same, so let's pick one to use
YAML_FILE="dtree-latest-rank-0-lulesh.cc.apollo.region.l2011.yaml"

# Let's run 1 trial of 10 different inputs using this model
# We sweep through the size '-s' parameter on lulesh
for ((i=30;i<=80;i+=5)); do
    PROBLEM_SIZE=$i
    POLICY="Load,$YAML_FILE"
    doRunWithYAML
done

#for YAML_FILE in "./dtree-latest"*.yaml
#do
#	YAML_FILE=${YAML_FILE#*./}
#	POLICY="Load,$YAML_FILE"
#	doRunWithYAML
#done

#SUFFIX="lulesh"
#MAX_POL=1
#PROC_BIND="close"
#PLACES=cores
#WAIT_POL="active"
#APOLLO_PERIOD=10000
#THREAD_CAP=36
#POLICY="Load,dtree-latest-rank-0-lulesh.cc.apollo.region.l2011.yaml"
#STORE_MODELS=0

## Now let's reuse one of the models
#OMP_NUM_THREADS=$THREAD_CAP \
#OMP_WAIT_POLICY=$WAIT_POL \
#OMP_PROC_BIND=$PROC_BIND \
#OMP_PLACES=$PLACES \
#APOLLO_TRACE_CSV_FOLDER_SUFFIX="-$SUFFIX" \
#APOLLO_COLLECTIVE_TRAINING=0 \
#APOLLO_LOCAL_TRAINING=1 \
#APOLLO_RETRAIN_ENABLE=0 \
#APOLLO_INIT_MODEL=$POLICY \
#APOLLO_STORE_MODELS=$STORE_MODELS \
#APOLLO_TRACE_CSV=1 \
#APOLLO_SINGLE_MODEL=0 \
#APOLLO_REGION_MODEL=1 \
#APOLLO_GLOBAL_TRAIN_PERIOD=$APOLLO_PERIOD \
#APOLLO_ENABLE_PERF_CNTRS=1 \
#APOLLO_PERF_CNTRS_MLTPX=0 \
#APOLLO_PERF_CNTRS="PAPI_DP_OPS,PAPI_TOT_INS" \
#srun --partition=pdebug -n1 -N1 --export=ALL ./lulesh2.0 -s 30 -r 100 -b 0 -c 0 -i 1000

